(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}




var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}

/*
 * Copyright (c) 2010 Mozilla Corporation
 * Copyright (c) 2010 Vladimir Vukicevic
 * Copyright (c) 2013 John Mayer
 * Copyright (c) 2018 Andrey Kuzmin
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// Vector2

var _MJS_v2 = F2(function(x, y) {
    return new Float64Array([x, y]);
});

var _MJS_v2getX = function(a) {
    return a[0];
};

var _MJS_v2getY = function(a) {
    return a[1];
};

var _MJS_v2setX = F2(function(x, a) {
    return new Float64Array([x, a[1]]);
});

var _MJS_v2setY = F2(function(y, a) {
    return new Float64Array([a[0], y]);
});

var _MJS_v2toRecord = function(a) {
    return { x: a[0], y: a[1] };
};

var _MJS_v2fromRecord = function(r) {
    return new Float64Array([r.x, r.y]);
};

var _MJS_v2add = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    return r;
});

var _MJS_v2sub = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    return r;
});

var _MJS_v2negate = function(a) {
    var r = new Float64Array(2);
    r[0] = -a[0];
    r[1] = -a[1];
    return r;
};

var _MJS_v2direction = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    var im = 1.0 / _MJS_v2lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    return r;
});

function _MJS_v2lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
}
var _MJS_v2length = _MJS_v2lengthLocal;

var _MJS_v2lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1];
};

var _MJS_v2distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return Math.sqrt(dx * dx + dy * dy);
});

var _MJS_v2distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return dx * dx + dy * dy;
});

var _MJS_v2normalize = function(a) {
    var r = new Float64Array(2);
    var im = 1.0 / _MJS_v2lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    return r;
};

var _MJS_v2scale = F2(function(k, a) {
    var r = new Float64Array(2);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    return r;
});

var _MJS_v2dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
});

// Vector3

var _MJS_v3temp1Local = new Float64Array(3);
var _MJS_v3temp2Local = new Float64Array(3);
var _MJS_v3temp3Local = new Float64Array(3);

var _MJS_v3 = F3(function(x, y, z) {
    return new Float64Array([x, y, z]);
});

var _MJS_v3getX = function(a) {
    return a[0];
};

var _MJS_v3getY = function(a) {
    return a[1];
};

var _MJS_v3getZ = function(a) {
    return a[2];
};

var _MJS_v3setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2]]);
});

var _MJS_v3setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2]]);
});

var _MJS_v3setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z]);
});

var _MJS_v3toRecord = function(a) {
    return { x: a[0], y: a[1], z: a[2] };
};

var _MJS_v3fromRecord = function(r) {
    return new Float64Array([r.x, r.y, r.z]);
};

var _MJS_v3add = F2(function(a, b) {
    var r = new Float64Array(3);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    return r;
});

function _MJS_v3subLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    return r;
}
var _MJS_v3sub = F2(_MJS_v3subLocal);

var _MJS_v3negate = function(a) {
    var r = new Float64Array(3);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    return r;
};

function _MJS_v3directionLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    return _MJS_v3normalizeLocal(_MJS_v3subLocal(a, b, r), r);
}
var _MJS_v3direction = F2(_MJS_v3directionLocal);

function _MJS_v3lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}
var _MJS_v3length = _MJS_v3lengthLocal;

var _MJS_v3lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
};

var _MJS_v3distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
});

var _MJS_v3distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return dx * dx + dy * dy + dz * dz;
});

function _MJS_v3normalizeLocal(a, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    var im = 1.0 / _MJS_v3lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    return r;
}
var _MJS_v3normalize = _MJS_v3normalizeLocal;

var _MJS_v3scale = F2(function(k, a) {
    return new Float64Array([a[0] * k, a[1] * k, a[2] * k]);
});

var _MJS_v3dotLocal = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
var _MJS_v3dot = F2(_MJS_v3dotLocal);

function _MJS_v3crossLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[1] * b[2] - a[2] * b[1];
    r[1] = a[2] * b[0] - a[0] * b[2];
    r[2] = a[0] * b[1] - a[1] * b[0];
    return r;
}
var _MJS_v3cross = F2(_MJS_v3crossLocal);

var _MJS_v3mul4x4 = F2(function(m, v) {
    var w;
    var tmp = _MJS_v3temp1Local;
    var r = new Float64Array(3);

    tmp[0] = m[3];
    tmp[1] = m[7];
    tmp[2] = m[11];
    w = _MJS_v3dotLocal(v, tmp) + m[15];
    tmp[0] = m[0];
    tmp[1] = m[4];
    tmp[2] = m[8];
    r[0] = (_MJS_v3dotLocal(v, tmp) + m[12]) / w;
    tmp[0] = m[1];
    tmp[1] = m[5];
    tmp[2] = m[9];
    r[1] = (_MJS_v3dotLocal(v, tmp) + m[13]) / w;
    tmp[0] = m[2];
    tmp[1] = m[6];
    tmp[2] = m[10];
    r[2] = (_MJS_v3dotLocal(v, tmp) + m[14]) / w;
    return r;
});

// Vector4

var _MJS_v4 = F4(function(x, y, z, w) {
    return new Float64Array([x, y, z, w]);
});

var _MJS_v4getX = function(a) {
    return a[0];
};

var _MJS_v4getY = function(a) {
    return a[1];
};

var _MJS_v4getZ = function(a) {
    return a[2];
};

var _MJS_v4getW = function(a) {
    return a[3];
};

var _MJS_v4setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2], a[3]]);
});

var _MJS_v4setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2], a[3]]);
});

var _MJS_v4setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z, a[3]]);
});

var _MJS_v4setW = F2(function(w, a) {
    return new Float64Array([a[0], a[1], a[2], w]);
});

var _MJS_v4toRecord = function(a) {
    return { x: a[0], y: a[1], z: a[2], w: a[3] };
};

var _MJS_v4fromRecord = function(r) {
    return new Float64Array([r.x, r.y, r.z, r.w]);
};

var _MJS_v4add = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    return r;
});

var _MJS_v4sub = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    return r;
});

var _MJS_v4negate = function(a) {
    var r = new Float64Array(4);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    r[3] = -a[3];
    return r;
};

var _MJS_v4direction = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    var im = 1.0 / _MJS_v4lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    r[2] = r[2] * im;
    r[3] = r[3] * im;
    return r;
});

function _MJS_v4lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
}
var _MJS_v4length = _MJS_v4lengthLocal;

var _MJS_v4lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3];
};

var _MJS_v4distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);
});

var _MJS_v4distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return dx * dx + dy * dy + dz * dz + dw * dw;
});

var _MJS_v4normalize = function(a) {
    var r = new Float64Array(4);
    var im = 1.0 / _MJS_v4lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    r[3] = a[3] * im;
    return r;
};

var _MJS_v4scale = F2(function(k, a) {
    var r = new Float64Array(4);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    r[2] = a[2] * k;
    r[3] = a[3] * k;
    return r;
});

var _MJS_v4dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
});

// Matrix4

var _MJS_m4x4temp1Local = new Float64Array(16);
var _MJS_m4x4temp2Local = new Float64Array(16);

var _MJS_m4x4identity = new Float64Array([
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
]);

var _MJS_m4x4fromRecord = function(r) {
    var m = new Float64Array(16);
    m[0] = r.m11;
    m[1] = r.m21;
    m[2] = r.m31;
    m[3] = r.m41;
    m[4] = r.m12;
    m[5] = r.m22;
    m[6] = r.m32;
    m[7] = r.m42;
    m[8] = r.m13;
    m[9] = r.m23;
    m[10] = r.m33;
    m[11] = r.m43;
    m[12] = r.m14;
    m[13] = r.m24;
    m[14] = r.m34;
    m[15] = r.m44;
    return m;
};

var _MJS_m4x4toRecord = function(m) {
    return {
        m11: m[0], m21: m[1], m31: m[2], m41: m[3],
        m12: m[4], m22: m[5], m32: m[6], m42: m[7],
        m13: m[8], m23: m[9], m33: m[10], m43: m[11],
        m14: m[12], m24: m[13], m34: m[14], m44: m[15]
    };
};

var _MJS_m4x4inverse = function(m) {
    var r = new Float64Array(16);

    r[0] = m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] +
        m[9] * m[7] * m[14] + m[13] * m[6] * m[11] - m[13] * m[7] * m[10];
    r[4] = -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] -
        m[8] * m[7] * m[14] - m[12] * m[6] * m[11] + m[12] * m[7] * m[10];
    r[8] = m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] +
        m[8] * m[7] * m[13] + m[12] * m[5] * m[11] - m[12] * m[7] * m[9];
    r[12] = -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] -
        m[8] * m[6] * m[13] - m[12] * m[5] * m[10] + m[12] * m[6] * m[9];
    r[1] = -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] -
        m[9] * m[3] * m[14] - m[13] * m[2] * m[11] + m[13] * m[3] * m[10];
    r[5] = m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] +
        m[8] * m[3] * m[14] + m[12] * m[2] * m[11] - m[12] * m[3] * m[10];
    r[9] = -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] -
        m[8] * m[3] * m[13] - m[12] * m[1] * m[11] + m[12] * m[3] * m[9];
    r[13] = m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] +
        m[8] * m[2] * m[13] + m[12] * m[1] * m[10] - m[12] * m[2] * m[9];
    r[2] = m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] +
        m[5] * m[3] * m[14] + m[13] * m[2] * m[7] - m[13] * m[3] * m[6];
    r[6] = -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] -
        m[4] * m[3] * m[14] - m[12] * m[2] * m[7] + m[12] * m[3] * m[6];
    r[10] = m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] +
        m[4] * m[3] * m[13] + m[12] * m[1] * m[7] - m[12] * m[3] * m[5];
    r[14] = -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] -
        m[4] * m[2] * m[13] - m[12] * m[1] * m[6] + m[12] * m[2] * m[5];
    r[3] = -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] -
        m[5] * m[3] * m[10] - m[9] * m[2] * m[7] + m[9] * m[3] * m[6];
    r[7] = m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] +
        m[4] * m[3] * m[10] + m[8] * m[2] * m[7] - m[8] * m[3] * m[6];
    r[11] = -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] -
        m[4] * m[3] * m[9] - m[8] * m[1] * m[7] + m[8] * m[3] * m[5];
    r[15] = m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] +
        m[4] * m[2] * m[9] + m[8] * m[1] * m[6] - m[8] * m[2] * m[5];

    var det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];

    if (det === 0) {
        return $elm$core$Maybe$Nothing;
    }

    det = 1.0 / det;

    for (var i = 0; i < 16; i = i + 1) {
        r[i] = r[i] * det;
    }

    return $elm$core$Maybe$Just(r);
};

var _MJS_m4x4inverseOrthonormal = function(m) {
    var r = _MJS_m4x4transposeLocal(m);
    var t = [m[12], m[13], m[14]];
    r[3] = r[7] = r[11] = 0;
    r[12] = -_MJS_v3dotLocal([r[0], r[4], r[8]], t);
    r[13] = -_MJS_v3dotLocal([r[1], r[5], r[9]], t);
    r[14] = -_MJS_v3dotLocal([r[2], r[6], r[10]], t);
    return r;
};

function _MJS_m4x4makeFrustumLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 * znear / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 * znear / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = (right + left) / (right - left);
    r[9] = (top + bottom) / (top - bottom);
    r[10] = -(zfar + znear) / (zfar - znear);
    r[11] = -1;
    r[12] = 0;
    r[13] = 0;
    r[14] = -2 * zfar * znear / (zfar - znear);
    r[15] = 0;

    return r;
}
var _MJS_m4x4makeFrustum = F6(_MJS_m4x4makeFrustumLocal);

var _MJS_m4x4makePerspective = F4(function(fovy, aspect, znear, zfar) {
    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    var ymin = -ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;

    return _MJS_m4x4makeFrustumLocal(xmin, xmax, ymin, ymax, znear, zfar);
});

function _MJS_m4x4makeOrthoLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = -2 / (zfar - znear);
    r[11] = 0;
    r[12] = -(right + left) / (right - left);
    r[13] = -(top + bottom) / (top - bottom);
    r[14] = -(zfar + znear) / (zfar - znear);
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeOrtho = F6(_MJS_m4x4makeOrthoLocal);

var _MJS_m4x4makeOrtho2D = F4(function(left, right, bottom, top) {
    return _MJS_m4x4makeOrthoLocal(left, right, bottom, top, -1, 1);
});

function _MJS_m4x4mulLocal(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a41 = a[3];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a42 = a[7];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a43 = a[11];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];
    var a44 = a[15];
    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b41 = b[3];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b42 = b[7];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b43 = b[11];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];
    var b44 = b[15];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    r[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    r[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    r[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    r[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return r;
}
var _MJS_m4x4mul = F2(_MJS_m4x4mulLocal);

var _MJS_m4x4mulAffine = F2(function(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];

    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31;
    r[3] = 0;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32;
    r[7] = 0;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33;
    r[11] = 0;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34;
    r[15] = 1;

    return r;
});

var _MJS_m4x4makeRotate = F2(function(angle, axis) {
    var r = new Float64Array(16);
    axis = _MJS_v3normalizeLocal(axis, _MJS_v3temp1Local);
    var x = axis[0];
    var y = axis[1];
    var z = axis[2];
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);

    r[0] = x * x * c1 + c;
    r[1] = y * x * c1 + z * s;
    r[2] = z * x * c1 - y * s;
    r[3] = 0;
    r[4] = x * y * c1 - z * s;
    r[5] = y * y * c1 + c;
    r[6] = y * z * c1 + x * s;
    r[7] = 0;
    r[8] = x * z * c1 + y * s;
    r[9] = y * z * c1 - x * s;
    r[10] = z * z * c1 + c;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});

var _MJS_m4x4rotate = F3(function(angle, axis, m) {
    var r = new Float64Array(16);
    var im = 1.0 / _MJS_v3lengthLocal(axis);
    var x = axis[0] * im;
    var y = axis[1] * im;
    var z = axis[2] * im;
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);
    var xs = x * s;
    var ys = y * s;
    var zs = z * s;
    var xyc1 = x * y * c1;
    var xzc1 = x * z * c1;
    var yzc1 = y * z * c1;
    var t11 = x * x * c1 + c;
    var t21 = xyc1 + zs;
    var t31 = xzc1 - ys;
    var t12 = xyc1 - zs;
    var t22 = y * y * c1 + c;
    var t32 = yzc1 + xs;
    var t13 = xzc1 + ys;
    var t23 = yzc1 - xs;
    var t33 = z * z * c1 + c;
    var m11 = m[0], m21 = m[1], m31 = m[2], m41 = m[3];
    var m12 = m[4], m22 = m[5], m32 = m[6], m42 = m[7];
    var m13 = m[8], m23 = m[9], m33 = m[10], m43 = m[11];
    var m14 = m[12], m24 = m[13], m34 = m[14], m44 = m[15];

    r[0] = m11 * t11 + m12 * t21 + m13 * t31;
    r[1] = m21 * t11 + m22 * t21 + m23 * t31;
    r[2] = m31 * t11 + m32 * t21 + m33 * t31;
    r[3] = m41 * t11 + m42 * t21 + m43 * t31;
    r[4] = m11 * t12 + m12 * t22 + m13 * t32;
    r[5] = m21 * t12 + m22 * t22 + m23 * t32;
    r[6] = m31 * t12 + m32 * t22 + m33 * t32;
    r[7] = m41 * t12 + m42 * t22 + m43 * t32;
    r[8] = m11 * t13 + m12 * t23 + m13 * t33;
    r[9] = m21 * t13 + m22 * t23 + m23 * t33;
    r[10] = m31 * t13 + m32 * t23 + m33 * t33;
    r[11] = m41 * t13 + m42 * t23 + m43 * t33;
    r[12] = m14,
    r[13] = m24;
    r[14] = m34;
    r[15] = m44;

    return r;
});

function _MJS_m4x4makeScale3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = x;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = y;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = z;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeScale3 = F3(_MJS_m4x4makeScale3Local);

var _MJS_m4x4makeScale = function(v) {
    return _MJS_m4x4makeScale3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4scale3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

var _MJS_m4x4scale = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

function _MJS_m4x4makeTranslate3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = 1;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 1;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = 1;
    r[11] = 0;
    r[12] = x;
    r[13] = y;
    r[14] = z;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeTranslate3 = F3(_MJS_m4x4makeTranslate3Local);

var _MJS_m4x4makeTranslate = function(v) {
    return _MJS_m4x4makeTranslate3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4translate3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4translate = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4makeLookAt = F3(function(eye, center, up) {
    var z = _MJS_v3directionLocal(eye, center, _MJS_v3temp1Local);
    var x = _MJS_v3normalizeLocal(_MJS_v3crossLocal(up, z, _MJS_v3temp2Local), _MJS_v3temp2Local);
    var y = _MJS_v3normalizeLocal(_MJS_v3crossLocal(z, x, _MJS_v3temp3Local), _MJS_v3temp3Local);
    var tm1 = _MJS_m4x4temp1Local;
    var tm2 = _MJS_m4x4temp2Local;

    tm1[0] = x[0];
    tm1[1] = y[0];
    tm1[2] = z[0];
    tm1[3] = 0;
    tm1[4] = x[1];
    tm1[5] = y[1];
    tm1[6] = z[1];
    tm1[7] = 0;
    tm1[8] = x[2];
    tm1[9] = y[2];
    tm1[10] = z[2];
    tm1[11] = 0;
    tm1[12] = 0;
    tm1[13] = 0;
    tm1[14] = 0;
    tm1[15] = 1;

    tm2[0] = 1; tm2[1] = 0; tm2[2] = 0; tm2[3] = 0;
    tm2[4] = 0; tm2[5] = 1; tm2[6] = 0; tm2[7] = 0;
    tm2[8] = 0; tm2[9] = 0; tm2[10] = 1; tm2[11] = 0;
    tm2[12] = -eye[0]; tm2[13] = -eye[1]; tm2[14] = -eye[2]; tm2[15] = 1;

    return _MJS_m4x4mulLocal(tm1, tm2);
});


function _MJS_m4x4transposeLocal(m) {
    var r = new Float64Array(16);

    r[0] = m[0]; r[1] = m[4]; r[2] = m[8]; r[3] = m[12];
    r[4] = m[1]; r[5] = m[5]; r[6] = m[9]; r[7] = m[13];
    r[8] = m[2]; r[9] = m[6]; r[10] = m[10]; r[11] = m[14];
    r[12] = m[3]; r[13] = m[7]; r[14] = m[11]; r[15] = m[15];

    return r;
}
var _MJS_m4x4transpose = _MJS_m4x4transposeLocal;

var _MJS_m4x4makeBasis = F3(function(vx, vy, vz) {
    var r = new Float64Array(16);

    r[0] = vx[0];
    r[1] = vx[1];
    r[2] = vx[2];
    r[3] = 0;
    r[4] = vy[0];
    r[5] = vy[1];
    r[6] = vy[2];
    r[7] = 0;
    r[8] = vz[0];
    r[9] = vz[1];
    r[10] = vz[2];
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});


var _WebGL_guid = 0;

function _WebGL_listEach(fn, list) {
  for (; list.b; list = list.b) {
    fn(list.a);
  }
}

function _WebGL_listLength(list) {
  var length = 0;
  for (; list.b; list = list.b) {
    length++;
  }
  return length;
}

var _WebGL_rAF = typeof requestAnimationFrame !== 'undefined' ?
  requestAnimationFrame :
  function (cb) { setTimeout(cb, 1000 / 60); };

// eslint-disable-next-line no-unused-vars
var _WebGL_entity = F5(function (settings, vert, frag, mesh, uniforms) {
  return {
    $: 0,
    a: settings,
    b: vert,
    c: frag,
    d: mesh,
    e: uniforms
  };
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableBlend = F2(function (cache, setting) {
  var blend = cache.blend;
  blend.toggle = cache.toggle;

  if (!blend.enabled) {
    cache.gl.enable(cache.gl.BLEND);
    blend.enabled = true;
  }

  // a   b   c   d   e   f   g h i j
  // eq1 f11 f12 eq2 f21 f22 r g b a
  if (blend.a !== setting.a || blend.d !== setting.d) {
    cache.gl.blendEquationSeparate(setting.a, setting.d);
    blend.a = setting.a;
    blend.d = setting.d;
  }
  if (blend.b !== setting.b || blend.c !== setting.c || blend.e !== setting.e || blend.f !== setting.f) {
    cache.gl.blendFuncSeparate(setting.b, setting.c, setting.e, setting.f);
    blend.b = setting.b;
    blend.c = setting.c;
    blend.e = setting.e;
    blend.f = setting.f;
  }
  if (blend.g !== setting.g || blend.h !== setting.h || blend.i !== setting.i || blend.j !== setting.j) {
    cache.gl.blendColor(setting.g, setting.h, setting.i, setting.j);
    blend.g = setting.g;
    blend.h = setting.h;
    blend.i = setting.i;
    blend.j = setting.j;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepthTest = F2(function (cache, setting) {
  var depthTest = cache.depthTest;
  depthTest.toggle = cache.toggle;

  if (!depthTest.enabled) {
    cache.gl.enable(cache.gl.DEPTH_TEST);
    depthTest.enabled = true;
  }

  // a    b    c    d
  // func mask near far
  if (depthTest.a !== setting.a) {
    cache.gl.depthFunc(setting.a);
    depthTest.a = setting.a;
  }
  if (depthTest.b !== setting.b) {
    cache.gl.depthMask(setting.b);
    depthTest.b = setting.b;
  }
  if (depthTest.c !== setting.c || depthTest.d !== setting.d) {
    cache.gl.depthRange(setting.c, setting.d);
    depthTest.c = setting.c;
    depthTest.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencilTest = F2(function (cache, setting) {
  var stencilTest = cache.stencilTest;
  stencilTest.toggle = cache.toggle;

  if (!stencilTest.enabled) {
    cache.gl.enable(cache.gl.STENCIL_TEST);
    stencilTest.enabled = true;
  }

  // a   b    c         d     e     f      g      h     i     j      k
  // ref mask writeMask test1 fail1 zfail1 zpass1 test2 fail2 zfail2 zpass2
  if (stencilTest.d !== setting.d || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.FRONT, setting.d, setting.a, setting.b);
    stencilTest.d = setting.d;
    // a and b are set in the cache.gl.BACK diffing because they should be the same
  }
  if (stencilTest.e !== setting.e || stencilTest.f !== setting.f || stencilTest.g !== setting.g) {
    cache.gl.stencilOpSeparate(cache.gl.FRONT, setting.e, setting.f, setting.g);
    stencilTest.e = setting.e;
    stencilTest.f = setting.f;
    stencilTest.g = setting.g;
  }
  if (stencilTest.c !== setting.c) {
    cache.gl.stencilMask(setting.c);
    stencilTest.c = setting.c;
  }
  if (stencilTest.h !== setting.h || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.BACK, setting.h, setting.a, setting.b);
    stencilTest.h = setting.h;
    stencilTest.a = setting.a;
    stencilTest.b = setting.b;
  }
  if (stencilTest.i !== setting.i || stencilTest.j !== setting.j || stencilTest.k !== setting.k) {
    cache.gl.stencilOpSeparate(cache.gl.BACK, setting.i, setting.j, setting.k);
    stencilTest.i = setting.i;
    stencilTest.j = setting.j;
    stencilTest.k = setting.k;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableScissor = F2(function (cache, setting) {
  var scissor = cache.scissor;
  scissor.toggle = cache.toggle;

  if (!scissor.enabled) {
    cache.gl.enable(cache.gl.SCISSOR_TEST);
    scissor.enabled = true;
  }

  if (scissor.a !== setting.a || scissor.b !== setting.b || scissor.c !== setting.c || scissor.d !== setting.d) {
    cache.gl.scissor(setting.a, setting.b, setting.c, setting.d);
    scissor.a = setting.a;
    scissor.b = setting.b;
    scissor.c = setting.c;
    scissor.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableColorMask = F2(function (cache, setting) {
  var colorMask = cache.colorMask;
  colorMask.toggle = cache.toggle;
  colorMask.enabled = true;

  if (colorMask.a !== setting.a || colorMask.b !== setting.b || colorMask.c !== setting.c || colorMask.d !== setting.d) {
    cache.gl.colorMask(setting.a, setting.b, setting.c, setting.d);
    colorMask.a = setting.a;
    colorMask.b = setting.b;
    colorMask.c = setting.c;
    colorMask.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableCullFace = F2(function (cache, setting) {
  var cullFace = cache.cullFace;
  cullFace.toggle = cache.toggle;

  if (!cullFace.enabled) {
    cache.gl.enable(cache.gl.CULL_FACE);
    cullFace.enabled = true;
  }

  if (cullFace.a !== setting.a) {
    cache.gl.cullFace(setting.a);
    cullFace.a = setting.a;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePolygonOffset = F2(function (cache, setting) {
  var polygonOffset = cache.polygonOffset;
  polygonOffset.toggle = cache.toggle;

  if (!polygonOffset.enabled) {
    cache.gl.enable(cache.gl.POLYGON_OFFSET_FILL);
    polygonOffset.enabled = true;
  }

  if (polygonOffset.a !== setting.a || polygonOffset.b !== setting.b) {
    cache.gl.polygonOffset(setting.a, setting.b);
    polygonOffset.a = setting.a;
    polygonOffset.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleCoverage = F2(function (cache, setting) {
  var sampleCoverage = cache.sampleCoverage;
  sampleCoverage.toggle = cache.toggle;

  if (!sampleCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_COVERAGE);
    sampleCoverage.enabled = true;
  }

  if (sampleCoverage.a !== setting.a || sampleCoverage.b !== setting.b) {
    cache.gl.sampleCoverage(setting.a, setting.b);
    sampleCoverage.a = setting.a;
    sampleCoverage.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleAlphaToCoverage = function (cache) {
  var sampleAlphaToCoverage = cache.sampleAlphaToCoverage;
  sampleAlphaToCoverage.toggle = cache.toggle;

  if (!sampleAlphaToCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
    sampleAlphaToCoverage.enabled = true;
  }
};

var _WebGL_disableBlend = function (cache) {
  if (cache.blend.enabled) {
    cache.gl.disable(cache.gl.BLEND);
    cache.blend.enabled = false;
  }
};

var _WebGL_disableDepthTest = function (cache) {
  if (cache.depthTest.enabled) {
    cache.gl.disable(cache.gl.DEPTH_TEST);
    cache.depthTest.enabled = false;
  }
};

var _WebGL_disableStencilTest = function (cache) {
  if (cache.stencilTest.enabled) {
    cache.gl.disable(cache.gl.STENCIL_TEST);
    cache.stencilTest.enabled = false;
  }
};

var _WebGL_disableScissor = function (cache) {
  if (cache.scissor.enabled) {
    cache.gl.disable(cache.gl.SCISSOR_TEST);
    cache.scissor.enabled = false;
  }
};

var _WebGL_disableColorMask = function (cache) {
  var colorMask = cache.colorMask;
  if (!colorMask.a || !colorMask.b || !colorMask.c || !colorMask.d) {
    cache.gl.colorMask(true, true, true, true);
    colorMask.a = true;
    colorMask.b = true;
    colorMask.c = true;
    colorMask.d = true;
  }
};

var _WebGL_disableCullFace = function (cache) {
  cache.gl.disable(cache.gl.CULL_FACE);
};

var _WebGL_disablePolygonOffset = function (cache) {
  cache.gl.disable(cache.gl.POLYGON_OFFSET_FILL);
};

var _WebGL_disableSampleCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_COVERAGE);
};

var _WebGL_disableSampleAlphaToCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
};

var _WebGL_settings = ['blend', 'depthTest', 'stencilTest', 'scissor', 'colorMask', 'cullFace', 'polygonOffset', 'sampleCoverage', 'sampleAlphaToCoverage'];
var _WebGL_disableFunctions = [_WebGL_disableBlend, _WebGL_disableDepthTest, _WebGL_disableStencilTest, _WebGL_disableScissor, _WebGL_disableColorMask, _WebGL_disableCullFace, _WebGL_disablePolygonOffset, _WebGL_disableSampleCoverage, _WebGL_disableSampleAlphaToCoverage];

function _WebGL_doCompile(gl, src, type) {
  var shader = gl.createShader(type);
  // Enable OES_standard_derivatives extension
  gl.shaderSource(shader, '#extension GL_OES_standard_derivatives : enable\n' + src);
  gl.compileShader(shader);
  return shader;
}

function _WebGL_doLink(gl, vshader, fshader) {
  var program = gl.createProgram();

  gl.attachShader(program, vshader);
  gl.attachShader(program, fshader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    throw ('Link failed: ' + gl.getProgramInfoLog(program) +
      '\nvs info-log: ' + gl.getShaderInfoLog(vshader) +
      '\nfs info-log: ' + gl.getShaderInfoLog(fshader));
  }

  return program;
}

function _WebGL_getAttributeInfo(gl, type) {
  switch (type) {
    case gl.FLOAT:
      return { size: 1, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC2:
      return { size: 2, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC3:
      return { size: 3, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC4:
      return { size: 4, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_MAT4:
      return { size: 4, arraySize: 4, type: Float32Array, baseType: gl.FLOAT };
    case gl.INT:
      return { size: 1, arraySize: 1, type: Int32Array, baseType: gl.INT };
  }
}

/**
 *  Form the buffer for a given attribute.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {WebGLActiveInfo} attribute the attribute to bind to.
 *         We use its name to grab the record by name and also to know
 *         how many elements we need to grab.
 *  @param {Mesh} mesh The mesh coming in from Elm.
 *  @param {Object} attributes The mapping between the attribute names and Elm fields
 *  @return {WebGLBuffer}
 */
function _WebGL_doBindAttribute(gl, attribute, mesh, attributes) {
  // The length of the number of vertices that
  // complete one 'thing' based on the drawing mode.
  // ie, 2 for Lines, 3 for Triangles, etc.
  var elemSize = mesh.a.elemSize;

  var idxKeys = [];
  for (var i = 0; i < elemSize; i++) {
    idxKeys.push(String.fromCharCode(97 + i));
  }

  function dataFill(data, cnt, fillOffset, elem, key) {
    var i;
    if (elemSize === 1) {
      for (i = 0; i < cnt; i++) {
        data[fillOffset++] = cnt === 1 ? elem[key] : elem[key][i];
      }
    } else {
      idxKeys.forEach(function (idx) {
        for (i = 0; i < cnt; i++) {
          data[fillOffset++] = cnt === 1 ? elem[idx][key] : elem[idx][key][i];
        }
      });
    }
  }

  var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);

  if (attributeInfo === undefined) {
    throw new Error('No info available for: ' + attribute.type);
  }

  var dataIdx = 0;
  var dataOffset = attributeInfo.size * attributeInfo.arraySize * elemSize;
  var array = new attributeInfo.type(_WebGL_listLength(mesh.b) * dataOffset);

  _WebGL_listEach(function (elem) {
    dataFill(array, attributeInfo.size * attributeInfo.arraySize, dataIdx, elem, attributes[attribute.name] || attribute.name);
    dataIdx += dataOffset;
  }, mesh.b);

  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);
  return buffer;
}

/**
 *  This sets up the binding caching buffers.
 *
 *  We don't actually bind any buffers now except for the indices buffer.
 *  The problem with filling the buffers here is that it is possible to
 *  have a buffer shared between two webgl shaders;
 *  which could have different active attributes. If we bind it here against
 *  a particular program, we might not bind them all. That final bind is now
 *  done right before drawing.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {Mesh} mesh a mesh object from Elm
 *  @return {Object} buffer - an object with the following properties
 *  @return {Number} buffer.numIndices
 *  @return {WebGLBuffer|null} buffer.indexBuffer - optional index buffer
 *  @return {Object} buffer.buffers - will be used to buffer attributes
 */
function _WebGL_doBindSetup(gl, mesh) {
  if (mesh.a.indexSize > 0) {
    var indexBuffer = gl.createBuffer();
    var indices = _WebGL_makeIndexedBuffer(mesh.c, mesh.a.indexSize);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    return {
      numIndices: indices.length,
      indexBuffer: indexBuffer,
      buffers: {}
    };
  } else {
    return {
      numIndices: mesh.a.elemSize * _WebGL_listLength(mesh.b),
      indexBuffer: null,
      buffers: {}
    };
  }
}

/**
 *  Create an indices array and fill it from indices
 *  based on the size of the index
 *
 *  @param {List} indicesList the list of indices
 *  @param {Number} indexSize the size of the index
 *  @return {Uint32Array} indices
 */
function _WebGL_makeIndexedBuffer(indicesList, indexSize) {
  var indices = new Uint32Array(_WebGL_listLength(indicesList) * indexSize);
  var fillOffset = 0;
  var i;
  _WebGL_listEach(function (elem) {
    if (indexSize === 1) {
      indices[fillOffset++] = elem;
    } else {
      for (i = 0; i < indexSize; i++) {
        indices[fillOffset++] = elem[String.fromCharCode(97 + i)];
      }
    }
  }, indicesList);
  return indices;
}

function _WebGL_getProgID(vertID, fragID) {
  return vertID + '#' + fragID;
}

var _WebGL_drawGL = F2(function (model, domNode) {
  var cache = model.f;
  var gl = cache.gl;

  if (!gl) {
    return domNode;
  }

  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

  if (!cache.depthTest.b) {
    gl.depthMask(true);
    cache.depthTest.b = true;
  }
  if (cache.stencilTest.c !== cache.STENCIL_WRITEMASK) {
    gl.stencilMask(cache.STENCIL_WRITEMASK);
    cache.stencilTest.c = cache.STENCIL_WRITEMASK;
  }
  _WebGL_disableScissor(cache);
  _WebGL_disableColorMask(cache);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

  function drawEntity(entity) {
    if (!entity.d.b.b) {
      return; // Empty list
    }

    var progid;
    var program;
    var i;

    if (entity.b.id && entity.c.id) {
      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      program = cache.programs[progid];
    }

    if (!program) {

      var vshader;
      if (entity.b.id) {
        vshader = cache.shaders[entity.b.id];
      } else {
        entity.b.id = _WebGL_guid++;
      }

      if (!vshader) {
        vshader = _WebGL_doCompile(gl, entity.b.src, gl.VERTEX_SHADER);
        cache.shaders[entity.b.id] = vshader;
      }

      var fshader;
      if (entity.c.id) {
        fshader = cache.shaders[entity.c.id];
      } else {
        entity.c.id = _WebGL_guid++;
      }

      if (!fshader) {
        fshader = _WebGL_doCompile(gl, entity.c.src, gl.FRAGMENT_SHADER);
        cache.shaders[entity.c.id] = fshader;
      }

      var glProgram = _WebGL_doLink(gl, vshader, fshader);

      program = {
        glProgram: glProgram,
        attributes: Object.assign({}, entity.b.attributes, entity.c.attributes),
        currentUniforms: {},
        activeAttributes: [],
        activeAttributeLocations: []
      };

      program.uniformSetters = _WebGL_createUniformSetters(
        gl,
        model,
        program,
        Object.assign({}, entity.b.uniforms, entity.c.uniforms)
      );

      var numActiveAttributes = gl.getProgramParameter(glProgram, gl.ACTIVE_ATTRIBUTES);
      for (i = 0; i < numActiveAttributes; i++) {
        var attribute = gl.getActiveAttrib(glProgram, i);
        var attribLocation = gl.getAttribLocation(glProgram, attribute.name);
        program.activeAttributes.push(attribute);
        program.activeAttributeLocations.push(attribLocation);
      }

      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      cache.programs[progid] = program;
    }

    if (cache.lastProgId !== progid) {
      gl.useProgram(program.glProgram);
      cache.lastProgId = progid;
    }

    _WebGL_setUniforms(program.uniformSetters, entity.e);

    var buffer = cache.buffers.get(entity.d);

    if (!buffer) {
      buffer = _WebGL_doBindSetup(gl, entity.d);
      cache.buffers.set(entity.d, buffer);
    }

    for (i = 0; i < program.activeAttributes.length; i++) {
      attribute = program.activeAttributes[i];
      attribLocation = program.activeAttributeLocations[i];

      if (buffer.buffers[attribute.name] === undefined) {
        buffer.buffers[attribute.name] = _WebGL_doBindAttribute(gl, attribute, entity.d, program.attributes);
      }
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffers[attribute.name]);

      var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);
      if (attributeInfo.arraySize === 1) {
        gl.enableVertexAttribArray(attribLocation);
        gl.vertexAttribPointer(attribLocation, attributeInfo.size, attributeInfo.baseType, false, 0, 0);
      } else {
        // Point to four vec4 in case of mat4
        var offset = attributeInfo.size * 4; // float32 takes 4 bytes
        var stride = offset * attributeInfo.arraySize;
        for (var m = 0; m < attributeInfo.arraySize; m++) {
          gl.enableVertexAttribArray(attribLocation + m);
          gl.vertexAttribPointer(attribLocation + m, attributeInfo.size, attributeInfo.baseType, false, stride, offset * m);
        }
      }
    }

    // Apply all the new settings
    cache.toggle = !cache.toggle;
    _WebGL_listEach($elm_explorations$webgl$WebGL$Internal$enableSetting(cache), entity.a);
    // Disable the settings that were applied in the previous draw call
    for (i = 0; i < _WebGL_settings.length; i++) {
      var setting = cache[_WebGL_settings[i]];
      if (setting.toggle !== cache.toggle && setting.enabled) {
        _WebGL_disableFunctions[i](cache);
        setting.enabled = false;
        setting.toggle = cache.toggle;
      }
    }

    if (buffer.indexBuffer) {
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indexBuffer);
      gl.drawElements(entity.d.a.mode, buffer.numIndices, gl.UNSIGNED_INT, 0);
    } else {
      gl.drawArrays(entity.d.a.mode, 0, buffer.numIndices);
    }
  }

  _WebGL_listEach(drawEntity, model.g);
  return domNode;
});

function _WebGL_createUniformSetters(gl, model, program, uniformsMap) {
  var glProgram = program.glProgram;
  var currentUniforms = program.currentUniforms;
  var textureCounter = 0;
  var cache = model.f;
  function createUniformSetter(glProgram, uniform) {
    var uniformName = uniform.name;
    var uniformLocation = gl.getUniformLocation(glProgram, uniformName);
    switch (uniform.type) {
      case gl.INT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1f(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC2:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform2f(uniformLocation, value[0], value[1]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC3:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform3f(uniformLocation, value[0], value[1], value[2]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform4f(uniformLocation, value[0], value[1], value[2], value[3]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_MAT4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniformMatrix4fv(uniformLocation, false, new Float32Array(value));
            currentUniforms[uniformName] = value;
          }
        };
      case gl.SAMPLER_2D:
        var currentTexture = textureCounter++;
        return function (texture) {
          gl.activeTexture(gl.TEXTURE0 + currentTexture);
          var tex = cache.textures.get(texture);
          if (!tex) {
            tex = texture.createTexture(gl);
            cache.textures.set(texture, tex);
          }
          gl.bindTexture(gl.TEXTURE_2D, tex);
          if (currentUniforms[uniformName] !== texture) {
            gl.uniform1i(uniformLocation, currentTexture);
            currentUniforms[uniformName] = texture;
          }
        };
      case gl.BOOL:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      default:
        return function () { };
    }
  }

  var uniformSetters = {};
  var numUniforms = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; i++) {
    var uniform = gl.getActiveUniform(glProgram, i);
    uniformSetters[uniformsMap[uniform.name] || uniform.name] = createUniformSetter(glProgram, uniform);
  }

  return uniformSetters;
}

function _WebGL_setUniforms(setters, values) {
  Object.keys(values).forEach(function (name) {
    var setter = setters[name];
    if (setter) {
      setter(values[name]);
    }
  });
}

// VIRTUAL-DOM WIDGET

// eslint-disable-next-line no-unused-vars
var _WebGL_toHtml = F3(function (options, factList, entities) {
  return _VirtualDom_custom(
    factList,
    {
      g: entities,
      f: {},
      h: options
    },
    _WebGL_render,
    _WebGL_diff
  );
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAlpha = F2(function (options, option) {
  options.contextAttributes.alpha = true;
  options.contextAttributes.premultipliedAlpha = option.a;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepth = F2(function (options, option) {
  options.contextAttributes.depth = true;
  options.sceneSettings.push(function (gl) {
    gl.clearDepth(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencil = F2(function (options, option) {
  options.contextAttributes.stencil = true;
  options.sceneSettings.push(function (gl) {
    gl.clearStencil(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAntialias = F2(function (options, option) {
  options.contextAttributes.antialias = true;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableClearColor = F2(function (options, option) {
  options.sceneSettings.push(function (gl) {
    gl.clearColor(option.a, option.b, option.c, option.d);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePreserveDrawingBuffer = F2(function (options, option) {
  options.contextAttributes.preserveDrawingBuffer = true;
});

/**
 *  Creates canvas and schedules initial _WebGL_drawGL
 *  @param {Object} model
 *  @param {Object} model.f that may contain the following properties:
           gl, shaders, programs, buffers, textures
 *  @param {List<Option>} model.h list of options coming from Elm
 *  @param {List<Entity>} model.g list of entities coming from Elm
 *  @return {HTMLElement} <canvas> if WebGL is supported, otherwise a <div>
 */
function _WebGL_render(model) {
  var options = {
    contextAttributes: {
      alpha: false,
      depth: false,
      stencil: false,
      antialias: false,
      premultipliedAlpha: false,
      preserveDrawingBuffer: false
    },
    sceneSettings: []
  };

  _WebGL_listEach(function (option) {
    return A2($elm_explorations$webgl$WebGL$Internal$enableOption, options, option);
  }, model.h);

  var canvas = _VirtualDom_doc.createElement('canvas');
  var gl = canvas.getContext && (
    canvas.getContext('webgl', options.contextAttributes) ||
    canvas.getContext('experimental-webgl', options.contextAttributes)
  );

  if (gl && typeof WeakMap !== 'undefined') {
    options.sceneSettings.forEach(function (sceneSetting) {
      sceneSetting(gl);
    });

    // Activate extensions
    gl.getExtension('OES_standard_derivatives');
    gl.getExtension('OES_element_index_uint');

    model.f.gl = gl;

    // Cache the current settings in order to diff them to avoid redundant calls
    // https://emscripten.org/docs/optimizing/Optimizing-WebGL.html#avoid-redundant-calls
    model.f.toggle = false; // used to diff the settings from the previous and current draw calls
    model.f.blend = { enabled: false, toggle: false };
    model.f.depthTest = { enabled: false, toggle: false };
    model.f.stencilTest = { enabled: false, toggle: false };
    model.f.scissor = { enabled: false, toggle: false };
    model.f.colorMask = { enabled: false, toggle: false };
    model.f.cullFace = { enabled: false, toggle: false };
    model.f.polygonOffset = { enabled: false, toggle: false };
    model.f.sampleCoverage = { enabled: false, toggle: false };
    model.f.sampleAlphaToCoverage = { enabled: false, toggle: false };

    model.f.shaders = [];
    model.f.programs = {};
    model.f.lastProgId = null;
    model.f.buffers = new WeakMap();
    model.f.textures = new WeakMap();
    // Memorize the initial stencil write mask, because
    // browsers may have different number of stencil bits
    model.f.STENCIL_WRITEMASK = gl.getParameter(gl.STENCIL_WRITEMASK);

    // Render for the first time.
    // This has to be done in animation frame,
    // because the canvas is not in the DOM yet
    _WebGL_rAF(function () {
      return A2(_WebGL_drawGL, model, canvas);
    });

  } else {
    canvas = _VirtualDom_doc.createElement('div');
    canvas.innerHTML = '<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!';
  }

  return canvas;
}

function _WebGL_diff(oldModel, newModel) {
  newModel.f = oldModel.f;
  return _WebGL_drawGL(newModel);
}




// VIRTUAL-DOM WIDGETS


var _Markdown_toHtml = F3(function(options, factList, rawMarkdown)
{
	return _VirtualDom_custom(
		factList,
		{
			a: options,
			b: rawMarkdown
		},
		_Markdown_render,
		_Markdown_diff
	);
});



// WIDGET IMPLEMENTATION


function _Markdown_render(model)
{
	return A2(_Markdown_replace, model, _VirtualDom_doc.createElement('div'));
}


function _Markdown_diff(x, y)
{
	return x.b === y.b && x.a === y.a
		? false
		: _Markdown_replace(y);
}


var _Markdown_replace = F2(function(model, div)
{
	div.innerHTML = _Markdown_marked(model.b, _Markdown_formatOptions(model.a));
	return div;
});



// ACTUAL MARKDOWN PARSER


var _Markdown_marked = function() {
	// catch the `marked` object regardless of the outer environment.
	// (ex. a CommonJS module compatible environment.)
	// note that this depends on marked's implementation of environment detection.
	var module = {};
	var exports = module.exports = {};

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
	 */
	(function(){var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:noop,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=replace(block.item,"gm")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+block.def.source+")")();block.blockquote=replace(block.blockquote)("def",block.def)();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";block.html=replace(block.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)("hr",block.hr)("heading",block.heading)("lheading",block.lheading)("blockquote",block.blockquote)("tag","<"+block._tag)("def",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});block.gfm.paragraph=replace(block.paragraph)("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|")();block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,""),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:"space"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]||""});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[2]==="="?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");this.token(cap,top,true);this.tokens.push({type:"blockquote_end"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:"list_start",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join("\n")+src;i=l-1}}loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)==="\n";if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});this.token(item,false,bq);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&(cap[1]==="pre"||cap[1]==="script"||cap[1]==="style"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:cap[1].charAt(cap[1].length-1)==="\n"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^_\_([\s\S]+?)_\_(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|_\_)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};inline._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=replace(inline.link)("inside",inline._inside)("href",inline._href)();inline.reflink=replace(inline.reflink)("inside",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^_\_(?=\S)([\s\S]*?\S)_\_(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:replace(inline.text)("]|","~]|")("|","|https?://|")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)("{2,}","*")(),text:replace(inline.gfm.text)("{2,}","*")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]==="@"){text=cap[1].charAt(6)===":"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle("mailto:")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!=="!"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,true))+"\n</code></pre>"}return'<pre><code class="'+this.options.langPrefix+escape(lang,true)+'">'+(escaped?code:escape(code,true))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+' id="'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+'">'+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered){var type=ordered?"ol":"ul";return"<"+type+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td";var tag=flags.align?"<"+type+' style="text-align:'+flags.align+'">':"<"+type+">";return tag+content+"</"+type+">\n"};Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(prot.indexOf("javascript:")===0||prot.indexOf("vbscript:")===0||prot.indexOf("data:")===0){return""}}var out='<a href="'+href+'"';if(title){out+=' title="'+title+'"'}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){var out='<img src="'+href+'" alt="'+text+'"';if(title){out+=' title="'+title+'"'}out+=this.options.xhtml?"/>":">";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type==="text"){body+="\n"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,flags,j;cell="";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{var body="";while(this.next().type!=="blockquote_end"){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{var body="",ordered=this.token.ordered;while(this.next().type!=="list_end"){body+=this.tok()}return this.renderer.list(body,ordered)}case"list_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.token.type==="text"?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(_,n){n=n.toLowerCase();if(n==="colon")return":";if(n.charAt(0)==="#"){return n.charAt(1)==="x"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function replace(regex,opt){regex=regex.source;opt=opt||"";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt==="function"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!=="code"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/chjj/marked.";if((opt||marked.defaults).silent){return"<p>An error occured:</p><pre>"+escape(e.message+"",true)+"</pre>"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:"lang-",smartypants:false,headerPrefix:"",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!=="undefined"&&typeof exports==="object"){module.exports=marked}else if(typeof define==="function"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!=="undefined"?window:global)}());

	return module.exports;
}();


// FORMAT OPTIONS FOR MARKED IMPLEMENTATION

function _Markdown_formatOptions(options)
{
	function toHighlight(code, lang)
	{
		if (!lang && $elm$core$Maybe$isJust(options.defaultHighlighting))
		{
			lang = options.defaultHighlighting.a;
		}

		if (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)
		{
			return hljs.highlight(lang, code, true).value;
		}

		return code;
	}

	var gfm = options.githubFlavored.a;

	return {
		highlight: toHighlight,
		gfm: gfm,
		tables: gfm && gfm.tables,
		breaks: gfm && gfm.breaks,
		sanitize: options.sanitize,
		smartypants: options.smartypants
	};
}
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $author$project$Main$AdjustTimeZone = function (a) {
	return {$: 'AdjustTimeZone', a: a};
};
var $author$project$Main$GotWindowSize = function (a) {
	return {$: 'GotWindowSize', a: a};
};
var $author$project$SplitPane$SplitPane$Horizontal = {$: 'Horizontal'};
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$SplitPane$SplitPane$State = function (a) {
	return {$: 'State', a: a};
};
var $author$project$SplitPane$SplitPane$configureSplitter = F2(
	function (newPosition, _v0) {
		var state = _v0.a;
		return $author$project$SplitPane$SplitPane$State(
			_Utils_update(
				state,
				{splitterPosition: newPosition}));
	});
var $supermario$elm_countries$Countries$Country = F3(
	function (name, code, flag) {
		return {code: code, flag: flag, name: name};
	});
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $author$project$Locations$UK$textDictionary = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'main',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('loadgpx', 'Load GPX file'),
						_Utils_Tuple2('savegpx', 'Save GPX file'),
						_Utils_Tuple2('loadurl', 'Load GPX from HTTP URL'),
						_Utils_Tuple2('urlhelp', 'Paste or type web address of GPX file here'),
						_Utils_Tuple2('notrack', 'No track loaded'),
						_Utils_Tuple2('unnamed', 'Unnamed track'),
						_Utils_Tuple2('import', 'Other file options'),
						_Utils_Tuple2('saveOptions', 'RGT settings'),
						_Utils_Tuple2('askgpx', 'Select GPX file.\n\nIf the File Open dialog does not appear, please reload the page in the browser and try again.\n'),
						_Utils_Tuple2('loading', 'Loading GPX file ...'),
						_Utils_Tuple2('noload', 'Sorry, unable to load that file'),
						_Utils_Tuple2('nogpx', 'Could not make a track. Are you sure that\'s a GPX file?'),
						_Utils_Tuple2('nowrite', 'Sorry, unable to write the file'),
						_Utils_Tuple2('nosvg', 'Sorry, could not extract SVG paths'),
						_Utils_Tuple2('message', 'Message'),
						_Utils_Tuple2('dismiss', 'Dismiss'),
						_Utils_Tuple2('1CQF', 'One-click Quick Fix!'),
						_Utils_Tuple2('default', 'Restore default tool layout'),
						_Utils_Tuple2('imperial', 'Use Imperial measures'),
						_Utils_Tuple2('metric', 'Use Metric measures'),
						_Utils_Tuple2('welcome', '\n# Welcome to GPXmagic\n\n**GPXmagic V3 works best with Chrome** (by far)\n\n## Quickstart\n\nBegin with **Load GPX file** -- the white button on the top bar.\n\nFor many cases, especially if you have a recorded ride, you only need the blue **One-click Quick Fix** button!\n(This appears at the top when you\'ve loaded a file.)\n\nIf that doesn\'t work for you, there are many specialised tools to fix common issues. Each of these has\nan explanatory video you can view by clicking the camera icon.\n\nClick anywhere to dismiss this message. It will probably not appear again.\n')
					]))),
			_Utils_Tuple2(
			'rgtOptions',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('elevation', 'Disable elevation fixes'),
						_Utils_Tuple2('smoothing', 'Disable advanced smoothing'),
						_Utils_Tuple2('maxSlope', 'Maximum slope: {0}%'),
						_Utils_Tuple2('info', 'These options write special flags in the GPX file that will\nmean something to the Wahoo RGT Magic Roads parser. They have no effect here in GPXmagic.\n')
					]))),
			_Utils_Tuple2(
			'panes',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('layout', 'Layout'),
						_Utils_Tuple2('one', 'Large one'),
						_Utils_Tuple2('tall', 'Cupboards'),
						_Utils_Tuple2('flat', 'Drawers'),
						_Utils_Tuple2('grid', 'Grid of four'),
						_Utils_Tuple2('Map', 'Map'),
						_Utils_Tuple2('Perspective', '3-D'),
						_Utils_Tuple2('Rider', 'Rider'),
						_Utils_Tuple2('Profile', 'Profile 1'),
						_Utils_Tuple2('OldProfile', 'Profile 2'),
						_Utils_Tuple2('Plan', 'Plan'),
						_Utils_Tuple2('Route', 'Route'),
						_Utils_Tuple2('About', 'About'),
						_Utils_Tuple2('locked', 'Locked to Orange'),
						_Utils_Tuple2('unlocked', 'Draggable'),
						_Utils_Tuple2('drag', 'Click to prevent point dragging'),
						_Utils_Tuple2('nodrag', 'Click to allow point dragging'),
						_Utils_Tuple2('mapstyle', 'Choose map style')
					]))),
			_Utils_Tuple2(
			'graph',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Route maker'),
						_Utils_Tuple2('find', 'Enter Route maker mode'),
						_Utils_Tuple2('adopt', 'Merge nearby points'),
						_Utils_Tuple2('adoptInfo', 'You may want to "snap" multiple passes of the track\ntogether to remove discrepancies, but you\'re content with the original route and don\'t\nwant to use the other features of Route maker to define your own route.'),
						_Utils_Tuple2('clear', 'Clear the route'),
						_Utils_Tuple2('revert', 'Revert to original track'),
						_Utils_Tuple2('convert', 'Make a new track with this route'),
						_Utils_Tuple2('isOffset', 'Offset: {0}m {1}'),
						_Utils_Tuple2('isTolerance', 'Tolerance: {0}'),
						_Utils_Tuple2('undo', 'Undo delete Road'),
						_Utils_Tuple2('left', 'left'),
						_Utils_Tuple2('right', 'right'),
						_Utils_Tuple2('isRadius', 'Radius {0}m'),
						_Utils_Tuple2('blank', '   '),
						_Utils_Tuple2('from', 'From'),
						_Utils_Tuple2('to', 'To'),
						_Utils_Tuple2('along', 'Along'),
						_Utils_Tuple2('distance', 'Distance'),
						_Utils_Tuple2('remove', 'Remove'),
						_Utils_Tuple2('reverse', 'Reverse'),
						_Utils_Tuple2('place1', 'Place {0}'),
						_Utils_Tuple2('place2', 'place {0}'),
						_Utils_Tuple2('road', 'road {0}'),
						_Utils_Tuple2('guidanceNotAnalyzed', 'Route maker partitions the track into sections\n of Road between key Places.\nSwitch to the Route view to see a preview.\nUse the tolerance slider to ensure key Places are correctly positioned.'),
						_Utils_Tuple2('guidanceAnalyzed', 'You can now change the route and\nedit individual sections. Click on a Road or Place to see available actions.\nYou can clear the route completely, and remove unwanted Roads.\nWhen ready, make a complete new track with optional offset.'),
						_Utils_Tuple2('guidanceNoRoute', 'To build your route, click on a road and select "Add to route".\n Always check the direction of loops and reverse if necessary in the route list.'),
						_Utils_Tuple2('info', '\nWe follow the route looking for places and road sections that are used more than once.\nThis allows us to divide the route into a list of Roads, where each Road goes from from one\nPlace to other (or the same Place).\n\nOnce we\'ve done that, you\'ll be able to change the route you take between places.\nUse the **Route** view to help construct a new route.\n\nYou can also select a single road for editing using (most of) the normal tools. Any changes\nyou make here will be reflected in the resulting route so all the altitudes will agree.\n'),
						_Utils_Tuple2('tolerance', '\nDistance within which nearby points will be seen as on the same road.\n\nAdjust this value to find the best outcome for IRL rides, also ridewithgps.\n'),
						_Utils_Tuple2('offset', 'Using this route as the centre-line, offset the new track to\nseparate traffic in different directions.'),
						_Utils_Tuple2('radius', 'When passing a Place, attempt to use this radius between sections.'),
						_Utils_Tuple2('render', '\nCreate a single road, using your route and offsetting the road\nfrom the centre line (if you want to avoid collisions with oncoming avatars). As the same\nroad section is used for each passage, there should be no height differences (apart from\nthe 1cm difference we put in to avoid flicker in RGT.\n\nThis will restore your previous view and close the Route maker tool.\n'),
						_Utils_Tuple2('manyNodes', '\nHmm, that\'s a lot of Places. Route maker works best with \nGPX files from a route planner, not from recorded rides. That could be the issue here.\n'),
						_Utils_Tuple2('edit', '\nPlease use any of the other views to edit this section of track.\nAny changes you make will be reflected here.\n\n**NOTE** Please do not use _Save GPX file_ while editing a section, as that will save only the active section.\n')
					]))),
			_Utils_Tuple2(
			'bends',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Bend problems'),
						_Utils_Tuple2('usepoint', 'At a point'),
						_Utils_Tuple2('useradius', 'With a radius'),
						_Utils_Tuple2('summary', 'Summary'),
						_Utils_Tuple2('list', 'List'),
						_Utils_Tuple2('change', 'Direction change {0}º'),
						_Utils_Tuple2('radius', 'Radius {0}'),
						_Utils_Tuple2('prev', 'Move to previous'),
						_Utils_Tuple2('this', 'Move pointer to this issue (Is the padlock on?)'),
						_Utils_Tuple2('next', 'Move to next'),
						_Utils_Tuple2('none', 'None found'),
						_Utils_Tuple2('.of.', '{0} of {1}, {2}º'),
						_Utils_Tuple2('.radius.', '{0} of {1}, radius {2}º'),
						_Utils_Tuple2('smooth', 'Smooth these points'),
						_Utils_Tuple2('adjust', 'Widen current bend'),
						_Utils_Tuple2('info', '\nFind points where the road direction changes significantly, or find\nsections of track that may be a bend with a small radius.\n\nFrom here, you can jump directly to the sections of track and use other tools to fix the problems.\n'),
						_Utils_Tuple2('autofix', '\nSmooth each of these individually using the single point _Smooth with arcs_. \nUse that tool to change the number of points that are added to smooth each point.\n\nYou should use this only for trivial fixes; there are better tools for smoothing\nserious issues. This tool can even make things worse.\n'),
						_Utils_Tuple2('locate', '\nThese buttons will move the Orange pointer through the list of issues.\n\n**Note**: this will only centre the views which have the padlock closed.\n'),
						_Utils_Tuple2('widen', '\nNudge the points on the bend(s) outwards to increase the radius.\n\nYou may get better results from using the _Smooth with Arcs_ or _Radiused Bends_ tools.\n')
					]))),
			_Utils_Tuple2(
			'gradients',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Gradient problems'),
						_Utils_Tuple2('usepoint', 'Sudden change'),
						_Utils_Tuple2('climbs', 'Steep climbs'),
						_Utils_Tuple2('descents', 'Steep descents'),
						_Utils_Tuple2('summary', 'Summary'),
						_Utils_Tuple2('list', 'List'),
						_Utils_Tuple2('change', 'Direction change {0}º'),
						_Utils_Tuple2('radius', 'Radius {0}'),
						_Utils_Tuple2('prev', 'Move to previous'),
						_Utils_Tuple2('this', 'Move pointer to this issue (Is the padlock on?)'),
						_Utils_Tuple2('next', 'Move to next'),
						_Utils_Tuple2('none', 'None found'),
						_Utils_Tuple2('.of.', '{0} of {1} is {2}º'),
						_Utils_Tuple2('.radius.', '{0} of {1}, radius {2}º'),
						_Utils_Tuple2('smooth', 'Smooth these points'),
						_Utils_Tuple2('adjust', 'Widen current bend'),
						_Utils_Tuple2('threshold', 'Threshold {0}%'),
						_Utils_Tuple2('info', '\nFind points where the gradient changes significantly, or is a noticeably\nsteep ascent or descent.\n\nFrom here, you can jump directly to the sections of track.\nYou can use a quick-fix here to simply round off the points or (usually better),\nuse _Profile Smoother_, _Smooth with Splines_, _Simplify_ or _Nudge_.\n'),
						_Utils_Tuple2('autofix', '\nSmooth each of these individually using the single point _Smooth with arcs_. Use that\ntool to change the number of points that are added to smooth each point.\n\nYou should use this only for trivial fixes; there are better tools for smoothing\nserious issues.\n')
					]))),
			_Utils_Tuple2(
			'arcs',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Smooth with arcs'),
						_Utils_Tuple2('Bend', 'Bend'),
						_Utils_Tuple2('Point', 'Point'),
						_Utils_Tuple2('none', 'No bend found'),
						_Utils_Tuple2('smooth', 'Smooth between markers,\nRadius {0}'),
						_Utils_Tuple2('spacing', 'Spacing: {0}'),
						_Utils_Tuple2('info', '\nFind a circular arc to replace an existing bend, by moving the Orange and\nPurple markers to find an acceptable solution. \n\nSet the spacing to control the fineness of the replacement bend.\n\nThis will also enforce a uniform gradient along the new arc.\n\n_Radiused bends_ offers a slightly different approach.\n')
					]))),
			_Utils_Tuple2(
			'splines',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Smooth with splines'),
						_Utils_Tuple2('tension', 'Tension: {0}'),
						_Utils_Tuple2('tolerance', 'Tolerance: {0}'),
						_Utils_Tuple2('through', 'Through existing points'),
						_Utils_Tuple2('approx', 'Approximating existing points'),
						_Utils_Tuple2('whole', 'Applies to whole track'),
						_Utils_Tuple2('part', 'Applies between markers'),
						_Utils_Tuple2('apply', 'Apply'),
						_Utils_Tuple2('info', '\nSplines are a common way to engineer a smooth curve. They work in three dimensions\nand so can help with gradient and direction changes.\n\nWe have two variants:\n\n- Passing through existing points is useful when you have relatively few points and\nyou want them not to move, but need more points to define a curve.\n\n- Using existing points as a guide if useful when you have many points but don\'t\nactually want or need to pass through them.\n')
					]))),
			_Utils_Tuple2(
			'centroid',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Centroid average'),
						_Utils_Tuple2('weight', 'Weighting {0}'),
						_Utils_Tuple2('Position', 'Position'),
						_Utils_Tuple2('Altitude', 'Altitude'),
						_Utils_Tuple2('Apply', 'Apply'),
						_Utils_Tuple2('info', '\n A simple way to remove "noise" from a track is by taking the average of each\n point with its neighbours. This tool does that in three dimensions, but lets you\n decide whether to apply this to the position or altitude.\n \n You can choose any "weighting" between the original points and the averaged points.\n \n You can use this repeatedly to spread the averaging effect over more points.\n \n If you\'re interested, the average we use is the centroid of the triangle defined\n by a point and its neighbours.\n ')
					]))),
			_Utils_Tuple2(
			'radius',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Radiused bends'),
						_Utils_Tuple2('radius', 'Bend radius {0}'),
						_Utils_Tuple2('join', 'Joining radius {0}'),
						_Utils_Tuple2('inclusion', 'Inclusion zone {0}'),
						_Utils_Tuple2('spacing', 'Spacing {0}'),
						_Utils_Tuple2('Reset', 'Reset'),
						_Utils_Tuple2('Apply', 'Apply'),
						_Utils_Tuple2('none', 'Not found'),
						_Utils_Tuple2('gradient', 'Smooth gradient'),
						_Utils_Tuple2('outliers', 'Include outliers'),
						_Utils_Tuple2('info', '\n Switchback? Roundabout? What you need is to construct your own bend with a\n desired radius. This tools lets you do that, plus nice entry and exit lines.\n \n I recommend using Plan view, so that you can see what you\'re doing with the tool.\n When you drag on the black circle control, you see a circle moving on the Plan view.\n Adjust the radius with the top slider and imagine you\'re "pushing" this circle into\n the bend to shape it.\n \n The _Joining radius_ slider changes the radius of the entry and exit lines.\n \n Generally this tool increases the radius, but some points may need to be pulled in,\n so use "Include outliers" to do that. This will reveal yet another slider.\n \n If you have sections of track close together, the software can\'t always tell where you\n intend the bend to be; in these cases, it may help to place the Orange and Purple markers\n either side of the bend, meaning "this section of track contains the bend."\n \n Finally, you can either use a constant gradient over the new bend, or you can ask it\n to respect the existing altitudes, inasmuch as that is possible.\n ')
					]))),
			_Utils_Tuple2(
			'delete',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Delete'),
						_Utils_Tuple2('sorry', 'Sorry, I can\'t let you do that.'),
						_Utils_Tuple2('single', 'Delete single point'),
						_Utils_Tuple2('many', 'Delete between and including markers'),
						_Utils_Tuple2('info', '\nIf you\'ve got a single point -- or more -- out of line, sometimes the best thing\nto do is just Delete them.\n\nDelete a single point by placing the Orange marker, or several points by using both Orange\nand Purple. Delete includes the points where the markers are.\n\nDon\'t worry, it won\'t let you delete the whole track.\n')
					]))),
			_Utils_Tuple2(
			'display',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Display settings'),
						_Utils_Tuple2('Curtain', 'Curtain style'),
						_Utils_Tuple2('None', 'None'),
						_Utils_Tuple2('Plain', 'Plain'),
						_Utils_Tuple2('Coloured', 'Coloured'),
						_Utils_Tuple2('Land Use', 'Land Use'),
						_Utils_Tuple2('Flat', 'Flat'),
						_Utils_Tuple2('3D', '3D'),
						_Utils_Tuple2('road', 'Road surface'),
						_Utils_Tuple2('Ground', 'Ground'),
						_Utils_Tuple2('Centre line', 'Centre line'),
						_Utils_Tuple2('Place names', 'Place names'),
						_Utils_Tuple2('noterrain', 'Terrain off'),
						_Utils_Tuple2('quality', 'Terrain quality'),
						_Utils_Tuple2('info', '\nChange how the road appears in the 3D views. You can select to see the road surface,\na dropped "curtain" either plain or shaded to show gradient, There\'s also a centre line\nfor the road matching the gradient colour. For good measure, you can turn off the green\n"ground" plane and see the route from below.\n'),
						_Utils_Tuple2('landuse', '\nYou can fetch Open Street Map data that describes the land use.\n\nThe colours used are shown in the _Land use_ tool, which will also show any errors\nobtaining the data.\n\nYou can show these "flat" or "sloped" Be warned, when "sloped", it may obscure the road!\n')
					]))),
			_Utils_Tuple2(
			'tools',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Tool summary'),
						_Utils_Tuple2('left', 'Move to left'),
						_Utils_Tuple2('right', 'Move to right'),
						_Utils_Tuple2('hide', 'Hide (restore in Tools Summary)'),
						_Utils_Tuple2('onleft', 'Left'),
						_Utils_Tuple2('onright', 'Right'),
						_Utils_Tuple2('hidden', 'Hidden'),
						_Utils_Tuple2('notrack', 'Controls will appear here when a track is loaded.'),
						_Utils_Tuple2('blank', '           '),
						_Utils_Tuple2('info', '\nQuickly place tools on the left or right of the display, or hide them completely.\n\nAlso, access a quick description of what the tool does and how (and when) to use it.\n')
					]))),
			_Utils_Tuple2(
			'action',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('deleteN', 'deletion of points'),
						_Utils_Tuple2('delete1', 'delete'),
						_Utils_Tuple2('spline', 'smooth with splines'),
						_Utils_Tuple2('centroid', 'smooth with 3D average'),
						_Utils_Tuple2('radius', 'radiused bend'),
						_Utils_Tuple2('arc', 'arc smoother'),
						_Utils_Tuple2('map', 'move on map'),
						_Utils_Tuple2('nudge', 'nudge'),
						_Utils_Tuple2('outback', 'out and back'),
						_Utils_Tuple2('simplify', 'simplify'),
						_Utils_Tuple2('insert', 'insert points'),
						_Utils_Tuple2('1CQF', 'one-click quick fix'),
						_Utils_Tuple2('profile', 'smooth profile'),
						_Utils_Tuple2('altitudes', 'smooth altitudes'),
						_Utils_Tuple2('gradients', 'smooth gradients'),
						_Utils_Tuple2('move', 'relocate'),
						_Utils_Tuple2('scale', 'rotate and scale'),
						_Utils_Tuple2('elevations', 'use altitudes from map'),
						_Utils_Tuple2('segment', 'insert segment from Strava'),
						_Utils_Tuple2('stretch', 'move and stretch'),
						_Utils_Tuple2('close', 'close loop'),
						_Utils_Tuple2('reverse', 'reverse track direction'),
						_Utils_Tuple2('start', 'move start points'),
						_Utils_Tuple2('pens', 'add RGT rider pens'),
						_Utils_Tuple2('append', 'append GPX track'),
						_Utils_Tuple2('straighten', 'straighten'),
						_Utils_Tuple2('autofix', 'point smoothing'),
						_Utils_Tuple2('route', 'turn route into new track'),
						_Utils_Tuple2('widen', 'widen bend'),
						_Utils_Tuple2('smart', 'smart smoother'),
						_Utils_Tuple2('unknown', '(what was that?)'),
						_Utils_Tuple2('combine', 'combine nearby points'),
						_Utils_Tuple2('adjusttimes', 'adjust timings'),
						_Utils_Tuple2('double', 'double relative times'),
						_Utils_Tuple2('settimeticks', 'equal time spacing'),
						_Utils_Tuple2('physics', 'use estimated times')
					]))),
			_Utils_Tuple2(
			'essentials',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Essentials'),
						_Utils_Tuple2('point', 'Point {0} at {1}'),
						_Utils_Tuple2('lift', 'Lift purple marker'),
						_Utils_Tuple2('drop', 'Drop purple marker'),
						_Utils_Tuple2('note', 'Use Orange and Purple markers\nto select track for editing.'),
						_Utils_Tuple2('noundo', 'Nothing to Undo'),
						_Utils_Tuple2('noredo', 'Nothing to Redo'),
						_Utils_Tuple2('undo', 'Undo {0}'),
						_Utils_Tuple2('redo', 'Redo {0}'),
						_Utils_Tuple2('info', '\nMost of the editing tools require either a single point or a range of points to work on.\n\nThe top buttons in this tool allow you to move an Orange marker along the track to select a single point.\n\nThere is a button to place a Purple marker at the current position, and then to move the Purple marker.\nThis defines a range which you can then use for tools that require it.\n\nBelow the pointer controls are the Undo and Redo buttons. These let you go back and forward over the\nprevious ten edits. Once you make a different change, you can only Undo.\n')
					]))),
			_Utils_Tuple2(
			'fly',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Flythrough'),
						_Utils_Tuple2('speed', 'Speed = {0}'),
						_Utils_Tuple2('where', 'From start {0}'),
						_Utils_Tuple2('info', '\nIt\'s often useful to see the track as the rider would see in in RGT. We don\'t have the\nsophisticated scenery that RGT offers, but you can set the ride in motion and adjust the speed\nto get a quick feel for how it might ride.\n')
					]))),
			_Utils_Tuple2(
			'insert',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Insert points'),
						_Utils_Tuple2('apply', 'Insert points'),
						_Utils_Tuple2('usage', 'Use both markers to apply to a range, otherwise applies to whole track'),
						_Utils_Tuple2('spacing', 'Spacing: {0}'),
						_Utils_Tuple2('info', '\nSometimes you need more track points to create the precise shape you need, perhaps\nby _Nudge_-ing them or dragging them on a map. Also, when you\'re using some of the track\nsmoothing tools, it can improve the outcome to have points more closely spaced.\n\nThis tool will enforce a _maximum_ spacing between points. This can mean that the resulting\nspacing varies from one section to another.\n')
					]))),
			_Utils_Tuple2(
			'timestamps',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Timestamps'),
						_Utils_Tuple2('ExtentMarkers', 'Changes will apply between and including the markers.'),
						_Utils_Tuple2('ExtentOrangeToEnd', 'Changes will apply from Orange marker to end of track.'),
						_Utils_Tuple2('spacing', 'Spacing: {0}'),
						_Utils_Tuple2('progressive', 'You can either keep the duration of the range constant,\nmoving it earlier or later in time, or you can stretch (or shrink) the range to match two timing points.'),
						_Utils_Tuple2('apply', 'Apply time changes'),
						_Utils_Tuple2('remove', 'Remove all timings'),
						_Utils_Tuple2('double', 'Double all time intervals'),
						_Utils_Tuple2('doubling', 'You may want to slow a 60fps video, perhaps because it was\nrecorded in a car. Doubling all the time intervals is a way of saying "half speed".\n'),
						_Utils_Tuple2('physics', 'Estimate timings with a very simple physics model,\nrelative to an 80kg rider with an FTP of 200W (me, roughly).'),
						_Utils_Tuple2('applyPhysics', 'Apply estimated timings'),
						_Utils_Tuple2('actual', 'Use timestamps in GPX'),
						_Utils_Tuple2('estimated', 'Use physics model'),
						_Utils_Tuple2('estimate', 'Expected duration'),
						_Utils_Tuple2('uniform', 'Replace track points with points at regular time intervals of:'),
						_Utils_Tuple2('start absolute', 'Clock time at Orange: '),
						_Utils_Tuple2('end absolute', 'Clock time at end of range: '),
						_Utils_Tuple2('start relative', 'Ride time to Orange: '),
						_Utils_Tuple2('end relative', 'Ride time at end of range: '),
						_Utils_Tuple2('desired start', 'New ride time at Orange: '),
						_Utils_Tuple2('desired end', 'New ride time at end of range: '),
						_Utils_Tuple2('second', '1s'),
						_Utils_Tuple2('half', '0.5s'),
						_Utils_Tuple2('five', '5s'),
						_Utils_Tuple2('usetick', 'Replace points'),
						_Utils_Tuple2('millis', 'Millisecond'),
						_Utils_Tuple2('ok', 'Change the time at Orange and all subsequent points by the same amount.'),
						_Utils_Tuple2('tooEarly', 'Must be later than the previous point.'),
						_Utils_Tuple2('atStart', 'Can\'t change first point time, please move marker.'),
						_Utils_Tuple2('info', '\nChange track point timestamps to match video timings. Note that editing the track is likely\n to disrupt the timings, though we try to preserve time information where possible.\n')
					]))),
			_Utils_Tuple2(
			'intersections',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Intersections'),
						_Utils_Tuple2('Summary', 'Summary'),
						_Utils_Tuple2('List', 'List'),
						_Utils_Tuple2('none', 'None found'),
						_Utils_Tuple2('prev', 'Move to previous'),
						_Utils_Tuple2('this', 'Move pointer to this issue (Is the padlock on?)'),
						_Utils_Tuple2('next', 'Move to next'),
						_Utils_Tuple2('detail', '{0} {1} {2} at {3}'),
						_Utils_Tuple2('info', '\nThis helps to find places where one road section crosses another, or where a piece\nof road is used more than once, either in the same or the opposite direction.\n\nThis is gateway to thinking of a route as something that can be navigated differently,\nbut that\'s where _Route builder_ comes to play.\n')
					]))),
			_Utils_Tuple2(
			'stretch',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Move and Stretch'),
						_Utils_Tuple2('white', 'Dragging point {0}'),
						_Utils_Tuple2('Zero', 'Zero'),
						_Utils_Tuple2('invalid', 'Not valid'),
						_Utils_Tuple2('apply', 'Apply'),
						_Utils_Tuple2('Stretch', 'Stretch'),
						_Utils_Tuple2('height', 'Height {0}'),
						_Utils_Tuple2('+1yd', '+1yd'),
						_Utils_Tuple2('+1ft', '+1ft'),
						_Utils_Tuple2('+1in', '+1in'),
						_Utils_Tuple2('-1in', '-1in'),
						_Utils_Tuple2('-1ft', '-1ft'),
						_Utils_Tuple2('-1yd', '-1yd'),
						_Utils_Tuple2('+1m', '+1m'),
						_Utils_Tuple2('0', 'Reset'),
						_Utils_Tuple2('+10cm', '+10cm'),
						_Utils_Tuple2('+1cm', '+1cm'),
						_Utils_Tuple2('-1cm', '-1cm'),
						_Utils_Tuple2('-10cm', '-10cm'),
						_Utils_Tuple2('-1m', '-1m'),
						_Utils_Tuple2('info', '\nThink of this as _Nudge_, supercharged. Use the markers to define a section of track,\nthen the circular 2-way drag control to move this section freely. There\'s a height adjustment\nas well.\n\nThe real value of this tool is "Stretch" mode. Suppose you have a series of switchbacks\nbut they\'re too tightly packed for RGT Magic Roads. In stretch mode, you move a white marker\nalong the track between the Orange and Purple. Now, when you drag the 2-way control, the\nwhite marker follows the drag and the track either side "stretches" to follow it.\n\nWith a bit of practice, you can add some separation to the switchbacks. It probably has\nother uses as well, but this was the justification.\n')
					]))),
			_Utils_Tuple2(
			'affine',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Move,Scale,Rotate'),
						_Utils_Tuple2('rotation', 'Rotation: {0}'),
						_Utils_Tuple2('imperial', 'Length {0} miles'),
						_Utils_Tuple2('metric', 'Length {0} km'),
						_Utils_Tuple2('yards', '{0} yards'),
						_Utils_Tuple2('metres', '{0} m'),
						_Utils_Tuple2('apply', 'Rotate and Scale'),
						_Utils_Tuple2('move', 'Move to\n{0}\n{1}'),
						_Utils_Tuple2('Zero', 'Reset sliders'),
						_Utils_Tuple2('elevations', 'Use elevations from Mapbox'),
						_Utils_Tuple2('info', '\nWant to ride Ventoux in the Sahara? Want your local loop to be a bit longer, or a lot?\n\nMove, Scale & Rotate lets you perform some simple transformations on the whole route. It\'s maths.\n\nScale and Rotate are fairly obvious but Move requires you to use the Map view to identify where\nyou want your route. The coordinates of the last map click are displayed in the tool. Without the\nPurple marker, the centre point of the route is moved to the last map click position. With the\nPurple marker, the Purple marker is moved there; this can give you more control over placement.\n')
					]))),
			_Utils_Tuple2(
			'nudge',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Nudge'),
						_Utils_Tuple2('+1yd', '+1yd'),
						_Utils_Tuple2('+1ft', '+1ft'),
						_Utils_Tuple2('+1in', '+1in'),
						_Utils_Tuple2('-1in', '-1in'),
						_Utils_Tuple2('-1ft', '-1ft'),
						_Utils_Tuple2('-1yd', '-1yd'),
						_Utils_Tuple2('+1m', '+1m'),
						_Utils_Tuple2('+10cm', '+10cm'),
						_Utils_Tuple2('+1cm', '+1cm'),
						_Utils_Tuple2('-1cm', '-1cm'),
						_Utils_Tuple2('-10cm', '-10cm'),
						_Utils_Tuple2('-1m', '-1m'),
						_Utils_Tuple2('fade', 'Fade in/out '),
						_Utils_Tuple2('Apply', 'Apply'),
						_Utils_Tuple2('Zero', 'Reset sliders'),
						_Utils_Tuple2('easing', 'Smooth blend'),
						_Utils_Tuple2('spacing', 'Spacing '),
						_Utils_Tuple2('info', '\nSometimes all it takes is a little _Nudge_.\n\nA track point, or a run of points, is slightly out of line from where you want it (them).\nWith Nudge, you can move a single point, or range of points, sideways and up or down.\n\nWhat "sideways" means is a but subtle with bends. Nudge moves along what a carpenter would \nrecognise as the mitre line, effectively half of the turn. **Be aware** than closely spaced\npoints nudged together can overlap on the inside of a bend. GPXmagic will not stop this.\n\nThe optional _Fade_ slider lets you gradually blend the Nudged section with the neighbouring track.\n')
					]))),
			_Utils_Tuple2(
			'bytheway',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Out and Back'),
						_Utils_Tuple2('apply', 'Make out and back'),
						_Utils_Tuple2('offset', 'Offset {0}'),
						_Utils_Tuple2('info', '\nAlso known as the **Bytheway special**, this tool makes it a snap to turn any route into\nan "Out and Back" by reversing direction at the end and returning to the start.\n\nIf you want to have separate tracks, use the _Offset_ slider to move the tracks to the left\nor right of the centre-line (the original track). If you prefer no offset, you risk head-on\ncollisions with other riders; your choice. Note that, as with _Nudge_, beware of closely-spaced\npoints and sharp bends.\n\nThe return leg is 1cm lower than the outbound leg to avoid surface flickering in RGT when you\nhave no offset.\n')
					]))),
			_Utils_Tuple2(
			'profilesmooth',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Profile smoothing'),
						_Utils_Tuple2('uphill', 'Uphill {0}%'),
						_Utils_Tuple2('downhill', 'Downhill {0}%'),
						_Utils_Tuple2('window', 'Points either side: {0}'),
						_Utils_Tuple2('bumpiness', 'Bumpiness: {0}%'),
						_Utils_Tuple2('apply', 'Apply limits to gradients'),
						_Utils_Tuple2('altitudes', 'Smooth by averaging altitudes'),
						_Utils_Tuple2('gradients', 'Smooth by averaging gradients'),
						_Utils_Tuple2('uniform', 'Use a uniform gradient across the range'),
						_Utils_Tuple2('uselimit', 'Limit gradients'),
						_Utils_Tuple2('usealts', 'Smooth altitudes'),
						_Utils_Tuple2('usegrad', 'Smooth gradients'),
						_Utils_Tuple2('useuniform', 'Apply uniform gradient'),
						_Utils_Tuple2('whole', 'Applies to whole track'),
						_Utils_Tuple2('part', 'Applies between markers'),
						_Utils_Tuple2('needpart', 'This method requires a range'),
						_Utils_Tuple2('info', '\nThere\'s no one way to achieve a smooth altitude profile. It depends whether you begin with a recorded\nor a planned ride; it depends whether you favour accuracy or smoothness; whether you want\nprecise elevations or moderate gradients.\n\nThis tool offers (currently) three methods to control altitude, each can work over a range or\nthe whole track.\n\n1. Limit ascents and descents to set maxima. This will simply remove any gradients outside\nthe limits you set. This will affect the altitude for the rest of the course.\n\n2. Replace the _altitude_ at each point with the average of a range of nearby points. Note that this\ndoes not factor in the distance between points; it\'s a straight numerical average. It\'s basically\nthe "altitude box smoother" in another tool.\n\n3. Replace the _gradient_ at each point with the numerical average gradient over nearby points.\nNote that changing the gradient at even one point affects all subsequent points. This produces\nquite pleasing results in many cases.\n')
					]))),
			_Utils_Tuple2(
			'simplify',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Simplify'),
						_Utils_Tuple2('search', 'Search'),
						_Utils_Tuple2('remove', 'Remove {0} points'),
						_Utils_Tuple2('flush', 'Clear Undo stack'),
						_Utils_Tuple2('info', '\nRecorded "IRL" rides contain a lot of GPS "noise". GPS is accurate only to a few metres,\nmore sampling will not change this. Some of the other tools can help to reduce this noise,\nbut it can be more effective to simply remove some (many) of the points that don\'t really\ncontribute much to the shape of the route. Those that can be discarded, should be.\n\nThis tool assigns to each point a value representing its contribution, defined by the area\nof the triangle it makes with its neighbours. Those with the smallest 20% contribution are\nidentified, then a check is made to avoid removing adjacent points.\n\nThis proves in practice rather effective at removing "noise" without detracting from the\nshape of the route.\n')
					]))),
			_Utils_Tuple2(
			'split/join',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Split & Join'),
						_Utils_Tuple2('max', 'Max length {0}'),
						_Utils_Tuple2('pens', 'Allow for RGT start and end pens'),
						_Utils_Tuple2('1CQF', 'Apply one-click quick fix to each section'),
						_Utils_Tuple2('split', 'Split into {0} files of {1}'),
						_Utils_Tuple2('orange', 'Split at Orange marker'),
						_Utils_Tuple2('between', 'Write section between markers'),
						_Utils_Tuple2('append', 'Append a GPX file'),
						_Utils_Tuple2('note', 'Files will be written to Downloads folder at two second intervals.'),
						_Utils_Tuple2('info', '\nGot an excessively long route? Why not ride in it sections?\n\nThe _Split_ option here divides the track into roughly equal sections to achieve a set maximum length.\n(There\'s a slight variance due to track point spacing.) Optionally, add the RGT start and end pens\nat the joins to make sure you do the whole original ride.\n\nConversely, if you have two GPX files that are in real-life nearby, you can append a second route\nto your current route. **Note** this will not attempt to match locations, directions or altitude.\n\nRemember, you can move any route to any place in the world with _Move & Scale_, so can can\nuse this to Everest your fave climbs.\n')
					]))),
			_Utils_Tuple2(
			'loop',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Start/Finish'),
						_Utils_Tuple2('make', 'Make the track into a loop'),
						_Utils_Tuple2('loop', 'The track is already a loop'),
						_Utils_Tuple2('biggap', 'Gap is too big'),
						_Utils_Tuple2('reverse', 'Reverse the track'),
						_Utils_Tuple2('move', 'Move Start/Finish to the Orange marker'),
						_Utils_Tuple2('pens', 'Add 60m at start, 140m at end'),
						_Utils_Tuple2('add', 'Add RGT pens'),
						_Utils_Tuple2('isloop', 'This track is a loop'),
						_Utils_Tuple2('isnear', 'This track is {0} away from a loop'),
						_Utils_Tuple2('info', '\nRGT will recognise a loop if the two ends are sufficiently close. But it won\'t\nmake it smooth for you.\n\nHere\'s a few options:\n\n1. Add a spline to join the start and finish, completing a loop\n2. Move the Start/Finish to somewhere else on the loop\n3. If it\'s not a loop, add 60m before the start and 140m after the end for the RGT rider pens.\n')
					]))),
			_Utils_Tuple2(
			'straight',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Straightener'),
						_Utils_Tuple2('straight', 'Straighten between markers'),
						_Utils_Tuple2('altitudes', 'Preserve altitudes'),
						_Utils_Tuple2('range', 'This tool requires a range.'),
						_Utils_Tuple2('info', '\nSometimes you just want a straight to be straight and it\'s tedious to get rid of\nall the wriggles. Sure, you could delete some of the points, but you might want to\nkeep some altitude changes.\n\nStraightener is simple and single-minded. It takes all the points in the range and lines\nthem up. It will either retain their altitudes or impose a constant gradient. Note that\nkeeping the altitudes and squishing the points up increases gradients.\n')
					]))),
			_Utils_Tuple2(
			'strava',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Strava'),
						_Utils_Tuple2('segmenttip', 'Paste in a segment number or URL'),
						_Utils_Tuple2('segmentid', 'Segment ID'),
						_Utils_Tuple2('altitude', 'Match start altitude'),
						_Utils_Tuple2('altitudeHelp', 'Adjust segment elevations to match the route'),
						_Utils_Tuple2('routetip', 'Paste in a route number or URL'),
						_Utils_Tuple2('routeid', 'Route or Activity ID'),
						_Utils_Tuple2('preview', 'Preview'),
						_Utils_Tuple2('paste', 'Paste'),
						_Utils_Tuple2('fetch', 'Fetch info'),
						_Utils_Tuple2('badsegment', 'This segment is not near the route'),
						_Utils_Tuple2('clear', 'Clear'),
						_Utils_Tuple2('waiting', 'Waiting for segment data'),
						_Utils_Tuple2('none', 'Segment data not loaded'),
						_Utils_Tuple2('loaded', 'In preview'),
						_Utils_Tuple2('view', 'View on Strava'),
						_Utils_Tuple2('route', 'Fetch route'),
						_Utils_Tuple2('activity', 'Fetch activity'),
						_Utils_Tuple2('about', 'To load a segment from Strava, you need a route\nthat contains the segment geographicaly.'),
						_Utils_Tuple2('connect', 'Please connect to Strava'),
						_Utils_Tuple2('info', '\nThe Strava tool has two functions:\n\n1. Import a route direct from Strava for smoothing\n\n2. Place a Strava segment into your current route. Some people like the "accuracy" of segments.\n\nYou must first authenticate with Strava using the button on the top bar; do that before loading a GPX.\n')
					]))),
			_Utils_Tuple2(
			'info',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Information'),
						_Utils_Tuple2('track', 'Track'),
						_Utils_Tuple2('point', 'Point'),
						_Utils_Tuple2('points', 'Points'),
						_Utils_Tuple2('memory', 'Memory'),
						_Utils_Tuple2('length', 'Length'),
						_Utils_Tuple2('ascent', 'Ascent'),
						_Utils_Tuple2('descent', 'Descent'),
						_Utils_Tuple2('climbing', 'Climbing'),
						_Utils_Tuple2('descending', 'Descending'),
						_Utils_Tuple2('duration', 'Duration'),
						_Utils_Tuple2('steepest', 'Steepest'),
						_Utils_Tuple2('number', 'Number'),
						_Utils_Tuple2('distance', 'Distance'),
						_Utils_Tuple2('longitude', 'Longitude'),
						_Utils_Tuple2('latitude', 'Latitude'),
						_Utils_Tuple2('altitude', 'Altitude'),
						_Utils_Tuple2('time', 'Time'),
						_Utils_Tuple2('bearing', 'Bearing'),
						_Utils_Tuple2('gradient', 'Gradient'),
						_Utils_Tuple2('none', 'Not available'),
						_Utils_Tuple2('limit', 'Heap limit'),
						_Utils_Tuple2('size', 'Heap size'),
						_Utils_Tuple2('heap', 'Used heap'),
						_Utils_Tuple2('streetview', 'Google Street View here'),
						_Utils_Tuple2('notrack', 'Information will show here when a track is loaded.'),
						_Utils_Tuple2('info', '\nView information about the current point, the whole track, and memory usage.\n')
					]))),
			_Utils_Tuple2(
			'landuse',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Land use'),
						_Utils_Tuple2('notrack', 'No track loaded yet'),
						_Utils_Tuple2('waiting', 'Waiting for land use data'),
						_Utils_Tuple2('altitude', 'Waiting for altitude data'),
						_Utils_Tuple2('success', 'Land use data acquired'),
						_Utils_Tuple2('info', '\nDisplays the colour legend for land use data, and a list of named places.\n')
					]))),
			_Utils_Tuple2(
			'smart',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Smart smoother'),
						_Utils_Tuple2('viewminimum', 'Minimum radius {0}'),
						_Utils_Tuple2('viewtransition', 'Meters of turn-in {0}'),
						_Utils_Tuple2('viewgradient', 'Maximum gradient {0}'),
						_Utils_Tuple2('viewblend', 'Blend {0}'),
						_Utils_Tuple2('Smooth', 'Smooth'),
						_Utils_Tuple2('info', '\nSmart smoother applies three constraints to the track:\n\n1. A minimum turning radius - this applies to all turns but is most noticeable on hairpins which\nwill become circular arcs (rather like _Radiused Bends_)\n\n2. How quickly you wish to enter and leave bends, because in real life you don\'t just\njerk on the handlebars, it takes time to lean into a bend. The result is approximately\na "Clothoid" or "Euler spiral".\n\n3. Gradients, up and down. Yes, we already have _Limit Gradients_ but you get this for free.\n\nOn a sequence of hairpins, you need to find an acceptable combination of minimum radius and\nlead-in to get the horizontal separation about right.\n\nOn a long track, the numerical technique used means the smoothed track can increasingly\ndeviate from the original track; you may prefer to work in sections.\n\nIt\'s also _really_ good at removing noise from IRL rides.\n'),
						_Utils_Tuple2('radius', 'Bends with a radius smaller than this will be replaced by a circular arc.'),
						_Utils_Tuple2('transition', 'The length of track it takes to lean into a bend, or get back on the straight.'),
						_Utils_Tuple2('gradient', 'The maximum steepness of any ascent or descent.'),
						_Utils_Tuple2('blend', 'Varies the emphasis between outward and backwards lines.')
					]))),
			_Utils_Tuple2(
			'segments',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('label', 'Named segments'),
						_Utils_Tuple2('info', 'Name sections of track. I suspect there\'ll be a use for this soon.'),
						_Utils_Tuple2('name', 'Name'),
						_Utils_Tuple2('start', 'Start'),
						_Utils_Tuple2('end', 'Finish'),
						_Utils_Tuple2('select', 'Please click on a segment name for details'),
						_Utils_Tuple2('distance', 'Length'),
						_Utils_Tuple2('ascent', 'Ascent'),
						_Utils_Tuple2('descent', 'Descent'),
						_Utils_Tuple2('steepest', 'Steepest'),
						_Utils_Tuple2('show', 'Select this section with markers'),
						_Utils_Tuple2('update', 'Update with current marker positions'),
						_Utils_Tuple2('delete', 'Delete this segment (no Undo!)'),
						_Utils_Tuple2('create', 'Create from markers'),
						_Utils_Tuple2('landuse', 'Use nearby named places'),
						_Utils_Tuple2('nolanduse', 'Waiting for Land Use data'),
						_Utils_Tuple2('closer', 'Prefer closer places'),
						_Utils_Tuple2('proximity', 'Within {0} metres'),
						_Utils_Tuple2('landusetip', 'If Land Use data are available, this attempts to\nderive segments from named features near the route.\n\nAs you increase the threshold, features further away are considered. You choose whether to \nstart from farther-away points which make longer segments, or prefer closer points with \nshorter segments.\n\nPre-existing manual (or Strava) segments have precedence over auto-segments.'),
						_Utils_Tuple2('newname', 'TYPE NAME HERE'),
						_Utils_Tuple2('warning', '\nNamed segments should be at least 110m from the start, 190m from the end, and at least 50m apart.\n\nAt least one of the segments needs changing!'),
						_Utils_Tuple2('duplicate', '\nPlease ensure that segments have distinct names.\n\nRGT will merge contiguous segments with the same name')
					])))
		]));
var $cuducos$elm_format_number$FormatNumber$Locales$Exact = function (a) {
	return {$: 'Exact', a: a};
};
var $cuducos$elm_format_number$FormatNumber$Locales$Min = function (a) {
	return {$: 'Min', a: a};
};
var $cuducos$elm_format_number$FormatNumber$Locales$Western = {$: 'Western'};
var $cuducos$elm_format_number$FormatNumber$Locales$base = {
	decimalSeparator: '.',
	decimals: $cuducos$elm_format_number$FormatNumber$Locales$Min(0),
	negativePrefix: '−',
	negativeSuffix: '',
	positivePrefix: '',
	positiveSuffix: '',
	system: $cuducos$elm_format_number$FormatNumber$Locales$Western,
	thousandSeparator: '',
	zeroPrefix: '',
	zeroSuffix: ''
};
var $cuducos$elm_format_number$FormatNumber$Locales$usLocale = _Utils_update(
	$cuducos$elm_format_number$FormatNumber$Locales$base,
	{
		decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(2),
		thousandSeparator: ','
	});
var $author$project$Locations$UK$location = {
	country: A3($supermario$elm_countries$Countries$Country, 'United Kingdom of Great Britain and Northern Ireland', 'GB', '🇬🇧'),
	locale: _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{negativePrefix: '-', thousandSeparator: ','}),
	textDictionary: $author$project$Locations$UK$textDictionary
};
var $author$project$Tools$I18N$defaultLocation = $author$project$Locations$UK$location;
var $author$project$PaneContext$Pane2 = {$: 'Pane2'};
var $author$project$PaneContext$Pane3 = {$: 'Pane3'};
var $author$project$PaneContext$Pane4 = {$: 'Pane4'};
var $author$project$PaneContext$PanesOne = {$: 'PanesOne'};
var $author$project$PaneContext$SliderIdle = {$: 'SliderIdle'};
var $author$project$MapPortController$defaultMapState = {lastClickLat: 0.0, lastClickLon: 0.0};
var $author$project$PaneContext$Pane1 = {$: 'Pane1'};
var $author$project$ViewMode$ViewInfo = {$: 'ViewInfo'};
var $author$project$PaneLayoutManager$defaultPaneContext = {activeView: $author$project$ViewMode$ViewInfo, firstPersonContext: $elm$core$Maybe$Nothing, graphContext: $elm$core$Maybe$Nothing, mapContext: $elm$core$Maybe$Nothing, paneId: $author$project$PaneContext$Pane1, planContext: $elm$core$Maybe$Nothing, profileContext: $elm$core$Maybe$Nothing, thirdPersonContext: $elm$core$Maybe$Nothing};
var $author$project$PaneLayoutManager$defaultOptions = {
	mapState: $author$project$MapPortController$defaultMapState,
	pane1: $author$project$PaneLayoutManager$defaultPaneContext,
	pane2: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneContext$Pane2}),
	pane3: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneContext$Pane3}),
	pane4: _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{paneId: $author$project$PaneContext$Pane4}),
	paneLayout: $author$project$PaneContext$PanesOne,
	popupVisible: false,
	scene3d: _List_Nil,
	sliderState: $author$project$PaneContext$SliderIdle,
	viewBeforeRouteViewForced: $elm$core$Maybe$Nothing
};
var $author$project$SvgPathExtractor$defaultOptions = {ipInfo: $elm$core$Maybe$Nothing, svgFilename: 'SVG'};
var $author$project$Tools$I18N$defaultOptions = {editorInner: $elm$core$Maybe$Nothing, editorOuter: $elm$core$Maybe$Nothing, editorValue: $elm$core$Maybe$Nothing};
var $author$project$Tools$BendSmootherOptions$SmoothBend = {$: 'SmoothBend'};
var $author$project$Tools$BendSmoother$defaultOptions = {bendTrackPointSpacing: 5.0, mode: $author$project$Tools$BendSmootherOptions$SmoothBend, segments: 1, smoothedBend: $elm$core$Maybe$Nothing};
var $author$project$Tools$BezierOptions$Approximated = {$: 'Approximated'};
var $author$project$Tools$BezierOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$BezierSplines$defaultOptions = {bezierStyle: $author$project$Tools$BezierOptions$Approximated, bezierTension: 0.5, bezierTolerance: 5.0, extent: $author$project$Tools$BezierOptions$ExtentIsRange};
var $author$project$Tools$CentroidAverage$defaultOptions = {applyToAltitude: true, applyToPosition: true, weighting: 1.0};
var $author$project$Tools$CurveFormerOptions$Holistic = {$: 'Holistic'};
var $ianmackenzie$elm_units$Quantity$Quantity = function (a) {
	return {$: 'Quantity', a: a};
};
var $ianmackenzie$elm_units$Length$meters = function (numMeters) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numMeters);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Vector2d = function (a) {
	return {$: 'Vector2d', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$zero = $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
	{x: 0, y: 0});
var $author$project$Tools$CurveFormer$defaultOptions = {
	dragging: $elm$core$Maybe$Nothing,
	fixedAttachmentPoints: $elm$core$Maybe$Nothing,
	lastVector: $ianmackenzie$elm_geometry$Vector2d$zero,
	newTrackPoints: _List_Nil,
	pointsAreContiguous: false,
	pointsWithinCircle: $elm$core$Dict$empty,
	pointsWithinDisc: $elm$core$Dict$empty,
	pullRadius: $ianmackenzie$elm_units$Length$meters(15.0),
	pushRadius: $ianmackenzie$elm_units$Length$meters(10.0),
	referencePoint: $elm$core$Maybe$Nothing,
	smoothGradient: $author$project$Tools$CurveFormerOptions$Holistic,
	spacing: $ianmackenzie$elm_units$Length$meters(5.0),
	transitionRadius: $ianmackenzie$elm_units$Length$meters(20.0),
	usePullRadius: false,
	vector: $ianmackenzie$elm_geometry$Vector2d$zero
};
var $author$project$Tools$DeletePoints$defaultOptions = {pointsToBeDeleted: _List_Nil, singlePoint: true};
var $author$project$Tools$DirectionChanges$DirectionChangeAbrupt = {$: 'DirectionChangeAbrupt'};
var $author$project$Tools$DirectionChanges$ResultNavigation = {$: 'ResultNavigation'};
var $elm$core$Basics$pi = _Basics_pi;
var $ianmackenzie$elm_units$Angle$radians = function (numRadians) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numRadians);
};
var $ianmackenzie$elm_units$Angle$degrees = function (numDegrees) {
	return $ianmackenzie$elm_units$Angle$radians($elm$core$Basics$pi * (numDegrees / 180));
};
var $author$project$Tools$DirectionChanges$defaultOptions = {
	bendBreaches: _List_Nil,
	currentBendBreach: 0,
	currentPointBreach: 0,
	mode: $author$project$Tools$DirectionChanges$DirectionChangeAbrupt,
	radius: $ianmackenzie$elm_units$Length$meters(10.0),
	resultMode: $author$project$Tools$DirectionChanges$ResultNavigation,
	singlePointBreaches: _List_Nil,
	threshold: $ianmackenzie$elm_units$Angle$degrees(120)
};
var $author$project$LandUseDataTypes$LandUseHidden = {$: 'LandUseHidden'};
var $author$project$Tools$DisplaySettingsOptions$PastelCurtain = {$: 'PastelCurtain'};
var $author$project$Tools$DisplaySettings$defaultOptions = {centreLine: false, curtainStyle: $author$project$Tools$DisplaySettingsOptions$PastelCurtain, groundPlane: true, landUse: $author$project$LandUseDataTypes$LandUseHidden, placeNames: false, roadSurface: true, showConstraintsAtLevel: $elm$core$Maybe$Nothing, terrainFineness: 0.0};
var $author$project$Tools$Essentials$defaultOptions = {orange: 0, purple: $elm$core$Maybe$Nothing};
var $author$project$Tools$Flythrough$defaultOptions = {flythrough: $elm$core$Maybe$Nothing, flythroughSpeed: 1.0, savedCurrentPosition: 0};
var $author$project$Tools$GradientProblems$AbruptChange = {$: 'AbruptChange'};
var $author$project$Tools$GradientProblems$ResultNavigation = {$: 'ResultNavigation'};
var $author$project$Tools$GradientProblems$defaultOptions = {breaches: _List_Nil, currentBreach: 0, mode: $author$project$Tools$GradientProblems$AbruptChange, resultMode: $author$project$Tools$GradientProblems$ResultNavigation, threshold: 10.0};
var $ianmackenzie$elm_geometry$Geometry$Types$Direction2d = function (a) {
	return {$: 'Direction2d', a: a};
};
var $ianmackenzie$elm_geometry$Direction2d$positiveX = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 1, y: 0});
var $ianmackenzie$elm_units$Quantity$zero = $ianmackenzie$elm_units$Quantity$Quantity(0);
var $author$project$Tools$Graph$emptyGraph = {
	edges: $elm$core$Dict$empty,
	nodes: $elm$core$Dict$empty,
	referenceLonLat: {
		altitude: $ianmackenzie$elm_units$Quantity$zero,
		latitude: $ianmackenzie$elm_units$Angle$degrees(0),
		longitude: $ianmackenzie$elm_geometry$Direction2d$positiveX,
		timestamp: $elm$core$Maybe$Nothing
	},
	userRoute: _List_Nil
};
var $ianmackenzie$elm_geometry$Geometry$Types$Point3d = function (a) {
	return {$: 'Point3d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$origin = $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
	{x: 0, y: 0, z: 0});
var $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d = function (a) {
	return {$: 'BoundingBox3d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$xCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.x);
};
var $ianmackenzie$elm_geometry$Point3d$yCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.y);
};
var $ianmackenzie$elm_geometry$Point3d$zCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.z);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$singleton = function (point) {
	return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
		{
			maxX: $ianmackenzie$elm_geometry$Point3d$xCoordinate(point),
			maxY: $ianmackenzie$elm_geometry$Point3d$yCoordinate(point),
			maxZ: $ianmackenzie$elm_geometry$Point3d$zCoordinate(point),
			minX: $ianmackenzie$elm_geometry$Point3d$xCoordinate(point),
			minY: $ianmackenzie$elm_geometry$Point3d$yCoordinate(point),
			minZ: $ianmackenzie$elm_geometry$Point3d$zCoordinate(point)
		});
};
var $author$project$Tools$Graph$defaultOptions = {
	analyzed: false,
	boundingBox: $ianmackenzie$elm_geometry$BoundingBox3d$singleton($ianmackenzie$elm_geometry$Point3d$origin),
	centreLineOffset: $ianmackenzie$elm_units$Length$meters(0.0),
	clustersForPreview: _List_Nil,
	editingTrack: 0,
	graph: $author$project$Tools$Graph$emptyGraph,
	graphUndos: _List_Nil,
	matchingTolerance: $ianmackenzie$elm_units$Length$meters(1.5),
	minimumRadiusAtPlaces: $ianmackenzie$elm_units$Length$meters(3.0),
	originalTrack: $elm$core$Maybe$Nothing,
	perpsForPreview: _List_Nil,
	selectedTraversal: 0,
	suggestedNewGraph: $elm$core$Maybe$Nothing,
	suggestedNewTree: $elm$core$Maybe$Nothing,
	undoGraph: $elm$core$Maybe$Nothing,
	undoOriginalTrack: $elm$core$Maybe$Nothing
};
var $author$project$Tools$InterpolateOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$Interpolate$defaultOptions = {
	extent: $author$project$Tools$InterpolateOptions$ExtentIsRange,
	minimumSpacing: $ianmackenzie$elm_units$Length$meters(10.0)
};
var $author$project$Tools$Intersections$ResultNavigation = {$: 'ResultNavigation'};
var $author$project$Tools$Intersections$defaultOptions = {current: 0, features: _List_Nil, resultMode: $author$project$Tools$Intersections$ResultNavigation};
var $author$project$Tools$LandUse$Legend = {$: 'Legend'};
var $author$project$Tools$LandUse$defaultOptions = {mode: $author$project$Tools$LandUse$Legend};
var $author$project$Tools$MoveAndStretchOptions$Translate = {$: 'Translate'};
var $author$project$Tools$MoveAndStretch$defaultOptions = {dragging: $elm$core$Maybe$Nothing, heightSliderSetting: $ianmackenzie$elm_units$Quantity$zero, lastVector: $ianmackenzie$elm_geometry$Vector2d$zero, mode: $author$project$Tools$MoveAndStretchOptions$Translate, preview: _List_Nil, vector: $ianmackenzie$elm_geometry$Vector2d$zero};
var $ianmackenzie$elm_units$Length$kilometers = function (numKilometers) {
	return $ianmackenzie$elm_units$Length$meters(1000 * numKilometers);
};
var $author$project$Tools$MoveScaleRotate$defaultOptions = {
	desiredTrackLength: $ianmackenzie$elm_units$Length$kilometers(10.0),
	rotateAngle: $ianmackenzie$elm_units$Angle$degrees(0)
};
var $author$project$Tools$NamedSegment$defaultOptions = {landUsePreferCloser: false, landUseProximity: $elm$core$Maybe$Nothing, namedSegments: _List_Nil, selectedSegment: $elm$core$Maybe$Nothing};
var $author$project$Tools$Nudge$defaultOptions = {
	cosineEasing: false,
	easingSpacing: $ianmackenzie$elm_units$Length$meters(10),
	fadeExtent: $ianmackenzie$elm_units$Quantity$zero,
	horizontal: $ianmackenzie$elm_units$Quantity$zero,
	vertical: $ianmackenzie$elm_units$Quantity$zero
};
var $author$project$Tools$OutAndBack$defaultOptions = {offset: 0.0};
var $author$project$Tools$ProfileSmoothOptions$ExtentIsRange = {$: 'ExtentIsRange'};
var $author$project$Tools$ProfileSmoothOptions$MethodLimit = {$: 'MethodLimit'};
var $author$project$Tools$ProfileSmooth$defaultOptions = {bumpiness: 0.0, extent: $author$project$Tools$ProfileSmoothOptions$ExtentIsRange, limitRedistributes: false, maximumAscent: 15.0, maximumDescent: 15.0, previewData: $elm$core$Maybe$Nothing, smoothMethod: $author$project$Tools$ProfileSmoothOptions$MethodLimit, windowSize: 2};
var $author$project$Tools$Simplify$defaultOptions = {pointsToRemove: $elm$core$Dict$empty};
var $author$project$Tools$SmartSmoother$defaultOptions = {
	blend: 0.5,
	maxGradient: 20,
	minRadius: $ianmackenzie$elm_units$Length$meters(4),
	minTransition: $ianmackenzie$elm_units$Length$meters(4.5),
	newPoints: _List_Nil
};
var $author$project$Tools$SplitAndJoin$defaultOptions = {
	addBuffers: false,
	applyAutofix: false,
	splitLimit: $ianmackenzie$elm_units$Length$kilometers(100.0)
};
var $author$project$Tools$StartFinishTypes$NotALoop = function (a) {
	return {$: 'NotALoop', a: a};
};
var $author$project$Tools$StartFinish$defaultOptions = {
	loopiness: $author$project$Tools$StartFinishTypes$NotALoop($ianmackenzie$elm_units$Quantity$zero),
	pointsToClose: _List_Nil
};
var $author$project$Tools$Straightener$defaultOptions = {preserveAltitude: true};
var $author$project$Tools$StravaTypes$SegmentNone = {$: 'SegmentNone'};
var $author$project$Tools$StravaTypes$StravaActivityNone = {$: 'StravaActivityNone'};
var $author$project$Tools$StravaOptions$StravaDisconnected = {$: 'StravaDisconnected'};
var $author$project$Tools$StravaTypes$StravaRouteNone = {$: 'StravaRouteNone'};
var $author$project$Tools$StravaTools$defaultOptions = {activity: $author$project$Tools$StravaTypes$StravaActivityNone, adjustSegmentAltitude: true, externalRouteId: '', externalSegment: $author$project$Tools$StravaTypes$SegmentNone, externalSegmentId: '', lastHttpError: $elm$core$Maybe$Nothing, preview: _List_Nil, stravaRoute: $author$project$Tools$StravaTypes$StravaRouteNone, stravaStatus: $author$project$Tools$StravaOptions$StravaDisconnected, stravaStreams: $elm$core$Maybe$Nothing};
var $author$project$Tools$TimestampOptions$Actual = {$: 'Actual'};
var $author$project$Tools$TimestampOptions$ExtentOrangeToEnd = {$: 'ExtentOrangeToEnd'};
var $ianmackenzie$elm_units$Mass$kilograms = function (numKilograms) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numKilograms);
};
var $ianmackenzie$elm_units$Constants$second = 1;
var $ianmackenzie$elm_units$Constants$minute = 60 * $ianmackenzie$elm_units$Constants$second;
var $ianmackenzie$elm_units$Constants$hour = 60 * $ianmackenzie$elm_units$Constants$minute;
var $ianmackenzie$elm_units$Speed$metersPerSecond = function (numMetersPerSecond) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numMetersPerSecond);
};
var $ianmackenzie$elm_units$Speed$kilometersPerHour = function (numKilometersPerHour) {
	return $ianmackenzie$elm_units$Speed$metersPerSecond((numKilometersPerHour * 1000) / $ianmackenzie$elm_units$Constants$hour);
};
var $ianmackenzie$elm_units$Power$watts = function (numWatts) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numWatts);
};
var $author$project$Tools$Timestamp$defaultOptions = {
	desiredStartMillis: 0,
	desiredTickIntervalMillis: 1000,
	endLockedToStart: true,
	estimatedDuration: $ianmackenzie$elm_units$Quantity$zero,
	extent: $author$project$Tools$TimestampOptions$ExtentOrangeToEnd,
	mass: $ianmackenzie$elm_units$Mass$kilograms(80),
	maxDownhill: $ianmackenzie$elm_units$Speed$kilometersPerHour(80),
	mode: $author$project$Tools$TimestampOptions$Actual,
	steadyPower: $ianmackenzie$elm_units$Power$watts(200)
};
var $author$project$Tools$TrackInfoBox$InfoForPoint = {$: 'InfoForPoint'};
var $author$project$Tools$TrackInfoBox$defaultOptions = {displayMode: $author$project$Tools$TrackInfoBox$InfoForPoint, memoryInfo: $elm$core$Maybe$Nothing};
var $author$project$ToolsController$Contracted = {$: 'Contracted'};
var $author$project$ToolsController$DockUpperRight = {$: 'DockUpperRight'};
var $author$project$ToolsController$TcBends = {$: 'TcBends'};
var $author$project$ToolsController$ToolBendSmoother = {$: 'ToolBendSmoother'};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze = A3($mdgriffith$elm_ui$Element$rgb255, 223, 249, 251);
var $smucode$elm_flat_colors$FlatColors$AussiePalette$deepKoamaru = A3($mdgriffith$elm_ui$Element$rgb255, 48, 51, 107);
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$ViewPureStyles$contrastingColour = function (col) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(col);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var grey = ((0.299 * red) + (0.587 * green)) + (0.114 * blue);
	return (grey > 0.5) ? $smucode$elm_flat_colors$FlatColors$AussiePalette$deepKoamaru : $smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze;
};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue = A3($mdgriffith$elm_ui$Element$rgb255, 44, 62, 80);
var $author$project$Tools$BendSmoother$toolId = 'arcs';
var $author$project$ToolsController$bendSmootherTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcBends]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue),
	toolId: $author$project$Tools$BendSmoother$toolId,
	toolType: $author$project$ToolsController$ToolBendSmoother,
	video: $elm$core$Maybe$Just('https://youtu.be/Qahop5xkuP0')
};
var $author$project$ToolsController$TcGradients = {$: 'TcGradients'};
var $author$project$ToolsController$TcWholeTrack = {$: 'TcWholeTrack'};
var $author$project$ToolsController$ToolBezierSplines = {$: 'ToolBezierSplines'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis = A3($mdgriffith$elm_ui$Element$rgb255, 39, 174, 96);
var $author$project$Tools$BezierSplines$toolId = 'splines';
var $author$project$ToolsController$bezierSplinesTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcWholeTrack, $author$project$ToolsController$TcBends, $author$project$ToolsController$TcGradients]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis),
	toolId: $author$project$Tools$BezierSplines$toolId,
	toolType: $author$project$ToolsController$ToolBezierSplines,
	video: $elm$core$Maybe$Just('https://youtu.be/UuDfZYagvIU')
};
var $author$project$ToolsController$ToolCentroidAverage = {$: 'ToolCentroidAverage'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole = A3($mdgriffith$elm_ui$Element$rgb255, 41, 128, 185);
var $author$project$Tools$CentroidAverage$toolId = 'centroid';
var $author$project$ToolsController$centroidAverageTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcGradients, $author$project$ToolsController$TcBends, $author$project$ToolsController$TcWholeTrack]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole),
	toolId: $author$project$Tools$CentroidAverage$toolId,
	toolType: $author$project$ToolsController$ToolCentroidAverage,
	video: $elm$core$Maybe$Just('https://youtu.be/1C8clUhpQ20')
};
var $author$project$ToolsController$ToolCurveFormer = {$: 'ToolCurveFormer'};
var $author$project$Tools$CurveFormer$toolId = 'radius';
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wisteria = A3($mdgriffith$elm_ui$Element$rgb255, 142, 68, 173);
var $author$project$ToolsController$curveFormerTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcBends]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wisteria,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wisteria),
	toolId: $author$project$Tools$CurveFormer$toolId,
	toolType: $author$project$ToolsController$ToolCurveFormer,
	video: $elm$core$Maybe$Just('https://youtu.be/J81QZ6P6nV4')
};
var $author$project$ToolsController$TcMisc = {$: 'TcMisc'};
var $author$project$ToolsController$ToolDeletePoints = {$: 'ToolDeletePoints'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea = A3($mdgriffith$elm_ui$Element$rgb255, 22, 160, 133);
var $author$project$Tools$DeletePoints$toolId = 'delete';
var $author$project$ToolsController$deleteTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea),
	toolId: $author$project$Tools$DeletePoints$toolId,
	toolType: $author$project$ToolsController$ToolDeletePoints,
	video: $elm$core$Maybe$Just('https://youtu.be/3qobNm46TQw')
};
var $author$project$ToolsController$TcInformation = {$: 'TcInformation'};
var $author$project$ToolsController$ToolAbruptDirectionChanges = {$: 'ToolAbruptDirectionChanges'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst = A3($mdgriffith$elm_ui$Element$rgb255, 155, 89, 182);
var $author$project$Tools$DirectionChanges$toolId = 'bends';
var $author$project$ToolsController$directionChangeTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
	toolId: $author$project$Tools$DirectionChanges$toolId,
	toolType: $author$project$ToolsController$ToolAbruptDirectionChanges,
	video: $elm$core$Maybe$Just('https://youtu.be/IzjoHTQN0Lk')
};
var $author$project$ToolsController$ToolDisplaySettings = {$: 'ToolDisplaySettings'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald = A3($mdgriffith$elm_ui$Element$rgb255, 46, 204, 113);
var $author$project$Tools$DisplaySettings$toolId = 'display';
var $author$project$ToolsController$displaySettingsTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald),
	toolId: $author$project$Tools$DisplaySettings$toolId,
	toolType: $author$project$ToolsController$ToolDisplaySettings,
	video: $elm$core$Maybe$Just('https://youtu.be/SgiVpQYxG8I')
};
var $author$project$ToolsController$AlwaysOpen = {$: 'AlwaysOpen'};
var $author$project$ToolsController$ToolEssentials = {$: 'ToolEssentials'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange = A3($mdgriffith$elm_ui$Element$rgb255, 243, 156, 18);
var $author$project$Tools$Essentials$toolId = 'essentials';
var $author$project$ToolsController$essentialsTool = {
	categories: _List_Nil,
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$AlwaysOpen,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange),
	toolId: $author$project$Tools$Essentials$toolId,
	toolType: $author$project$ToolsController$ToolEssentials,
	video: $elm$core$Maybe$Just('https://youtu.be/SgiVpQYxG8I')
};
var $author$project$ToolsController$ToolFlythrough = {$: 'ToolFlythrough'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin = A3($mdgriffith$elm_ui$Element$rgb255, 211, 84, 0);
var $author$project$Tools$Flythrough$toolId = 'fly';
var $author$project$ToolsController$flythroughTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin),
	toolId: $author$project$Tools$Flythrough$toolId,
	toolType: $author$project$ToolsController$ToolFlythrough,
	video: $elm$core$Maybe$Just('https://youtu.be/w9M2zund_6s')
};
var $author$project$ToolsController$ToolGradientProblems = {$: 'ToolGradientProblems'};
var $author$project$Tools$GradientProblems$toolId = 'gradients';
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt = A3($mdgriffith$elm_ui$Element$rgb255, 52, 73, 94);
var $author$project$ToolsController$gradientChangeTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcGradients]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt),
	toolId: $author$project$Tools$GradientProblems$toolId,
	toolType: $author$project$ToolsController$ToolGradientProblems,
	video: $elm$core$Maybe$Just('https://youtu.be/IMn-MkxYFtc')
};
var $author$project$ToolsController$TcRoute = {$: 'TcRoute'};
var $author$project$ToolsController$ToolGraph = {$: 'ToolGraph'};
var $author$project$Tools$Graph$toolId = 'graph';
var $author$project$ToolsController$graphTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcRoute]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
	toolId: $author$project$Tools$Graph$toolId,
	toolType: $author$project$ToolsController$ToolGraph,
	video: $elm$core$Maybe$Just('https://youtu.be/90GZbpgZjnw')
};
var $author$project$ToolsController$ToolInterpolate = {$: 'ToolInterpolate'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds = A3($mdgriffith$elm_ui$Element$rgb255, 236, 240, 241);
var $author$project$Tools$Interpolate$toolId = 'insert';
var $author$project$ToolsController$interpolateTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds),
	toolId: $author$project$Tools$Interpolate$toolId,
	toolType: $author$project$ToolsController$ToolInterpolate,
	video: $elm$core$Maybe$Just('https://youtu.be/i5rALJ_42n0')
};
var $author$project$ToolsController$ToolIntersections = {$: 'ToolIntersections'};
var $author$project$Tools$Intersections$toolId = 'intersections';
var $author$project$ToolsController$intersectionsTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald),
	toolId: $author$project$Tools$Intersections$toolId,
	toolType: $author$project$ToolsController$ToolIntersections,
	video: $elm$core$Maybe$Just('https://youtu.be/iWI1ASujFR4')
};
var $author$project$ToolsController$ToolLandUse = {$: 'ToolLandUse'};
var $author$project$Tools$LandUse$toolId = 'landuse';
var $author$project$ToolsController$landUseTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt),
	toolId: $author$project$Tools$LandUse$toolId,
	toolType: $author$project$ToolsController$ToolLandUse,
	video: $elm$core$Maybe$Just('https://youtu.be/SgiVpQYxG8I')
};
var $author$project$ToolsController$ToolMoveAndStretch = {$: 'ToolMoveAndStretch'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver = A3($mdgriffith$elm_ui$Element$rgb255, 189, 195, 199);
var $author$project$Tools$MoveAndStretch$toolId = 'stretch';
var $author$project$ToolsController$moveAndStretchTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
	toolId: $author$project$Tools$MoveAndStretch$toolId,
	toolType: $author$project$ToolsController$ToolMoveAndStretch,
	video: $elm$core$Maybe$Just('https://youtu.be/gnDlQMxf8wk')
};
var $author$project$ToolsController$ToolMoveScaleRotate = {$: 'ToolMoveScaleRotate'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate = A3($mdgriffith$elm_ui$Element$rgb255, 192, 57, 43);
var $author$project$Tools$MoveScaleRotate$toolId = 'affine';
var $author$project$ToolsController$moveScaleRotateTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc, $author$project$ToolsController$TcWholeTrack]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate),
	toolId: $author$project$Tools$MoveScaleRotate$toolId,
	toolType: $author$project$ToolsController$ToolMoveScaleRotate,
	video: $elm$core$Maybe$Just('https://youtu.be/tWLm1vhASCQ')
};
var $author$project$ToolsController$ToolNamedSegments = {$: 'ToolNamedSegments'};
var $author$project$ViewPureStyles$rgtPurple = A3($mdgriffith$elm_ui$Element$rgb255, 63, 0, 73);
var $author$project$Tools$NamedSegment$toolId = 'segments';
var $author$project$ToolsController$namedSegmentTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $author$project$ViewPureStyles$rgtPurple,
	textColour: $author$project$ViewPureStyles$contrastingColour($author$project$ViewPureStyles$rgtPurple),
	toolId: $author$project$Tools$NamedSegment$toolId,
	toolType: $author$project$ToolsController$ToolNamedSegments,
	video: $elm$core$Maybe$Just('https://youtu.be/PaJeI8yahBI')
};
var $author$project$ToolsController$ToolNudge = {$: 'ToolNudge'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower = A3($mdgriffith$elm_ui$Element$rgb255, 241, 196, 15);
var $author$project$Tools$Nudge$toolId = 'nudge';
var $author$project$ToolsController$nudgeTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower),
	toolId: $author$project$Tools$Nudge$toolId,
	toolType: $author$project$ToolsController$ToolNudge,
	video: $elm$core$Maybe$Just('https://youtu.be/lZslQzyplPM')
};
var $author$project$ToolsController$ToolOutAndBack = {$: 'ToolOutAndBack'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot = A3($mdgriffith$elm_ui$Element$rgb255, 230, 126, 34);
var $author$project$Tools$OutAndBack$toolId = 'bytheway';
var $author$project$ToolsController$outAndBackTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcRoute]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot),
	toolId: $author$project$Tools$OutAndBack$toolId,
	toolType: $author$project$ToolsController$ToolOutAndBack,
	video: $elm$core$Maybe$Just('https://youtu.be/7gh5-r5uuOs')
};
var $author$project$ToolsController$ToolProfileSmooth = {$: 'ToolProfileSmooth'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete = A3($mdgriffith$elm_ui$Element$rgb255, 149, 165, 166);
var $author$project$Tools$ProfileSmooth$toolId = 'profilesmooth';
var $author$project$ToolsController$profileSmoothTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcGradients]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete),
	toolId: $author$project$Tools$ProfileSmooth$toolId,
	toolType: $author$project$ToolsController$ToolProfileSmooth,
	video: $elm$core$Maybe$Just('https://youtu.be/XJGYt8LfTvQ')
};
var $author$project$ToolsController$ToolSimplify = {$: 'ToolSimplify'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin = A3($mdgriffith$elm_ui$Element$rgb255, 231, 76, 60);
var $author$project$Tools$Simplify$toolId = 'simplify';
var $author$project$ToolsController$simplifyTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcWholeTrack]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin),
	toolId: $author$project$Tools$Simplify$toolId,
	toolType: $author$project$ToolsController$ToolSimplify,
	video: $elm$core$Maybe$Just('https://youtu.be/dmK9PIlH04c')
};
var $author$project$ToolsController$ToolSmartSmoother = {$: 'ToolSmartSmoother'};
var $author$project$Tools$SmartSmoother$toolId = 'smart';
var $author$project$ToolsController$smartSmootherTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcBends, $author$project$ToolsController$TcWholeTrack, $author$project$ToolsController$TcGradients]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower),
	toolId: $author$project$Tools$SmartSmoother$toolId,
	toolType: $author$project$ToolsController$ToolSmartSmoother,
	video: $elm$core$Maybe$Just('https://youtu.be/6cSTQgvcRuw')
};
var $author$project$ToolsController$ToolSplitAndJoin = {$: 'ToolSplitAndJoin'};
var $author$project$Tools$SplitAndJoin$toolId = 'split/join';
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise = A3($mdgriffith$elm_ui$Element$rgb255, 26, 188, 156);
var $author$project$ToolsController$splitAndJoinTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc, $author$project$ToolsController$TcWholeTrack]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise),
	toolId: $author$project$Tools$SplitAndJoin$toolId,
	toolType: $author$project$ToolsController$ToolSplitAndJoin,
	video: $elm$core$Maybe$Just('https://youtu.be/2dHqHWjyT7w')
};
var $author$project$ToolsController$ToolStartFinish = {$: 'ToolStartFinish'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos = A3($mdgriffith$elm_ui$Element$rgb255, 127, 140, 141);
var $author$project$Tools$StartFinish$toolId = 'loop';
var $author$project$ToolsController$startFinishTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos),
	toolId: $author$project$Tools$StartFinish$toolId,
	toolType: $author$project$ToolsController$ToolStartFinish,
	video: $elm$core$Maybe$Just('https://youtu.be/NPcFRKKfx0w')
};
var $author$project$ToolsController$ToolStraighten = {$: 'ToolStraighten'};
var $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver = A3($mdgriffith$elm_ui$Element$rgb255, 52, 152, 219);
var $author$project$Tools$Straightener$toolId = 'straight';
var $author$project$ToolsController$straightenTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
	toolId: $author$project$Tools$Straightener$toolId,
	toolType: $author$project$ToolsController$ToolStraighten,
	video: $elm$core$Maybe$Just('https://youtu.be/B_LX9BmuoxE')
};
var $author$project$ToolsController$ToolStrava = {$: 'ToolStrava'};
var $author$project$ColourPalette$stravaOrange = A3($mdgriffith$elm_ui$Element$rgb255, 252, 76, 2);
var $author$project$Tools$StravaTools$toolId = 'strava';
var $author$project$ToolsController$stravaTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $author$project$ColourPalette$stravaOrange,
	textColour: $author$project$ViewPureStyles$contrastingColour($author$project$ColourPalette$stravaOrange),
	toolId: $author$project$Tools$StravaTools$toolId,
	toolType: $author$project$ToolsController$ToolStrava,
	video: $elm$core$Maybe$Just('https://youtu.be/plG5rP0bbug')
};
var $author$project$ToolsController$ToolTimestamps = {$: 'ToolTimestamps'};
var $author$project$Tools$Timestamp$toolId = 'timestamps';
var $author$project$ToolsController$timestampTool = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald),
	toolId: $author$project$Tools$Timestamp$toolId,
	toolType: $author$project$ToolsController$ToolTimestamps,
	video: $elm$core$Maybe$Nothing
};
var $author$project$ToolsController$SettingsClosed = {$: 'SettingsClosed'};
var $author$project$ToolsController$ToolSettings = {$: 'ToolSettings'};
var $author$project$ToolsController$toolSettings = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcMisc]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$SettingsClosed,
	tabColour: $author$project$ViewPureStyles$rgtPurple,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue),
	toolId: 'tools',
	toolType: $author$project$ToolsController$ToolSettings,
	video: $elm$core$Maybe$Just('https://youtu.be/nQJtjDy_Qi4')
};
var $author$project$ToolsController$ToolTrackInfo = {$: 'ToolTrackInfo'};
var $author$project$Tools$TrackInfoBox$toolId = 'info';
var $author$project$ToolsController$trackInfoBox = {
	categories: _List_fromArray(
		[$author$project$ToolsController$TcInformation]),
	dock: $author$project$ToolsController$DockUpperRight,
	isPopupOpen: false,
	state: $author$project$ToolsController$Contracted,
	tabColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise,
	textColour: $author$project$ViewPureStyles$contrastingColour($smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise),
	toolId: $author$project$Tools$TrackInfoBox$toolId,
	toolType: $author$project$ToolsController$ToolTrackInfo,
	video: $elm$core$Maybe$Just('https://youtu.be/SgiVpQYxG8I')
};
var $author$project$ToolsController$defaultTools = _List_fromArray(
	[$author$project$ToolsController$toolSettings, $author$project$ToolsController$essentialsTool, $author$project$ToolsController$trackInfoBox, $author$project$ToolsController$displaySettingsTool, $author$project$ToolsController$directionChangeTool, $author$project$ToolsController$gradientChangeTool, $author$project$ToolsController$deleteTool, $author$project$ToolsController$bezierSplinesTool, $author$project$ToolsController$centroidAverageTool, $author$project$ToolsController$curveFormerTool, $author$project$ToolsController$bendSmootherTool, $author$project$ToolsController$smartSmootherTool, $author$project$ToolsController$nudgeTool, $author$project$ToolsController$outAndBackTool, $author$project$ToolsController$simplifyTool, $author$project$ToolsController$interpolateTool, $author$project$ToolsController$profileSmoothTool, $author$project$ToolsController$namedSegmentTool, $author$project$ToolsController$moveScaleRotateTool, $author$project$ToolsController$flythroughTool, $author$project$ToolsController$stravaTool, $author$project$ToolsController$moveAndStretchTool, $author$project$ToolsController$startFinishTool, $author$project$ToolsController$splitAndJoinTool, $author$project$ToolsController$intersectionsTool, $author$project$ToolsController$straightenTool, $author$project$ToolsController$graphTool, $author$project$ToolsController$landUseTool, $author$project$ToolsController$timestampTool]);
var $author$project$ToolsController$DockSettings = F3(
	function (dockPopupOpen, dockLabel, dockLabelColour) {
		return {dockLabel: dockLabel, dockLabelColour: dockLabelColour, dockPopupOpen: dockPopupOpen};
	});
var $author$project$ToolsController$defaultDockColour = $smucode$elm_flat_colors$FlatColors$FlatUIPalette$wetAsphalt;
var $author$project$ToolsController$dockList = _List_fromArray(
	[
		_Utils_Tuple2(
		'1',
		A3($author$project$ToolsController$DockSettings, false, 'Upper left', $author$project$ToolsController$defaultDockColour)),
		_Utils_Tuple2(
		'2',
		A3($author$project$ToolsController$DockSettings, false, 'Lower left', $author$project$ToolsController$defaultDockColour)),
		_Utils_Tuple2(
		'3',
		A3($author$project$ToolsController$DockSettings, false, 'Central', $author$project$ToolsController$defaultDockColour)),
		_Utils_Tuple2(
		'4',
		A3($author$project$ToolsController$DockSettings, false, 'Lower right', $author$project$ToolsController$defaultDockColour)),
		_Utils_Tuple2(
		'5',
		A3($author$project$ToolsController$DockSettings, false, 'Upper right', $author$project$ToolsController$defaultDockColour))
	]);
var $author$project$ToolsController$defaultOptions = {
	bendSmootherOptions: $author$project$Tools$BendSmoother$defaultOptions,
	bezierSplineOptions: $author$project$Tools$BezierSplines$defaultOptions,
	centroidAverageOptions: $author$project$Tools$CentroidAverage$defaultOptions,
	curveFormerOptions: $author$project$Tools$CurveFormer$defaultOptions,
	deleteOptions: $author$project$Tools$DeletePoints$defaultOptions,
	directionChangeOptions: $author$project$Tools$DirectionChanges$defaultOptions,
	displaySettings: $author$project$Tools$DisplaySettings$defaultOptions,
	docks: $elm$core$Dict$fromList($author$project$ToolsController$dockList),
	essentialOptions: $author$project$Tools$Essentials$defaultOptions,
	flythroughSettings: $author$project$Tools$Flythrough$defaultOptions,
	gradientProblemOptions: $author$project$Tools$GradientProblems$defaultOptions,
	graphOptions: $author$project$Tools$Graph$defaultOptions,
	imperial: false,
	infoOptions: $author$project$Tools$TrackInfoBox$defaultOptions,
	interpolateSettings: $author$project$Tools$Interpolate$defaultOptions,
	intersectionOptions: $author$project$Tools$Intersections$defaultOptions,
	landUseOptions: $author$project$Tools$LandUse$defaultOptions,
	moveAndStretchSettings: $author$project$Tools$MoveAndStretch$defaultOptions,
	moveScaleRotateSettings: $author$project$Tools$MoveScaleRotate$defaultOptions,
	namedSegmentOptions: $author$project$Tools$NamedSegment$defaultOptions,
	nudgeOptions: $author$project$Tools$Nudge$defaultOptions,
	outAndBackSettings: $author$project$Tools$OutAndBack$defaultOptions,
	profileSmoothSettings: $author$project$Tools$ProfileSmooth$defaultOptions,
	simplifySettings: $author$project$Tools$Simplify$defaultOptions,
	smartSmootherOptions: $author$project$Tools$SmartSmoother$defaultOptions,
	splitAndJoinOptions: $author$project$Tools$SplitAndJoin$defaultOptions,
	startFinishOptions: $author$project$Tools$StartFinish$defaultOptions,
	straightenOptions: $author$project$Tools$Straightener$defaultOptions,
	stravaSettings: $author$project$Tools$StravaTools$defaultOptions,
	timestampOptions: $author$project$Tools$Timestamp$defaultOptions,
	tools: $author$project$ToolsController$defaultTools
};
var $author$project$Tools$RGTOptions$defaults = {disableAdvancedSmoothing: false, disableElevationFixes: false, maxSlope: 20.0};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $author$project$LocalStorage$storageCommands = _Platform_outgoingPort('storageCommands', $elm$core$Basics$identity);
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$LocalStorage$fetchMemoryUsage = $author$project$LocalStorage$storageCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('memory'))
			])));
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $author$project$SplitPane$SplitPane$Draggable = function (a) {
	return {$: 'Draggable', a: a};
};
var $author$project$SplitPane$SplitPane$Percentage = function (a) {
	return {$: 'Percentage', a: a};
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $author$project$SplitPane$Bound$createBound = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($elm$core$Basics$min, a, b),
			A2($elm$core$Basics$max, a, b));
	});
var $author$project$SplitPane$Bound$boundTo = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	return A2(
		$elm$core$Basics$composeL,
		$elm$core$Basics$min(b),
		$elm$core$Basics$max(a));
};
var $author$project$SplitPane$Bound$putValue = F2(
	function (_v0, value) {
		var bound = _v0.b;
		return _Utils_Tuple2(
			A2($author$project$SplitPane$Bound$boundTo, bound, value),
			bound);
	});
var $author$project$SplitPane$Bound$createBounded = F2(
	function (value, bound) {
		return A2(
			$author$project$SplitPane$Bound$putValue,
			_Utils_Tuple2(value, bound),
			value);
	});
var $author$project$SplitPane$SplitPane$percentage = F2(
	function (x, bound) {
		var newBound = function () {
			if (bound.$ === 'Just') {
				var _v1 = bound.a;
				var lower = _v1.a;
				var upper = _v1.b;
				return A2($author$project$SplitPane$Bound$createBound, lower, upper);
			} else {
				return A2($author$project$SplitPane$Bound$createBound, 0.0, 1.0);
			}
		}();
		return $author$project$SplitPane$SplitPane$Percentage(
			A2($author$project$SplitPane$Bound$createBounded, x, newBound));
	});
var $author$project$SplitPane$SplitPane$init = function (o) {
	return $author$project$SplitPane$SplitPane$State(
		{
			dragState: $author$project$SplitPane$SplitPane$Draggable($elm$core$Maybe$Nothing),
			orientation: o,
			splitterPosition: A2($author$project$SplitPane$SplitPane$percentage, 0.5, $elm$core$Maybe$Nothing)
		});
};
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $ianmackenzie$elm_units$Pixels$pixels = function (numPixels) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numPixels);
};
var $author$project$SplitPane$SplitPane$Px = function (a) {
	return {$: 'Px', a: a};
};
var $author$project$SplitPane$SplitPane$px = F2(
	function (x, bound) {
		var newBound = function () {
			if (bound.$ === 'Just') {
				var _v1 = bound.a;
				var lower = _v1.a;
				var upper = _v1.b;
				return A2($author$project$SplitPane$Bound$createBound, lower, upper);
			} else {
				return A2($author$project$SplitPane$Bound$createBound, 0, 9999999999);
			}
		}();
		return $author$project$SplitPane$SplitPane$Px(
			A2($author$project$SplitPane$Bound$createBounded, x, newBound));
	});
var $author$project$LocalStorage$storageGetItem = function (key) {
	return $author$project$LocalStorage$storageCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('storage.get')),
					_Utils_Tuple2(
					'key',
					$elm$json$Json$Encode$string(key))
				])));
};
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Main$init = function (_v0) {
	return _Utils_Tuple2(
		{
			backgroundColour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver,
			contentArea: _Utils_Tuple2(
				$ianmackenzie$elm_units$Pixels$pixels(800),
				$ianmackenzie$elm_units$Pixels$pixels(500)),
			filename: $elm$core$Maybe$Nothing,
			flythroughRunning: false,
			infoText: $elm$core$Maybe$Nothing,
			ipInfo: $elm$core$Maybe$Nothing,
			isPopupOpen: false,
			languageEditor: $author$project$Tools$I18N$defaultOptions,
			languageEditorOpen: false,
			leftDockRightEdge: A2(
				$author$project$SplitPane$SplitPane$configureSplitter,
				A2(
					$author$project$SplitPane$SplitPane$px,
					200,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(20, 300))),
				$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
			loadOptionsMenuOpen: false,
			location: $author$project$Tools$I18N$defaultLocation,
			mapPointsDraggable: false,
			modalMessage: $elm$core$Maybe$Nothing,
			needsRendering: false,
			paneLayoutOptions: $author$project$PaneLayoutManager$defaultOptions,
			previews: $elm$core$Dict$empty,
			rgtOptions: $author$project$Tools$RGTOptions$defaults,
			rgtOptionsVisible: false,
			rightDockLeftEdge: A2(
				$author$project$SplitPane$SplitPane$configureSplitter,
				A2(
					$author$project$SplitPane$SplitPane$px,
					800 - 200,
					$elm$core$Maybe$Just(
						_Utils_Tuple2(600, 990))),
				$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
			svgFileOptions: $author$project$SvgPathExtractor$defaultOptions,
			time: $elm$time$Time$millisToPosix(0),
			toolOptions: $author$project$ToolsController$defaultOptions,
			track: $elm$core$Maybe$Nothing,
			welcomeDisplayed: false,
			windowSize: _Utils_Tuple2(1000, 800),
			zone: $elm$time$Time$utc
		},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Task$perform, $author$project$Main$AdjustTimeZone, $elm$time$Time$here),
					A2($elm$core$Task$attempt, $author$project$Main$GotWindowSize, $elm$browser$Browser$Dom$getViewport),
					$author$project$LocalStorage$storageGetItem('splits'),
					$author$project$LocalStorage$storageGetItem('tools'),
					$author$project$LocalStorage$storageGetItem('panes'),
					$author$project$LocalStorage$storageGetItem('measure'),
					$author$project$LocalStorage$storageGetItem('background'),
					$author$project$LocalStorage$storageGetItem('visuals'),
					$author$project$LocalStorage$storageGetItem('docks'),
					$author$project$LocalStorage$storageGetItem('location'),
					$author$project$LocalStorage$fetchMemoryUsage,
					$author$project$LocalStorage$storageGetItem('welcome')
				])));
};
var $author$project$Main$FlythroughTick = function (a) {
	return {$: 'FlythroughTick', a: a};
};
var $author$project$MapPortController$MapPortMessage = function (a) {
	return {$: 'MapPortMessage', a: a};
};
var $author$project$PaneLayoutManager$MapPortsMessage = function (a) {
	return {$: 'MapPortsMessage', a: a};
};
var $author$project$Main$OAuthCodeReceived = function (a) {
	return {$: 'OAuthCodeReceived', a: a};
};
var $author$project$Main$PaneMsg = function (a) {
	return {$: 'PaneMsg', a: a};
};
var $author$project$Main$Resize = F2(
	function (a, b) {
		return {$: 'Resize', a: a, b: b};
	});
var $author$project$Main$SplitLeftDockRightEdge = function (a) {
	return {$: 'SplitLeftDockRightEdge', a: a};
};
var $author$project$Main$SplitRightDockLeftEdge = function (a) {
	return {$: 'SplitRightDockLeftEdge', a: a};
};
var $author$project$Main$StorageMessage = function (a) {
	return {$: 'StorageMessage', a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 'Every', a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {processes: processes, taggers: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 'Nothing') {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.processes;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(_Utils_Tuple0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.taggers);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$MapPortController$mapResponses = _Platform_incomingPort('mapResponses', $elm$json$Json$Decode$value);
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Tools$StravaTools$oauthResponses = _Platform_incomingPort('oauthResponses', $elm$json$Json$Decode$value);
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var event = _v0.event;
		var key = _v0.key;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$LocalStorage$storageResponses = _Platform_incomingPort('storageResponses', $elm$json$Json$Decode$value);
var $author$project$SplitPane$SplitPane$Position = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $author$project$SplitPane$SplitPane$SplitterLeftAlone = function (a) {
	return {$: 'SplitterLeftAlone', a: a};
};
var $author$project$SplitPane$SplitPane$SplitterMove = function (a) {
	return {$: 'SplitterMove', a: a};
};
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mousemove');
var $elm$browser$Browser$Events$onMouseUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mouseup');
var $author$project$SplitPane$SplitPane$subscriptions = function (_v0) {
	var state = _v0.a;
	var _v1 = state.dragState;
	if (_v1.a.$ === 'Just') {
		return $elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					$elm$browser$Browser$Events$onMouseMove(
					A2(
						$elm$json$Json$Decode$map,
						$author$project$SplitPane$SplitPane$SplitterMove,
						A3(
							$elm$json$Json$Decode$map2,
							$author$project$SplitPane$SplitPane$Position,
							A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$int),
							A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$int)))),
					$elm$browser$Browser$Events$onMouseUp(
					A2(
						$elm$json$Json$Decode$map,
						$author$project$SplitPane$SplitPane$SplitterLeftAlone,
						A3(
							$elm$json$Json$Decode$map2,
							$author$project$SplitPane$SplitPane$Position,
							A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$int),
							A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$int))))
				]));
	} else {
		return $elm$core$Platform$Sub$none;
	}
};
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$MapPortController$mapResponses(
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $author$project$Main$PaneMsg, $author$project$PaneLayoutManager$MapPortsMessage),
					$author$project$MapPortController$MapPortMessage)),
				$author$project$Tools$StravaTools$oauthResponses($author$project$Main$OAuthCodeReceived),
				$author$project$LocalStorage$storageResponses($author$project$Main$StorageMessage),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitLeftDockRightEdge,
				$author$project$SplitPane$SplitPane$subscriptions(model.leftDockRightEdge)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$SplitRightDockLeftEdge,
				$author$project$SplitPane$SplitPane$subscriptions(model.rightDockLeftEdge)),
				$elm$browser$Browser$Events$onResize(
				F2(
					function (w, h) {
						return A2($author$project$Main$Resize, w, h);
					})),
				model.flythroughRunning ? A2($elm$time$Time$every, 100, $author$project$Main$FlythroughTick) : $elm$core$Platform$Sub$none
			]));
};
var $author$project$Main$GpxLoaded = function (a) {
	return {$: 'GpxLoaded', a: a};
};
var $author$project$Main$GpxSelected = function (a) {
	return {$: 'GpxSelected', a: a};
};
var $author$project$Main$I18NMsg = function (a) {
	return {$: 'I18NMsg', a: a};
};
var $author$project$Tools$NamedSegmentOptions$ManualSegment = {$: 'ManualSegment'};
var $author$project$Actions$MapRefresh = {$: 'MapRefresh'};
var $author$project$Main$OAuthTokenReceived = function (a) {
	return {$: 'OAuthTokenReceived', a: a};
};
var $author$project$Main$ProfilePaint = {$: 'ProfilePaint'};
var $author$project$Main$ReceivedIpDetails = function (a) {
	return {$: 'ReceivedIpDetails', a: a};
};
var $author$project$Main$ReceivedLandUseData = function (a) {
	return {$: 'ReceivedLandUseData', a: a};
};
var $author$project$Actions$StoreLocally = F2(
	function (a, b) {
		return {$: 'StoreLocally', a: a, b: b};
	});
var $author$project$Main$SvgMsg = function (a) {
	return {$: 'SvgMsg', a: a};
};
var $author$project$Main$ToolsMsg = function (a) {
	return {$: 'ToolsMsg', a: a};
};
var $author$project$Actions$TrackHasChanged = {$: 'TrackHasChanged'};
var $author$project$Actions$WithUndo = function (a) {
	return {$: 'WithUndo', a: a};
};
var $author$project$DomainModel$foldOverRouteRL = F3(
	function (foldFn, treeNode, accum) {
		if (treeNode.$ === 'Leaf') {
			var leaf = treeNode.a;
			return A2(foldFn, leaf, accum);
		} else {
			var node = treeNode.a;
			return A3(
				$author$project$DomainModel$foldOverRouteRL,
				foldFn,
				node.left,
				A3($author$project$DomainModel$foldOverRouteRL, foldFn, node.right, accum));
		}
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$DomainModel$skipCount = function (treeNode) {
	if (treeNode.$ === 'Leaf') {
		return 1;
	} else {
		var node = treeNode.a;
		return node.nodeContent.skipCount;
	}
};
var $author$project$DomainModel$gpxPointFromIndex = F2(
	function (index, treeNode) {
		gpxPointFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? info.sourceData.a : info.sourceData.b;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue gpxPointFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue gpxPointFromIndex;
				}
			}
		}
	});
var $author$project$DomainModel$getAllGPXPointsInNaturalOrder = function (treeNode) {
	var internalFoldFn = F2(
		function (road, accum) {
			return A2($elm$core$List$cons, road.sourceData.b, accum);
		});
	var endPoints = A3($author$project$DomainModel$foldOverRouteRL, internalFoldFn, treeNode, _List_Nil);
	return A2(
		$elm$core$List$cons,
		A2($author$project$DomainModel$gpxPointFromIndex, 0, treeNode),
		endPoints);
};
var $author$project$DomainModel$getFirstLeaf = function (someNode) {
	getFirstLeaf:
	while (true) {
		if (someNode.$ === 'Leaf') {
			var leaf = someNode.a;
			return leaf;
		} else {
			var node = someNode.a;
			var $temp$someNode = node.left;
			someNode = $temp$someNode;
			continue getFirstLeaf;
		}
	}
};
var $author$project$DomainModel$getLastLeaf = function (someNode) {
	getLastLeaf:
	while (true) {
		if (someNode.$ === 'Leaf') {
			var leaf = someNode.a;
			return leaf;
		} else {
			var node = someNode.a;
			var $temp$someNode = node.right;
			someNode = $temp$someNode;
			continue getLastLeaf;
		}
	}
};
var $author$project$DomainModel$GPXSource = F4(
	function (longitude, latitude, altitude, timestamp) {
		return {altitude: altitude, latitude: latitude, longitude: longitude, timestamp: timestamp};
	});
var $elm$core$Basics$cos = _Basics_cos;
var $ianmackenzie$elm_units$Angle$cos = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$cos(angle);
};
var $elm$core$Basics$sin = _Basics_sin;
var $ianmackenzie$elm_geometry$Direction2d$fromAngle = function (_v0) {
	var angle = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{
			x: $elm$core$Basics$cos(angle),
			y: $elm$core$Basics$sin(angle)
		});
};
var $ianmackenzie$elm_units$Angle$inRadians = function (_v0) {
	var numRadians = _v0.a;
	return numRadians;
};
var $ianmackenzie$elm_units$Angle$inDegrees = function (angle) {
	return 180 * ($ianmackenzie$elm_units$Angle$inRadians(angle) / $elm$core$Basics$pi);
};
var $ianmackenzie$elm_units$Length$inMeters = function (_v0) {
	var numMeters = _v0.a;
	return numMeters;
};
var $author$project$Spherical$meanRadius = 6371000;
var $author$project$Spherical$metresPerDegree = ($author$project$Spherical$meanRadius * $elm$core$Basics$pi) / 180.0;
var $elm$core$Basics$atan2 = _Basics_atan2;
var $ianmackenzie$elm_geometry$Direction2d$toAngle = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		A2($elm$core$Basics$atan2, d.y, d.x));
};
var $ianmackenzie$elm_geometry$Point3d$toTuple = F2(
	function (fromQuantity, point) {
		return _Utils_Tuple3(
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(point)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(point)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(point)));
	});
var $author$project$DomainModel$gpxFromPointWithReference = F2(
	function (reference, point) {
		var _v0 = A2($ianmackenzie$elm_geometry$Point3d$toTuple, $ianmackenzie$elm_units$Length$inMeters, point.space);
		var x = _v0.a;
		var y = _v0.b;
		var z = _v0.c;
		var latitude = $ianmackenzie$elm_units$Angle$degrees(
			(y / $author$project$Spherical$metresPerDegree) + $ianmackenzie$elm_units$Angle$inDegrees(reference.latitude));
		var longitude = $ianmackenzie$elm_units$Angle$degrees(
			((x / $ianmackenzie$elm_units$Angle$cos(latitude)) / $author$project$Spherical$metresPerDegree) + $ianmackenzie$elm_units$Angle$inDegrees(
				$ianmackenzie$elm_geometry$Direction2d$toAngle(reference.longitude)));
		var altitude = z;
		return A4(
			$author$project$DomainModel$GPXSource,
			$ianmackenzie$elm_geometry$Direction2d$fromAngle(longitude),
			latitude,
			$ianmackenzie$elm_units$Length$meters(altitude),
			point.time);
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $ianmackenzie$elm_geometry$Geometry$Types$Direction3d = function (a) {
	return {$: 'Direction3d', a: a};
};
var $ianmackenzie$elm_geometry$Direction3d$on = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var d = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: (d.x * i.x) + (d.y * j.x), y: (d.x * i.y) + (d.y * j.y), z: (d.x * i.z) + (d.y * j.z)});
	});
var $ianmackenzie$elm_geometry$Point3d$translateBy = F2(
	function (_v0, _v1) {
		var v = _v0.a;
		var p = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x + v.x, y: p.y + v.y, z: p.z + v.z});
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$DomainModel$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $author$project$DomainModel$Node = function (a) {
	return {$: 'Node', a: a};
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $ianmackenzie$elm_units$Quantity$abs = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$abs(value));
};
var $ianmackenzie$elm_geometry$Direction2d$angleFrom = F2(
	function (_v0, _v1) {
		var d1 = _v0.a;
		var d2 = _v1.a;
		var relativeY = (d1.x * d2.y) - (d1.y * d2.x);
		var relativeX = (d1.x * d2.x) + (d1.y * d2.y);
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$atan2, relativeY, relativeX));
	});
var $author$project$DomainModel$asRecord = function (treeNode) {
	if (treeNode.$ === 'Leaf') {
		var section = treeNode.a;
		return section;
	} else {
		var node = treeNode.a;
		return node.nodeContent;
	}
};
var $author$project$DomainModel$boundingBox = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).boundingBox;
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $ianmackenzie$elm_units$Quantity$max = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$max, x, y));
	});
var $ianmackenzie$elm_units$Quantity$maximum = function (quantities) {
	if (!quantities.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = quantities.a;
		var rest = quantities.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $ianmackenzie$elm_units$Quantity$max, first, rest));
	}
};
var $ianmackenzie$elm_units$Quantity$plus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x + y);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$extrema = function (_v0) {
	var boundingBoxExtrema = _v0.a;
	return boundingBoxExtrema;
};
var $ianmackenzie$elm_units$Quantity$min = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$min, x, y));
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$union = F2(
	function (firstBox, secondBox) {
		var b2 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(secondBox);
		var b1 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(firstBox);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, b1.maxX, b2.maxX),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, b1.maxY, b2.maxY),
				maxZ: A2($ianmackenzie$elm_units$Quantity$max, b1.maxZ, b2.maxZ),
				minX: A2($ianmackenzie$elm_units$Quantity$min, b1.minX, b2.minX),
				minY: A2($ianmackenzie$elm_units$Quantity$min, b1.minY, b2.minY),
				minZ: A2($ianmackenzie$elm_units$Quantity$min, b1.minZ, b2.minZ)
			});
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$DomainModel$combineInfo = F2(
	function (info1, info2) {
		var box = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$union,
			$author$project$DomainModel$boundingBox(info1),
			$author$project$DomainModel$boundingBox(info2));
		var _v0 = _Utils_Tuple2(
			$author$project$DomainModel$asRecord(info1),
			$author$project$DomainModel$asRecord(info2));
		var asRecord1 = _v0.a;
		var asRecord2 = _v0.b;
		return {
			altitudeGained: A2($ianmackenzie$elm_units$Quantity$plus, asRecord1.altitudeGained, asRecord2.altitudeGained),
			altitudeLost: A2($ianmackenzie$elm_units$Quantity$plus, asRecord1.altitudeLost, asRecord2.altitudeLost),
			boundingBox: box,
			directionAtEnd: asRecord2.directionAtEnd,
			directionAtStart: asRecord1.directionAtStart,
			directionChangeMaximumAbs: A2(
				$elm$core$Maybe$withDefault,
				$ianmackenzie$elm_units$Quantity$zero,
				$ianmackenzie$elm_units$Quantity$maximum(
					_List_fromArray(
						[
							asRecord1.directionChangeMaximumAbs,
							asRecord2.directionChangeMaximumAbs,
							$ianmackenzie$elm_units$Quantity$abs(
							A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, asRecord1.directionAtEnd, asRecord2.directionAtStart))
						]))),
			distanceClimbing: A2($ianmackenzie$elm_units$Quantity$plus, asRecord1.distanceClimbing, asRecord2.distanceClimbing),
			distanceDescending: A2($ianmackenzie$elm_units$Quantity$plus, asRecord1.distanceDescending, asRecord2.distanceDescending),
			endPoint: asRecord2.endPoint,
			gradientAtEnd: asRecord2.gradientAtEnd,
			gradientAtStart: asRecord1.gradientAtStart,
			gradientChangeMaximumAbs: A2(
				$elm$core$Maybe$withDefault,
				0.0,
				$elm$core$List$maximum(
					_List_fromArray(
						[
							asRecord1.gradientChangeMaximumAbs,
							asRecord2.gradientChangeMaximumAbs,
							$elm$core$Basics$abs(asRecord1.gradientAtEnd - asRecord2.gradientAtStart)
						]))),
			skipCount: asRecord1.skipCount + asRecord2.skipCount,
			sourceData: _Utils_Tuple2(asRecord1.sourceData.a, asRecord2.sourceData.b),
			startPoint: asRecord1.startPoint,
			steepestClimb: A2($elm$core$Basics$max, asRecord1.steepestClimb, asRecord2.steepestClimb),
			transitTime: function () {
				var _v1 = _Utils_Tuple2(asRecord1.transitTime, asRecord2.transitTime);
				if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
					var time1 = _v1.a.a;
					var time2 = _v1.b.a;
					return $elm$core$Maybe$Just(
						$elm$time$Time$millisToPosix(
							$elm$time$Time$posixToMillis(time1) + $elm$time$Time$posixToMillis(time2)));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
			trueLength: A2($ianmackenzie$elm_units$Quantity$plus, asRecord1.trueLength, asRecord2.trueLength)
		};
	});
var $author$project$DomainModel$joiningNode = F2(
	function (left, right) {
		return $author$project$DomainModel$Node(
			{
				left: left,
				nodeContent: A2($author$project$DomainModel$combineInfo, left, right),
				right: right
			});
	});
var $author$project$Spherical$findBearingToTarget = F2(
	function (_v0, _v1) {
		var lat1 = _v0.a;
		var lon1 = _v0.b;
		var lat2 = _v1.a;
		var lon2 = _v1.b;
		var y = $elm$core$Basics$sin(lon2 - lon1) * $elm$core$Basics$cos(lat2);
		var x = ($elm$core$Basics$cos(lat1) * $elm$core$Basics$sin(lat2)) - (($elm$core$Basics$sin(lat1) * $elm$core$Basics$cos(lat2)) * $elm$core$Basics$cos(lon2 - lon1));
		return A2($elm$core$Basics$atan2, y, x);
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$from = F2(
	function (firstPoint, secondPoint) {
		var z2 = $ianmackenzie$elm_geometry$Point3d$zCoordinate(secondPoint);
		var z1 = $ianmackenzie$elm_geometry$Point3d$zCoordinate(firstPoint);
		var y2 = $ianmackenzie$elm_geometry$Point3d$yCoordinate(secondPoint);
		var y1 = $ianmackenzie$elm_geometry$Point3d$yCoordinate(firstPoint);
		var x2 = $ianmackenzie$elm_geometry$Point3d$xCoordinate(secondPoint);
		var x1 = $ianmackenzie$elm_geometry$Point3d$xCoordinate(firstPoint);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, x1, x2),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, y1, y2),
				maxZ: A2($ianmackenzie$elm_units$Quantity$max, z1, z2),
				minX: A2($ianmackenzie$elm_units$Quantity$min, x1, x2),
				minY: A2($ianmackenzie$elm_units$Quantity$min, y1, y2),
				minZ: A2($ianmackenzie$elm_units$Quantity$min, z1, z2)
			});
	});
var $ianmackenzie$elm_units$Quantity$greaterThanZero = function (_v0) {
	var x = _v0.a;
	return x > 0;
};
var $ianmackenzie$elm_units$Quantity$lessThanZero = function (_v0) {
	var x = _v0.a;
	return x < 0;
};
var $ianmackenzie$elm_units$Quantity$minus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x - y);
	});
var $ianmackenzie$elm_units$Quantity$negate = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(-value);
};
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Spherical$range = F2(
	function (lonLat1, lonLat2) {
		var _v0 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Angle$inRadians(lonLat2.b),
			$ianmackenzie$elm_units$Angle$inRadians(lonLat2.a));
		var lat2 = _v0.a;
		var lon2 = _v0.b;
		var _v1 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Angle$inRadians(lonLat1.b),
			$ianmackenzie$elm_units$Angle$inRadians(lonLat1.a));
		var lat1 = _v1.a;
		var lon1 = _v1.b;
		var y = lat2 - lat1;
		var x = (lon2 - lon1) * $elm$core$Basics$cos((lat1 + lat2) / 2);
		return $author$project$Spherical$meanRadius * $elm$core$Basics$sqrt((x * x) + (y * y));
	});
var $author$project$DomainModel$makeRoadSectionKnowingLocalCoords = F2(
	function (_v0, _v1) {
		var earth1 = _v0.a;
		var local1 = _v0.b;
		var earth2 = _v1.a;
		var local2 = _v1.b;
		var range = $ianmackenzie$elm_units$Length$meters(
			A2(
				$author$project$Spherical$range,
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth1.longitude),
					earth1.latitude),
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth2.longitude),
					earth2.latitude)));
		var box = A2($ianmackenzie$elm_geometry$BoundingBox3d$from, local1.space, local2.space);
		var bearing = A2(
			$author$project$Spherical$findBearingToTarget,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Angle$inRadians(earth1.latitude),
				$ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth1.longitude))),
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Angle$inRadians(earth2.latitude),
				$ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(earth2.longitude))));
		var direction = $ianmackenzie$elm_geometry$Direction2d$fromAngle(
			$ianmackenzie$elm_units$Angle$radians(($elm$core$Basics$pi / 2) - bearing));
		var altitudeChange = A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(local1.space),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(local2.space));
		var gradient = ($ianmackenzie$elm_units$Quantity$greaterThanZero(
			$ianmackenzie$elm_units$Quantity$abs(range)) && $ianmackenzie$elm_units$Quantity$greaterThanZero(
			$ianmackenzie$elm_units$Quantity$abs(altitudeChange))) ? ((100.0 * $ianmackenzie$elm_units$Length$inMeters(altitudeChange)) / $ianmackenzie$elm_units$Length$inMeters(range)) : 0.0;
		return {
			altitudeGained: A2($ianmackenzie$elm_units$Quantity$max, $ianmackenzie$elm_units$Quantity$zero, altitudeChange),
			altitudeLost: A2(
				$ianmackenzie$elm_units$Quantity$max,
				$ianmackenzie$elm_units$Quantity$zero,
				$ianmackenzie$elm_units$Quantity$negate(altitudeChange)),
			boundingBox: box,
			directionAtEnd: direction,
			directionAtStart: direction,
			directionChangeMaximumAbs: $ianmackenzie$elm_units$Angle$degrees(0),
			distanceClimbing: $ianmackenzie$elm_units$Quantity$greaterThanZero(altitudeChange) ? range : $ianmackenzie$elm_units$Quantity$zero,
			distanceDescending: $ianmackenzie$elm_units$Quantity$lessThanZero(altitudeChange) ? range : $ianmackenzie$elm_units$Quantity$zero,
			endPoint: local2,
			gradientAtEnd: gradient,
			gradientAtStart: gradient,
			gradientChangeMaximumAbs: $elm$core$Basics$abs(gradient),
			skipCount: 1,
			sourceData: _Utils_Tuple2(earth1, earth2),
			startPoint: local1,
			steepestClimb: A2($elm$core$Basics$max, 0.0, gradient),
			transitTime: function () {
				var _v2 = _Utils_Tuple2(earth1.timestamp, earth2.timestamp);
				if ((_v2.a.$ === 'Just') && (_v2.b.$ === 'Just')) {
					var startTime = _v2.a.a;
					var endTime = _v2.b.a;
					return $elm$core$Maybe$Just(
						$elm$time$Time$millisToPosix(
							$elm$time$Time$posixToMillis(endTime) - $elm$time$Time$posixToMillis(startTime)));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
			trueLength: range
		};
	});
var $ianmackenzie$elm_geometry$Point3d$xyz = F3(
	function (_v0, _v1, _v2) {
		var x = _v0.a;
		var y = _v1.a;
		var z = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: x, y: y, z: z});
	});
var $author$project$DomainModel$pointFromGpxWithReference = F2(
	function (reference, gpx) {
		return {
			space: A3(
				$ianmackenzie$elm_geometry$Point3d$xyz,
				$ianmackenzie$elm_units$Length$meters(
					$ianmackenzie$elm_units$Angle$cos(gpx.latitude) * ($author$project$Spherical$metresPerDegree * $ianmackenzie$elm_units$Angle$inDegrees(
						A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, reference.longitude, gpx.longitude)))),
				$ianmackenzie$elm_units$Length$meters(
					$author$project$Spherical$metresPerDegree * $ianmackenzie$elm_units$Angle$inDegrees(
						A2($ianmackenzie$elm_units$Quantity$minus, reference.latitude, gpx.latitude))),
				gpx.altitude),
			time: gpx.timestamp
		};
	});
var $author$project$DomainModel$makeRoadSection = F3(
	function (reference, earth1, earth2) {
		var _v0 = _Utils_Tuple2(
			A2($author$project$DomainModel$pointFromGpxWithReference, reference, earth1),
			A2($author$project$DomainModel$pointFromGpxWithReference, reference, earth2));
		var local1 = _v0.a;
		var local2 = _v0.b;
		return A2(
			$author$project$DomainModel$makeRoadSectionKnowingLocalCoords,
			_Utils_Tuple2(earth1, local1),
			_Utils_Tuple2(earth2, local2));
	});
var $author$project$DomainModel$treeFromSourcesWithExistingReference = F2(
	function (referencePoint, track) {
		var treeBuilder = F2(
			function (n, pointStream) {
				var _v0 = _Utils_Tuple2(n < 2, pointStream);
				if (_v0.a) {
					if (_v0.b.b && _v0.b.b.b) {
						var _v1 = _v0.b;
						var v1 = _v1.a;
						var _v2 = _v1.b;
						var v2 = _v2.a;
						var vvvv = _v2.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								$author$project$DomainModel$Leaf(
									A3($author$project$DomainModel$makeRoadSection, referencePoint, v1, v2))),
							A2($elm$core$List$cons, v2, vvvv));
					} else {
						var anythingElse = _v0.b;
						return _Utils_Tuple2($elm$core$Maybe$Nothing, anythingElse);
					}
				} else {
					var vvvv = _v0.b;
					var leftSize = (n / 2) | 0;
					var rightSize = n - leftSize;
					var _v3 = A2(treeBuilder, leftSize, vvvv);
					var left = _v3.a;
					var remainingAfterLeft = _v3.b;
					var _v4 = A2(treeBuilder, rightSize, remainingAfterLeft);
					var right = _v4.a;
					var remainingAfterRight = _v4.b;
					var _v5 = _Utils_Tuple2(left, right);
					if ((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) {
						var leftSubtree = _v5.a.a;
						var rightSubtree = _v5.b.a;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(
								A2($author$project$DomainModel$joiningNode, leftSubtree, rightSubtree)),
							remainingAfterRight);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, remainingAfterRight);
					}
				}
			});
		var numberOfSegments = $elm$core$List$length(track) - 1;
		return A2(treeBuilder, numberOfSegments, track).a;
	});
var $ianmackenzie$elm_geometry$Direction2d$x = $ianmackenzie$elm_geometry$Direction2d$positiveX;
var $author$project$DomainModel$treeFromSourcePoints = function (track) {
	var referencePoint = A2(
		$elm$core$Maybe$withDefault,
		A4($author$project$DomainModel$GPXSource, $ianmackenzie$elm_geometry$Direction2d$x, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, $elm$core$Maybe$Nothing),
		$elm$core$List$head(track));
	return A2($author$project$DomainModel$treeFromSourcesWithExistingReference, referencePoint, track);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Vector3d = function (a) {
	return {$: 'Vector3d', a: a};
};
var $ianmackenzie$elm_geometry$Vector3d$withLength = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var d = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: a * d.x, y: a * d.y, z: a * d.z});
	});
var $author$project$DomainModel$withTime = F2(
	function (time, pt) {
		return {space: pt, time: time};
	});
var $ianmackenzie$elm_geometry$Geometry$Types$SketchPlane3d = function (a) {
	return {$: 'SketchPlane3d', a: a};
};
var $ianmackenzie$elm_geometry$SketchPlane3d$unsafe = $ianmackenzie$elm_geometry$Geometry$Types$SketchPlane3d;
var $ianmackenzie$elm_geometry$Direction3d$unsafe = function (givenComponents) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(givenComponents);
};
var $ianmackenzie$elm_geometry$Direction3d$positiveX = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 1, y: 0, z: 0});
var $ianmackenzie$elm_geometry$Direction3d$x = $ianmackenzie$elm_geometry$Direction3d$positiveX;
var $ianmackenzie$elm_geometry$Direction3d$positiveY = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 1, z: 0});
var $ianmackenzie$elm_geometry$Direction3d$y = $ianmackenzie$elm_geometry$Direction3d$positiveY;
var $ianmackenzie$elm_geometry$SketchPlane3d$xy = $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
	{originPoint: $ianmackenzie$elm_geometry$Point3d$origin, xDirection: $ianmackenzie$elm_geometry$Direction3d$x, yDirection: $ianmackenzie$elm_geometry$Direction3d$y});
var $author$project$Tools$StartFinish$addPens = function (track) {
	var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
	var _v0 = _Utils_Tuple2(
		$author$project$DomainModel$getFirstLeaf(track.trackTree),
		$author$project$DomainModel$getLastLeaf(track.trackTree));
	var firstLeaf = _v0.a;
	var lastLeaf = _v0.b;
	var _v1 = _Utils_Tuple2(
		A2($ianmackenzie$elm_geometry$Direction3d$on, $ianmackenzie$elm_geometry$SketchPlane3d$xy, firstLeaf.directionAtStart),
		A2($ianmackenzie$elm_geometry$Direction3d$on, $ianmackenzie$elm_geometry$SketchPlane3d$xy, lastLeaf.directionAtEnd));
	var startDirection = _v1.a;
	var endDirection = _v1.b;
	var _v2 = _Utils_Tuple2(
		A2(
			$ianmackenzie$elm_geometry$Vector3d$withLength,
			$ianmackenzie$elm_units$Length$meters(-60),
			startDirection),
		A2(
			$ianmackenzie$elm_geometry$Vector3d$withLength,
			$ianmackenzie$elm_units$Length$meters(140),
			endDirection));
	var startVector = _v2.a;
	var endVector = _v2.b;
	var _v3 = _Utils_Tuple2(
		A2(
			$author$project$DomainModel$gpxFromPointWithReference,
			track.referenceLonLat,
			A2(
				$author$project$DomainModel$withTime,
				firstLeaf.startPoint.time,
				A2($ianmackenzie$elm_geometry$Point3d$translateBy, startVector, firstLeaf.startPoint.space))),
		A2(
			$author$project$DomainModel$gpxFromPointWithReference,
			track.referenceLonLat,
			A2(
				$author$project$DomainModel$withTime,
				lastLeaf.endPoint.time,
				A2($ianmackenzie$elm_geometry$Point3d$translateBy, endVector, lastLeaf.endPoint.space))));
	var newStart = _v3.a;
	var newEnd = _v3.b;
	var newPoints = A2(
		$elm$core$List$cons,
		newStart,
		_Utils_ap(
			oldPoints,
			_List_fromArray(
				[newEnd])));
	return _Utils_Tuple2(
		$author$project$DomainModel$treeFromSourcePoints(newPoints),
		oldPoints);
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Tools$NamedSegment$addSegment = F2(
	function (segment, options) {
		return _Utils_update(
			options,
			{
				namedSegments: A2(
					$elm$core$List$sortBy,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.startDistance;
						},
						$ianmackenzie$elm_units$Length$inMeters),
					A2($elm$core$List$cons, segment, options.namedSegments))
			});
	});
var $author$project$Tools$GraphOptions$Natural = {$: 'Natural'};
var $elm$core$Basics$acos = _Basics_acos;
var $ianmackenzie$elm_units$Angle$acos = function (x) {
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$acos(x));
};
var $elm$core$Basics$ge = _Utils_ge;
var $ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) > -1;
	});
var $ianmackenzie$elm_units$Quantity$lessThanOrEqualTo = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) < 1;
	});
var $ianmackenzie$elm_units$Quantity$ratio = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return x / y;
	});
var $ianmackenzie$elm_units$Quantity$twice = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(2 * value);
};
var $ianmackenzie$elm_geometry$Curve$arcApproximationSegments = function (_v0) {
	var sweptAngle = _v0.sweptAngle;
	var radius = _v0.radius;
	var maxError = _v0.maxError;
	if (_Utils_eq(sweptAngle, $ianmackenzie$elm_units$Quantity$zero)) {
		return 1;
	} else {
		if (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, maxError)) {
			return 0;
		} else {
			if (A2(
				$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
				$ianmackenzie$elm_units$Quantity$twice(radius),
				maxError)) {
				return 1;
			} else {
				var maxSegmentAngle = $ianmackenzie$elm_units$Quantity$twice(
					$ianmackenzie$elm_units$Angle$acos(
						1 - A2($ianmackenzie$elm_units$Quantity$ratio, maxError, radius)));
				return $elm$core$Basics$ceiling(
					A2(
						$ianmackenzie$elm_units$Quantity$ratio,
						$ianmackenzie$elm_units$Quantity$abs(sweptAngle),
						maxSegmentAngle));
			}
		}
	}
};
var $ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta = F2(
	function (_v0, _v1) {
		var l = _v0.a;
		var theta = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(l / theta);
	});
var $ianmackenzie$elm_geometry$Arc3d$radius = function (_v0) {
	var arc = _v0.a;
	return A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
};
var $ianmackenzie$elm_geometry$Arc3d$sweptAngle = function (_v0) {
	var properties = _v0.a;
	return properties.sweptAngle;
};
var $ianmackenzie$elm_geometry$Arc3d$numApproximationSegments = F2(
	function (maxError, arc) {
		return $ianmackenzie$elm_geometry$Curve$arcApproximationSegments(
			{
				maxError: maxError,
				radius: $ianmackenzie$elm_geometry$Arc3d$radius(arc),
				sweptAngle: $ianmackenzie$elm_geometry$Arc3d$sweptAngle(arc)
			});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Polyline3d = function (a) {
	return {$: 'Polyline3d', a: a};
};
var $ianmackenzie$elm_geometry$Polyline3d$fromVertices = function (givenVertices) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Polyline3d(givenVertices);
};
var $elm$core$Basics$tan = _Basics_tan;
var $ianmackenzie$elm_geometry$Arc3d$pointOn = F2(
	function (_v0, t) {
		var arc = _v0.a;
		var _v1 = arc.yDirection;
		var v = _v1.a;
		var _v2 = arc.xDirection;
		var u = _v2.a;
		var _v3 = arc.sweptAngle;
		var thetaMax = _v3.a;
		var _v4 = arc.signedLength;
		var sMax = _v4.a;
		var _v5 = arc.startPoint;
		var p = _v5.a;
		if (!thetaMax) {
			var s = t * sMax;
			return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
				{x: p.x + (s * u.x), y: p.y + (s * u.y), z: p.z + (s * u.z)});
		} else {
			var theta = t * thetaMax;
			var r = sMax / thetaMax;
			var x = r * $elm$core$Basics$sin(theta);
			var y = (_Utils_cmp(
				$elm$core$Basics$abs(theta),
				$elm$core$Basics$pi / 2) < 0) ? (x * $elm$core$Basics$tan(0.5 * theta)) : (r * (1 - $elm$core$Basics$cos(theta)));
			return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
				{x: (p.x + (x * u.x)) + (y * v.x), y: (p.y + (x * u.y)) + (y * v.y), z: (p.z + (x * u.z)) + (y * v.z)});
		}
	});
var $ianmackenzie$elm_1d_parameter$Parameter1d$range = F5(
	function (startIndex, index, divisor, _function, accumulated) {
		range:
		while (true) {
			var newValue = _function(index / divisor);
			var newAccumulated = A2($elm$core$List$cons, newValue, accumulated);
			if (_Utils_eq(index, startIndex)) {
				return newAccumulated;
			} else {
				var $temp$startIndex = startIndex,
					$temp$index = index - 1,
					$temp$divisor = divisor,
					$temp$function = _function,
					$temp$accumulated = newAccumulated;
				startIndex = $temp$startIndex;
				index = $temp$index;
				divisor = $temp$divisor;
				_function = $temp$function;
				accumulated = $temp$accumulated;
				continue range;
			}
		}
	});
var $ianmackenzie$elm_1d_parameter$Parameter1d$steps = F2(
	function (n, _function) {
		return (n < 1) ? _List_Nil : A5($ianmackenzie$elm_1d_parameter$Parameter1d$range, 0, n, n, _function, _List_Nil);
	});
var $ianmackenzie$elm_geometry$Arc3d$segments = F2(
	function (numSegments, arc) {
		return $ianmackenzie$elm_geometry$Polyline3d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$Arc3d$pointOn(arc)));
	});
var $ianmackenzie$elm_geometry$Arc3d$approximate = F2(
	function (maxError, arc) {
		return A2(
			$ianmackenzie$elm_geometry$Arc3d$segments,
			A2($ianmackenzie$elm_geometry$Arc3d$numApproximationSegments, maxError, arc),
			arc);
	});
var $author$project$DomainModel$earthPointFromIndex = F2(
	function (index, treeNode) {
		earthPointFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? info.startPoint : info.endPoint;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue earthPointFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue earthPointFromIndex;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $ianmackenzie$elm_units$Constants$meter = 1.0;
var $ianmackenzie$elm_units$Constants$inch = 0.0254 * $ianmackenzie$elm_units$Constants$meter;
var $ianmackenzie$elm_units$Constants$foot = 12 * $ianmackenzie$elm_units$Constants$inch;
var $ianmackenzie$elm_units$Length$feet = function (numFeet) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$foot * numFeet);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Point2d = function (a) {
	return {$: 'Point2d', a: a};
};
var $ianmackenzie$elm_geometry$Point2d$xy = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_geometry$Point2d$fromTuple = F2(
	function (toQuantity, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return A2(
			$ianmackenzie$elm_geometry$Point2d$xy,
			toQuantity(x),
			toQuantity(y));
	});
var $ianmackenzie$elm_units$Length$inFeet = function (length) {
	return $ianmackenzie$elm_units$Length$inMeters(length) / $ianmackenzie$elm_units$Constants$foot;
};
var $elm$core$Basics$round = _Basics_round;
var $ianmackenzie$elm_geometry$Point2d$xCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.x);
};
var $ianmackenzie$elm_geometry$Point2d$yCoordinate = function (_v0) {
	var p = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(p.y);
};
var $ianmackenzie$elm_geometry$Point2d$toTuple = F2(
	function (fromQuantity, point) {
		return _Utils_Tuple2(
			fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$xCoordinate(point)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$yCoordinate(point)));
	});
var $author$project$Tools$Graph$makeXY = function (earth) {
	var _v0 = A2($ianmackenzie$elm_geometry$Point3d$toTuple, $ianmackenzie$elm_units$Length$inFeet, earth.space);
	var x = _v0.a;
	var y = _v0.b;
	var _v1 = _Utils_Tuple2(
		$elm$core$Basics$round(x),
		$elm$core$Basics$round(y));
	var xRounded = _v1.a;
	var yRounded = _v1.b;
	return A2(
		$ianmackenzie$elm_geometry$Point2d$toTuple,
		$ianmackenzie$elm_units$Length$inMeters,
		A2(
			$ianmackenzie$elm_geometry$Point2d$fromTuple,
			$ianmackenzie$elm_units$Length$feet,
			_Utils_Tuple2(xRounded, yRounded)));
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Point3d$midpoint = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p1.x + (0.5 * (p2.x - p1.x)), y: p1.y + (0.5 * (p2.y - p1.y)), z: p1.z + (0.5 * (p2.z - p1.z))});
	});
var $author$project$LandUseDataTypes$LandUseNoTrack = {$: 'LandUseNoTrack'};
var $author$project$LandUseDataTypes$emptyLandUse = {
	nodes: _List_Nil,
	places: $elm$core$Dict$empty,
	rawData: {elements: _List_Nil},
	status: $author$project$LandUseDataTypes$LandUseNoTrack,
	ways: _List_Nil
};
var $author$project$SpatialIndex$Blank = {$: 'Blank'};
var $author$project$SpatialIndex$SpatialNode = function (a) {
	return {$: 'SpatialNode', a: a};
};
var $ianmackenzie$elm_units$Quantity$interpolateFrom = F3(
	function (_v0, _v1, parameter) {
		var start = _v0.a;
		var end = _v1.a;
		return (parameter <= 0.5) ? $ianmackenzie$elm_units$Quantity$Quantity(start + (parameter * (end - start))) : $ianmackenzie$elm_units$Quantity$Quantity(end + ((1 - parameter) * (start - end)));
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$midX = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minX, boundingBox.maxX, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox2d$midY = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minY, boundingBox.maxY, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox2d$centerPoint = function (boundingBox) {
	return A2(
		$ianmackenzie$elm_geometry$Point2d$xy,
		$ianmackenzie$elm_geometry$BoundingBox2d$midX(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox2d$midY(boundingBox));
};
var $author$project$SpatialIndex$empty = F2(
	function (box, minSize) {
		return $author$project$SpatialIndex$SpatialNode(
			{box: box, contents: _List_Nil, minSize: minSize, ne: $author$project$SpatialIndex$Blank, nw: $author$project$SpatialIndex$Blank, se: $author$project$SpatialIndex$Blank, sw: $author$project$SpatialIndex$Blank});
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$extrema = function (_v0) {
	var boundingBoxExtrema = _v0.a;
	return boundingBoxExtrema;
};
var $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d = function (a) {
	return {$: 'BoundingBox2d', a: a};
};
var $ianmackenzie$elm_geometry$BoundingBox2d$from = F2(
	function (firstPoint, secondPoint) {
		var y2 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(secondPoint);
		var y1 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(firstPoint);
		var x2 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(secondPoint);
		var x1 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(firstPoint);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, x1, x2),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, y1, y2),
				minX: A2($ianmackenzie$elm_units$Quantity$min, x1, x2),
				minY: A2($ianmackenzie$elm_units$Quantity$min, y1, y2)
			});
	});
var $ianmackenzie$elm_units$Quantity$greaterThan = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) > 0;
	});
var $ianmackenzie$elm_units_interval$Quantity$Interval$Interval = function (a) {
	return {$: 'Interval', a: a};
};
var $ianmackenzie$elm_units_interval$Quantity$Interval$from = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return (_Utils_cmp(a, b) < 1) ? $ianmackenzie$elm_units_interval$Quantity$Interval$Interval(
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$Quantity(a),
				$ianmackenzie$elm_units$Quantity$Quantity(b))) : $ianmackenzie$elm_units_interval$Quantity$Interval$Interval(
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$Quantity(b),
				$ianmackenzie$elm_units$Quantity$Quantity(a)));
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$maxX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxX;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$minX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minX;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$xInterval = function (boundingBox) {
	return A2(
		$ianmackenzie$elm_units_interval$Quantity$Interval$from,
		$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$maxY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxY;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$minY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minY;
};
var $ianmackenzie$elm_geometry$BoundingBox2d$yInterval = function (boundingBox) {
	return A2(
		$ianmackenzie$elm_units_interval$Quantity$Interval$from,
		$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$intervals = function (boundingBox) {
	return _Utils_Tuple2(
		$ianmackenzie$elm_geometry$BoundingBox2d$xInterval(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox2d$yInterval(boundingBox));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$isContainedIn = F2(
	function (other, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(other)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(other)) && A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox))));
	});
var $ianmackenzie$elm_units_interval$Quantity$Interval$width = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a.a;
	var b = _v1.b.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(b - a);
};
var $author$project$SpatialIndex$add = F2(
	function (content, current) {
		if (current.$ === 'Blank') {
			return $author$project$SpatialIndex$Blank;
		} else {
			var node = current.a;
			var centre = $ianmackenzie$elm_geometry$BoundingBox2d$centerPoint(node.box);
			var canSplit = function () {
				var _v4 = $ianmackenzie$elm_geometry$BoundingBox2d$intervals(node.box);
				var xInterval = _v4.a;
				var yInterval = _v4.b;
				return A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					node.minSize,
					$ianmackenzie$elm_units_interval$Quantity$Interval$width(xInterval)) && A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					node.minSize,
					$ianmackenzie$elm_units_interval$Quantity$Interval$width(yInterval));
			}();
			var addToChild = F2(
				function (child, box) {
					if (child.$ === 'SpatialNode') {
						return A2($author$project$SpatialIndex$add, content, child);
					} else {
						return A2(
							$author$project$SpatialIndex$add,
							content,
							A2($author$project$SpatialIndex$empty, box, node.minSize));
					}
				});
			var _v1 = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(node.box);
			var minX = _v1.minX;
			var maxX = _v1.maxX;
			var minY = _v1.minY;
			var maxY = _v1.maxY;
			var _v2 = {
				ne: A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$from,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$xy, maxX, maxY)),
				nw: A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$from,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$xy, minX, maxY)),
				se: A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$from,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$xy, maxX, minY)),
				sw: A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$from,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$xy, minX, minY))
			};
			var nw = _v2.nw;
			var ne = _v2.ne;
			var sw = _v2.sw;
			var se = _v2.se;
			return (canSplit && A2($ianmackenzie$elm_geometry$BoundingBox2d$isContainedIn, nw, content.box)) ? $author$project$SpatialIndex$SpatialNode(
				_Utils_update(
					node,
					{
						nw: A2(addToChild, node.nw, nw)
					})) : ((canSplit && A2($ianmackenzie$elm_geometry$BoundingBox2d$isContainedIn, ne, content.box)) ? $author$project$SpatialIndex$SpatialNode(
				_Utils_update(
					node,
					{
						ne: A2(addToChild, node.ne, ne)
					})) : ((canSplit && A2($ianmackenzie$elm_geometry$BoundingBox2d$isContainedIn, sw, content.box)) ? $author$project$SpatialIndex$SpatialNode(
				_Utils_update(
					node,
					{
						sw: A2(addToChild, node.sw, sw)
					})) : ((canSplit && A2($ianmackenzie$elm_geometry$BoundingBox2d$isContainedIn, se, content.box)) ? $author$project$SpatialIndex$SpatialNode(
				_Utils_update(
					node,
					{
						se: A2(addToChild, node.se, se)
					})) : $author$project$SpatialIndex$SpatialNode(
				_Utils_update(
					node,
					{
						contents: A2($elm$core$List$cons, content, node.contents)
					})))));
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema = function (given) {
	return (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxX, given.minX) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxY, given.minY)) ? $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(given) : $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
		{
			maxX: A2($ianmackenzie$elm_units$Quantity$max, given.minX, given.maxX),
			maxY: A2($ianmackenzie$elm_units$Quantity$max, given.minY, given.maxY),
			minX: A2($ianmackenzie$elm_units$Quantity$min, given.minX, given.maxX),
			minY: A2($ianmackenzie$elm_units$Quantity$min, given.minY, given.maxY)
		});
};
var $author$project$UtilsForViews$flatBox = function (box) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(box);
	var minX = _v0.minX;
	var maxX = _v0.maxX;
	var minY = _v0.minY;
	var maxY = _v0.maxY;
	return $ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema(
		{maxX: maxX, maxY: maxY, minX: minX, minY: minY});
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $author$project$DomainModel$traverseTreeBetweenLimitsToDepth = F7(
	function (startingAt, endingAt, depthFunction, currentDepth, thisNode, foldFn, accum) {
		if (_Utils_cmp(
			startingAt,
			$author$project$DomainModel$skipCount(thisNode)) > -1) {
			return accum;
		} else {
			if (endingAt <= 0) {
				return accum;
			} else {
				if (thisNode.$ === 'Leaf') {
					var leafNode = thisNode.a;
					return A2(foldFn, leafNode, accum);
				} else {
					var node = thisNode.a;
					var maximumDepth = A2(
						$elm$core$Maybe$withDefault,
						999,
						depthFunction(node.nodeContent));
					return (_Utils_cmp(currentDepth, maximumDepth) > -1) ? A2(foldFn, node.nodeContent, accum) : A7(
						$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
						startingAt - $author$project$DomainModel$skipCount(node.left),
						endingAt - $author$project$DomainModel$skipCount(node.left),
						depthFunction,
						currentDepth + 1,
						node.right,
						foldFn,
						A7($author$project$DomainModel$traverseTreeBetweenLimitsToDepth, startingAt, endingAt, depthFunction, currentDepth + 1, node.left, foldFn, accum));
				}
			}
		}
	});
var $author$project$DomainModel$traverseTreeBetween = F5(
	function (startingAt, endingAt, someNode, foldFn, accum) {
		return A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startingAt,
			endingAt,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			someNode,
			foldFn,
			accum);
	});
var $author$project$DomainModel$foldOverRoute = F3(
	function (foldFn, treeNode, startValues) {
		return A5(
			$author$project$DomainModel$traverseTreeBetween,
			0,
			$author$project$DomainModel$skipCount(treeNode),
			treeNode,
			foldFn,
			startValues);
	});
var $author$project$TrackLoaded$indexLeaves = function (tree) {
	var localBounds = function (road) {
		return $author$project$UtilsForViews$flatBox(
			$author$project$DomainModel$boundingBox(
				$author$project$DomainModel$Leaf(road)));
	};
	var indexLeaf = F2(
		function (leaf, _v1) {
			var leafNumber = _v1.a;
			var indexBuild = _v1.b;
			return _Utils_Tuple2(
				leafNumber + 1,
				A2(
					$author$project$SpatialIndex$add,
					{
						box: localBounds(leaf),
						content: {leafIndex: leafNumber}
					},
					indexBuild));
		});
	var emptyLeafIndex = A2(
		$author$project$SpatialIndex$empty,
		$author$project$UtilsForViews$flatBox(
			$author$project$DomainModel$boundingBox(tree)),
		$ianmackenzie$elm_units$Length$meters(100.0));
	var _v0 = A3(
		$author$project$DomainModel$foldOverRoute,
		indexLeaf,
		tree,
		_Utils_Tuple2(
			0,
			A2(
				$author$project$SpatialIndex$add,
				{
					box: localBounds(
						$author$project$DomainModel$getFirstLeaf(tree)),
					content: {leafIndex: 0}
				},
				emptyLeafIndex)));
	var leafIndex = _v0.b;
	return leafIndex;
};
var $author$project$TrackLoaded$newTrackFromTree = F2(
	function (refLonLat, newTree) {
		return {
			currentPosition: 0,
			landUseData: $author$project$LandUseDataTypes$emptyLandUse,
			lastMapClick: _Utils_Tuple2(0, 0),
			leafIndex: $author$project$TrackLoaded$indexLeaves(newTree),
			markerPosition: $elm$core$Maybe$Nothing,
			redos: _List_Nil,
			referenceLonLat: refLonLat,
			renderDepth: 10,
			trackName: $elm$core$Maybe$Nothing,
			trackTree: newTree,
			undos: _List_Nil
		};
	});
var $ianmackenzie$elm_geometry$Direction3d$positiveZ = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 0, z: 1});
var $ianmackenzie$elm_geometry$Direction2d$reverse = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{x: -d.x, y: -d.y});
};
var $ianmackenzie$elm_geometry$Point3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var p = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.originPoint;
		var p0 = _v3.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v4 = axis.direction;
		var d = _v4.a;
		var qx = d.x * sinHalfAngle;
		var wx = qw * qx;
		var xx = qx * qx;
		var qy = d.y * sinHalfAngle;
		var wy = qw * qy;
		var xy = qx * qy;
		var yy = qy * qy;
		var a22 = 1 - (2 * (xx + yy));
		var qz = d.z * sinHalfAngle;
		var wz = qw * qz;
		var a01 = 2 * (xy - wz);
		var a10 = 2 * (xy + wz);
		var xz = qx * qz;
		var a02 = 2 * (xz + wy);
		var a20 = 2 * (xz - wy);
		var yz = qy * qz;
		var a12 = 2 * (yz - wx);
		var a21 = 2 * (yz + wx);
		var zz = qz * qz;
		var a00 = 1 - (2 * (yy + zz));
		var a11 = 1 - (2 * (xx + zz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((p0.x + (a00 * deltaX)) + (a01 * deltaY)) + (a02 * deltaZ), y: ((p0.y + (a10 * deltaX)) + (a11 * deltaY)) + (a12 * deltaZ), z: ((p0.z + (a20 * deltaX)) + (a21 * deltaY)) + (a22 * deltaZ)});
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Arc3d = function (a) {
	return {$: 'Arc3d', a: a};
};
var $ianmackenzie$elm_geometry$Point3d$on = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var p = _v1.a;
		var _v2 = sketchPlane.originPoint;
		var p0 = _v2.a;
		var _v3 = sketchPlane.yDirection;
		var j = _v3.a;
		var _v4 = sketchPlane.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: (p0.x + (p.x * i.x)) + (p.y * j.x), y: (p0.y + (p.x * i.y)) + (p.y * j.y), z: (p0.z + (p.x * i.z)) + (p.y * j.z)});
	});
var $ianmackenzie$elm_geometry$Direction2d$perpendicularTo = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{x: -d.y, y: d.x});
};
var $ianmackenzie$elm_geometry$Arc3d$on = F2(
	function (sketchPlane, _v0) {
		var arc2d = _v0.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
			{
				signedLength: arc2d.signedLength,
				startPoint: A2($ianmackenzie$elm_geometry$Point3d$on, sketchPlane, arc2d.startPoint),
				sweptAngle: arc2d.sweptAngle,
				xDirection: A2($ianmackenzie$elm_geometry$Direction3d$on, sketchPlane, arc2d.xDirection),
				yDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$on,
					sketchPlane,
					$ianmackenzie$elm_geometry$Direction2d$perpendicularTo(arc2d.xDirection))
			});
	});
var $ianmackenzie$elm_geometry$Point3d$projectInto = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var p = _v1.a;
		var _v2 = sketchPlane.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = sketchPlane.yDirection;
		var j = _v3.a;
		var _v4 = sketchPlane.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: ((deltaX * i.x) + (deltaY * i.y)) + (deltaZ * i.z), y: ((deltaX * j.x) + (deltaY * j.y)) + (deltaZ * j.z)});
	});
var $ianmackenzie$elm_geometry$Point2d$circumenterHelp = F6(
	function (_v0, _v1, _v2, a, b, c) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var p3 = _v2.a;
		var bc = b * c;
		if (!bc) {
			return $elm$core$Maybe$Nothing;
		} else {
			var cy = p1.y - p3.y;
			var cx = p1.x - p3.x;
			var by = p3.y - p2.y;
			var bx = p3.x - p2.x;
			var sinA = ((bx * cy) - (by * cx)) / bc;
			if (!sinA) {
				return $elm$core$Maybe$Nothing;
			} else {
				var cosA = ((bx * cx) + (by * cy)) / bc;
				var scale = cosA / (2 * sinA);
				var ay = p2.y - p1.y;
				var ax = p2.x - p1.x;
				return $elm$core$Maybe$Just(
					$ianmackenzie$elm_geometry$Geometry$Types$Point2d(
						{x: (p1.x + (0.5 * ax)) + (scale * ay), y: (p1.y + (0.5 * ay)) - (scale * ax)}));
			}
		}
	});
var $ianmackenzie$elm_geometry$Point2d$distanceFrom = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			$elm$core$Basics$abs(deltaY));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
		}
	});
var $ianmackenzie$elm_geometry$Point2d$circumcenter = F3(
	function (p1, p2, p3) {
		var _v0 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p3, p1);
		var c = _v0.a;
		var _v1 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p2, p3);
		var b = _v1.a;
		var _v2 = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, p1, p2);
		var a = _v2.a;
		return (_Utils_cmp(a, b) > -1) ? ((_Utils_cmp(a, c) > -1) ? A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p1, p2, p3, a, b, c) : A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p3, p1, p2, c, a, b)) : ((_Utils_cmp(b, c) > -1) ? A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p2, p3, p1, b, c, a) : A6($ianmackenzie$elm_geometry$Point2d$circumenterHelp, p3, p1, p2, c, a, b));
	});
var $ianmackenzie$elm_geometry$Vector2d$direction = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		$elm$core$Basics$abs(v.y));
	if (!largestComponent) {
		return $elm$core$Maybe$Nothing;
	} else {
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
		return $elm$core$Maybe$Just(
			$ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
				{x: scaledX / scaledLength, y: scaledY / scaledLength}));
	}
};
var $ianmackenzie$elm_geometry$Vector2d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: p2.x - p1.x, y: p2.y - p1.y});
	});
var $elm$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					return $elm$core$Maybe$Just(
						A3(func, a, b, c));
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Arc2d = function (a) {
	return {$: 'Arc2d', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$length = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		$elm$core$Basics$abs(v.y));
	if (!largestComponent) {
		return $ianmackenzie$elm_units$Quantity$zero;
	} else {
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
		return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
	}
};
var $ianmackenzie$elm_geometry$Quantity$Extra$rTheta = F2(
	function (_v0, _v1) {
		var r = _v0.a;
		var theta = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(r * theta);
	});
var $ianmackenzie$elm_geometry$Direction2d$rotateClockwise = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
		{x: d.y, y: -d.x});
};
var $ianmackenzie$elm_geometry$Arc2d$sweptAround = F3(
	function (givenCenterPoint, givenSweptAngle, givenStartPoint) {
		var displacement = A2($ianmackenzie$elm_geometry$Vector2d$from, givenStartPoint, givenCenterPoint);
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$direction(displacement);
		if (_v0.$ === 'Just') {
			var yDirection = _v0.a;
			var computedRadius = $ianmackenzie$elm_geometry$Vector2d$length(displacement);
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc2d(
				{
					signedLength: A2($ianmackenzie$elm_geometry$Quantity$Extra$rTheta, computedRadius, givenSweptAngle),
					startPoint: givenStartPoint,
					sweptAngle: givenSweptAngle,
					xDirection: $ianmackenzie$elm_geometry$Direction2d$rotateClockwise(yDirection)
				});
		} else {
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc2d(
				{signedLength: $ianmackenzie$elm_units$Quantity$zero, startPoint: givenStartPoint, sweptAngle: givenSweptAngle, xDirection: $ianmackenzie$elm_geometry$Direction2d$x});
		}
	});
var $ianmackenzie$elm_geometry$Arc2d$twoPi = $ianmackenzie$elm_units$Angle$radians(2 * $elm$core$Basics$pi);
var $ianmackenzie$elm_geometry$Arc2d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (computedCenterPoint) {
				var thirdVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, thirdPoint);
				var secondVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, secondPoint);
				var firstVector = A2($ianmackenzie$elm_geometry$Vector2d$from, computedCenterPoint, firstPoint);
				return A4(
					$elm$core$Maybe$map3,
					F3(
						function (firstDirection, secondDirection, thirdDirection) {
							var partial = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, firstDirection, secondDirection);
							var full = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, firstDirection, thirdDirection);
							var computedSweptAngle = (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, partial) && A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, partial, full)) ? full : ((A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, partial) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, partial, full)) ? full : (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, full) ? A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_geometry$Arc2d$twoPi, full) : A2($ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_geometry$Arc2d$twoPi, full)));
							return A3($ianmackenzie$elm_geometry$Arc2d$sweptAround, computedCenterPoint, computedSweptAngle, firstPoint);
						}),
					$ianmackenzie$elm_geometry$Vector2d$direction(firstVector),
					$ianmackenzie$elm_geometry$Vector2d$direction(secondVector),
					$ianmackenzie$elm_geometry$Vector2d$direction(thirdVector));
			},
			A3($ianmackenzie$elm_geometry$Point2d$circumcenter, firstPoint, secondPoint, thirdPoint));
	});
var $ianmackenzie$elm_geometry$Vector3d$direction = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.y),
			$elm$core$Basics$abs(v.z)));
	if (!largestComponent) {
		return $elm$core$Maybe$Nothing;
	} else {
		var scaledZ = v.z / largestComponent;
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
		return $elm$core$Maybe$Just(
			$ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: scaledX / scaledLength, y: scaledY / scaledLength, z: scaledZ / scaledLength}));
	}
};
var $ianmackenzie$elm_geometry$Direction3d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaZ = p2.z - p1.z;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(deltaY),
				$elm$core$Basics$abs(deltaZ)));
		if (!largestComponent) {
			return $elm$core$Maybe$Nothing;
		} else {
			var scaledZ = deltaZ / largestComponent;
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $elm$core$Maybe$Just(
				$ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
					{x: scaledX / scaledLength, y: scaledY / scaledLength, z: scaledZ / scaledLength}));
		}
	});
var $ianmackenzie$elm_geometry$Vector3d$from = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: p2.x - p1.x, y: p2.y - p1.y, z: p2.z - p1.z});
	});
var $ianmackenzie$elm_geometry$Vector3d$length = function (_v0) {
	var v = _v0.a;
	var largestComponent = A2(
		$elm$core$Basics$max,
		$elm$core$Basics$abs(v.x),
		A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.y),
			$elm$core$Basics$abs(v.z)));
	if (!largestComponent) {
		return $ianmackenzie$elm_units$Quantity$zero;
	} else {
		var scaledZ = v.z / largestComponent;
		var scaledY = v.y / largestComponent;
		var scaledX = v.x / largestComponent;
		var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
		return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
	}
};
var $ianmackenzie$elm_geometry$Vector3d$minus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: v1.x - v2.x, y: v1.y - v2.y, z: v1.z - v2.z});
	});
var $ianmackenzie$elm_geometry$Vector3d$projectionIn = F2(
	function (_v0, _v1) {
		var d = _v0.a;
		var v = _v1.a;
		var projectedLength = ((v.x * d.x) + (v.y * d.y)) + (v.z * d.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: d.x * projectedLength, y: d.y * projectedLength, z: d.z * projectedLength});
	});
var $ianmackenzie$elm_geometry$SketchPlane3d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (computedXDirection) {
				var secondCandidate = A2($ianmackenzie$elm_geometry$Vector3d$from, secondPoint, thirdPoint);
				var firstCandidate = A2($ianmackenzie$elm_geometry$Vector3d$from, firstPoint, thirdPoint);
				var chosenVector = A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$ianmackenzie$elm_geometry$Vector3d$length(secondCandidate),
					$ianmackenzie$elm_geometry$Vector3d$length(firstCandidate)) ? firstCandidate : secondCandidate;
				var yVector = A2(
					$ianmackenzie$elm_geometry$Vector3d$minus,
					A2($ianmackenzie$elm_geometry$Vector3d$projectionIn, computedXDirection, chosenVector),
					chosenVector);
				return A2(
					$elm$core$Maybe$map,
					function (computedYDirection) {
						return $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
							{originPoint: firstPoint, xDirection: computedXDirection, yDirection: computedYDirection});
					},
					$ianmackenzie$elm_geometry$Vector3d$direction(yVector));
			},
			A2($ianmackenzie$elm_geometry$Direction3d$from, firstPoint, secondPoint));
	});
var $ianmackenzie$elm_geometry$Arc3d$throughPoints = F3(
	function (firstPoint, secondPoint, thirdPoint) {
		return A2(
			$elm$core$Maybe$andThen,
			function (sketchPlane) {
				return A2(
					$elm$core$Maybe$map,
					$ianmackenzie$elm_geometry$Arc3d$on(sketchPlane),
					A3(
						$ianmackenzie$elm_geometry$Arc2d$throughPoints,
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, firstPoint),
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, secondPoint),
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, thirdPoint)));
			},
			A3($ianmackenzie$elm_geometry$SketchPlane3d$throughPoints, firstPoint, secondPoint, thirdPoint));
	});
var $ianmackenzie$elm_geometry$Polyline3d$vertices = function (_v0) {
	var polylineVertices = _v0.a;
	return polylineVertices;
};
var $ianmackenzie$elm_geometry$Geometry$Types$Axis3d = function (a) {
	return {$: 'Axis3d', a: a};
};
var $ianmackenzie$elm_geometry$Axis3d$withDirection = F2(
	function (givenDirection, givenPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Axis3d(
			{direction: givenDirection, originPoint: givenPoint});
	});
var $author$project$DomainModel$withoutTime = function (pt) {
	return {space: pt, time: $elm$core$Maybe$Nothing};
};
var $author$project$Tools$Graph$addSelfLoop = F2(
	function (node, options) {
		var graph = options.graph;
		var _v0 = $elm_community$list_extra$List$Extra$last(graph.userRoute);
		if (_v0.$ === 'Just') {
			var traversal = _v0.a;
			var _v1 = A2($elm$core$Dict$get, traversal.edge, graph.edges);
			if (_v1.$ === 'Just') {
				var edgeInfo = _v1.a;
				var _v2 = _Utils_eq(traversal.direction, $author$project$Tools$GraphOptions$Natural) ? _Utils_Tuple3(
					edgeInfo.highNode,
					$author$project$DomainModel$getLastLeaf(edgeInfo.track.trackTree).directionAtEnd,
					A2(
						$author$project$DomainModel$earthPointFromIndex,
						$author$project$DomainModel$skipCount(edgeInfo.track.trackTree),
						edgeInfo.track.trackTree)) : _Utils_Tuple3(
					edgeInfo.lowNode,
					$ianmackenzie$elm_geometry$Direction2d$reverse(
						$author$project$DomainModel$getFirstLeaf(edgeInfo.track.trackTree).directionAtStart),
					A2($author$project$DomainModel$earthPointFromIndex, 0, edgeInfo.track.trackTree));
				var edgeDirection = _v2.b;
				var endPoint = _v2.c;
				var loopOpposite = A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2(
						$ianmackenzie$elm_geometry$Vector3d$withLength,
						$ianmackenzie$elm_units$Quantity$twice(options.minimumRadiusAtPlaces),
						A2($ianmackenzie$elm_geometry$Direction3d$on, $ianmackenzie$elm_geometry$SketchPlane3d$xy, edgeDirection)),
					endPoint.space);
				var loopCentre = A2($ianmackenzie$elm_geometry$Point3d$midpoint, endPoint.space, loopOpposite);
				var axis = A2($ianmackenzie$elm_geometry$Axis3d$withDirection, $ianmackenzie$elm_geometry$Direction3d$positiveZ, loopCentre);
				var _v3 = _Utils_Tuple2(
					A3(
						$ianmackenzie$elm_geometry$Point3d$rotateAround,
						axis,
						$ianmackenzie$elm_units$Angle$degrees(30),
						endPoint.space),
					A3(
						$ianmackenzie$elm_geometry$Point3d$rotateAround,
						axis,
						$ianmackenzie$elm_units$Angle$degrees(-30),
						endPoint.space));
				var arcStart = _v3.a;
				var arcEnd = _v3.b;
				var arc = A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, arcStart, loopOpposite, arcEnd);
				if (arc.$ === 'Just') {
					var isArc = arc.a;
					var edgePoints = A2(
						$elm$core$List$map,
						$author$project$DomainModel$gpxFromPointWithReference(graph.referenceLonLat),
						A2(
							$elm$core$List$map,
							$author$project$DomainModel$withoutTime,
							$ianmackenzie$elm_geometry$Polyline3d$vertices(
								A2(
									$ianmackenzie$elm_geometry$Arc3d$approximate,
									$ianmackenzie$elm_units$Length$meters(0.1),
									isArc))));
					var newEdgeTree = A2($author$project$DomainModel$treeFromSourcesWithExistingReference, edgeInfo.track.referenceLonLat, edgePoints);
					var newEdgeTrack = A2(
						$elm$core$Maybe$map,
						$author$project$TrackLoaded$newTrackFromTree(edgeInfo.track.referenceLonLat),
						newEdgeTree);
					var newGraph = function () {
						if (newEdgeTrack.$ === 'Just') {
							var newTrack = newEdgeTrack.a;
							var newEdgeInfo = {
								highNode: node,
								lowNode: node,
								via: $author$project$Tools$Graph$makeXY(
									$author$project$DomainModel$withoutTime(loopOpposite))
							};
							var newEdgeIndex = $elm$core$Dict$size(graph.edges);
							return _Utils_update(
								graph,
								{
									edges: A3(
										$elm$core$Dict$insert,
										newEdgeIndex,
										{highNode: newEdgeInfo.highNode, lowNode: newEdgeInfo.lowNode, originalDirection: $author$project$Tools$GraphOptions$Natural, track: newTrack, via: newEdgeInfo.via},
										graph.edges)
								});
						} else {
							return graph;
						}
					}();
					return _Utils_update(
						options,
						{graph: newGraph});
				} else {
					return options;
				}
			} else {
				return options;
			}
		} else {
			return options;
		}
	});
var $author$project$TrackLoaded$addToUndoStack = F5(
	function (action, fromStart, fromEnd, oldPoints, oldTrack) {
		var undoEntry = {action: action, currentPosition: oldTrack.currentPosition, fromEnd: fromEnd, fromStart: fromStart, markerPosition: oldTrack.markerPosition, originalPoints: oldPoints};
		return _Utils_update(
			oldTrack,
			{
				redos: _List_Nil,
				undos: A2($elm$core$List$cons, undoEntry, oldTrack.undos)
			});
	});
var $author$project$Tools$GraphOptions$Reverse = {$: 'Reverse'};
var $author$project$Tools$Graph$addTraversal = F2(
	function (newEdge, options) {
		var graph = options.graph;
		var _v0 = _Utils_Tuple2(
			$elm_community$list_extra$List$Extra$last(graph.userRoute),
			A2($elm$core$Dict$get, newEdge, graph.edges));
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'Just') {
				if (_v0.b.$ === 'Just') {
					var traversal = _v0.a.a;
					var addedEdgeInfo = _v0.b.a;
					var _v1 = A2($elm$core$Dict$get, traversal.edge, graph.edges);
					if (_v1.$ === 'Just') {
						var lastEdgeInfo = _v1.a;
						var newEdgeDirection = function () {
							if (_Utils_eq(addedEdgeInfo.lowNode, addedEdgeInfo.highNode)) {
								return $author$project$Tools$GraphOptions$Natural;
							} else {
								var finalNode = _Utils_eq(traversal.direction, $author$project$Tools$GraphOptions$Natural) ? lastEdgeInfo.highNode : lastEdgeInfo.lowNode;
								return _Utils_eq(finalNode, addedEdgeInfo.lowNode) ? $author$project$Tools$GraphOptions$Natural : $author$project$Tools$GraphOptions$Reverse;
							}
						}();
						var newGraph = _Utils_update(
							graph,
							{
								userRoute: _Utils_ap(
									graph.userRoute,
									_List_fromArray(
										[
											{direction: newEdgeDirection, edge: newEdge}
										]))
							});
						return _Utils_update(
							options,
							{
								graph: newGraph,
								selectedTraversal: $elm$core$List$length(newGraph.userRoute) - 1
							});
					} else {
						return options;
					}
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'Just') {
					var _v2 = _v0.a;
					var newGraph = _Utils_update(
						graph,
						{
							userRoute: _Utils_ap(
								graph.userRoute,
								_List_fromArray(
									[
										{direction: $author$project$Tools$GraphOptions$Natural, edge: newEdge}
									]))
						});
					return _Utils_update(
						options,
						{
							graph: newGraph,
							selectedTraversal: $elm$core$List$length(newGraph.userRoute) - 1
						});
				} else {
					break _v0$2;
				}
			}
		}
		return options;
	});
var $author$project$SplitPane$Bound$getValue = function (value) {
	return value.a;
};
var $author$project$SplitPane$SplitPane$getPosition = function (_v0) {
	var s = _v0.a;
	var _v1 = s.splitterPosition;
	if (_v1.$ === 'Percentage') {
		var percent = _v1.a;
		return $author$project$SplitPane$Bound$getValue(percent);
	} else {
		var pixels = _v1.a;
		return $author$project$SplitPane$Bound$getValue(pixels);
	}
};
var $author$project$Main$adjustSpaceForContent = function (model) {
	var _v0 = _Utils_Tuple2(20, 160);
	var reservedWidth = _v0.a;
	var reservedHeight = _v0.b;
	var availableWidthPixels = ($author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge) - $author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge)) - reservedWidth;
	var _v1 = _Utils_Tuple2(model.windowSize.a, model.windowSize.b);
	var height = _v1.b;
	return _Utils_update(
		model,
		{
			contentArea: _Utils_Tuple2(
				$ianmackenzie$elm_units$Pixels$pixels(
					$elm$core$Basics$round(availableWidthPixels)),
				$ianmackenzie$elm_units$Pixels$pixels(
					$elm$core$Basics$round(height - reservedHeight)))
		});
};
var $elm$core$Process$sleep = _Process_sleep;
var $andrewMacmurray$elm_delay$Delay$after = F2(
	function (time, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(time));
	});
var $elm$core$Basics$truncate = _Basics_truncate;
var $author$project$Main$allocateSpaceForDocksAndContent = F3(
	function (newWidth, newHeight, model) {
		var currentLeftSplit = $author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge) | 0;
		var _v0 = model.windowSize;
		var startWidth = _v0.a;
		var currentRightSplit = (startWidth | 0) - ($author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge) | 0);
		return $author$project$Main$adjustSpaceForContent(
			_Utils_update(
				model,
				{
					leftDockRightEdge: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							currentLeftSplit,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(20, (newWidth / 3) | 0))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
					rightDockLeftEdge: A2(
						$author$project$SplitPane$SplitPane$configureSplitter,
						A2(
							$author$project$SplitPane$SplitPane$px,
							newWidth - currentRightSplit,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(((2 * newWidth) / 3) | 0, newWidth - 20))),
						$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
					windowSize: _Utils_Tuple2(newWidth, newHeight)
				}));
	});
var $ianmackenzie$elm_units$Length$centimeters = function (numCentimeters) {
	return $ianmackenzie$elm_units$Length$meters(0.01 * numCentimeters);
};
var $ianmackenzie$elm_units$Length$centimeter = $ianmackenzie$elm_units$Length$centimeters(1);
var $author$project$DomainModel$gpxDistance = F2(
	function (p1, p2) {
		return $ianmackenzie$elm_units$Length$meters(
			A2(
				$author$project$Spherical$range,
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(p1.longitude),
					p1.latitude),
				_Utils_Tuple2(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(p2.longitude),
					p2.latitude)));
	});
var $author$project$TrackLoaded$asPreviewPoints = F3(
	function (track, startDistance, earths) {
		var foldFn = F2(
			function (earth, _v2) {
				var distance = _v2.a;
				var mLastGpx = _v2.b;
				var outputs = _v2.c;
				var thisGpx = A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth);
				var thisPreview = {earthPoint: earth, gpx: thisGpx};
				var thisDistance = function () {
					if (mLastGpx.$ === 'Just') {
						var lastGpx = mLastGpx.a;
						return A2($author$project$DomainModel$gpxDistance, lastGpx, thisGpx);
					} else {
						return $ianmackenzie$elm_units$Length$centimeter;
					}
				}();
				return _Utils_Tuple3(
					A2($ianmackenzie$elm_units$Quantity$plus, thisDistance, distance),
					$elm$core$Maybe$Just(thisGpx),
					A2($elm$core$List$cons, thisPreview, outputs));
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			foldFn,
			_Utils_Tuple3(startDistance, $elm$core$Maybe$Nothing, _List_Nil),
			earths);
		var reversed = _v0.c;
		return $elm$core$List$reverse(reversed);
	});
var $author$project$DomainModel$trueLength = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).trueLength;
};
var $author$project$DomainModel$distanceFromIndex = F2(
	function (index, treeNode) {
		distanceFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return (index <= 0) ? $ianmackenzie$elm_units$Length$meters(0) : info.trueLength;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 1) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue distanceFromIndex;
				} else {
					return A2(
						$ianmackenzie$elm_units$Quantity$plus,
						$author$project$DomainModel$trueLength(info.left),
						A2(
							$author$project$DomainModel$distanceFromIndex,
							index - $author$project$DomainModel$skipCount(info.left),
							info.right));
				}
			}
		}
	});
var $ianmackenzie$elm_units$Quantity$divideBy = F2(
	function (divisor, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(value / divisor);
	});
var $author$project$TrackLoaded$getRangeFromMarkers = function (track) {
	var theLength = $author$project$DomainModel$skipCount(track.trackTree);
	var _v0 = track.markerPosition;
	if (_v0.$ === 'Just') {
		var purple = _v0.a;
		return _Utils_Tuple2(
			A2($elm$core$Basics$min, track.currentPosition, purple),
			A2($elm$core$Basics$min, theLength - track.currentPosition, theLength - purple));
	} else {
		return _Utils_Tuple2(track.currentPosition, theLength - track.currentPosition);
	}
};
var $ianmackenzie$elm_geometry$Point3d$interpolateFrom = F3(
	function (_v0, _v1, t) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return (t <= 0.5) ? $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p1.x + (t * (p2.x - p1.x)), y: p1.y + (t * (p2.y - p1.y)), z: p1.z + (t * (p2.z - p1.z))}) : $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p2.x + ((1 - t) * (p1.x - p2.x)), y: p2.y + ((1 - t) * (p1.y - p2.y)), z: p2.z + ((1 - t) * (p1.z - p2.z))});
	});
var $author$project$Utils$interpolateTimes = F3(
	function (proportion, fromTime, toTime) {
		var _v0 = _Utils_Tuple2(fromTime, toTime);
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var timeA = _v0.a.a;
			var timeB = _v0.b.a;
			var _v1 = _Utils_Tuple2(
				$elm$time$Time$posixToMillis(timeA),
				$elm$time$Time$posixToMillis(timeB));
			var floatTimeA = _v1.a;
			var floatTimeB = _v1.b;
			var newFloat = ((1.0 - proportion) * floatTimeA) + (proportion * floatTimeB);
			var newInt = $elm$core$Basics$floor(newFloat);
			var intermediate = $elm$time$Time$millisToPosix(newInt);
			return $elm$core$Maybe$Just(intermediate);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$Interpolate$computeNewPoints = F3(
	function (excludeExisting, options, track) {
		var interpolateStartIndex = excludeExisting ? 1 : 0;
		var interpolateRoadSection = F2(
			function (road, _new) {
				var intervalsNeeded = $elm$core$Basics$ceiling(
					A2($ianmackenzie$elm_units$Quantity$ratio, road.trueLength, options.minimumSpacing));
				var spacingOnThisSegment = A2($ianmackenzie$elm_units$Quantity$divideBy, intervalsNeeded, road.trueLength);
				var fractionalIncrement = A2($ianmackenzie$elm_units$Quantity$ratio, spacingOnThisSegment, road.trueLength);
				var interpolatedPoints = A2(
					$elm$core$List$map,
					function (n) {
						return {
							space: A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, road.startPoint.space, road.endPoint.space, fractionalIncrement * n),
							time: A3($author$project$Utils$interpolateTimes, fractionalIncrement * n, road.startPoint.time, road.endPoint.time)
						};
					},
					A2($elm$core$List$range, interpolateStartIndex, intervalsNeeded - 1));
				return _Utils_ap(
					$elm$core$List$reverse(interpolatedPoints),
					_new);
			});
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newPoints = $elm$core$List$reverse(
			A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				fromStart,
				$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
				$elm$core$Basics$always($elm$core$Maybe$Nothing),
				0,
				track.trackTree,
				interpolateRoadSection,
				_List_Nil));
		return A3(
			$author$project$TrackLoaded$asPreviewPoints,
			track,
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			newPoints);
	});
var $author$project$DomainModel$safeJoin = F2(
	function (left, right) {
		var _v0 = _Utils_Tuple2(left, right);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'Just') {
				var leftTree = _v0.a.a;
				var rightTree = _v0.b.a;
				return $elm$core$Maybe$Just(
					A2($author$project$DomainModel$joiningNode, leftTree, rightTree));
			} else {
				var _v1 = _v0.b;
				return left;
			}
		} else {
			if (_v0.b.$ === 'Just') {
				var _v2 = _v0.a;
				return right;
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $author$project$DomainModel$takeFromLeft = F2(
	function (leavesFromLeft, treeNode) {
		if (leavesFromLeft <= 0) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (_Utils_cmp(
				leavesFromLeft,
				$author$project$DomainModel$skipCount(treeNode)) > -1) {
				return $elm$core$Maybe$Just(treeNode);
			} else {
				if (treeNode.$ === 'Leaf') {
					return $elm$core$Maybe$Nothing;
				} else {
					var record = treeNode.a;
					return A2(
						$author$project$DomainModel$safeJoin,
						A2($author$project$DomainModel$takeFromLeft, leavesFromLeft, record.left),
						A2(
							$author$project$DomainModel$takeFromLeft,
							leavesFromLeft - $author$project$DomainModel$skipCount(record.left),
							record.right));
				}
			}
		}
	});
var $author$project$DomainModel$takePointsFromLeft = F2(
	function (numPoints, tree) {
		if (!numPoints) {
			return _List_Nil;
		} else {
			if (numPoints === 1) {
				return _List_fromArray(
					[
						A2($author$project$DomainModel$gpxPointFromIndex, 0, tree)
					]);
			} else {
				var leftLeaves = A2($author$project$DomainModel$takeFromLeft, numPoints - 1, tree);
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$DomainModel$getAllGPXPointsInNaturalOrder, leftLeaves));
			}
		}
	});
var $author$project$DomainModel$takeFromRight = F2(
	function (leavesFromRight, treeNode) {
		if (leavesFromRight <= 0) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (_Utils_cmp(
				leavesFromRight,
				$author$project$DomainModel$skipCount(treeNode)) > -1) {
				return $elm$core$Maybe$Just(treeNode);
			} else {
				if (treeNode.$ === 'Leaf') {
					return $elm$core$Maybe$Nothing;
				} else {
					var record = treeNode.a;
					return A2(
						$author$project$DomainModel$safeJoin,
						A2(
							$author$project$DomainModel$takeFromRight,
							leavesFromRight - $author$project$DomainModel$skipCount(record.right),
							record.left),
						A2($author$project$DomainModel$takeFromRight, leavesFromRight, record.right));
				}
			}
		}
	});
var $author$project$DomainModel$takePointsFromRight = F2(
	function (numPoints, tree) {
		if (!numPoints) {
			return _List_Nil;
		} else {
			if (numPoints === 1) {
				return _List_fromArray(
					[
						$author$project$DomainModel$getLastLeaf(tree).sourceData.b
					]);
			} else {
				var rightLeaves = A2($author$project$DomainModel$takeFromRight, numPoints - 1, tree);
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$DomainModel$getAllGPXPointsInNaturalOrder, rightLeaves));
			}
		}
	});
var $author$project$DomainModel$replaceRange = F5(
	function (fromStart, fromEnd, withReferencePoint, newPoints, currentTree) {
		var rightBit = A2($author$project$DomainModel$takePointsFromRight, fromEnd, currentTree);
		var leftBit = A2($author$project$DomainModel$takePointsFromLeft, fromStart, currentTree);
		return A2(
			$author$project$DomainModel$treeFromSourcesWithExistingReference,
			withReferencePoint,
			_Utils_ap(
				leftBit,
				_Utils_ap(newPoints, rightBit)));
	});
var $author$project$Tools$Interpolate$apply = F2(
	function (options, track) {
		var newCourse = A2(
			$elm$core$List$map,
			function ($) {
				return $.gpx;
			},
			A3($author$project$Tools$Interpolate$computeNewPoints, false, options, track));
		var _v0 = function () {
			var _v1 = options.extent;
			if (_v1.$ === 'ExtentIsRange') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd + 1, track.referenceLonLat, newCourse, track.trackTree);
		return newTree;
	});
var $author$project$Tools$MoveAndStretch$apply = F2(
	function (options, track) {
		var gpxPoints = A2(
			$elm$core$List$map,
			function ($) {
				return $.gpx;
			},
			options.preview);
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd, track.referenceLonLat, gpxPoints, track.trackTree);
		return newTree;
	});
var $author$project$BezierSplines$SplineFoldState = F3(
	function (roadMinusOne, roadMinusTwo, newPoints) {
		return {newPoints: newPoints, roadMinusOne: roadMinusOne, roadMinusTwo: roadMinusTwo};
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.firstControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.fourthControlPoint;
};
var $ianmackenzie$elm_units$Quantity$multiplyBy = F2(
	function (scale, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(scale * value);
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.secondControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint = function (_v0) {
	var spline = _v0.a;
	return spline.thirdControlPoint;
};
var $ianmackenzie$elm_geometry$CubicSpline3d$maxSecondDerivativeMagnitude = function (spline) {
	var p4 = $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint(spline);
	var p3 = $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint(spline);
	var u3 = A2($ianmackenzie$elm_geometry$Vector3d$from, p3, p4);
	var p2 = $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint(spline);
	var u2 = A2($ianmackenzie$elm_geometry$Vector3d$from, p2, p3);
	var v2 = A2($ianmackenzie$elm_geometry$Vector3d$minus, u2, u3);
	var p1 = $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint(spline);
	var u1 = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
	var v1 = A2($ianmackenzie$elm_geometry$Vector3d$minus, u1, u2);
	return A2(
		$ianmackenzie$elm_units$Quantity$multiplyBy,
		6,
		A2(
			$ianmackenzie$elm_units$Quantity$max,
			$ianmackenzie$elm_geometry$Vector3d$length(v1),
			$ianmackenzie$elm_geometry$Vector3d$length(v2)));
};
var $ianmackenzie$elm_geometry$Curve$numApproximationSegments = function (_v0) {
	var maxSecondDerivativeMagnitude = _v0.maxSecondDerivativeMagnitude;
	var maxError = _v0.maxError;
	if (A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, maxError)) {
		var computedNumSegments = $elm$core$Basics$sqrt(
			A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				maxSecondDerivativeMagnitude,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, 8, maxError)));
		return A2(
			$elm$core$Basics$max,
			$elm$core$Basics$ceiling(computedNumSegments),
			1);
	} else {
		return 0;
	}
};
var $ianmackenzie$elm_geometry$CubicSpline3d$numApproximationSegments = F2(
	function (maxError, spline) {
		return $ianmackenzie$elm_geometry$Curve$numApproximationSegments(
			{
				maxError: maxError,
				maxSecondDerivativeMagnitude: $ianmackenzie$elm_geometry$CubicSpline3d$maxSecondDerivativeMagnitude(spline)
			});
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$pointOn = F2(
	function (spline, parameterValue) {
		var p4 = $ianmackenzie$elm_geometry$CubicSpline3d$fourthControlPoint(spline);
		var p3 = $ianmackenzie$elm_geometry$CubicSpline3d$thirdControlPoint(spline);
		var q3 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p3, p4, parameterValue);
		var p2 = $ianmackenzie$elm_geometry$CubicSpline3d$secondControlPoint(spline);
		var q2 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p2, p3, parameterValue);
		var r2 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, q2, q3, parameterValue);
		var p1 = $ianmackenzie$elm_geometry$CubicSpline3d$firstControlPoint(spline);
		var q1 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, p1, p2, parameterValue);
		var r1 = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, q1, q2, parameterValue);
		return A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, r1, r2, parameterValue);
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$segments = F2(
	function (numSegments, spline) {
		return $ianmackenzie$elm_geometry$Polyline3d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$CubicSpline3d$pointOn(spline)));
	});
var $ianmackenzie$elm_geometry$CubicSpline3d$approximate = F2(
	function (maxError, spline) {
		return A2(
			$ianmackenzie$elm_geometry$CubicSpline3d$segments,
			A2($ianmackenzie$elm_geometry$CubicSpline3d$numApproximationSegments, maxError, spline),
			spline);
	});
var $author$project$BezierSplines$combinePointAndTime = F2(
	function (place, time) {
		return {space: place, time: time};
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$Utils$equalIntervals = F3(
	function (pointsToAdd, fromTime, toTime) {
		return A2(
			$elm$core$List$map,
			function (pointNum) {
				return A3($author$project$Utils$interpolateTimes, pointNum / (1.0 + pointsToAdd), fromTime, toTime);
			},
			A2($elm$core$List$range, 1, pointsToAdd));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$CubicSpline3d = function (a) {
	return {$: 'CubicSpline3d', a: a};
};
var $ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints = F4(
	function (p1, p2, p3, p4) {
		return $ianmackenzie$elm_geometry$Geometry$Types$CubicSpline3d(
			{firstControlPoint: p1, fourthControlPoint: p4, secondControlPoint: p2, thirdControlPoint: p3});
	});
var $author$project$BezierSplines$bezierSplineApproximation = F6(
	function (isLoop, tension, tolerance, startIndx, endIndex, treeNode) {
		var midPoint = function (road) {
			return A2($ianmackenzie$elm_geometry$Point3d$midpoint, road.startPoint.space, road.endPoint.space);
		};
		var foldFn = F2(
			function (road, state) {
				var _v0 = state.roadMinusOne;
				if (_v0.$ === 'Nothing') {
					return _Utils_update(
						state,
						{
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				} else {
					var roadMinusOne = _v0.a;
					var _v1 = _Utils_Tuple2(road.startPoint.time, road.endPoint.time);
					var timeAtStart = _v1.a;
					var timeAtEnd = _v1.b;
					var _v2 = _Utils_Tuple2(
						_Utils_Tuple2(
							midPoint(roadMinusOne),
							roadMinusOne.endPoint.space),
						_Utils_Tuple2(
							road.startPoint.space,
							midPoint(road)));
					var _v3 = _v2.a;
					var b1 = _v3.a;
					var c1 = _v3.b;
					var _v4 = _v2.b;
					var a2 = _v4.a;
					var b2 = _v4.b;
					var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, b1, c1, a2, b2);
					var polylineFromSpline = A2(
						$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
						$ianmackenzie$elm_units$Length$meters(0.2 * tolerance),
						spline);
					var vertices = $elm$core$List$reverse(
						A2(
							$elm$core$List$drop,
							1,
							$ianmackenzie$elm_geometry$Polyline3d$vertices(polylineFromSpline)));
					var times = A2(
						$elm$core$List$cons,
						timeAtEnd,
						_Utils_ap(
							A3(
								$author$project$Utils$equalIntervals,
								$elm$core$List$length(vertices),
								timeAtEnd,
								timeAtStart),
							_List_fromArray(
								[timeAtStart])));
					return _Utils_update(
						state,
						{
							newPoints: _Utils_ap(
								A3($elm$core$List$map2, $author$project$BezierSplines$combinePointAndTime, vertices, times),
								state.newPoints),
							roadMinusOne: $elm$core$Maybe$Just(road),
							roadMinusTwo: state.roadMinusOne
						});
				}
			});
		var foldOutput = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startIndx,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A3($author$project$BezierSplines$SplineFoldState, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LineSegment3d = function (a) {
	return {$: 'LineSegment3d', a: a};
};
var $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints = function (givenEndpoints) {
	return $ianmackenzie$elm_geometry$Geometry$Types$LineSegment3d(givenEndpoints);
};
var $ianmackenzie$elm_geometry$LineSegment3d$from = F2(
	function (givenStartPoint, givenEndPoint) {
		return $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints(
			_Utils_Tuple2(givenStartPoint, givenEndPoint));
	});
var $ianmackenzie$elm_geometry$Triangle3d$vertices = function (_v0) {
	var triangleVertices = _v0.a;
	return triangleVertices;
};
var $ianmackenzie$elm_geometry$Triangle3d$edges = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	return _Utils_Tuple3(
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p1, p2),
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p2, p3),
		A2($ianmackenzie$elm_geometry$LineSegment3d$from, p3, p1));
};
var $ianmackenzie$elm_geometry$LineSegment3d$endPoint = function (_v0) {
	var _v1 = _v0.a;
	var end = _v1.b;
	return end;
};
var $ianmackenzie$elm_geometry$LineSegment3d$endpoints = function (_v0) {
	var lineSegmentEndpoints = _v0.a;
	return lineSegmentEndpoints;
};
var $ianmackenzie$elm_geometry$LineSegment3d$vector = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
};
var $ianmackenzie$elm_geometry$LineSegment3d$length = function (lineSegment) {
	return $ianmackenzie$elm_geometry$Vector3d$length(
		$ianmackenzie$elm_geometry$LineSegment3d$vector(lineSegment));
};
var $ianmackenzie$elm_geometry$Vector3d$scaleBy = F2(
	function (k, _v0) {
		var v = _v0.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: k * v.x, y: k * v.y, z: k * v.z});
	});
var $ianmackenzie$elm_geometry$LineSegment3d$startPoint = function (_v0) {
	var _v1 = _v0.a;
	var start = _v1.a;
	return start;
};
var $author$project$BezierSplines$controlPointsFromTriangle = F2(
	function (tension, triangle) {
		var _v0 = $ianmackenzie$elm_geometry$Triangle3d$edges(triangle);
		var entryEdge = _v0.a;
		var exitEdge = _v0.b;
		var oppositeEdge = _v0.c;
		var controlPointVector = A2(
			$ianmackenzie$elm_geometry$Vector3d$from,
			$ianmackenzie$elm_geometry$LineSegment3d$startPoint(oppositeEdge),
			$ianmackenzie$elm_geometry$LineSegment3d$endPoint(oppositeEdge));
		var _v1 = _Utils_Tuple3(
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$LineSegment3d$length(entryEdge)),
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$LineSegment3d$length(oppositeEdge)),
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$LineSegment3d$length(exitEdge)));
		var ab = _v1.a;
		var bc = _v1.c;
		var _v2 = _Utils_Tuple2((((-1.0) * tension) * ab) / (ab + bc), (tension * bc) / (ab + bc));
		var entryFactor = _v2.a;
		var exitFactor = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, entryFactor, controlPointVector),
			A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, exitFactor, controlPointVector));
		var entryScaleVector = _v3.a;
		var exitScalevector = _v3.b;
		var _v4 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
		var b = _v4.b;
		var _v5 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Point3d$translateBy, entryScaleVector, b),
			A2($ianmackenzie$elm_geometry$Point3d$translateBy, exitScalevector, b));
		var entryPoint = _v5.a;
		var exitPoint = _v5.b;
		return _Utils_Tuple3(entryPoint, b, exitPoint);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Triangle3d = function (a) {
	return {$: 'Triangle3d', a: a};
};
var $ianmackenzie$elm_geometry$Triangle3d$from = F3(
	function (p1, p2, p3) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Triangle3d(
			_Utils_Tuple3(p1, p2, p3));
	});
var $author$project$BezierSplines$bezierSplinesThroughExistingPoints = F6(
	function (isLoop, tension, tolerance, startIndx, endIndex, treeNode) {
		var foldFn = F2(
			function (road, state) {
				var _v0 = _Utils_Tuple2(state.roadMinusOne, state.roadMinusTwo);
				if (_v0.a.$ === 'Nothing') {
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return _Utils_update(
							state,
							{
								roadMinusOne: $elm$core$Maybe$Just(road)
							});
					} else {
						var _v4 = _v0.a;
						return state;
					}
				} else {
					if (_v0.b.$ === 'Nothing') {
						var _v3 = _v0.b;
						return _Utils_update(
							state,
							{
								roadMinusOne: $elm$core$Maybe$Just(road),
								roadMinusTwo: state.roadMinusOne
							});
					} else {
						var roadMinusOne = _v0.a.a;
						var roadMinusTwo = _v0.b.a;
						var triangle2 = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusOne.startPoint.space, roadMinusOne.endPoint.space, road.endPoint.space);
						var triangle1 = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusTwo.startPoint.space, roadMinusTwo.endPoint.space, roadMinusOne.endPoint.space);
						var _v5 = _Utils_Tuple2(road.startPoint.time, road.endPoint.time);
						var timeAtStart = _v5.a;
						var timeAtEnd = _v5.b;
						var _v6 = _Utils_Tuple2(
							A2($author$project$BezierSplines$controlPointsFromTriangle, tension, triangle1),
							A2($author$project$BezierSplines$controlPointsFromTriangle, tension, triangle2));
						var _v7 = _v6.a;
						var c1 = _v7.a;
						var b1 = _v7.b;
						var _v8 = _v6.b;
						var b2 = _v8.b;
						var a2 = _v8.c;
						var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, b1, c1, a2, b2);
						var polylineFromSpline = A2(
							$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.2 * tolerance),
							spline);
						var vertices = $elm$core$List$reverse(
							A2(
								$elm$core$List$drop,
								1,
								$ianmackenzie$elm_geometry$Polyline3d$vertices(polylineFromSpline)));
						var times = A2(
							$elm$core$List$map,
							function (vertexNum) {
								return A3(
									$author$project$Utils$interpolateTimes,
									vertexNum / $elm$core$List$length(vertices),
									timeAtStart,
									timeAtEnd);
							},
							A2(
								$elm$core$List$range,
								0,
								$elm$core$List$length(vertices) - 1));
						return _Utils_update(
							state,
							{
								newPoints: _Utils_ap(
									A3($elm$core$List$map2, $author$project$BezierSplines$combinePointAndTime, vertices, times),
									state.newPoints),
								roadMinusOne: $elm$core$Maybe$Just(road),
								roadMinusTwo: state.roadMinusOne
							});
					}
				}
			});
		var foldOutput = isLoop ? A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startIndx,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A3(
				$author$project$BezierSplines$SplineFoldState,
				$elm$core$Maybe$Just(
					$author$project$DomainModel$getLastLeaf(treeNode)),
				$elm$core$Maybe$Nothing,
				_List_Nil)) : A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			startIndx,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A3($author$project$BezierSplines$SplineFoldState, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Tools$BezierSplines$computeNewPoints = F2(
	function (options, track) {
		var splineFunction = function () {
			var _v1 = options.bezierStyle;
			if (_v1.$ === 'ThroughExisting') {
				return $author$project$BezierSplines$bezierSplinesThroughExistingPoints;
			} else {
				return $author$project$BezierSplines$bezierSplineApproximation;
			}
		}();
		var _v0 = (!_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing)) ? $author$project$TrackLoaded$getRangeFromMarkers(track) : _Utils_Tuple2(0, 0);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var distanceToPreview = A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree);
		var splineEarthPoints = A6(
			splineFunction,
			false,
			options.bezierTension,
			options.bezierTolerance,
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
			track.trackTree);
		return A3($author$project$TrackLoaded$asPreviewPoints, track, distanceToPreview, splineEarthPoints);
	});
var $author$project$Tools$BezierSplines$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = (!_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing)) ? $author$project$TrackLoaded$getRangeFromMarkers(track) : _Utils_Tuple2(0, 0);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart + 1,
			fromEnd + 1,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.gpx;
				},
				A2($author$project$Tools$BezierSplines$computeNewPoints, options, track)),
			track.trackTree);
		return newTree;
	});
var $author$project$Tools$BezierSplines$bezierApproximationFor1CQF = function (track) {
	var outputTree = A2($author$project$Tools$BezierSplines$applyUsingOptions, $author$project$Tools$BezierSplines$defaultOptions, track);
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $author$project$Tools$CentroidAverage$FoldState = F2(
	function (roadMinusOne, newPoints) {
		return {newPoints: newPoints, roadMinusOne: roadMinusOne};
	});
var $ianmackenzie$elm_geometry$Point3d$centroid3 = F3(
	function (_v0, _v1, _v2) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var p3 = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: (p1.x + ((p2.x - p1.x) / 3)) + ((p3.x - p1.x) / 3), y: (p1.y + ((p2.y - p1.y) / 3)) + ((p3.y - p1.y) / 3), z: (p1.z + ((p2.z - p1.z) / 3)) + ((p3.z - p1.z) / 3)});
	});
var $ianmackenzie$elm_geometry$Triangle3d$centroid = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	return A3($ianmackenzie$elm_geometry$Point3d$centroid3, p1, p2, p3);
};
var $ianmackenzie$elm_geometry$Vector3d$projectOnto = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var v = _v1.a;
		var _v2 = plane.normalDirection;
		var n = _v2.a;
		var normalProjection = ((v.x * n.x) + (v.y * n.y)) + (v.z * n.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: v.x - (normalProjection * n.x), y: v.y - (normalProjection * n.y), z: v.z - (normalProjection * n.z)});
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Plane3d = function (a) {
	return {$: 'Plane3d', a: a};
};
var $ianmackenzie$elm_geometry$Plane3d$through = F2(
	function (givenPoint, givenNormalDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Plane3d(
			{normalDirection: givenNormalDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Direction3d$z = $ianmackenzie$elm_geometry$Direction3d$positiveZ;
var $ianmackenzie$elm_geometry$Plane3d$xy = A2($ianmackenzie$elm_geometry$Plane3d$through, $ianmackenzie$elm_geometry$Point3d$origin, $ianmackenzie$elm_geometry$Direction3d$z);
var $ianmackenzie$elm_geometry$Vector3d$xyz = F3(
	function (_v0, _v1, _v2) {
		var x = _v0.a;
		var y = _v1.a;
		var z = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_geometry$Vector3d$zComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.z);
};
var $ianmackenzie$elm_geometry$Vector3d$zero = $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
	{x: 0, y: 0, z: 0});
var $author$project$Tools$CentroidAverage$centroidAverage = F5(
	function (isLoop, options, fromStart, fromEnd, treeNode) {
		var foldFn = F2(
			function (road, state) {
				var _v0 = state.roadMinusOne;
				if (_v0.$ === 'Nothing') {
					return _Utils_update(
						state,
						{
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				} else {
					var roadMinusOne = _v0.a;
					var originalPoint = road.startPoint.space;
					var triangle = A3($ianmackenzie$elm_geometry$Triangle3d$from, roadMinusOne.startPoint.space, originalPoint, road.endPoint.space);
					var centroid = $ianmackenzie$elm_geometry$Triangle3d$centroid(triangle);
					var newPoint = A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, originalPoint, centroid, options.weighting);
					var shiftVector = A2($ianmackenzie$elm_geometry$Vector3d$from, originalPoint, newPoint);
					var shiftWithOptions = (options.applyToAltitude && options.applyToPosition) ? shiftVector : (options.applyToPosition ? A2($ianmackenzie$elm_geometry$Vector3d$projectOnto, $ianmackenzie$elm_geometry$Plane3d$xy, shiftVector) : (options.applyToAltitude ? A3(
						$ianmackenzie$elm_geometry$Vector3d$xyz,
						$ianmackenzie$elm_units$Quantity$zero,
						$ianmackenzie$elm_units$Quantity$zero,
						$ianmackenzie$elm_geometry$Vector3d$zComponent(shiftVector)) : $ianmackenzie$elm_geometry$Vector3d$zero));
					var adjustedPoint = {
						space: A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftWithOptions, originalPoint),
						time: road.startPoint.time
					};
					return _Utils_update(
						state,
						{
							newPoints: A2($elm$core$List$cons, adjustedPoint, state.newPoints),
							roadMinusOne: $elm$core$Maybe$Just(road)
						});
				}
			});
		var foldOutput = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			fromStart,
			$author$project$DomainModel$skipCount(treeNode) - fromEnd,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			treeNode,
			foldFn,
			A2($author$project$Tools$CentroidAverage$FoldState, $elm$core$Maybe$Nothing, _List_Nil));
		return $elm$core$List$reverse(foldOutput.newPoints);
	});
var $author$project$Tools$CentroidAverage$computeNewPoints = F2(
	function (options, track) {
		var _v0 = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var distanceToPreview = A2($author$project$DomainModel$distanceFromIndex, fromStart + 1, track.trackTree);
		var earthPoints = A5($author$project$Tools$CentroidAverage$centroidAverage, false, options, fromStart, fromEnd, track.trackTree);
		return A3($author$project$TrackLoaded$asPreviewPoints, track, distanceToPreview, earthPoints);
	});
var $author$project$Tools$CentroidAverage$applyUsingOptions = F2(
	function (options, track) {
		var newPoints = A2($author$project$Tools$CentroidAverage$computeNewPoints, options, track);
		var _v0 = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart + 1,
			fromEnd + 1,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.gpx;
				},
				newPoints),
			track.trackTree);
		return newTree;
	});
var $author$project$Tools$CentroidAverage$centroidAverageFor1CQF = function (track) {
	var outputTree = A2($author$project$Tools$CentroidAverage$applyUsingOptions, $author$project$Tools$CentroidAverage$defaultOptions, track);
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $JohnBugner$elm_loop$Loop$for = function () {
	var for_ = F4(
		function (i, n, f, v) {
			for_:
			while (true) {
				if (_Utils_cmp(i, n) < 0) {
					var $temp$i = i + 1,
						$temp$n = n,
						$temp$f = f,
						$temp$v = f(v);
					i = $temp$i;
					n = $temp$n;
					f = $temp$f;
					v = $temp$v;
					continue for_;
				} else {
					return v;
				}
			}
		});
	return for_(0);
}();
var $author$project$DomainModel$getAllGPXPointsInDict = function (treeNode) {
	var internalFoldFn = F2(
		function (road, _v1) {
			var index = _v1.a;
			var dict = _v1.b;
			return _Utils_Tuple2(
				index + 1,
				A3($elm$core$Dict$insert, index, road.sourceData.b, dict));
		});
	var _v0 = A3(
		$author$project$DomainModel$foldOverRoute,
		internalFoldFn,
		treeNode,
		_Utils_Tuple2(
			1,
			A3(
				$elm$core$Dict$insert,
				0,
				A2($author$project$DomainModel$gpxPointFromIndex, 0, treeNode),
				$elm$core$Dict$empty)));
	var outputs = _v0.b;
	return outputs;
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Tools$Simplify$apply = F2(
	function (options, track) {
		var originalCourse = $author$project$DomainModel$getAllGPXPointsInDict(track.trackTree);
		var newCourse = A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, _v0, out) {
					return A2($elm$core$Dict$remove, k, out);
				}),
			originalCourse,
			options.pointsToRemove);
		var newTree = A2(
			$author$project$DomainModel$treeFromSourcesWithExistingReference,
			track.referenceLonLat,
			$elm$core$Dict$values(newCourse));
		return newTree;
	});
var $ianmackenzie$elm_geometry$Vector3d$cross = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: (v1.y * v2.z) - (v1.z * v2.y), y: (v1.z * v2.x) - (v1.x * v2.z), z: (v1.x * v2.y) - (v1.y * v2.x)});
	});
var $ianmackenzie$elm_geometry$Triangle3d$area = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle3d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	var firstVector = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
	var secondVector = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p3);
	return A2(
		$ianmackenzie$elm_units$Quantity$multiplyBy,
		0.5,
		$ianmackenzie$elm_geometry$Vector3d$length(
			A2($ianmackenzie$elm_geometry$Vector3d$cross, secondVector, firstVector)));
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$List$sortWith = _List_sortWith;
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Tools$Simplify$findSimplifications = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v5) {
				var index = _v5.a;
				var previousIfAny = _v5.b;
				var outputs = _v5.c;
				if (previousIfAny.$ === 'Nothing') {
					return _Utils_Tuple3(
						1,
						$elm$core$Maybe$Just(road),
						_List_Nil);
				} else {
					var previous = previousIfAny.a;
					return _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								index,
								$ianmackenzie$elm_geometry$Triangle3d$area(
									A3($ianmackenzie$elm_geometry$Triangle3d$from, previous.startPoint.space, road.startPoint.space, road.endPoint.space))),
							outputs));
				}
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple3(0, $elm$core$Maybe$Nothing, _List_Nil));
		var triangleInfo = _v0.c;
		var selectSmallestAreas = A2(
			$elm$core$List$take,
			($elm$core$List$length(triangleInfo) / 5) | 0,
			A2(
				$elm$core$List$sortWith,
				F2(
					function (_v2, _v3) {
						var area1 = _v2.b;
						var area2 = _v3.b;
						return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, area2, area1) ? $elm$core$Basics$LT : $elm$core$Basics$GT;
					}),
				triangleInfo));
		var nonAdjacentEntries = A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, outputs) {
					var idx = _v1.a;
					return (A2($elm$core$Dict$member, idx + 1, outputs) || A2($elm$core$Dict$member, idx - 1, outputs)) ? outputs : A3($elm$core$Dict$insert, idx, idx, outputs);
				}),
			$elm$core$Dict$empty,
			selectSmallestAreas);
		return _Utils_update(
			options,
			{pointsToRemove: nonAdjacentEntries});
	});
var $author$project$Tools$Simplify$simplifyFor1CQF = function (track) {
	var options = A2($author$project$Tools$Simplify$findSimplifications, $author$project$Tools$Simplify$defaultOptions, track.trackTree);
	var outputTree = A2($author$project$Tools$Simplify$apply, options, track);
	return A2($elm$core$Maybe$withDefault, track.trackTree, outputTree);
};
var $author$project$Tools$OneClickQuickFix$apply = function (originalTrack) {
	var trackWithNoMarkers = _Utils_update(
		originalTrack,
		{markerPosition: $elm$core$Maybe$Nothing});
	var smoothTrack = function (track) {
		return _Utils_update(
			track,
			{
				trackTree: $author$project$Tools$CentroidAverage$centroidAverageFor1CQF(track)
			});
	};
	var simplifyTrack = function (anyTrack) {
		simplifyTrack:
		while (true) {
			var treeWithOneRoundOfPointsRemoved = $author$project$Tools$Simplify$simplifyFor1CQF(anyTrack);
			var mnumberOfPointsRemoved = $author$project$DomainModel$skipCount(treeWithOneRoundOfPointsRemoved) - $author$project$DomainModel$skipCount(anyTrack.trackTree);
			var meanSpacing = A2(
				$ianmackenzie$elm_units$Quantity$divideBy,
				$author$project$DomainModel$skipCount(anyTrack.trackTree),
				$author$project$DomainModel$trueLength(anyTrack.trackTree));
			if (A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				$ianmackenzie$elm_units$Length$meters(25),
				meanSpacing) && (mnumberOfPointsRemoved > 0)) {
				var $temp$anyTrack = _Utils_update(
					anyTrack,
					{trackTree: treeWithOneRoundOfPointsRemoved});
				anyTrack = $temp$anyTrack;
				continue simplifyTrack;
			} else {
				return _Utils_update(
					anyTrack,
					{trackTree: treeWithOneRoundOfPointsRemoved});
			}
		}
	};
	var bezierApprox = function (track) {
		return _Utils_update(
			track,
			{
				trackTree: $author$project$Tools$BezierSplines$bezierApproximationFor1CQF(track)
			});
	};
	var finalTrack = A3(
		$JohnBugner$elm_loop$Loop$for,
		3,
		smoothTrack,
		bezierApprox(
			simplifyTrack(trackWithNoMarkers)));
	return $elm$core$Maybe$Just(finalTrack.trackTree);
};
var $ianmackenzie$elm_geometry$Point3d$along = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var distance = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y), z: p0.z + (distance * d.z)});
	});
var $ianmackenzie$elm_units$Quantity$half = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(0.5 * value);
};
var $author$project$DomainModel$leafFromIndex = F2(
	function (index, treeNode) {
		leafFromIndex:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				return treeNode;
			} else {
				var info = treeNode.a;
				if (_Utils_cmp(
					index,
					$author$project$DomainModel$skipCount(info.left)) < 0) {
					var $temp$index = index,
						$temp$treeNode = info.left;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue leafFromIndex;
				} else {
					var $temp$index = index - $author$project$DomainModel$skipCount(info.left),
						$temp$treeNode = info.right;
					index = $temp$index;
					treeNode = $temp$treeNode;
					continue leafFromIndex;
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$Direction2d$rotateBy = F2(
	function (_v0, _v1) {
		var angle = _v0.a;
		var d = _v1.a;
		var s = $elm$core$Basics$sin(angle);
		var c = $elm$core$Basics$cos(angle);
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
			{x: (c * d.x) - (s * d.y), y: (s * d.x) + (c * d.y)});
	});
var $author$project$Tools$Nudge$effectiveDirection = F2(
	function (index, tree) {
		var thisLeaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index, tree));
		var precedingLeaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index - 1, tree));
		var deviation = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, precedingLeaf.directionAtStart, thisLeaf.directionAtStart);
		var halfDeviation = $ianmackenzie$elm_units$Quantity$half(deviation);
		return A2($ianmackenzie$elm_geometry$Direction2d$rotateBy, halfDeviation, precedingLeaf.directionAtStart);
	});
var $author$project$Tools$Nudge$nudgeEarthPoint = F4(
	function (options, fade, direction, rawPoint) {
		var verticalVector = A2(
			$ianmackenzie$elm_geometry$Vector3d$scaleBy,
			fade,
			A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, options.vertical));
		var horizontalVector = A2(
			$ianmackenzie$elm_geometry$Vector3d$scaleBy,
			fade,
			A2(
				$ianmackenzie$elm_geometry$Vector3d$withLength,
				options.horizontal,
				A2(
					$ianmackenzie$elm_geometry$Direction3d$on,
					$ianmackenzie$elm_geometry$SketchPlane3d$xy,
					$ianmackenzie$elm_geometry$Direction2d$rotateClockwise(direction))));
		var newXYZ = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			verticalVector,
			A2($ianmackenzie$elm_geometry$Point3d$translateBy, horizontalVector, rawPoint.space));
		return _Utils_update(
			rawPoint,
			{space: newXYZ});
	});
var $author$project$Tools$Nudge$nudgeTrackPoint = F4(
	function (options, fade, index, tree) {
		if (!fade) {
			return A2($author$project$DomainModel$earthPointFromIndex, index, tree);
		} else {
			var unNudged = A2($author$project$DomainModel$earthPointFromIndex, index, tree);
			var horizontalDirection = A2($author$project$Tools$Nudge$effectiveDirection, index, tree);
			return A4($author$project$Tools$Nudge$nudgeEarthPoint, options, fade, horizontalDirection, unNudged);
		}
	});
var $ianmackenzie$elm_geometry$Axis3d$through = F2(
	function (givenPoint, givenDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Axis3d(
			{direction: givenDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Axis3d$throughPoints = F2(
	function (firstPoint, secondPoint) {
		var _v0 = A2($ianmackenzie$elm_geometry$Direction3d$from, firstPoint, secondPoint);
		if (_v0.$ === 'Just') {
			var axisDirection = _v0.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$Axis3d$through, firstPoint, axisDirection));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$OutAndBack$apply = F2(
	function (options, track) {
		var useNudgeTool = F2(
			function (nudgeOption, index) {
				return A4($author$project$Tools$Nudge$nudgeTrackPoint, nudgeOption, 1.0, index, track.trackTree);
			});
		var noNudge = $author$project$Tools$Nudge$defaultOptions;
		var outwardLeg = function () {
			var nudge = _Utils_update(
				noNudge,
				{
					horizontal: $ianmackenzie$elm_units$Length$meters(options.offset)
				});
			return A2(
				$elm$core$List$map,
				useNudgeTool(nudge),
				A2(
					$elm$core$List$range,
					0,
					$author$project$DomainModel$skipCount(track.trackTree)));
		}();
		var outwardInGpx = A2(
			$elm$core$List$map,
			$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
			outwardLeg);
		var returnLeg = function () {
			var nudge = _Utils_update(
				noNudge,
				{
					horizontal: $ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(options.offset)),
					vertical: $ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$centimeter)
				});
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$map,
					useNudgeTool(nudge),
					A2(
						$elm$core$List$range,
						0,
						$author$project$DomainModel$skipCount(track.trackTree))));
		}();
		var returnInGpx = A2(
			$elm$core$List$map,
			$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat),
			returnLeg);
		var homeTurnMidpoint = function () {
			var homeLeaf = $author$project$DomainModel$getFirstLeaf(track.trackTree);
			var leafAxis = A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, homeLeaf.startPoint.space, homeLeaf.endPoint.space);
			if (leafAxis.$ === 'Just') {
				var axis = leafAxis.a;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$along,
					axis,
					$ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(
							$elm$core$Basics$abs(options.offset))));
			} else {
				return homeLeaf.startPoint.space;
			}
		}();
		var homeTurn = function () {
			var firstOutwardPoint = $elm$core$List$head(outwardLeg);
			var finalInwardPoint = $elm_community$list_extra$List$Extra$last(returnLeg);
			var _v4 = _Utils_Tuple2(finalInwardPoint, firstOutwardPoint);
			if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
				var inEarth = _v4.a.a;
				var outEarth = _v4.b.a;
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, inEarth.space, homeTurnMidpoint, outEarth.space);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var homeTurnInGpx = function () {
			if (homeTurn.$ === 'Just') {
				var arc = homeTurn.a;
				return A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$DomainModel$withoutTime,
						$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat)),
					$ianmackenzie$elm_geometry$Polyline3d$vertices(
						A2(
							$ianmackenzie$elm_geometry$Arc3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.1),
							arc)));
			} else {
				return _List_Nil;
			}
		}();
		var awayTurnMidpoint = function () {
			var awayLeaf = $author$project$DomainModel$getLastLeaf(track.trackTree);
			var leafAxis = A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, awayLeaf.endPoint.space, awayLeaf.startPoint.space);
			if (leafAxis.$ === 'Just') {
				var axis = leafAxis.a;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$along,
					axis,
					$ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$meters(
							$elm$core$Basics$abs(options.offset))));
			} else {
				return awayLeaf.endPoint.space;
			}
		}();
		var awayTurn = function () {
			var firstInwardPoint = $elm$core$List$head(returnLeg);
			var finalOutwardPoint = $elm_community$list_extra$List$Extra$last(outwardLeg);
			var _v1 = _Utils_Tuple2(finalOutwardPoint, firstInwardPoint);
			if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
				var outEarth = _v1.a.a;
				var backEarth = _v1.b.a;
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, outEarth.space, awayTurnMidpoint, backEarth.space);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var awayTurnInGpx = function () {
			if (awayTurn.$ === 'Just') {
				var arc = awayTurn.a;
				return A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$DomainModel$withoutTime,
						$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat)),
					$ianmackenzie$elm_geometry$Polyline3d$vertices(
						A2(
							$ianmackenzie$elm_geometry$Arc3d$approximate,
							$ianmackenzie$elm_units$Length$meters(0.1),
							arc)));
			} else {
				return _List_Nil;
			}
		}();
		var newCourse = _Utils_ap(
			outwardInGpx,
			_Utils_ap(
				awayTurnInGpx,
				_Utils_ap(returnInGpx, homeTurnInGpx)));
		var newTree = $author$project$DomainModel$treeFromSourcePoints(newCourse);
		return newTree;
	});
var $author$project$TrackLoaded$adjustAltitude = F2(
	function (alt, pt) {
		return _Utils_update(
			pt,
			{
				space: A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					$ianmackenzie$elm_geometry$Point3d$xCoordinate(pt.space),
					$ianmackenzie$elm_geometry$Point3d$yCoordinate(pt.space),
					alt)
			});
	});
var $author$project$DomainModel$getDualCoords = F2(
	function (tree, index) {
		return _Utils_Tuple2(
			A2($author$project$DomainModel$earthPointFromIndex, index, tree),
			A2($author$project$DomainModel$gpxPointFromIndex, index, tree));
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$Tools$ProfileSmooth$averageGradientsWithWindow = F2(
	function (options, track) {
		var startState = {
			index: 0,
			lastAltitude: A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree).altitude,
			leading: _List_Nil,
			outputs: _List_fromArray(
				[
					A2($author$project$DomainModel$getDualCoords, track.trackTree, 0)
				]),
			trailing: _List_Nil
		};
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var flusher = function (_v1) {
			flusher:
			while (true) {
				var leading = _v1.leading;
				var trailing = _v1.trailing;
				var outputs = _v1.outputs;
				var lastAltitude = _v1.lastAltitude;
				var index = _v1.index;
				if (!leading.b) {
					return $elm$core$List$reverse(outputs);
				} else {
					var justPassedRoad = leading.a;
					if ((_Utils_cmp(index, fromStart) > 0) && (_Utils_cmp(index, endIndex) < 0)) {
						var mergeListsForGradient = A2(
							$elm$core$List$map,
							function ($) {
								return $.gradientAtStart;
							},
							_Utils_ap(leading, trailing));
						var justPassedGpx = justPassedRoad.sourceData.b;
						var averageGradient = $elm$core$List$sum(mergeListsForGradient) / $elm$core$List$length(mergeListsForGradient);
						var newAltitude = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							lastAltitude,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, averageGradient / 100.0, justPassedRoad.trueLength));
						var revisedEarthPoint = A2($author$project$TrackLoaded$adjustAltitude, newAltitude, justPassedRoad.endPoint);
						var revisedGpx = _Utils_update(
							justPassedGpx,
							{altitude: newAltitude});
						var $temp$_v1 = {
							index: index + 1,
							lastAltitude: newAltitude,
							leading: A2($elm$core$List$drop, 1, leading),
							outputs: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(revisedEarthPoint, revisedGpx),
								outputs),
							trailing: _Utils_ap(
								A2($elm$core$List$take, 1, leading),
								trailing)
						};
						_v1 = $temp$_v1;
						continue flusher;
					} else {
						var $temp$_v1 = {
							index: index + 1,
							lastAltitude: $ianmackenzie$elm_geometry$Point3d$zCoordinate(justPassedRoad.endPoint.space),
							leading: A2($elm$core$List$drop, 1, leading),
							outputs: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(justPassedRoad.endPoint, justPassedRoad.sourceData.b),
								outputs),
							trailing: _Utils_ap(
								A2($elm$core$List$take, 1, leading),
								trailing)
						};
						_v1 = $temp$_v1;
						continue flusher;
					}
				}
			}
		};
		var slidingWindowSmoother = F2(
			function (road, _v7) {
				var leading = _v7.leading;
				var trailing = _v7.trailing;
				var outputs = _v7.outputs;
				var lastAltitude = _v7.lastAltitude;
				var index = _v7.index;
				var extendedLeadingBuffer = _Utils_ap(
					leading,
					_List_fromArray(
						[road]));
				var _v3 = (_Utils_cmp(
					$elm$core$List$length(extendedLeadingBuffer),
					options.windowSize) > 0) ? _Utils_Tuple2(
					A2($elm$core$List$drop, 1, extendedLeadingBuffer),
					_Utils_ap(
						A2($elm$core$List$take, 1, extendedLeadingBuffer),
						trailing)) : _Utils_Tuple2(extendedLeadingBuffer, trailing);
				var newLeading = _v3.a;
				var newTrailing = _v3.b;
				var _v4 = function () {
					if (!newTrailing.b) {
						return _Utils_Tuple2(outputs, lastAltitude);
					} else {
						var justPassedRoad = newTrailing.a;
						var mergeListsForGradient = A2(
							$elm$core$List$map,
							function ($) {
								return $.gradientAtStart;
							},
							_Utils_ap(newLeading, newTrailing));
						var justPassedGpx = justPassedRoad.sourceData.b;
						var averageGradient = $elm$core$List$sum(mergeListsForGradient) / $elm$core$List$length(mergeListsForGradient);
						var newAltitude = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							lastAltitude,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, averageGradient / 100.0, justPassedRoad.trueLength));
						var _v6 = ((_Utils_cmp(index - options.windowSize, fromStart) > 0) && (_Utils_cmp(index - options.windowSize, endIndex) < 0)) ? _Utils_Tuple2(
							A2($author$project$TrackLoaded$adjustAltitude, newAltitude, justPassedRoad.endPoint),
							_Utils_update(
								justPassedGpx,
								{altitude: newAltitude})) : _Utils_Tuple2(justPassedRoad.endPoint, justPassedGpx);
						var revisedEarthPoint = _v6.a;
						var revisedGpx = _v6.b;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(revisedEarthPoint, revisedGpx),
								outputs),
							newAltitude);
					}
				}();
				var newOutputs = _v4.a;
				var nextAltitude = _v4.b;
				return {
					index: index + 1,
					lastAltitude: nextAltitude,
					leading: newLeading,
					outputs: newOutputs,
					trailing: A2($elm$core$List$take, options.windowSize, newTrailing)
				};
			});
		var finalState = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			slidingWindowSmoother,
			startState);
		return flusher(finalState);
	});
var $author$project$Tools$ProfileSmooth$Clamped = F2(
	function (a, b) {
		return {$: 'Clamped', a: a, b: b};
	});
var $author$project$Tools$ProfileSmooth$NotClamped = F2(
	function (a, b) {
		return {$: 'NotClamped', a: a, b: b};
	});
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $author$project$Tools$ProfileSmooth$emptySlopeStuff = {roads: _List_Nil, totalClamped: $ianmackenzie$elm_units$Quantity$zero, totalOffered: $ianmackenzie$elm_units$Quantity$zero};
var $ianmackenzie$elm_units$Quantity$equalWithin = F3(
	function (_v0, _v1, _v2) {
		var tolerance = _v0.a;
		var x = _v1.a;
		var y = _v2.a;
		return _Utils_cmp(
			$elm$core$Basics$abs(x - y),
			tolerance) < 1;
	});
var $author$project$Tools$ProfileSmooth$limitGradientsWithRedistribution = F2(
	function (options, track) {
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var _v1 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				A2($author$project$DomainModel$earthPointFromIndex, fromStart, track.trackTree).space));
		var startDistance = _v1.a;
		var startAltitude = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, endIndex, track.trackTree),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				A2($author$project$DomainModel$earthPointFromIndex, endIndex, track.trackTree).space));
		var endDistance = _v2.a;
		var endAltitude = _v2.b;
		var averageSlope = (A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, startAltitude, endAltitude) || A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, startDistance, endDistance)) ? 0.0 : A2(
			$ianmackenzie$elm_units$Quantity$ratio,
			A2($ianmackenzie$elm_units$Quantity$minus, startAltitude, endAltitude),
			A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance));
		var slopeDiscoveryFn = F2(
			function (road, slopeStuff) {
				var clampedSlope = 0.01 * A3($elm$core$Basics$clamp, -options.maximumDescent, options.maximumAscent, road.gradientAtStart);
				var altitudeIfAverageSlope = A2($ianmackenzie$elm_units$Quantity$multiplyBy, averageSlope, road.trueLength);
				var altitudeChange = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint.space),
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.endPoint.space));
				var altitudeGap = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, clampedSlope, road.trueLength),
					altitudeChange);
				var availableToOffer = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitudeIfAverageSlope);
				var thisSectionSummary = ((_Utils_cmp(road.gradientAtStart, options.maximumAscent) < 1) && (_Utils_cmp(road.gradientAtStart, -options.maximumDescent) > -1)) ? A2($author$project$Tools$ProfileSmooth$NotClamped, road, availableToOffer) : A2($author$project$Tools$ProfileSmooth$Clamped, road, clampedSlope);
				return {
					roads: A2($elm$core$List$cons, thisSectionSummary, slopeStuff.roads),
					totalClamped: A2($ianmackenzie$elm_units$Quantity$plus, slopeStuff.totalClamped, altitudeGap),
					totalOffered: A2($ianmackenzie$elm_units$Quantity$plus, slopeStuff.totalOffered, availableToOffer)
				};
			});
		var slopeInfo = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			slopeDiscoveryFn,
			$author$project$Tools$ProfileSmooth$emptySlopeStuff);
		var proRataToAllocate = (A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, $ianmackenzie$elm_units$Quantity$zero, slopeInfo.totalClamped) || A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, $ianmackenzie$elm_units$Quantity$zero, slopeInfo.totalOffered)) ? 0.0 : A2($ianmackenzie$elm_units$Quantity$ratio, slopeInfo.totalOffered, slopeInfo.totalClamped);
		var allocateProRata = F2(
			function (section, _v6) {
				var altitude = _v6.a;
				var outputs = _v6.b;
				var _v4 = function () {
					if (section.$ === 'Clamped') {
						var roadSection = section.a;
						var slope = section.b;
						var baseGPX = roadSection.sourceData.a;
						var altitudeChange = A2($ianmackenzie$elm_units$Quantity$multiplyBy, slope, roadSection.trueLength);
						var newStartAltitude = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitude);
						var newStartPoint = A2($author$project$TrackLoaded$adjustAltitude, newStartAltitude, roadSection.startPoint);
						return _Utils_Tuple2(
							newStartPoint,
							_Utils_update(
								baseGPX,
								{altitude: newStartAltitude}));
					} else {
						var roadSection = section.a;
						var offered = section.b;
						var baseGPX = roadSection.sourceData.a;
						var altitudeChange = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, proRataToAllocate, offered),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, roadSection.gradientAtStart / 100.0, roadSection.trueLength));
						var newStartAltitude = A2($ianmackenzie$elm_units$Quantity$minus, altitudeChange, altitude);
						var newStartPoint = A2($author$project$TrackLoaded$adjustAltitude, newStartAltitude, roadSection.startPoint);
						return _Utils_Tuple2(
							newStartPoint,
							_Utils_update(
								baseGPX,
								{altitude: newStartAltitude}));
					}
				}();
				var earth = _v4.a;
				var gpx = _v4.b;
				return _Utils_Tuple2(
					gpx.altitude,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(earth, gpx),
						outputs));
			});
		var _v3 = A3(
			$elm$core$List$foldl,
			allocateProRata,
			_Utils_Tuple2(endAltitude, _List_Nil),
			slopeInfo.roads);
		var adjustedPoints = _v3.b;
		return adjustedPoints;
	});
var $author$project$Tools$ProfileSmooth$simpleLimitGradients = F2(
	function (options, track) {
		var startAltitude = A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree).altitude;
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var clamper = F2(
			function (road, _v2) {
				var index = _v2.a;
				var lastAltitude = _v2.b;
				var outputs = _v2.c;
				var newGradient = ((_Utils_cmp(index, fromStart) > 0) && (_Utils_cmp(index, endIndex) < 0)) ? A3($elm$core$Basics$clamp, -options.maximumDescent, options.maximumAscent, road.gradientAtStart) : road.gradientAtStart;
				var newEndAltitude = A2(
					$ianmackenzie$elm_units$Quantity$plus,
					lastAltitude,
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, newGradient / 100.0, road.trueLength));
				var newEarthPoint = A2($author$project$TrackLoaded$adjustAltitude, newEndAltitude, road.endPoint);
				var currentGpx = road.sourceData.b;
				var newGpx = _Utils_update(
					currentGpx,
					{altitude: newEndAltitude});
				return _Utils_Tuple3(
					index + 1,
					newEndAltitude,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(newEarthPoint, newGpx),
						outputs));
			});
		var _v1 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			clamper,
			_Utils_Tuple3(
				0,
				startAltitude,
				_List_fromArray(
					[
						A2($author$project$DomainModel$getDualCoords, track.trackTree, 0)
					])));
		var adjustedPoints = _v1.c;
		return $elm$core$List$reverse(adjustedPoints);
	});
var $ianmackenzie$elm_units$Quantity$sum = function (quantities) {
	return A3($elm$core$List$foldl, $ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_units$Quantity$zero, quantities);
};
var $author$project$Tools$ProfileSmooth$smoothAltitudesWithWindowAverage = F2(
	function (options, track) {
		var startState = {
			index: 0,
			leading: _List_Nil,
			outputs: _List_fromArray(
				[
					A2($author$project$DomainModel$getDualCoords, track.trackTree, 0)
				]),
			trailing: _List_Nil
		};
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var flusher = function (_v1) {
			flusher:
			while (true) {
				var leading = _v1.leading;
				var trailing = _v1.trailing;
				var outputs = _v1.outputs;
				var index = _v1.index;
				if (!leading.b) {
					return $elm$core$List$reverse(outputs);
				} else {
					var _v3 = leading.a;
					var justPassedEarthPoint = _v3.a;
					var justPassedGpx = _v3.b;
					var _v4 = function () {
						if ((_Utils_cmp(index, fromStart) > 0) && (_Utils_cmp(index, endIndex) < 0)) {
							var mergeListsForAltitude = A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeL,
									A2(
										$elm$core$Basics$composeL,
										$ianmackenzie$elm_geometry$Point3d$zCoordinate,
										function ($) {
											return $.space;
										}),
									$elm$core$Tuple$first),
								_Utils_ap(leading, trailing));
							var averageAltitude = A2(
								$ianmackenzie$elm_units$Quantity$divideBy,
								$elm$core$List$length(mergeListsForAltitude),
								$ianmackenzie$elm_units$Quantity$sum(mergeListsForAltitude));
							return _Utils_Tuple2(
								A2($author$project$TrackLoaded$adjustAltitude, averageAltitude, justPassedEarthPoint),
								_Utils_update(
									justPassedGpx,
									{altitude: averageAltitude}));
						} else {
							return _Utils_Tuple2(justPassedEarthPoint, justPassedGpx);
						}
					}();
					var revisedEarthPoint = _v4.a;
					var revisedGpx = _v4.b;
					var $temp$_v1 = {
						index: index + 1,
						leading: A2($elm$core$List$drop, 1, leading),
						outputs: A2(
							$elm$core$List$cons,
							_Utils_Tuple2(revisedEarthPoint, revisedGpx),
							outputs),
						trailing: _Utils_ap(
							A2($elm$core$List$take, 1, leading),
							trailing)
					};
					_v1 = $temp$_v1;
					continue flusher;
				}
			}
		};
		var slidingWindowSnoother = F2(
			function (road, _v8) {
				var leading = _v8.leading;
				var trailing = _v8.trailing;
				var outputs = _v8.outputs;
				var index = _v8.index;
				var extendedLeadingBuffer = _Utils_ap(
					leading,
					_List_fromArray(
						[
							_Utils_Tuple2(road.endPoint, road.sourceData.b)
						]));
				var _v5 = (_Utils_cmp(
					$elm$core$List$length(extendedLeadingBuffer),
					options.windowSize) > 0) ? _Utils_Tuple2(
					A2($elm$core$List$drop, 1, extendedLeadingBuffer),
					_Utils_ap(
						A2($elm$core$List$take, 1, extendedLeadingBuffer),
						trailing)) : _Utils_Tuple2(extendedLeadingBuffer, trailing);
				var newLeading = _v5.a;
				var newTrailing = _v5.b;
				var newOutputs = function () {
					if (!newTrailing.b) {
						return outputs;
					} else {
						var _v7 = newTrailing.a;
						var justPassedEarthPoint = _v7.a;
						var justPassedGpx = _v7.b;
						if ((_Utils_cmp(index - options.windowSize, fromStart) > 0) && (_Utils_cmp(index - options.windowSize, endIndex) < 0)) {
							var mergeListsForAltitude = A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeL,
									A2(
										$elm$core$Basics$composeL,
										$ianmackenzie$elm_geometry$Point3d$zCoordinate,
										function ($) {
											return $.space;
										}),
									$elm$core$Tuple$first),
								_Utils_ap(newLeading, newTrailing));
							var averageAltitude = A2(
								$ianmackenzie$elm_units$Quantity$divideBy,
								$elm$core$List$length(mergeListsForAltitude),
								$ianmackenzie$elm_units$Quantity$sum(mergeListsForAltitude));
							var revisedEarthPoint = A2($author$project$TrackLoaded$adjustAltitude, averageAltitude, justPassedEarthPoint);
							var revisedGpx = _Utils_update(
								justPassedGpx,
								{altitude: averageAltitude});
							return A2(
								$elm$core$List$cons,
								_Utils_Tuple2(revisedEarthPoint, revisedGpx),
								outputs);
						} else {
							return A2(
								$elm$core$List$cons,
								_Utils_Tuple2(justPassedEarthPoint, justPassedGpx),
								outputs);
						}
					}
				}();
				return {
					index: index + 1,
					leading: newLeading,
					outputs: newOutputs,
					trailing: A2($elm$core$List$take, options.windowSize, newTrailing)
				};
			});
		var finalState = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			slidingWindowSnoother,
			startState);
		return flusher(finalState);
	});
var $author$project$Tools$ProfileSmooth$useUniformGradient = F2(
	function (bumpiness, track) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var startIndex = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var _v1 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, startIndex, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, endIndex, track.trackTree));
		var startDistance = _v1.a;
		var endDistance = _v1.b;
		var rangeLength = A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance);
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$gpxPointFromIndex, startIndex, track.trackTree).altitude,
			A2($author$project$DomainModel$gpxPointFromIndex, endIndex, track.trackTree).altitude);
		var startAltitude = _v2.a;
		var endAltitude = _v2.b;
		var uniformSmoother = F2(
			function (road, _v4) {
				var index = _v4.a;
				var outputs = _v4.b;
				var newPoint = function () {
					if ((_Utils_cmp(index, startIndex) > 0) && (_Utils_cmp(index, endIndex) < 0)) {
						var oldGPX = road.sourceData.b;
						var distanceHere = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
						var _v3 = _Utils_Tuple2(
							A2($ianmackenzie$elm_units$Quantity$minus, startDistance, distanceHere),
							A2($ianmackenzie$elm_units$Quantity$minus, distanceHere, endDistance));
						var distanceFromStart = _v3.a;
						var proportionFromStart = A2($ianmackenzie$elm_units$Quantity$ratio, distanceFromStart, rangeLength);
						var altitudeIfUniform = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, proportionFromStart, endAltitude),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, 1.0 - proportionFromStart, startAltitude));
						var newAltitude = A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, 1.0 - bumpiness, altitudeIfUniform),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, bumpiness, oldGPX.altitude));
						return _Utils_Tuple2(
							{
								space: A3(
									$ianmackenzie$elm_geometry$Point3d$xyz,
									$ianmackenzie$elm_geometry$Point3d$xCoordinate(road.endPoint.space),
									$ianmackenzie$elm_geometry$Point3d$yCoordinate(road.endPoint.space),
									newAltitude),
								time: road.endPoint.time
							},
							_Utils_update(
								oldGPX,
								{altitude: newAltitude}));
					} else {
						return _Utils_Tuple2(
							{space: road.endPoint.space, time: road.endPoint.time},
							road.sourceData.b);
					}
				}();
				return _Utils_Tuple2(
					index + 1,
					A2($elm$core$List$cons, newPoint, outputs));
			});
		return _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _List_Nil : $elm$core$List$reverse(
			A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				0,
				$author$project$DomainModel$skipCount(track.trackTree),
				$elm$core$Basics$always($elm$core$Maybe$Nothing),
				0,
				track.trackTree,
				uniformSmoother,
				_Utils_Tuple2(
					1,
					_List_fromArray(
						[
							A2($author$project$DomainModel$getDualCoords, track.trackTree, 0)
						]))).b);
	});
var $author$project$Tools$ProfileSmooth$computeNewPoints = F2(
	function (options, track) {
		var _v0 = options.smoothMethod;
		switch (_v0.$) {
			case 'MethodLimit':
				return options.limitRedistributes ? A2($author$project$Tools$ProfileSmooth$limitGradientsWithRedistribution, options, track) : A2($author$project$Tools$ProfileSmooth$simpleLimitGradients, options, track);
			case 'MethodGradients':
				return A2($author$project$Tools$ProfileSmooth$averageGradientsWithWindow, options, track);
			case 'MethodAltitudes':
				return A2($author$project$Tools$ProfileSmooth$smoothAltitudesWithWindowAverage, options, track);
			default:
				return A2($author$project$Tools$ProfileSmooth$useUniformGradient, options.bumpiness, track);
		}
	});
var $author$project$Tools$ProfileSmooth$apply = F2(
	function (options, track) {
		var newCourse = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2($author$project$Tools$ProfileSmooth$computeNewPoints, options, track));
		var newTree = A5($author$project$DomainModel$replaceRange, 0, 0, track.referenceLonLat, newCourse, track.trackTree);
		var _v0 = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		return newTree;
	});
var $ianmackenzie$elm_geometry$LineSegment3d$interpolate = F2(
	function (lineSegment, t) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
		var start = _v0.a;
		var end = _v0.b;
		return A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, start, end, t);
	});
var $author$project$Tools$Straightener$computeNewPoints = F2(
	function (options, track) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var _v1 = _Utils_Tuple2(
			A2($author$project$DomainModel$earthPointFromIndex, fromStart, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, endIndex, track.trackTree));
		var startPoint = _v1.a;
		var endPoint = _v1.b;
		var idealLine = A2($ianmackenzie$elm_geometry$LineSegment3d$from, startPoint.space, endPoint.space);
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, endIndex, track.trackTree));
		var startDistance = _v2.a;
		var endDistance = _v2.b;
		var trackDistance = A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance);
		var applyAdjustment = F2(
			function (road, _v4) {
				var distance = _v4.a;
				var outputs = _v4.b;
				var proportionOfTrackDistance = A2($ianmackenzie$elm_units$Quantity$ratio, distance, trackDistance);
				var interpolatedPoint = {
					space: A2($ianmackenzie$elm_geometry$LineSegment3d$interpolate, idealLine, proportionOfTrackDistance),
					time: road.startPoint.time
				};
				var newPoint = options.preserveAltitude ? A2(
					$author$project$TrackLoaded$adjustAltitude,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint.space),
					interpolatedPoint) : interpolatedPoint;
				return _Utils_Tuple2(
					A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, distance),
					A2($elm$core$List$cons, newPoint, outputs));
			});
		var _v3 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			fromStart,
			endIndex,
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			track.trackTree,
			applyAdjustment,
			_Utils_Tuple2($ianmackenzie$elm_units$Quantity$zero, _List_Nil));
		var adjustedPoints = _v3.b;
		return A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, earth));
			},
			$elm$core$List$reverse(adjustedPoints));
	});
var $author$project$Tools$Straightener$apply = F2(
	function (options, track) {
		var newPoints = A2($author$project$Tools$Straightener$computeNewPoints, options, track);
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart,
			fromEnd,
			track.referenceLonLat,
			A2($elm$core$List$map, $elm$core$Tuple$second, newPoints),
			track.trackTree);
		return newTree;
	});
var $author$project$LandUseDataTypes$LandUseOK = {$: 'LandUseOK'};
var $ianmackenzie$elm_geometry$Point3d$centroidHelp = F8(
	function (x0, y0, z0, count, dx, dy, dz, points) {
		centroidHelp:
		while (true) {
			if (points.b) {
				var p = points.a.a;
				var remaining = points.b;
				var $temp$x0 = x0,
					$temp$y0 = y0,
					$temp$z0 = z0,
					$temp$count = count + 1,
					$temp$dx = dx + (p.x - x0),
					$temp$dy = dy + (p.y - y0),
					$temp$dz = dz + (p.z - z0),
					$temp$points = remaining;
				x0 = $temp$x0;
				y0 = $temp$y0;
				z0 = $temp$z0;
				count = $temp$count;
				dx = $temp$dx;
				dy = $temp$dy;
				dz = $temp$dz;
				points = $temp$points;
				continue centroidHelp;
			} else {
				return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
					{x: x0 + (dx / count), y: y0 + (dy / count), z: z0 + (dz / count)});
			}
		}
	});
var $ianmackenzie$elm_geometry$Point3d$centroid = F2(
	function (_v0, rest) {
		var p0 = _v0.a;
		return A8($ianmackenzie$elm_geometry$Point3d$centroidHelp, p0.x, p0.y, p0.z, 1, 0, 0, 0, rest);
	});
var $ianmackenzie$elm_geometry$Point3d$centroidN = function (points) {
	if (points.b) {
		var first = points.a;
		var rest = points.b;
		return $elm$core$Maybe$Just(
			A2($ianmackenzie$elm_geometry$Point3d$centroid, first, rest));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $ianmackenzie$elm_units$Length$foot = $ianmackenzie$elm_units$Length$feet(1);
var $ianmackenzie$elm_geometry$BoundingBox3d$minZ = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minZ;
};
var $author$project$LandUseDataOSM$applyAltitudes = F2(
	function (altitudes, track) {
		var justRaw = track.landUseData;
		var rawNodes = A2(
			$elm$core$List$filterMap,
			function (element) {
				if (element.$ === 'OSMNode') {
					var node = element.a;
					return $elm$core$Maybe$Just(node);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			justRaw.rawData.elements);
		var rawWays = A2(
			$elm$core$List$filterMap,
			function (element) {
				if (element.$ === 'OSMWay') {
					var way = element.a;
					return $elm$core$Maybe$Just(way);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			justRaw.rawData.elements);
		var groundLevel = A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_units$Length$foot,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
				$author$project$DomainModel$boundingBox(track.trackTree)));
		var nodeDict = $elm$core$Dict$fromList(
			A3(
				$elm$core$List$map2,
				F2(
					function (rawNode, maybeAltitude) {
						if (maybeAltitude.$ === 'Just') {
							var altitude = maybeAltitude.a;
							return _Utils_Tuple2(
								rawNode.id,
								{
									at: A2(
										$author$project$DomainModel$pointFromGpxWithReference,
										track.referenceLonLat,
										{
											altitude: $ianmackenzie$elm_units$Length$meters(altitude),
											latitude: $ianmackenzie$elm_units$Angle$degrees(rawNode.lat),
											longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
												$ianmackenzie$elm_units$Angle$degrees(rawNode.lon)),
											timestamp: $elm$core$Maybe$Nothing
										}),
									tags: rawNode.tags
								});
						} else {
							return _Utils_Tuple2(
								rawNode.id,
								{
									at: A2(
										$author$project$DomainModel$pointFromGpxWithReference,
										track.referenceLonLat,
										{
											altitude: groundLevel,
											latitude: $ianmackenzie$elm_units$Angle$degrees(rawNode.lat),
											longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
												$ianmackenzie$elm_units$Angle$degrees(rawNode.lon)),
											timestamp: $elm$core$Maybe$Nothing
										}),
									tags: rawNode.tags
								});
						}
					}),
				rawNodes,
				altitudes));
		var nodes = $elm$core$Dict$values(nodeDict);
		var convertWay = function (rawWay) {
			return {
				nodes: A2(
					$elm$core$List$filterMap,
					function (node) {
						return A2($elm$core$Dict$get, node, nodeDict);
					},
					rawWay.nodes),
				tags: rawWay.tags
			};
		};
		var ways = A2($elm$core$List$map, convertWay, rawWays);
		var addNamedWay = F2(
			function (way, names) {
				var _v2 = way.tags;
				if (_v2.$ === 'Just') {
					var tags = _v2.a;
					var _v3 = A2($elm$core$Dict$get, 'name', tags);
					if (_v3.$ === 'Just') {
						var hasName = _v3.a;
						var centroid = $author$project$DomainModel$withoutTime(
							A2(
								$elm$core$Maybe$withDefault,
								$ianmackenzie$elm_geometry$Point3d$origin,
								$ianmackenzie$elm_geometry$Point3d$centroidN(
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.at;
											},
											function ($) {
												return $.space;
											}),
										way.nodes))));
						return A3($elm$core$Dict$insert, hasName, centroid, names);
					} else {
						return names;
					}
				} else {
					return names;
				}
			});
		var addNamedNode = F2(
			function (node, names) {
				var _v0 = node.tags;
				if (_v0.$ === 'Just') {
					var tags = _v0.a;
					var _v1 = A2($elm$core$Dict$get, 'name', tags);
					if (_v1.$ === 'Just') {
						var hasName = _v1.a;
						return A3($elm$core$Dict$insert, hasName, node.at, names);
					} else {
						return names;
					}
				} else {
					return names;
				}
			});
		var places = A2(
			$elm$core$Dict$union,
			A3($elm$core$List$foldl, addNamedNode, $elm$core$Dict$empty, nodes),
			A3($elm$core$List$foldl, addNamedWay, $elm$core$Dict$empty, ways));
		return {
			nodes: nodes,
			places: places,
			rawData: {elements: _List_Nil},
			status: $author$project$LandUseDataTypes$LandUseOK,
			ways: ways
		};
	});
var $ianmackenzie$elm_geometry$Point3d$distanceFrom = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		var deltaZ = p2.z - p1.z;
		var deltaY = p2.y - p1.y;
		var deltaX = p2.x - p1.x;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(deltaX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(deltaY),
				$elm$core$Basics$abs(deltaZ)));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledZ = deltaZ / largestComponent;
			var scaledY = deltaY / largestComponent;
			var scaledX = deltaX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledLength * largestComponent);
		}
	});
var $elm_community$list_extra$List$Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _v1) {
				var y = _v1.a;
				var fy = _v1.b;
				var fx = f(x);
				return (_Utils_cmp(fx, fy) < 0) ? _Utils_Tuple2(x, fx) : _Utils_Tuple2(y, fy);
			});
		if (ls.b) {
			if (!ls.b.b) {
				var l_ = ls.a;
				return $elm$core$Maybe$Just(l_);
			} else {
				var l_ = ls.a;
				var ls_ = ls.b;
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$List$foldl,
						minBy,
						_Utils_Tuple2(
							l_,
							f(l_)),
						ls_).a);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Tools$StartFinish$applyCloseLoop = F2(
	function (options, track) {
		var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var numberedSplinePoints = A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, options.pointsToClose);
		var newStartPoint = A2(
			$elm_community$list_extra$List$Extra$minimumBy,
			function (_v3) {
				var idx = _v3.a;
				var preview = _v3.b;
				return $ianmackenzie$elm_units$Length$inMeters(
					A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, $ianmackenzie$elm_geometry$Point3d$origin, preview.earthPoint.space));
			},
			numberedSplinePoints);
		var newGpxPoints = A2(
			$elm$core$List$map,
			function ($) {
				return $.gpx;
			},
			options.pointsToClose);
		var collecEndPointsInReverse = F2(
			function (road, outputs) {
				return A2($elm$core$List$cons, road.sourceData.b, outputs);
			});
		var _v0 = function () {
			if (newStartPoint.$ === 'Just') {
				var _v2 = newStartPoint.a;
				var index = _v2.a;
				return _Utils_Tuple2(
					A2($elm$core$List$take, index + 1, newGpxPoints),
					A2($elm$core$List$drop, index, newGpxPoints));
			} else {
				return _Utils_Tuple2(newGpxPoints, _List_Nil);
			}
		}();
		var newEndPoints = _v0.a;
		var newStartPoints = _v0.b;
		var newPoints = _Utils_ap(
			newStartPoints,
			_Utils_ap(
				A2(
					$elm$core$List$drop,
					1,
					A2(
						$elm$core$List$take,
						$author$project$DomainModel$skipCount(track.trackTree) - 1,
						oldPoints)),
				newEndPoints));
		return $author$project$DomainModel$treeFromSourcePoints(newPoints);
	});
var $author$project$Utils$addTimes = F2(
	function (time1, time2) {
		var _v0 = _Utils_Tuple2(time1, time2);
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var t1 = _v0.a.a;
			var t2 = _v0.b.a;
			return $elm$core$Maybe$Just(
				$elm$time$Time$millisToPosix(
					$elm$time$Time$posixToMillis(t1) + $elm$time$Time$posixToMillis(t2)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Utils$subtractTimes = F2(
	function (startTime, endTime) {
		var _v0 = _Utils_Tuple2(startTime, endTime);
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var start = _v0.a.a;
			var end = _v0.b.a;
			return $elm$core$Maybe$Just(
				$elm$time$Time$millisToPosix(
					$elm$time$Time$posixToMillis(end) - $elm$time$Time$posixToMillis(start)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$Timestamp$applyDoubling = function (track) {
	var startTimeAbsolute = A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree).time;
	var adjustedPoint = function (gpx) {
		var relative = A2($author$project$Utils$subtractTimes, startTimeAbsolute, gpx.timestamp);
		return _Utils_update(
			gpx,
			{
				timestamp: A2($author$project$Utils$addTimes, gpx.timestamp, relative)
			});
	};
	if (startTimeAbsolute.$ === 'Just') {
		var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var newCourse = A2($elm$core$List$map, adjustedPoint, oldPoints);
		var newTree = $author$project$DomainModel$treeFromSourcePoints(newCourse);
		return newTree;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tools$MoveScaleRotate$applyMapElevations = F2(
	function (elevations, track) {
		var useNewElevation = F2(
			function (gpx, newAltitude) {
				if (newAltitude.$ === 'Just') {
					var altitude = newAltitude.a;
					return _Utils_update(
						gpx,
						{
							altitude: $ianmackenzie$elm_units$Length$meters(altitude)
						});
				} else {
					return gpx;
				}
			});
		var currentPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var adjustedPoints = A3($elm$core$List$map2, useNewElevation, currentPoints, elevations);
		return A2($author$project$DomainModel$treeFromSourcesWithExistingReference, track.referenceLonLat, adjustedPoints);
	});
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $author$project$Tools$StartFinish$applyMoveStart = F2(
	function (index, track) {
		var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var _v0 = A2($elm_community$list_extra$List$Extra$splitAt, index, oldPoints);
		var beforeNewStart = _v0.a;
		var afterNewStart = _v0.b;
		var newPoints = _Utils_ap(
			afterNewStart,
			_Utils_ap(
				A2($elm$core$List$drop, 1, beforeNewStart),
				A2($elm$core$List$take, 1, afterNewStart)));
		return $author$project$DomainModel$treeFromSourcePoints(newPoints);
	});
var $ianmackenzie$elm_units$Quantity$at_ = F2(
	function (_v0, _v1) {
		var rateOfChange = _v0.a;
		var dependentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(dependentValue / rateOfChange);
	});
var $elm$core$Basics$pow = _Basics_pow;
var $author$project$Tools$Timestamp$durationForSection = F2(
	function (power, section) {
		var effectiveGradient = A3($elm$core$Basics$clamp, -20, 20, section.gradientAtStart);
		var baselineSpeed = (30 - (2 * effectiveGradient)) + (0.002 * A2($elm$core$Basics$pow, effectiveGradient, 3));
		var modifiedSpeed = $ianmackenzie$elm_units$Speed$kilometersPerHour(
			baselineSpeed * $elm$core$Basics$sqrt(
				A2($ianmackenzie$elm_units$Quantity$ratio, power, $author$project$Tools$Timestamp$defaultOptions.steadyPower)));
		return A2($ianmackenzie$elm_units$Quantity$at_, modifiedSpeed, section.trueLength);
	});
var $ianmackenzie$elm_units$Duration$inSeconds = function (_v0) {
	var numSeconds = _v0.a;
	return numSeconds;
};
var $ianmackenzie$elm_units$Duration$inMilliseconds = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) * 1000;
};
var $author$project$Tools$Timestamp$applyPhysics = F2(
	function (options, track) {
		var initialPoint = A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree);
		var computeSpeedAndTimes = F2(
			function (road, _v1) {
				var inputTime = _v1.a;
				var reversedOutputs = _v1.b;
				var untimedNextPoint = road.sourceData.b;
				var thisSection = A2($author$project$Tools$Timestamp$durationForSection, options.steadyPower, road);
				var cumulative = A2($ianmackenzie$elm_units$Quantity$plus, thisSection, inputTime);
				return _Utils_Tuple2(
					cumulative,
					A2(
						$elm$core$List$cons,
						_Utils_update(
							untimedNextPoint,
							{
								timestamp: $elm$core$Maybe$Just(
									$elm$time$Time$millisToPosix(
										$elm$core$Basics$floor(
											$ianmackenzie$elm_units$Duration$inMilliseconds(cumulative))))
							}),
						reversedOutputs));
			});
		var _v0 = A3(
			$author$project$DomainModel$foldOverRoute,
			computeSpeedAndTimes,
			track.trackTree,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$zero,
				_List_fromArray(
					[
						_Utils_update(
						initialPoint,
						{
							timestamp: $elm$core$Maybe$Just(
								$elm$time$Time$millisToPosix(0))
						})
					])));
		var newCourse = _v0.b;
		var newTree = $author$project$DomainModel$treeFromSourcePoints(
			$elm$core$List$reverse(newCourse));
		return newTree;
	});
var $ianmackenzie$elm_geometry$Point3d$projectOnto = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var p = _v1.a;
		var _v2 = plane.originPoint;
		var p0 = _v2.a;
		var _v3 = plane.normalDirection;
		var n = _v3.a;
		var distance = (((p.x - p0.x) * n.x) + ((p.y - p0.y) * n.y)) + ((p.z - p0.z) * n.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x - (distance * n.x), y: p.y - (distance * n.y), z: p.z - (distance * n.z)});
	});
var $author$project$Tools$MoveScaleRotate$computeRecentredPoints = F2(
	function (_v0, track) {
		var lon = _v0.a;
		var lat = _v0.b;
		var shiftBasis = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				var purple = _v1.a;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$projectOnto,
					$ianmackenzie$elm_geometry$Plane3d$xy,
					A2($author$project$DomainModel$earthPointFromIndex, purple, track.trackTree).space);
			} else {
				return $ianmackenzie$elm_geometry$Point3d$origin;
			}
		}();
		var shiftVector = A2($ianmackenzie$elm_geometry$Vector3d$from, shiftBasis, $ianmackenzie$elm_geometry$Point3d$origin);
		var shiftPoint = function (xyzt) {
			return {
				space: A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, xyzt.space),
				time: xyzt.time
			};
		};
		var shiftFn = F2(
			function (road, outputs) {
				return A2(
					$elm$core$List$cons,
					shiftPoint(road.endPoint),
					outputs);
			});
		var shiftedTrackPoints = A2(
			$elm$core$List$cons,
			shiftPoint(
				A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree)),
			A3($author$project$DomainModel$foldOverRouteRL, shiftFn, track.trackTree, _List_Nil));
		var referenceGpx = {
			altitude: $ianmackenzie$elm_units$Quantity$zero,
			latitude: $ianmackenzie$elm_units$Angle$degrees(lat),
			longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
				$ianmackenzie$elm_units$Angle$degrees(lon)),
			timestamp: $elm$core$Maybe$Nothing
		};
		return A2(
			$elm$core$List$map,
			function (earth) {
				return _Utils_Tuple2(
					earth,
					A2($author$project$DomainModel$gpxFromPointWithReference, referenceGpx, earth));
			},
			shiftedTrackPoints);
	});
var $author$project$Tools$MoveScaleRotate$applyRecentre = F2(
	function (newReference, track) {
		var newPoints = A2($author$project$Tools$MoveScaleRotate$computeRecentredPoints, newReference, track);
		return $author$project$DomainModel$treeFromSourcePoints(
			A2($elm$core$List$map, $elm$core$Tuple$second, newPoints));
	});
var $author$project$Tools$StartFinish$applyReverse = function (track) {
	var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
	return $author$project$DomainModel$treeFromSourcePoints(
		$elm$core$List$reverse(oldPoints));
};
var $ianmackenzie$elm_geometry$BoundingBox3d$midX = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minX, boundingBox.maxX, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$midY = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minY, boundingBox.maxY, 0.5);
};
var $ianmackenzie$elm_geometry$Point3d$scaleAbout = F3(
	function (_v0, k, _v1) {
		var p0 = _v0.a;
		var p = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p0.x + (k * (p.x - p0.x)), y: p0.y + (k * (p.y - p0.y)), z: p0.z + (k * (p.z - p0.z))});
	});
var $author$project$Tools$MoveScaleRotate$rotateAndScale = F2(
	function (settings, track) {
		var scaleFactor = A2(
			$ianmackenzie$elm_units$Quantity$ratio,
			settings.desiredTrackLength,
			$author$project$DomainModel$trueLength(track.trackTree));
		var centre = A3(
			$ianmackenzie$elm_geometry$Point3d$xyz,
			$ianmackenzie$elm_geometry$BoundingBox3d$midX(
				$author$project$DomainModel$boundingBox(track.trackTree)),
			$ianmackenzie$elm_geometry$BoundingBox3d$midY(
				$author$project$DomainModel$boundingBox(track.trackTree)),
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
				$author$project$DomainModel$boundingBox(track.trackTree)));
		var axisOfRotation = A2(
			$ianmackenzie$elm_geometry$Axis3d$through,
			A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree).space,
			$ianmackenzie$elm_geometry$Direction3d$z);
		var rotateAndScaleEndPoint = F2(
			function (road, outputs) {
				return A2(
					$elm$core$List$cons,
					{
						space: A3(
							$ianmackenzie$elm_geometry$Point3d$scaleAbout,
							centre,
							scaleFactor,
							A3($ianmackenzie$elm_geometry$Point3d$rotateAround, axisOfRotation, settings.rotateAngle, road.endPoint.space)),
						time: road.endPoint.time
					},
					outputs);
			});
		var transformedEndPoints = A3($author$project$DomainModel$foldOverRouteRL, rotateAndScaleEndPoint, track.trackTree, _List_Nil);
		var transformedStartPoint = function () {
			var theStart = A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree);
			return _Utils_update(
				theStart,
				{
					space: A3(
						$ianmackenzie$elm_geometry$Point3d$scaleAbout,
						centre,
						scaleFactor,
						A3(
							$ianmackenzie$elm_geometry$Point3d$rotateAround,
							axisOfRotation,
							settings.rotateAngle,
							A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree).space))
				});
		}();
		return A3(
			$author$project$TrackLoaded$asPreviewPoints,
			track,
			$ianmackenzie$elm_units$Quantity$zero,
			A2($elm$core$List$cons, transformedStartPoint, transformedEndPoints));
	});
var $author$project$Tools$MoveScaleRotate$applyRotateAndScale = F2(
	function (options, track) {
		var newPoints = A2($author$project$Tools$MoveScaleRotate$rotateAndScale, options, track);
		return $author$project$DomainModel$treeFromSourcePoints(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.gpx;
				},
				newPoints));
	});
var $author$project$Tools$Timestamp$applyTicks = F2(
	function (tickSpacing, track) {
		var routeStartTime = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function (t) {
					return (($elm$time$Time$posixToMillis(t) / 1000) | 0) * 1000;
				},
				A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree).time));
		var interpolateAtTime = F2(
			function (tick, road) {
				var _v3 = _Utils_Tuple2(road.transitTime, road.startPoint.time);
				if ((_v3.a.$ === 'Just') && (_v3.b.$ === 'Just')) {
					var transit = _v3.a.a;
					var start = _v3.b.a;
					var numerator = tick - $elm$time$Time$posixToMillis(start);
					var denominator = $elm$time$Time$posixToMillis(transit);
					var proportion = numerator / denominator;
					return A2(
						$author$project$DomainModel$gpxFromPointWithReference,
						track.referenceLonLat,
						{
							space: A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, road.startPoint.space, road.endPoint.space, proportion),
							time: $elm$core$Maybe$Just(
								$elm$time$Time$millisToPosix(tick))
						});
				} else {
					return road.sourceData.a;
				}
			});
		var emitTicks = F2(
			function (road, _v0) {
				emitTicks:
				while (true) {
					var nextTick = _v0.a;
					var reversedOutputs = _v0.b;
					var _v1 = _Utils_Tuple2(road.startPoint.time, road.endPoint.time);
					if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
						var end = _v1.b.a;
						if (_Utils_cmp(
							nextTick,
							$elm$time$Time$posixToMillis(end)) < 0) {
							var $temp$road = road,
								$temp$_v0 = _Utils_Tuple2(
								nextTick + tickSpacing,
								A2(
									$elm$core$List$cons,
									A2(interpolateAtTime, nextTick, road),
									reversedOutputs));
							road = $temp$road;
							_v0 = $temp$_v0;
							continue emitTicks;
						} else {
							return _Utils_Tuple2(nextTick, reversedOutputs);
						}
					} else {
						return _Utils_Tuple2(0, _List_Nil);
					}
				}
			});
		var _v2 = A3(
			$author$project$DomainModel$foldOverRoute,
			emitTicks,
			track.trackTree,
			_Utils_Tuple2(routeStartTime, _List_Nil));
		var newCourse = _v2.b;
		var newTree = $author$project$DomainModel$treeFromSourcePoints(
			$elm$core$List$reverse(newCourse));
		return newTree;
	});
var $author$project$DomainModel$extractPointsInRange = F3(
	function (fromStart, fromEnd, trackTree) {
		var myFoldFn = F2(
			function (road, accum) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(road.endPoint, road.sourceData.b),
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(road.startPoint, road.sourceData.a),
						A2($elm$core$List$drop, 1, accum)));
			});
		return _Utils_eq(
			fromStart + fromEnd,
			$author$project$DomainModel$skipCount(trackTree)) ? _List_fromArray(
			[
				A2($author$project$DomainModel$getDualCoords, trackTree, fromStart)
			]) : $elm$core$List$reverse(
			A5(
				$author$project$DomainModel$traverseTreeBetween,
				fromStart,
				$author$project$DomainModel$skipCount(trackTree) - fromEnd,
				trackTree,
				myFoldFn,
				_List_Nil));
	});
var $author$project$Tools$Timestamp$absoluteMillisToPoint = F2(
	function (pointIndex, track) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$time$Time$posixToMillis,
				A2($author$project$DomainModel$earthPointFromIndex, pointIndex, track.trackTree).time));
	});
var $author$project$Tools$Timestamp$trackStartTime = function (track) {
	return A2($author$project$Tools$Timestamp$absoluteMillisToPoint, 0, track);
};
var $author$project$Tools$Timestamp$relativeMillisToPoint = F2(
	function (pointIndex, track) {
		return A2($author$project$Tools$Timestamp$absoluteMillisToPoint, pointIndex, track) - $author$project$Tools$Timestamp$trackStartTime(track);
	});
var $author$project$Tools$Timestamp$applyTimeShift = F2(
	function (options, track) {
		var orangeOffsetMillis = A2($author$project$Tools$Timestamp$relativeMillisToPoint, track.currentPosition, track);
		var requiredAdjustment = $elm$core$Maybe$Just(
			$elm$time$Time$millisToPosix(options.desiredStartMillis - orangeOffsetMillis));
		var oldPoints = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A3($author$project$DomainModel$extractPointsInRange, track.currentPosition, 0, track.trackTree));
		var adjustedPoint = function (gpx) {
			return _Utils_update(
				gpx,
				{
					timestamp: A2($author$project$Utils$addTimes, gpx.timestamp, requiredAdjustment)
				});
		};
		var newCourse = A2($elm$core$List$map, adjustedPoint, oldPoints);
		var newTree = A5($author$project$DomainModel$replaceRange, track.currentPosition, 0, track.referenceLonLat, newCourse, track.trackTree);
		return newTree;
	});
var $author$project$Tools$BendSmoother$applyClassicBendSmoother = F2(
	function (options, track) {
		var gpxPoints = function () {
			var _v1 = options.smoothedBend;
			if (_v1.$ === 'Just') {
				var bend = _v1.a;
				return A2(
					$elm$core$List$map,
					function ($) {
						return $.gpx;
					},
					bend.nodes);
			} else {
				return _List_Nil;
			}
		}();
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart + 1, fromEnd + 1, track.referenceLonLat, gpxPoints, track.trackTree);
		return newTree;
	});
var $author$project$Geometry101$distance = F2(
	function (p1, p2) {
		return $elm$core$Basics$sqrt(
			A2($elm$core$Basics$pow, p1.x - p2.x, 2.0) + A2($elm$core$Basics$pow, p1.y - p2.y, 2.0));
	});
var $ianmackenzie$elm_geometry$Point2d$fromRecord = F2(
	function (toQuantity, _v0) {
		var y = _v0.y;
		var x = _v0.x;
		return A2(
			$ianmackenzie$elm_geometry$Point2d$xy,
			toQuantity(x),
			toQuantity(y));
	});
var $author$project$Geometry101$lineEquationFromTwoPoints = F2(
	function (p1, p2) {
		var c = (p1.x * p2.y) - (p2.x * p1.y);
		var b = p2.x - p1.x;
		var a = p1.y - p2.y;
		return {a: a, b: b, c: c};
	});
var $author$project$Geometry101$matrixInverse = function (m) {
	var determinant = (m.tl * m.br) - (m.tr * m.bl);
	return (_Utils_cmp(
		$elm$core$Basics$abs(determinant),
		A2($elm$core$Basics$pow, 10, -20)) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
		{bl: ((-1.0) * m.bl) / determinant, br: m.tl / determinant, tl: m.br / determinant, tr: ((-1.0) * m.tr) / determinant});
};
var $author$project$Geometry101$matrixMultiplyColumn = F2(
	function (m, c) {
		return {b: (m.bl * c.t) + (m.br * c.b), t: (m.tl * c.t) + (m.tr * c.b)};
	});
var $author$project$Geometry101$lineIntersection = F2(
	function (l1, l2) {
		var matrix = {bl: l2.a, br: l2.b, tl: l1.a, tr: l1.b};
		var inv = $author$project$Geometry101$matrixInverse(matrix);
		if (inv.$ === 'Just') {
			var inverse = inv.a;
			var column = {b: (-1.0) * l2.c, t: (-1.0) * l1.c};
			var col = A2($author$project$Geometry101$matrixMultiplyColumn, inverse, column);
			return $elm$core$Maybe$Just(
				{x: col.t, y: col.b});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Geometry101$linePerpendicularTo = F2(
	function (line, p) {
		var aybx = (line.a * p.y) - (line.b * p.x);
		return {a: line.b, b: (-1.0) * line.a, c: aybx};
	});
var $ianmackenzie$elm_geometry$Vector2d$scaleTo = F2(
	function (_v0, _v1) {
		var q = _v0.a;
		var v = _v1.a;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.x),
			$elm$core$Basics$abs(v.y));
		if (!largestComponent) {
			return $ianmackenzie$elm_geometry$Vector2d$zero;
		} else {
			var scaledY = v.y / largestComponent;
			var scaledX = v.x / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
			return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
				{x: (q * scaledX) / scaledLength, y: (q * scaledY) / scaledLength});
		}
	});
var $ianmackenzie$elm_geometry$Point2d$toRecord = F2(
	function (fromQuantity, point) {
		return {
			x: fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$xCoordinate(point)),
			y: fromQuantity(
				$ianmackenzie$elm_geometry$Point2d$yCoordinate(point))
		};
	});
var $ianmackenzie$elm_geometry$Point2d$translateBy = F2(
	function (_v0, _v1) {
		var v = _v0.a;
		var p = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p.x + v.x, y: p.y + v.y});
	});
var $author$project$Tools$BendSmoother$arc3dFromThreePoints = F3(
	function (pa, pb, pc) {
		var trianglePlane = A3($ianmackenzie$elm_geometry$SketchPlane3d$throughPoints, pa.space, pb.space, pc.space);
		var _v0 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, pa.space, pb.space),
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, pb.space, pc.space));
		var beforeLength = _v0.a;
		var afterLength = _v0.b;
		if (trianglePlane.$ === 'Just') {
			var plane = trianglePlane.a;
			var amountToStealFromSecondSegment = A2(
				$ianmackenzie$elm_units$Quantity$min,
				$ianmackenzie$elm_units$Length$meters(4.0),
				$ianmackenzie$elm_units$Quantity$half(afterLength));
			var amountToStealFromFirstSegment = A2(
				$ianmackenzie$elm_units$Quantity$min,
				$ianmackenzie$elm_units$Length$meters(4.0),
				$ianmackenzie$elm_units$Quantity$half(beforeLength));
			var commonAmountToSteal = A2($ianmackenzie$elm_units$Quantity$min, amountToStealFromFirstSegment, amountToStealFromSecondSegment);
			var arcEnd = A3(
				$ianmackenzie$elm_geometry$Point3d$interpolateFrom,
				pb.space,
				pc.space,
				A2($ianmackenzie$elm_units$Quantity$ratio, commonAmountToSteal, afterLength));
			var arcStart = A3(
				$ianmackenzie$elm_geometry$Point3d$interpolateFrom,
				pb.space,
				pa.space,
				A2($ianmackenzie$elm_units$Quantity$ratio, commonAmountToSteal, beforeLength));
			var _v2 = _Utils_Tuple3(
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, arcStart),
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, pb.space),
				A2($ianmackenzie$elm_geometry$Point3d$projectInto, plane, arcEnd));
			var planarA = _v2.a;
			var planarB = _v2.b;
			var planarC = _v2.c;
			var findArc = function (centre) {
				var radius = A2(
					$author$project$Geometry101$distance,
					centre,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA));
				var bisector = A2(
					$ianmackenzie$elm_geometry$Vector2d$from,
					A2($ianmackenzie$elm_geometry$Point2d$fromRecord, $ianmackenzie$elm_units$Length$meters, centre),
					planarB);
				var midArcPoint = A2(
					$ianmackenzie$elm_geometry$Point2d$translateBy,
					A2(
						$ianmackenzie$elm_geometry$Vector2d$scaleTo,
						$ianmackenzie$elm_units$Length$meters(radius),
						bisector),
					A2($ianmackenzie$elm_geometry$Point2d$fromRecord, $ianmackenzie$elm_units$Length$meters, centre));
				var midPoint3d = A2($ianmackenzie$elm_geometry$Point3d$on, plane, midArcPoint);
				return A3($ianmackenzie$elm_geometry$Arc3d$throughPoints, arcStart, midPoint3d, arcEnd);
			};
			var _v3 = _Utils_Tuple2(
				A2(
					$author$project$Geometry101$lineEquationFromTwoPoints,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA),
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarB)),
				A2(
					$author$project$Geometry101$lineEquationFromTwoPoints,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarB),
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarC)));
			var r1Equation = _v3.a;
			var r2Equation = _v3.b;
			var _v4 = _Utils_Tuple2(
				A2(
					$author$project$Geometry101$linePerpendicularTo,
					r1Equation,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarA)),
				A2(
					$author$project$Geometry101$linePerpendicularTo,
					r2Equation,
					A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, planarC)));
			var perpFromFirstTangentPoint = _v4.a;
			var perpFromSecondTangentPoint = _v4.b;
			var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				A2($elm$core$Maybe$map, findArc, circleCenter));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$singlePoint3dArc = F2(
	function (track, index) {
		var _v0 = _Utils_Tuple3(
			A2($author$project$DomainModel$earthPointFromIndex, index - 1, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, index + 1, track.trackTree));
		var pa = _v0.a;
		var pb = _v0.b;
		var pc = _v0.c;
		return A3($author$project$Tools$BendSmoother$arc3dFromThreePoints, pa, pb, pc);
	});
var $author$project$Tools$BendSmoother$softenSinglePoint = F3(
	function (numSegments, index, track) {
		var _v0 = A2($author$project$Tools$BendSmoother$singlePoint3dArc, track, index);
		if (_v0.$ === 'Just') {
			var arc = _v0.a;
			var gpxPoints = A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$author$project$DomainModel$withoutTime,
					$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat)),
				$ianmackenzie$elm_geometry$Polyline3d$vertices(
					A2($ianmackenzie$elm_geometry$Arc3d$segments, numSegments, arc)));
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				index,
				$author$project$DomainModel$skipCount(track.trackTree) - index,
				track.referenceLonLat,
				gpxPoints,
				track.trackTree);
			return newTree;
		} else {
			return $elm$core$Maybe$Just(track.trackTree);
		}
	});
var $author$project$Tools$BendSmoother$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = options.mode;
		if (_v0.$ === 'SmoothPoint') {
			return A3($author$project$Tools$BendSmoother$softenSinglePoint, options.segments, track.currentPosition, track);
		} else {
			return A2($author$project$Tools$BendSmoother$applyClassicBendSmoother, options, track);
		}
	});
var $author$project$Tools$CurveFormer$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = options.fixedAttachmentPoints;
		if (_v0.$ === 'Just') {
			var _v1 = _v0.a;
			var entryPoint = _v1.a;
			var exitPoint = _v1.b;
			var _v2 = _Utils_Tuple2(
				entryPoint,
				$author$project$DomainModel$skipCount(track.trackTree) - exitPoint);
			var fromStart = _v2.a;
			var fromEnd = _v2.b;
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				fromStart + 1,
				fromEnd + 1,
				track.referenceLonLat,
				A2(
					$elm$core$List$map,
					function ($) {
						return $.gpx;
					},
					options.newTrackPoints),
				track.trackTree);
			var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
			return newTree;
		} else {
			return $elm$core$Maybe$Just(track.trackTree);
		}
	});
var $author$project$DomainModel$indexFromDistanceRoundedDown = F2(
	function (distance, treeNode) {
		indexFromDistanceRoundedDown:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				return 0;
			} else {
				var info = treeNode.a;
				if (A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$author$project$DomainModel$trueLength(info.left),
					distance)) {
					var $temp$distance = distance,
						$temp$treeNode = info.left;
					distance = $temp$distance;
					treeNode = $temp$treeNode;
					continue indexFromDistanceRoundedDown;
				} else {
					return $author$project$DomainModel$skipCount(info.left) + A2(
						$author$project$DomainModel$indexFromDistanceRoundedDown,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$author$project$DomainModel$trueLength(info.left),
							distance),
						info.right);
				}
			}
		}
	});
var $author$project$DomainModel$indexFromDistanceRoundedUp = F2(
	function (distance, treeNode) {
		indexFromDistanceRoundedUp:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				return 1;
			} else {
				var info = treeNode.a;
				if (A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$author$project$DomainModel$trueLength(info.left),
					distance)) {
					var $temp$distance = distance,
						$temp$treeNode = info.left;
					distance = $temp$distance;
					treeNode = $temp$treeNode;
					continue indexFromDistanceRoundedUp;
				} else {
					return $author$project$DomainModel$skipCount(info.left) + A2(
						$author$project$DomainModel$indexFromDistanceRoundedUp,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$author$project$DomainModel$trueLength(info.left),
							distance),
						info.right);
				}
			}
		}
	});
var $author$project$DomainModel$interpolateTrack = F2(
	function (distance, treeNode) {
		interpolateTrack:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return _Utils_Tuple2(
					0,
					{
						space: A3(
							$ianmackenzie$elm_geometry$Point3d$interpolateFrom,
							info.startPoint.space,
							info.endPoint.space,
							A2($ianmackenzie$elm_units$Quantity$ratio, distance, info.trueLength)),
						time: A3(
							$author$project$Utils$interpolateTimes,
							A2($ianmackenzie$elm_units$Quantity$ratio, distance, info.trueLength),
							info.startPoint.time,
							info.endPoint.time)
					});
			} else {
				var info = treeNode.a;
				if (A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$author$project$DomainModel$trueLength(info.left),
					distance)) {
					var $temp$distance = distance,
						$temp$treeNode = info.left;
					distance = $temp$distance;
					treeNode = $temp$treeNode;
					continue interpolateTrack;
				} else {
					var _v1 = A2(
						$author$project$DomainModel$interpolateTrack,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$author$project$DomainModel$trueLength(info.left),
							distance),
						info.right);
					var rightIndex = _v1.a;
					var rightPoint = _v1.b;
					return _Utils_Tuple2(
						rightIndex + $author$project$DomainModel$skipCount(info.left),
						rightPoint);
				}
			}
		}
	});
var $author$project$Tools$Nudge$computeNudgedPoints = F2(
	function (settings, track) {
		var nudge = function (index) {
			return A4($author$project$Tools$Nudge$nudgeTrackPoint, settings, 1, index, track.trackTree);
		};
		var interpolatePoints = F3(
			function (interval, start, end) {
				var pointCount = $elm$core$Basics$floor(
					A2(
						$ianmackenzie$elm_units$Quantity$ratio,
						A2($ianmackenzie$elm_units$Quantity$minus, start, end),
						interval));
				var sampling = A2($elm$core$List$range, 0, pointCount);
				var interpolateSampleAt = function (sample) {
					var sampleDistance = A2(
						$ianmackenzie$elm_units$Quantity$plus,
						start,
						A2($ianmackenzie$elm_units$Quantity$multiplyBy, sample, interval));
					var _v6 = A2($author$project$DomainModel$interpolateTrack, sampleDistance, track.trackTree);
					var precedingIndex = _v6.a;
					var point = _v6.b;
					return {
						effectiveDirection: $author$project$DomainModel$asRecord(
							A2($author$project$DomainModel$leafFromIndex, precedingIndex, track.trackTree)).directionAtStart,
						fade: A2(
							$ianmackenzie$elm_units$Quantity$ratio,
							A2($ianmackenzie$elm_units$Quantity$minus, start, sampleDistance),
							A2($ianmackenzie$elm_units$Quantity$minus, start, end)),
						point: point
					};
				};
				return A2($elm$core$List$map, interpolateSampleAt, sampling);
			});
		var fader = function (x) {
			return settings.cosineEasing ? ((1 - $elm$core$Basics$cos(x * $elm$core$Basics$pi)) / 2) : x;
		};
		var nudgeFadeInZonePoint = function (nudgeable) {
			return A4(
				$author$project$Tools$Nudge$nudgeEarthPoint,
				settings,
				fader(nudgeable.fade),
				nudgeable.effectiveDirection,
				nudgeable.point);
		};
		var nudgeFadeOutZonePoint = function (nudgeable) {
			return A4(
				$author$project$Tools$Nudge$nudgeEarthPoint,
				settings,
				fader(1 - nudgeable.fade),
				nudgeable.effectiveDirection,
				nudgeable.point);
		};
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(
			track.currentPosition,
			$author$project$DomainModel$skipCount(track.trackTree) - track.currentPosition) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var fromNode = _v1.a;
		var toNode = _v1.b;
		var fullyNudgedPoints = A2(
			$elm$core$List$map,
			nudge,
			A2($elm$core$List$range, fromNode, toNode));
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromNode, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, toNode, track.trackTree));
		var startDistance = _v2.a;
		var endDistance = _v2.b;
		var fadeOutEndDistance = A2(
			$ianmackenzie$elm_units$Quantity$min,
			$author$project$DomainModel$trueLength(track.trackTree),
			A2($ianmackenzie$elm_units$Quantity$plus, settings.fadeExtent, endDistance));
		var fadeInStartDistance = A2(
			$ianmackenzie$elm_units$Quantity$max,
			$ianmackenzie$elm_units$Quantity$zero,
			A2($ianmackenzie$elm_units$Quantity$minus, settings.fadeExtent, startDistance));
		var _v3 = _Utils_Tuple2(
			A3(interpolatePoints, settings.easingSpacing, fadeInStartDistance, startDistance),
			A2(
				$elm$core$List$drop,
				1,
				A3(interpolatePoints, settings.easingSpacing, endDistance, fadeOutEndDistance)));
		var fadeInZonePoints = _v3.a;
		var fadeOutZonePoints = _v3.b;
		var _v4 = $ianmackenzie$elm_units$Quantity$greaterThanZero(settings.fadeExtent) ? _Utils_Tuple2(
			A2($elm$core$List$map, nudgeFadeInZonePoint, fadeInZonePoints),
			A2($elm$core$List$map, nudgeFadeOutZonePoint, fadeOutZonePoints)) : _Utils_Tuple2(_List_Nil, _List_Nil);
		var fadeInZoneNudged = _v4.a;
		var fadeOutZoneNudged = _v4.b;
		var newEarthPoints = _Utils_ap(
			fadeInZoneNudged,
			_Utils_ap(fullyNudgedPoints, fadeOutZoneNudged));
		var _v5 = $ianmackenzie$elm_units$Quantity$greaterThanZero(settings.fadeExtent) ? _Utils_Tuple2(
			A2($author$project$DomainModel$indexFromDistanceRoundedUp, fadeInStartDistance, track.trackTree),
			A2($author$project$DomainModel$indexFromDistanceRoundedDown, fadeOutEndDistance, track.trackTree)) : _Utils_Tuple2(fromNode, toNode);
		var firstReplacedPoint = _v5.a;
		var lastReplacedPoint = _v5.b;
		var previewPoints = A3($author$project$TrackLoaded$asPreviewPoints, track, fadeInStartDistance, newEarthPoints);
		return _Utils_Tuple2(
			_Utils_Tuple2(firstReplacedPoint, lastReplacedPoint),
			previewPoints);
	});
var $author$project$Tools$Nudge$applyUsingOptions = F2(
	function (options, track) {
		var _v0 = A2($author$project$Tools$Nudge$computeNudgedPoints, options, track);
		var _v1 = _v0.a;
		var actualStart = _v1.a;
		var actualEnd = _v1.b;
		var newPoints = _v0.b;
		var _v2 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(
			track.currentPosition,
			$author$project$DomainModel$skipCount(track.trackTree) - track.currentPosition) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v2.a;
		var fromEnd = _v2.b;
		var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var originalMarkedLength = endIndex - fromStart;
		var pointsInEachFadeZone = (($elm$core$List$length(newPoints) - originalMarkedLength) / 2) | 0;
		var startAdjustment = pointsInEachFadeZone - (fromStart - actualStart);
		var _v3 = function () {
			var _v4 = track.markerPosition;
			if (_v4.$ === 'Just') {
				var purple = _v4.a;
				return _Utils_Tuple2(
					track.currentPosition + startAdjustment,
					$elm$core$Maybe$Just(purple + startAdjustment));
			} else {
				return _Utils_Tuple2(track.currentPosition + startAdjustment, $elm$core$Maybe$Nothing);
			}
		}();
		var newOrange = _v3.a;
		var newPurple = _v3.b;
		var _v5 = A5(
			$author$project$DomainModel$replaceRange,
			actualStart,
			$author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.gpx;
				},
				newPoints),
			track.trackTree);
		if (_v5.$ === 'Just') {
			var newTree = _v5.a;
			return _Utils_update(
				track,
				{currentPosition: newOrange, markerPosition: newPurple, trackTree: newTree});
		} else {
			return track;
		}
	});
var $elm$core$Basics$atan = _Basics_atan;
var $ianmackenzie$elm_units$Angle$atan = function (x) {
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$atan(x));
};
var $ianmackenzie$elm_geometry$Direction3d$azimuthIn = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var d = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var sketchY = ((d.x * j.x) + (d.y * j.y)) + (d.z * j.z);
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		var sketchX = ((d.x * i.x) + (d.y * i.y)) + (d.z * i.z);
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2($elm$core$Basics$atan2, sketchY, sketchX));
	});
var $ianmackenzie$elm_units$Quantity$clamp = F3(
	function (_v0, _v1, _v2) {
		var lower = _v0.a;
		var upper = _v1.a;
		var value = _v2.a;
		return (_Utils_cmp(lower, upper) < 1) ? $ianmackenzie$elm_units$Quantity$Quantity(
			A3($elm$core$Basics$clamp, lower, upper, value)) : $ianmackenzie$elm_units$Quantity$Quantity(
			A3($elm$core$Basics$clamp, upper, lower, value));
	});
var $ianmackenzie$elm_geometry$Direction3d$elevationFrom = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var d = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var sketchY = ((d.x * j.x) + (d.y * j.y)) + (d.z * j.z);
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		var kx = (i.y * j.z) - (i.z * j.y);
		var ky = (i.z * j.x) - (i.x * j.z);
		var kz = (i.x * j.y) - (i.y * j.x);
		var sketchZ = ((d.x * kx) + (d.y * ky)) + (d.z * kz);
		var sketchX = ((d.x * i.x) + (d.y * i.y)) + (d.z * i.z);
		return $ianmackenzie$elm_units$Quantity$Quantity(
			A2(
				$elm$core$Basics$atan2,
				sketchZ,
				$elm$core$Basics$sqrt((sketchX * sketchX) + (sketchY * sketchY))));
	});
var $author$project$Utils$elide = function (input) {
	var helper = F2(
		function (accum, source) {
			helper:
			while (true) {
				if (source.b) {
					if (source.b.b) {
						var aa = source.a;
						var _v1 = source.b;
						var cc = _v1.b;
						var $temp$accum = A2($elm$core$List$cons, aa, accum),
							$temp$source = cc;
						accum = $temp$accum;
						source = $temp$source;
						continue helper;
					} else {
						var zz = source.a;
						return A2($elm$core$List$cons, zz, accum);
					}
				} else {
					return accum;
				}
			}
		});
	return A2(
		helper,
		_List_Nil,
		A2(helper, _List_Nil, input));
};
var $author$project$DomainModel$indexFromDistance = F2(
	function (distance, treeNode) {
		indexFromDistance:
		while (true) {
			if (treeNode.$ === 'Leaf') {
				var info = treeNode.a;
				return A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$ianmackenzie$elm_units$Quantity$half(info.trueLength),
					distance) ? 0 : 1;
			} else {
				var info = treeNode.a;
				if (A2(
					$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
					$author$project$DomainModel$trueLength(info.left),
					distance)) {
					var $temp$distance = distance,
						$temp$treeNode = info.left;
					distance = $temp$distance;
					treeNode = $temp$treeNode;
					continue indexFromDistance;
				} else {
					return $author$project$DomainModel$skipCount(info.left) + A2(
						$author$project$DomainModel$indexFromDistance,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							$author$project$DomainModel$trueLength(info.left),
							distance),
						info.right);
				}
			}
		}
	});
var $author$project$DomainModel$estimateTimeAtDistance = F2(
	function (distance, tree) {
		var index = A2($author$project$DomainModel$indexFromDistance, distance, tree);
		var leaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index, tree));
		var leafStartDistance = A2($author$project$DomainModel$distanceFromIndex, index, tree);
		var proportionOfDistance = A2(
			$ianmackenzie$elm_units$Quantity$ratio,
			A2($ianmackenzie$elm_units$Quantity$minus, leafStartDistance, distance),
			leaf.trueLength);
		return A3($author$project$Utils$interpolateTimes, proportionOfDistance, leaf.startPoint.time, leaf.endPoint.time);
	});
var $elm$core$List$map4 = _List_map4;
var $ianmackenzie$elm_units$Length$meter = $ianmackenzie$elm_units$Length$meters(1);
var $elm$core$Basics$not = _Basics_not;
var $ianmackenzie$elm_geometry$Direction3d$xyZ = F2(
	function (_v0, _v1) {
		var theta = _v0.a;
		var phi = _v1.a;
		var cosPhi = $elm$core$Basics$cos(phi);
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{
				x: cosPhi * $elm$core$Basics$cos(theta),
				y: cosPhi * $elm$core$Basics$sin(theta),
				z: $elm$core$Basics$sin(phi)
			});
	});
var $author$project$Tools$SmartSmoother$computeNewPoints = F2(
	function (options, track) {
		var settings = function () {
			var maxPhi = $ianmackenzie$elm_units$Angle$radians(
				$elm$core$Basics$atan(options.maxGradient / 100.0));
			var maxDeltaTheta = $ianmackenzie$elm_units$Angle$radians(
				1.0 / $ianmackenzie$elm_units$Length$inMeters(options.minRadius));
			return {
				maxDeltaDeltaTheta: A2(
					$ianmackenzie$elm_units$Quantity$divideBy,
					$ianmackenzie$elm_units$Length$inMeters(options.minTransition),
					maxDeltaTheta),
				maxDeltaPhi: A2(
					$ianmackenzie$elm_units$Quantity$divideBy,
					$ianmackenzie$elm_units$Length$inMeters(options.minTransition),
					maxPhi),
				maxDeltaTheta: maxDeltaTheta,
				maxPhi: maxPhi
			};
		}();
		var withDeltaConstraints = F2(
			function (window, unspentDeltaTheta) {
				return A3(
					$ianmackenzie$elm_units$Quantity$clamp,
					A2($ianmackenzie$elm_units$Quantity$minus, settings.maxDeltaDeltaTheta, window.lastDeltaTheta),
					A2($ianmackenzie$elm_units$Quantity$plus, settings.maxDeltaDeltaTheta, window.lastDeltaTheta),
					A3(
						$ianmackenzie$elm_units$Quantity$clamp,
						$ianmackenzie$elm_units$Quantity$negate(settings.maxDeltaTheta),
						settings.maxDeltaTheta,
						window.unspentDeltaTheta));
			});
		var withPhiConstraints = F2(
			function (window, targetPhi) {
				return A3(
					$ianmackenzie$elm_units$Quantity$clamp,
					$ianmackenzie$elm_units$Quantity$negate(settings.maxDeltaPhi),
					settings.maxDeltaPhi,
					A2($ianmackenzie$elm_units$Quantity$minus, window.lastPhi, targetPhi));
			});
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			A2(
				$author$project$DomainModel$distanceFromIndex,
				$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
				track.trackTree));
		var distanceAtStart = _v1.a;
		var distanceAtEnd = _v1.b;
		var filterForwards = function (window) {
			filterForwards:
			while (true) {
				if (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, distanceAtEnd, window.nextDistance)) {
					if ((!A3(
						$ianmackenzie$elm_units$Quantity$equalWithin,
						$ianmackenzie$elm_units$Angle$degrees(2),
						window.unspentDeltaTheta,
						$ianmackenzie$elm_units$Quantity$zero)) || (!A3(
						$ianmackenzie$elm_units$Quantity$equalWithin,
						$ianmackenzie$elm_units$Angle$degrees(2),
						window.lastPhi,
						window.targetPhi))) {
						var availableDeltaTheta = A2(withDeltaConstraints, window, window.unspentDeltaTheta);
						var availableDeltaPhi = A2(withPhiConstraints, window, window.unspentDeltaTheta);
						return _Utils_update(
							window,
							{
								lastDeltaTheta: availableDeltaTheta,
								lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
								nextDistance: A2($ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_units$Length$meter, window.nextDistance),
								outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
								outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
								unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, window.unspentDeltaTheta)
							});
					} else {
						return window;
					}
				} else {
					var lastPassedPoint = A2($author$project$DomainModel$indexFromDistanceRoundedDown, window.nextDistance, track.trackTree);
					var newWindow = function () {
						if (_Utils_eq(lastPassedPoint, window.lastTrackIndex)) {
							var availableDeltaTheta = A2(withDeltaConstraints, window, window.unspentDeltaTheta);
							var availableDeltaPhi = A2(withPhiConstraints, window, window.targetPhi);
							return _Utils_update(
								window,
								{
									lastDeltaTheta: availableDeltaTheta,
									lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
									outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
									outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
									unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, window.unspentDeltaTheta)
								});
						} else {
							var newLeaf = $author$project$DomainModel$asRecord(
								A2($author$project$DomainModel$leafFromIndex, lastPassedPoint, track.trackTree));
							var targetPhi = A3(
								$ianmackenzie$elm_units$Quantity$clamp,
								$ianmackenzie$elm_units$Quantity$negate(settings.maxPhi),
								settings.maxPhi,
								$ianmackenzie$elm_units$Angle$atan(newLeaf.gradientAtStart / 100.0));
							var deltaThetaHere = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, window.lastTrackDirection, newLeaf.directionAtStart);
							var unspentDeltaTheta = A2($ianmackenzie$elm_units$Quantity$plus, deltaThetaHere, window.unspentDeltaTheta);
							var availableDeltaTheta = A2(withDeltaConstraints, window, unspentDeltaTheta);
							var availableDeltaPhi = A2(withPhiConstraints, window, targetPhi);
							return _Utils_update(
								window,
								{
									lastDeltaTheta: availableDeltaTheta,
									lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
									lastTrackDirection: newLeaf.directionAtStart,
									lastTrackIndex: lastPassedPoint,
									outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
									outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
									targetPhi: targetPhi,
									unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, unspentDeltaTheta)
								});
						}
					}();
					var $temp$window = _Utils_update(
						newWindow,
						{
							lastTrackIndex: lastPassedPoint,
							nextDistance: A2($ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_units$Length$meter, window.nextDistance)
						});
					window = $temp$window;
					continue filterForwards;
				}
			}
		};
		var reverseWindow = function () {
			var firstLeaf = $author$project$DomainModel$asRecord(
				A2(
					$author$project$DomainModel$leafFromIndex,
					$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
					track.trackTree));
			var targetPhi = A3(
				$ianmackenzie$elm_units$Quantity$clamp,
				$ianmackenzie$elm_units$Quantity$negate(settings.maxPhi),
				settings.maxPhi,
				$ianmackenzie$elm_units$Quantity$negate(
					$ianmackenzie$elm_units$Angle$atan(firstLeaf.gradientAtEnd / 100.0)));
			return {
				lastDeltaTheta: $ianmackenzie$elm_units$Quantity$zero,
				lastPhi: targetPhi,
				lastTrackDirection: $ianmackenzie$elm_geometry$Direction2d$reverse(firstLeaf.directionAtStart),
				lastTrackIndex: $author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
				nextDistance: distanceAtEnd,
				outputDeltaPhi: _List_Nil,
				outputDeltaTheta: _List_Nil,
				targetPhi: targetPhi,
				unspentDeltaTheta: $ianmackenzie$elm_units$Quantity$zero,
				unspentPhi: $ianmackenzie$elm_units$Quantity$zero
			};
		}();
		var filterReverse = function (window) {
			filterReverse:
			while (true) {
				if (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, distanceAtStart, window.nextDistance)) {
					if ((!A3(
						$ianmackenzie$elm_units$Quantity$equalWithin,
						$ianmackenzie$elm_units$Angle$degrees(2),
						window.unspentDeltaTheta,
						$ianmackenzie$elm_units$Quantity$zero)) || (!A3(
						$ianmackenzie$elm_units$Quantity$equalWithin,
						$ianmackenzie$elm_units$Angle$degrees(2),
						window.lastPhi,
						window.targetPhi))) {
						var availableDeltaTheta = A2(withDeltaConstraints, window, window.unspentDeltaTheta);
						var availableDeltaPhi = A2(withPhiConstraints, window, window.targetPhi);
						return _Utils_update(
							window,
							{
								lastDeltaTheta: availableDeltaTheta,
								lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
								nextDistance: A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_units$Length$meter, window.nextDistance),
								outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
								outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
								unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, window.unspentDeltaTheta)
							});
					} else {
						return window;
					}
				} else {
					var lastPassedPoint = A2($author$project$DomainModel$indexFromDistanceRoundedUp, window.nextDistance, track.trackTree);
					var newWindow = function () {
						if (_Utils_eq(lastPassedPoint, window.lastTrackIndex)) {
							var availableDeltaTheta = A2(withDeltaConstraints, window, window.unspentDeltaTheta);
							var availableDeltaPhi = A2(withPhiConstraints, window, window.targetPhi);
							return _Utils_update(
								window,
								{
									lastDeltaTheta: availableDeltaTheta,
									lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
									outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
									outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
									unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, window.unspentDeltaTheta)
								});
						} else {
							var newLeaf = $author$project$DomainModel$asRecord(
								A2($author$project$DomainModel$leafFromIndex, lastPassedPoint - 1, track.trackTree));
							var targetPhi = A3(
								$ianmackenzie$elm_units$Quantity$clamp,
								$ianmackenzie$elm_units$Quantity$negate(settings.maxPhi),
								settings.maxPhi,
								$ianmackenzie$elm_units$Quantity$negate(
									$ianmackenzie$elm_units$Angle$atan(newLeaf.gradientAtStart / 100.0)));
							var deltaThetaHere = A2(
								$ianmackenzie$elm_geometry$Direction2d$angleFrom,
								window.lastTrackDirection,
								$ianmackenzie$elm_geometry$Direction2d$reverse(newLeaf.directionAtStart));
							var unspentDeltaTheta = A2($ianmackenzie$elm_units$Quantity$plus, deltaThetaHere, window.unspentDeltaTheta);
							var availableDeltaTheta = A2(withDeltaConstraints, window, unspentDeltaTheta);
							var availableDeltaPhi = A2(withPhiConstraints, window, targetPhi);
							return _Utils_update(
								window,
								{
									lastDeltaTheta: availableDeltaTheta,
									lastPhi: A2($ianmackenzie$elm_units$Quantity$plus, availableDeltaPhi, window.lastPhi),
									lastTrackDirection: $ianmackenzie$elm_geometry$Direction2d$reverse(newLeaf.directionAtStart),
									lastTrackIndex: lastPassedPoint,
									outputDeltaPhi: A2($elm$core$List$cons, availableDeltaPhi, window.outputDeltaPhi),
									outputDeltaTheta: A2($elm$core$List$cons, availableDeltaTheta, window.outputDeltaTheta),
									targetPhi: targetPhi,
									unspentDeltaTheta: A2($ianmackenzie$elm_units$Quantity$minus, availableDeltaTheta, unspentDeltaTheta)
								});
						}
					}();
					var $temp$window = _Utils_update(
						newWindow,
						{
							lastTrackIndex: lastPassedPoint,
							nextDistance: A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_units$Length$meter, window.nextDistance)
						});
					window = $temp$window;
					continue filterReverse;
				}
			}
		};
		var forwardWindow = function () {
			var firstLeaf = $author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, fromStart, track.trackTree));
			var targetPhi = A3(
				$ianmackenzie$elm_units$Quantity$clamp,
				$ianmackenzie$elm_units$Quantity$negate(settings.maxPhi),
				settings.maxPhi,
				$ianmackenzie$elm_units$Angle$atan(firstLeaf.gradientAtStart / 100.0));
			return {lastDeltaTheta: $ianmackenzie$elm_units$Quantity$zero, lastPhi: targetPhi, lastTrackDirection: firstLeaf.directionAtStart, lastTrackIndex: 0, nextDistance: distanceAtStart, outputDeltaPhi: _List_Nil, outputDeltaTheta: _List_Nil, targetPhi: targetPhi, unspentDeltaTheta: $ianmackenzie$elm_units$Quantity$zero, unspentPhi: $ianmackenzie$elm_units$Quantity$zero};
		}();
		var derivedTrackForwards = function () {
			var firstLeaf = $author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, fromStart, track.trackTree));
			var startDirection = A2(
				$ianmackenzie$elm_geometry$Direction3d$xyZ,
				$ianmackenzie$elm_geometry$Direction2d$toAngle(firstLeaf.directionAtStart),
				$ianmackenzie$elm_units$Angle$atan(firstLeaf.gradientAtStart / 100.0));
			var combineDeltas = F4(
				function (forwardDTheta, forwardDPhi, reverseDTheta, reverseDPhi) {
					return _Utils_Tuple2(
						A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, options.blend, forwardDTheta),
							A2(
								$ianmackenzie$elm_units$Quantity$multiplyBy,
								1.0 - options.blend,
								$ianmackenzie$elm_units$Quantity$negate(reverseDTheta))),
						forwardDPhi);
				});
			var _v2 = function () {
				var finalWindow = filterReverse(reverseWindow);
				return _Utils_Tuple2(finalWindow.outputDeltaTheta, finalWindow.outputDeltaPhi);
			}();
			var reverseDeltaThetas = _v2.a;
			var reverseDeltaPhis = _v2.b;
			var _v3 = function () {
				var finalWindow = filterForwards(forwardWindow);
				return _Utils_Tuple2(
					$elm$core$List$reverse(finalWindow.outputDeltaTheta),
					$elm$core$List$reverse(finalWindow.outputDeltaPhi));
			}();
			var forwardsDeltaThetas = _v3.a;
			var forwardsDeltaPhis = _v3.b;
			var combinedDeltaLists = A5($elm$core$List$map4, combineDeltas, forwardsDeltaThetas, forwardsDeltaPhis, reverseDeltaThetas, reverseDeltaPhis);
			var _v4 = _Utils_Tuple2(
				$author$project$DomainModel$trueLength(track.trackTree),
				$ianmackenzie$elm_units$Length$meters(
					$elm$core$List$length(combinedDeltaLists) - 1));
			var originalLength = _v4.a;
			var resultingLength = _v4.b;
			var accumulate = F5(
				function (point, direction, distance, deltas, outputs) {
					accumulate:
					while (true) {
						if (deltas.b) {
							var _v6 = deltas.a;
							var dTheta = _v6.a;
							var dPhi = _v6.b;
							var moreDeltas = deltas.b;
							var vector = A2($ianmackenzie$elm_geometry$Vector3d$withLength, $ianmackenzie$elm_units$Length$meter, direction);
							var timeEstimate = function () {
								var equivalentOriginalDistance = A2(
									$ianmackenzie$elm_units$Quantity$multiplyBy,
									A2($ianmackenzie$elm_units$Quantity$ratio, distance, resultingLength),
									originalLength);
								return A2($author$project$DomainModel$estimateTimeAtDistance, equivalentOriginalDistance, track.trackTree);
							}();
							var newPoint = {
								space: A2($ianmackenzie$elm_geometry$Point3d$translateBy, vector, point.space),
								time: timeEstimate
							};
							var newDirection = A2(
								$ianmackenzie$elm_geometry$Direction3d$xyZ,
								A2(
									$ianmackenzie$elm_units$Quantity$plus,
									dTheta,
									A2($ianmackenzie$elm_geometry$Direction3d$azimuthIn, $ianmackenzie$elm_geometry$SketchPlane3d$xy, direction)),
								A2(
									$ianmackenzie$elm_units$Quantity$plus,
									dPhi,
									A2($ianmackenzie$elm_geometry$Direction3d$elevationFrom, $ianmackenzie$elm_geometry$SketchPlane3d$xy, direction)));
							var $temp$point = newPoint,
								$temp$direction = newDirection,
								$temp$distance = A2($ianmackenzie$elm_units$Quantity$plus, distance, $ianmackenzie$elm_units$Length$meter),
								$temp$deltas = moreDeltas,
								$temp$outputs = A2($elm$core$List$cons, newPoint, outputs);
							point = $temp$point;
							direction = $temp$direction;
							distance = $temp$distance;
							deltas = $temp$deltas;
							outputs = $temp$outputs;
							continue accumulate;
						} else {
							return outputs;
						}
					}
				});
			return A5(
				accumulate,
				firstLeaf.startPoint,
				startDirection,
				$ianmackenzie$elm_units$Quantity$zero,
				combinedDeltaLists,
				_List_fromArray(
					[firstLeaf.startPoint]));
		}();
		return A3(
			$author$project$TrackLoaded$asPreviewPoints,
			track,
			distanceAtStart,
			$elm$core$List$reverse(
				$author$project$Utils$elide(derivedTrackForwards)));
	});
var $author$project$Tools$SmartSmoother$applyUsingOptions = F2(
	function (options, track) {
		var newPoints = A2($author$project$Tools$SmartSmoother$computeNewPoints, options, track);
		var _v0 = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newTree = A5(
			$author$project$DomainModel$replaceRange,
			fromStart,
			fromEnd,
			track.referenceLonLat,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.gpx;
				},
				newPoints),
			track.trackTree);
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree);
		return _Utils_Tuple2(
			newTree,
			A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints));
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Tools$Graph$changeActiveTrack = F2(
	function (edge, options) {
		return _Utils_update(
			options,
			{editingTrack: edge});
	});
var $author$project$ToolsController$clearPopups = function (options) {
	var clearPopup = function (tool) {
		return _Utils_update(
			tool,
			{isPopupOpen: false});
	};
	return _Utils_update(
		options,
		{
			tools: A2($elm$core$List$map, clearPopup, options.tools)
		});
};
var $author$project$Tools$StravaTools$clearSegmentData = function (settings) {
	return _Utils_update(
		settings,
		{externalSegment: $author$project$Tools$StravaTypes$SegmentNone, preview: _List_Nil, stravaStreams: $elm$core$Maybe$Nothing});
};
var $author$project$ToolsController$ColourTriplet = F3(
	function (red, green, blue) {
		return {blue: blue, green: green, red: red};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$ToolsController$colourDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$ToolsController$ColourTriplet,
	A2($elm$json$Json$Decode$field, 'red', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'green', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'blue', $elm$json$Json$Decode$float));
var $author$project$Utils$deDupe = F2(
	function (areSame, inputList) {
		var helper = F2(
			function (inputs, outputs) {
				helper:
				while (true) {
					var _v0 = _Utils_Tuple2(inputs, outputs);
					if (!_v0.a.b) {
						return outputs;
					} else {
						if (!_v0.b.b) {
							var _v1 = _v0.a;
							var firstInput = _v1.a;
							var moreInputs = _v1.b;
							var $temp$inputs = moreInputs,
								$temp$outputs = _List_fromArray(
								[firstInput]);
							inputs = $temp$inputs;
							outputs = $temp$outputs;
							continue helper;
						} else {
							if (!_v0.a.b.b) {
								var _v2 = _v0.a;
								var finalInput = _v2.a;
								var _v3 = _v0.b;
								var previousOutput = _v3.a;
								return A2(areSame, finalInput, previousOutput) ? outputs : A2($elm$core$List$cons, finalInput, outputs);
							} else {
								var _v4 = _v0.a;
								var someInput = _v4.a;
								var moreInputs = _v4.b;
								var _v5 = _v0.b;
								var previousOutput = _v5.a;
								if (A2(areSame, someInput, previousOutput)) {
									var $temp$inputs = moreInputs,
										$temp$outputs = outputs;
									inputs = $temp$inputs;
									outputs = $temp$outputs;
									continue helper;
								} else {
									var $temp$inputs = moreInputs,
										$temp$outputs = A2($elm$core$List$cons, someInput, outputs);
									inputs = $temp$inputs;
									outputs = $temp$outputs;
									continue helper;
								}
							}
						}
					}
				}
			});
		return $elm$core$List$reverse(
			A2(helper, inputList, _List_Nil));
	});
var $author$project$TrackLoaded$removeAdjacentDuplicates = function (gpxs) {
	var areSame = F2(
		function (a, b) {
			return _Utils_eq(a.latitude, b.latitude) && _Utils_eq(a.longitude, b.longitude);
		});
	return A2($author$project$Utils$deDupe, areSame, gpxs);
};
var $author$project$Tools$Graph$combineNearbyPoints = F2(
	function (options, track) {
		return _Utils_Tuple2(
			_Utils_update(
				options,
				{suggestedNewTree: $elm$core$Maybe$Nothing}),
			A2(
				$elm$core$Maybe$withDefault,
				track.trackTree,
				A2(
					$author$project$DomainModel$treeFromSourcesWithExistingReference,
					track.referenceLonLat,
					$author$project$TrackLoaded$removeAdjacentDuplicates(
						$author$project$DomainModel$getAllGPXPointsInNaturalOrder(
							A2($elm$core$Maybe$withDefault, track.trackTree, options.suggestedNewTree))))));
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$MapPortController$mapCommands = _Platform_outgoingPort('mapCommands', $elm$core$Basics$identity);
var $author$project$MapboxKey$mapboxKey = 'pk.eyJ1IjoicGV0ZXJqYW1lc3dhcmQiLCJhIjoiY2tpdWswb3dsMm02bDMzcDMyNGw1bmh5aSJ9.Fk3ibin0PpeEGXlGsctP1g';
var $author$project$MapPortController$createMap = F2(
	function (style, info) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('Init')),
						_Utils_Tuple2(
						'token',
						$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
						_Utils_Tuple2(
						'lon',
						$elm$json$Json$Encode$float(info.centreLon)),
						_Utils_Tuple2(
						'lat',
						$elm$json$Json$Encode$float(info.centreLat)),
						_Utils_Tuple2(
						'zoom',
						$elm$json$Json$Encode$float(info.mapZoom)),
						_Utils_Tuple2(
						'style',
						$elm$json$Json$Encode$string(style))
					])));
	});
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $author$project$ToolsController$decodeColour = function (_v0) {
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return $mdgriffith$elm_ui$Element$fromRgb(
		{alpha: 1.0, blue: blue, green: green, red: red});
};
var $author$project$Main$SplitDecode = F2(
	function (left, right) {
		return {left: left, right: right};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Main$decodeSplitValues = F2(
	function (values, model) {
		var decoder = A3(
			$elm$json$Json$Decode$map2,
			$author$project$Main$SplitDecode,
			A2($elm$json$Json$Decode$field, 'left', $elm$json$Json$Decode$int),
			A2($elm$json$Json$Decode$field, 'right', $elm$json$Json$Decode$int));
		var decoded = A2($elm$json$Json$Decode$decodeValue, decoder, values);
		if (decoded.$ === 'Ok') {
			var data = decoded.a;
			var _v1 = _Utils_Tuple2(model.windowSize.a | 0, model.windowSize.b | 0);
			var width = _v1.a;
			return $author$project$Main$adjustSpaceForContent(
				_Utils_update(
					model,
					{
						leftDockRightEdge: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.left,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(20, (width / 3) | 0))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal)),
						rightDockLeftEdge: A2(
							$author$project$SplitPane$SplitPane$configureSplitter,
							A2(
								$author$project$SplitPane$SplitPane$px,
								data.right,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(((2 * width) / 3) | 0, width - 20))),
							$author$project$SplitPane$SplitPane$init($author$project$SplitPane$SplitPane$Horizontal))
					}));
		} else {
			return model;
		}
	});
var $author$project$ViewMapContext$MapOutdoors = {$: 'MapOutdoors'};
var $author$project$ViewMap$defaultStyle = $author$project$ViewMapContext$MapOutdoors;
var $author$project$ViewMap$mapUrl = function (style) {
	switch (style.$) {
		case 'MapBasic':
			return 'mapbox://styles/peterjamesward/ckj0benrl8i1k19rp4m1t3pkz';
		case 'MapStreets':
			return 'mapbox://styles/mapbox/streets-v12';
		case 'MapSatellite':
			return 'mapbox://styles/mapbox/satellite-v9';
		case 'MapSatelliteStreets':
			return 'mapbox://styles/mapbox/satellite-streets-v12';
		case 'MapOutdoors':
			return 'mapbox://styles/mapbox/outdoors-v12';
		default:
			return 'mapbox://styles/mapbox/light-v11';
	}
};
var $author$project$ViewMap$defaultStyleUrl = $author$project$ViewMap$mapUrl($author$project$ViewMap$defaultStyle);
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $author$project$Tools$Graph$listEdgesForNode = F2(
	function (node, graph) {
		var withLowNode = $elm$core$Dict$toList(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (_v1, edgeInfo) {
						return _Utils_eq(edgeInfo.lowNode, node);
					}),
				graph.edges));
		var withHighNode = $elm$core$Dict$toList(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (_v0, edgeInfo) {
						return _Utils_eq(edgeInfo.highNode, node);
					}),
				graph.edges));
		return _Utils_Tuple2(withLowNode, withHighNode);
	});
var $author$project$Tools$Graph$combinedEdgesForNode = F2(
	function (node, graph) {
		var _v0 = A2($author$project$Tools$Graph$listEdgesForNode, node, graph);
		var asLow = _v0.a;
		var asHigh = _v0.b;
		return _Utils_ap(asLow, asHigh);
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Tools$Graph$pruneOrphanedNodes = function (graph) {
	var nodeHasEdge = F2(
		function (k, v) {
			return !$elm$core$List$isEmpty(
				A2($author$project$Tools$Graph$combinedEdgesForNode, k, graph));
		});
	return _Utils_update(
		graph,
		{
			nodes: A2($elm$core$Dict$filter, nodeHasEdge, graph.nodes)
		});
};
var $author$project$Tools$Graph$joinTracks = F2(
	function (track1, track2) {
		var _v0 = _Utils_Tuple2(
			$author$project$DomainModel$getAllGPXPointsInNaturalOrder(track1.trackTree),
			$author$project$DomainModel$getAllGPXPointsInNaturalOrder(track2.trackTree));
		var asGpx1 = _v0.a;
		var asGpx2 = _v0.b;
		var _v1 = A2(
			$author$project$DomainModel$treeFromSourcesWithExistingReference,
			track1.referenceLonLat,
			_Utils_ap(asGpx1, asGpx2));
		if (_v1.$ === 'Just') {
			var tree = _v1.a;
			return _Utils_update(
				track1,
				{trackTree: tree});
		} else {
			return track1;
		}
	});
var $author$project$Tools$Graph$reverseTrack = function (track) {
	var asGpx1 = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
	var _v0 = A2(
		$author$project$DomainModel$treeFromSourcesWithExistingReference,
		track.referenceLonLat,
		$elm$core$List$reverse(asGpx1));
	if (_v0.$ === 'Just') {
		var tree = _v0.a;
		return _Utils_update(
			track,
			{trackTree: tree});
	} else {
		return track;
	}
};
var $author$project$Tools$Graph$removeIfRedundantPlace = F2(
	function (node, graph) {
		var _v0 = A2($author$project$Tools$Graph$listEdgesForNode, node, graph);
		_v0$3:
		while (true) {
			if (!_v0.a.b) {
				if ((_v0.b.b && _v0.b.b.b) && (!_v0.b.b.b.b)) {
					var _v5 = _v0.b;
					var asHigh1 = _v5.a;
					var _v6 = _v5.b;
					var asHigh2 = _v6.a;
					var _v7 = asHigh2;
					var edge2Index = _v7.a;
					var edge2Info = _v7.b;
					var _v8 = asHigh1;
					var edge1Index = _v8.a;
					var edge1Info = _v8.b;
					if (_Utils_cmp(edge1Info.lowNode, edge2Info.lowNode) < 1) {
						var newEdge1 = {
							highNode: edge2Info.lowNode,
							lowNode: edge1Info.lowNode,
							originalDirection: edge1Info.originalDirection,
							track: A2(
								$author$project$Tools$Graph$joinTracks,
								edge1Info.track,
								$author$project$Tools$Graph$reverseTrack(edge2Info.track)),
							via: edge1Info.via
						};
						return _Utils_update(
							graph,
							{
								edges: A3(
									$elm$core$Dict$insert,
									edge1Index,
									newEdge1,
									A2(
										$elm$core$Dict$remove,
										edge2Index,
										A2($elm$core$Dict$remove, edge1Index, graph.edges))),
								nodes: A2($elm$core$Dict$remove, node, graph.nodes)
							});
					} else {
						var newEdge2 = {
							highNode: edge1Info.lowNode,
							lowNode: edge2Info.lowNode,
							originalDirection: edge1Info.originalDirection,
							track: A2(
								$author$project$Tools$Graph$joinTracks,
								edge2Info.track,
								$author$project$Tools$Graph$reverseTrack(edge1Info.track)),
							via: edge2Info.via
						};
						return _Utils_update(
							graph,
							{
								edges: A3(
									$elm$core$Dict$insert,
									edge1Index,
									newEdge2,
									A2(
										$elm$core$Dict$remove,
										edge2Index,
										A2($elm$core$Dict$remove, edge1Index, graph.edges))),
								nodes: A2($elm$core$Dict$remove, node, graph.nodes)
							});
					}
				} else {
					break _v0$3;
				}
			} else {
				if (_v0.a.b.b) {
					if ((!_v0.a.b.b.b) && (!_v0.b.b)) {
						var _v1 = _v0.a;
						var asLow1 = _v1.a;
						var _v2 = _v1.b;
						var asLow2 = _v2.a;
						var _v3 = asLow2;
						var edge2Index = _v3.a;
						var edge2Info = _v3.b;
						var _v4 = asLow1;
						var edge1Index = _v4.a;
						var edge1Info = _v4.b;
						if (_Utils_cmp(edge1Info.highNode, edge2Info.highNode) < 1) {
							var newEdge1 = {
								highNode: edge2Info.highNode,
								lowNode: edge1Info.highNode,
								originalDirection: edge2Info.originalDirection,
								track: A2(
									$author$project$Tools$Graph$joinTracks,
									$author$project$Tools$Graph$reverseTrack(edge1Info.track),
									edge2Info.track),
								via: edge1Info.via
							};
							return _Utils_update(
								graph,
								{
									edges: A3(
										$elm$core$Dict$insert,
										edge1Index,
										newEdge1,
										A2(
											$elm$core$Dict$remove,
											edge2Index,
											A2($elm$core$Dict$remove, edge1Index, graph.edges))),
									nodes: A2($elm$core$Dict$remove, node, graph.nodes)
								});
						} else {
							var newEdge2 = {
								highNode: edge1Info.highNode,
								lowNode: edge2Info.highNode,
								originalDirection: edge1Info.originalDirection,
								track: A2(
									$author$project$Tools$Graph$joinTracks,
									$author$project$Tools$Graph$reverseTrack(edge2Info.track),
									edge1Info.track),
								via: edge2Info.via
							};
							return _Utils_update(
								graph,
								{
									edges: A3(
										$elm$core$Dict$insert,
										edge1Index,
										newEdge2,
										A2(
											$elm$core$Dict$remove,
											edge2Index,
											A2($elm$core$Dict$remove, edge1Index, graph.edges))),
									nodes: A2($elm$core$Dict$remove, node, graph.nodes)
								});
						}
					} else {
						break _v0$3;
					}
				} else {
					if (_v0.b.b && (!_v0.b.b.b)) {
						var _v9 = _v0.a;
						var asLow = _v9.a;
						var _v10 = _v0.b;
						var asHigh = _v10.a;
						var _v11 = asHigh;
						var edge2Index = _v11.a;
						var edge2Info = _v11.b;
						var _v12 = asLow;
						var edge1Index = _v12.a;
						var edge1Info = _v12.b;
						var newEdge = {
							highNode: edge2Info.lowNode,
							lowNode: edge1Info.lowNode,
							originalDirection: edge1Info.originalDirection,
							track: A2($author$project$Tools$Graph$joinTracks, edge2Info.track, edge1Info.track),
							via: edge1Info.via
						};
						return _Utils_update(
							graph,
							{
								edges: A3(
									$elm$core$Dict$insert,
									edge1Index,
									newEdge,
									A2(
										$elm$core$Dict$remove,
										edge2Index,
										A2($elm$core$Dict$remove, edge1Index, graph.edges))),
								nodes: _Utils_eq(node, edge1Info.highNode) ? graph.nodes : A2($elm$core$Dict$remove, node, graph.nodes)
							});
					} else {
						break _v0$3;
					}
				}
			}
		}
		return graph;
	});
var $author$project$Tools$Graph$deleteEdge = F2(
	function (edge, options) {
		var graph = options.graph;
		var _v0 = A2($elm$core$Dict$get, edge, graph.edges);
		if (_v0.$ === 'Just') {
			var edgeInfo = _v0.a;
			var newGraph = A2(
				$author$project$Tools$Graph$removeIfRedundantPlace,
				edgeInfo.highNode,
				A2(
					$author$project$Tools$Graph$removeIfRedundantPlace,
					edgeInfo.lowNode,
					$author$project$Tools$Graph$pruneOrphanedNodes(
						_Utils_update(
							graph,
							{
								edges: A2($elm$core$Dict$remove, edge, graph.edges)
							}))));
			return _Utils_update(
				options,
				{
					graph: newGraph,
					graphUndos: A2($elm$core$List$cons, graph, options.graphUndos)
				});
		} else {
			return options;
		}
	});
var $author$project$Tools$DeletePoints$deleteSinglePoint = F3(
	function (fromStart, fromEnd, track) {
		var newTree = A5($author$project$DomainModel$replaceRange, fromStart, fromEnd, track.referenceLonLat, _List_Nil, track.trackTree);
		return newTree;
	});
var $author$project$ToolsController$encodeColour = function (colour) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(colour);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'red',
				$elm$json$Json$Encode$float(red)),
				_Utils_Tuple2(
				'green',
				$elm$json$Json$Encode$float(green)),
				_Utils_Tuple2(
				'blue',
				$elm$json$Json$Encode$float(blue))
			]));
};
var $author$project$Main$encodeSplitValues = function (model) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'left',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.leftDockRightEdge))),
				_Utils_Tuple2(
				'right',
				$elm$json$Json$Encode$float(
					$author$project$SplitPane$SplitPane$getPosition(model.rightDockLeftEdge)))
			]));
};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Tools$Graph$buildGraph = function (track) {
	var swap = function (_v12) {
		var a = _v12.a;
		var b = _v12.b;
		return _Utils_Tuple2(b, a);
	};
	var countNeighbours = F2(
		function (road, countDict) {
			var _v10 = _Utils_Tuple2(
				$author$project$Tools$Graph$makeXY(road.startPoint),
				$author$project$Tools$Graph$makeXY(road.endPoint));
			var startXY = _v10.a;
			var endXY = _v10.b;
			var _v11 = _Utils_Tuple2(
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Set$empty,
					A2($elm$core$Dict$get, startXY, countDict)),
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Set$empty,
					A2($elm$core$Dict$get, endXY, countDict)));
			var startNeighbours = _v11.a;
			var endNeighbours = _v11.b;
			return A3(
				$elm$core$Dict$insert,
				endXY,
				A2($elm$core$Set$insert, startXY, endNeighbours),
				A3(
					$elm$core$Dict$insert,
					startXY,
					A2($elm$core$Set$insert, endXY, startNeighbours),
					countDict));
		});
	var pointNeighbours = A3($author$project$DomainModel$foldOverRouteRL, countNeighbours, track.trackTree, $elm$core$Dict$empty);
	var _v0 = _Utils_Tuple2(
		$author$project$Tools$Graph$makeXY(
			A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree)),
		$author$project$Tools$Graph$makeXY(
			A2(
				$author$project$DomainModel$earthPointFromIndex,
				$author$project$DomainModel$skipCount(track.trackTree),
				track.trackTree)));
	var trackStartXY = _v0.a;
	var trackEndXY = _v0.b;
	var nodes = $elm$core$Dict$fromList(
		A2(
			$elm$core$List$indexedMap,
			$elm$core$Tuple$pair,
			$elm$core$Dict$keys(
				A2(
					$elm$core$Dict$filter,
					F2(
						function (pt, neighbours) {
							return ($elm$core$Set$size(neighbours) !== 2) || (_Utils_eq(pt, trackStartXY) || _Utils_eq(pt, trackEndXY));
						}),
					pointNeighbours))));
	var inverseNodes = $elm$core$Dict$fromList(
		A2(
			$elm$core$List$map,
			swap,
			$elm$core$Dict$toList(nodes)));
	var splitIntoEdges = F2(
		function (road, inputState) {
			var pointXY = $author$project$Tools$Graph$makeXY(road.endPoint);
			var pointGpx = road.sourceData.b;
			var _v2 = A2($elm$core$Dict$get, pointXY, inverseNodes);
			if (_v2.$ === 'Nothing') {
				return _Utils_update(
					inputState,
					{
						currentEdge: A2(
							$elm$core$List$cons,
							_Utils_Tuple2(road.endPoint, pointGpx),
							inputState.currentEdge)
					});
			} else {
				var nodeIndex = _v2.a;
				var newEdge = A2(
					$elm$core$List$cons,
					_Utils_Tuple2(road.endPoint, pointGpx),
					inputState.currentEdge);
				var orientedEdgeCouldBeLeaf = (_Utils_cmp(nodeIndex, inputState.startNodeIndex) > -1) ? $elm$core$List$reverse(newEdge) : newEdge;
				var orientedEdge = function () {
					if ((orientedEdgeCouldBeLeaf.b && orientedEdgeCouldBeLeaf.b.b) && (!orientedEdgeCouldBeLeaf.b.b.b)) {
						var _v7 = orientedEdgeCouldBeLeaf.a;
						var startEarth = _v7.a;
						var startGpx = _v7.b;
						var _v8 = orientedEdgeCouldBeLeaf.b;
						var _v9 = _v8.a;
						var endEarth = _v9.a;
						var endGpx = _v9.b;
						var midEarth = $author$project$DomainModel$withoutTime(
							A2($ianmackenzie$elm_geometry$Point3d$midpoint, startEarth.space, endEarth.space));
						var midGpx = A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, midEarth);
						return _List_fromArray(
							[
								_Utils_Tuple2(startEarth, startGpx),
								_Utils_Tuple2(midEarth, midGpx),
								_Utils_Tuple2(endEarth, endGpx)
							]);
					} else {
						return orientedEdgeCouldBeLeaf;
					}
				}();
				var discriminator = A2(
					$elm$core$Maybe$withDefault,
					pointXY,
					A2(
						$elm$core$Maybe$map,
						$author$project$Tools$Graph$makeXY,
						A2(
							$elm$core$Maybe$map,
							$elm$core$Tuple$first,
							A2($elm_community$list_extra$List$Extra$getAt, 1, orientedEdge))));
				var _v3 = _Utils_Tuple2(
					A2($elm$core$Basics$min, inputState.startNodeIndex, nodeIndex),
					A2($elm$core$Basics$max, inputState.startNodeIndex, nodeIndex));
				var lowNode = _v3.a;
				var highNode = _v3.b;
				var _v4 = A2(
					$elm$core$Dict$get,
					_Utils_Tuple3(lowNode, highNode, discriminator),
					inputState.edgeResolverDict);
				if (_v4.$ === 'Just') {
					var _v5 = _v4.a;
					var edgeIndex = _v5.a;
					var traversal = {
						direction: _Utils_eq(lowNode, inputState.startNodeIndex) ? $author$project$Tools$GraphOptions$Natural : $author$project$Tools$GraphOptions$Reverse,
						edge: edgeIndex
					};
					return _Utils_update(
						inputState,
						{
							currentEdge: _List_fromArray(
								[
									_Utils_Tuple2(road.endPoint, pointGpx)
								]),
							startNodeIndex: nodeIndex,
							traversals: A2($elm$core$List$cons, traversal, inputState.traversals)
						});
				} else {
					var newEdgeTree = A2(
						$elm$core$Maybe$withDefault,
						$author$project$DomainModel$Leaf(road),
						A2(
							$author$project$DomainModel$treeFromSourcesWithExistingReference,
							track.referenceLonLat,
							A2($elm$core$List$map, $elm$core$Tuple$second, orientedEdge)));
					var newEdgeTrack = A2($author$project$TrackLoaded$newTrackFromTree, track.referenceLonLat, newEdgeTree);
					var newEdgeIndex = $elm$core$Dict$size(inputState.edgesDict);
					var traversal = {
						direction: _Utils_eq(lowNode, inputState.startNodeIndex) ? $author$project$Tools$GraphOptions$Natural : $author$project$Tools$GraphOptions$Reverse,
						edge: newEdgeIndex
					};
					return {
						currentEdge: _List_fromArray(
							[
								_Utils_Tuple2(road.endPoint, pointGpx)
							]),
						edgeResolverDict: A3(
							$elm$core$Dict$insert,
							_Utils_Tuple3(lowNode, highNode, discriminator),
							_Utils_Tuple2(newEdgeIndex, newEdgeTree),
							inputState.edgeResolverDict),
						edgesDict: A3(
							$elm$core$Dict$insert,
							newEdgeIndex,
							{highNode: highNode, lowNode: lowNode, originalDirection: traversal.direction, track: newEdgeTrack, via: discriminator},
							inputState.edgesDict),
						startNodeIndex: nodeIndex,
						traversals: A2($elm$core$List$cons, traversal, inputState.traversals)
					};
				}
			}
		});
	var _v1 = A2($author$project$DomainModel$getDualCoords, track.trackTree, 0);
	var firstPoint = _v1.a;
	var firstGpx = _v1.b;
	var initialEdgeFinder = {
		currentEdge: _List_fromArray(
			[
				_Utils_Tuple2(firstPoint, firstGpx)
			]),
		edgeResolverDict: $elm$core$Dict$empty,
		edgesDict: $elm$core$Dict$empty,
		startNodeIndex: A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Dict$get,
				$author$project$Tools$Graph$makeXY(firstPoint),
				inverseNodes)),
		traversals: _List_Nil
	};
	var finalEdgeFinder = A3($author$project$DomainModel$foldOverRoute, splitIntoEdges, track.trackTree, initialEdgeFinder);
	return {
		edges: finalEdgeFinder.edgesDict,
		nodes: nodes,
		referenceLonLat: track.referenceLonLat,
		userRoute: $elm$core$List$reverse(finalEdgeFinder.traversals)
	};
};
var $author$project$Tools$Graph$enterRoutePlanningMode = F2(
	function (options, track) {
		return _Utils_Tuple2(
			_Utils_update(
				options,
				{
					analyzed: true,
					graph: $author$project$Tools$Graph$buildGraph(track),
					graphUndos: _List_Nil,
					originalTrack: $elm$core$Maybe$Just(track),
					suggestedNewGraph: $elm$core$Maybe$Nothing,
					suggestedNewTree: $elm$core$Maybe$Nothing
				}),
			A2($elm$core$Maybe$withDefault, track.trackTree, options.suggestedNewTree));
	});
var $author$project$OAuthTypes$UserInfo = F3(
	function (id, firstname, lastname) {
		return {firstname: firstname, id: id, lastname: lastname};
	});
var $author$project$StravaClientSecret$clientSecret = '01713301d9282956d3d182c1e01ce02c5e8620c3';
var $author$project$StravaAuth$defaultHttpsUrl = {fragment: $elm$core$Maybe$Nothing, host: '', path: '', port_: $elm$core$Maybe$Nothing, protocol: $elm$url$Url$Https, query: $elm$core$Maybe$Nothing};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$StravaAuth$configuration = {
	authorizationEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/oauth/authorize'}),
	clientId: '59195',
	clientSecret: $author$project$StravaClientSecret$clientSecret,
	scope: _List_fromArray(
		['read_all,activity:read_all']),
	tokenEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/oauth/token'}),
	userInfoDecoder: A4(
		$elm$json$Json$Decode$map3,
		$author$project$OAuthTypes$UserInfo,
		A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'firstname', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'lastname', $elm$json$Json$Decode$string)),
	userInfoEndpoint: _Utils_update(
		$author$project$StravaAuth$defaultHttpsUrl,
		{host: 'www.strava.com', path: '/api/v3/athlete'})
};
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$crossOrigin = F3(
	function (prePath, pathSegments, parameters) {
		return prePath + ('/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters)));
	});
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$multipartBody = function (parts) {
	return A2(
		_Http_pair,
		'',
		_Http_toFormData(parts));
};
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $author$project$Tools$StravaDataLoad$stravaApiRoot = 'https://www.strava.com';
var $author$project$Tools$StravaDataLoad$stravaTokenDecoder = A2($elm$json$Json$Decode$field, 'access_token', $elm$json$Json$Decode$string);
var $elm$http$Http$stringPart = _Http_pair;
var $author$project$Tools$StravaDataLoad$exchangeCodeForToken = F2(
	function (msg, code) {
		var queryBody = $elm$http$Http$multipartBody(
			_List_fromArray(
				[
					A2($elm$http$Http$stringPart, 'client_id', $author$project$StravaAuth$configuration.clientId),
					A2($elm$http$Http$stringPart, 'client_secret', $author$project$StravaAuth$configuration.clientSecret),
					A2($elm$http$Http$stringPart, 'code', code),
					A2($elm$http$Http$stringPart, 'grant_type', 'authorization_code')
				]));
		return $elm$http$Http$request(
			{
				body: queryBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$stravaTokenDecoder),
				headers: _List_Nil,
				method: 'POST',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'oauth', 'token']),
					_List_Nil)
			});
	});
var $author$project$PaneLayoutManager$exitRouteView = function (options) {
	var pane1 = options.pane1;
	var _v0 = _Utils_Tuple2(options.viewBeforeRouteViewForced, pane1.activeView);
	if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'ViewGraph')) {
		var savedView = _v0.a.a;
		var _v1 = _v0.b;
		return _Utils_update(
			options,
			{
				pane1: _Utils_update(
					pane1,
					{activeView: savedView}),
				viewBeforeRouteViewForced: $elm$core$Maybe$Nothing
			});
	} else {
		return options;
	}
};
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $author$project$Actions$SetCurrent = function (a) {
	return {$: 'SetCurrent', a: a};
};
var $author$project$Actions$StopFlythroughTicks = {$: 'StopFlythroughTicks'};
var $author$project$Tools$Flythrough$Ended = {$: 'Ended'};
var $author$project$Tools$Flythrough$Running = {$: 'Running'};
var $author$project$Tools$Flythrough$eyeHeight = $ianmackenzie$elm_units$Length$meters(2.0);
var $author$project$Tools$Flythrough$advanceInternal = F4(
	function (newTime, status, speed, track) {
		var _v0 = status.running;
		switch (_v0.$) {
			case 'AwaitingFirstTick':
				return $elm$core$Maybe$Just(
					_Utils_update(
						status,
						{lastUpdated: newTime, running: $author$project$Tools$Flythrough$Running}));
			case 'Paused':
				return $elm$core$Maybe$Just(
					_Utils_update(
						status,
						{lastUpdated: newTime}));
			case 'Ended':
				return $elm$core$Maybe$Just(status);
			default:
				if (A2(
					$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
					$author$project$DomainModel$trueLength(track.trackTree),
					status.metresFromRouteStart)) {
					return $elm$core$Maybe$Just(
						_Utils_update(
							status,
							{running: $author$project$Tools$Flythrough$Ended}));
				} else {
					var tempus = ($elm$time$Time$posixToMillis(newTime) - $elm$time$Time$posixToMillis(status.lastUpdated)) / 1000.0;
					var newDistance = A2(
						$ianmackenzie$elm_units$Quantity$plus,
						$ianmackenzie$elm_units$Length$meters(
							tempus * A2($elm$core$Basics$pow, 10.0, speed)),
						status.metresFromRouteStart);
					var lastPointPassedIndex = A2($author$project$DomainModel$indexFromDistanceRoundedDown, newDistance, track.trackTree);
					var nextRoad = $author$project$DomainModel$asRecord(
						A2($author$project$DomainModel$leafFromIndex, lastPointPassedIndex + 1, track.trackTree));
					var lastPointDistance = A2($author$project$DomainModel$distanceFromIndex, lastPointPassedIndex, track.trackTree);
					var segInsetMetres = A2($ianmackenzie$elm_units$Quantity$minus, lastPointDistance, newDistance);
					var currentRoad = $author$project$DomainModel$asRecord(
						A2($author$project$DomainModel$leafFromIndex, lastPointPassedIndex, track.trackTree));
					var segLength = currentRoad.trueLength;
					var segFraction = A2($ianmackenzie$elm_units$Quantity$ratio, segInsetMetres, segLength);
					var segRemaining = $ianmackenzie$elm_units$Length$inMeters(
						A2($ianmackenzie$elm_units$Quantity$minus, segInsetMetres, segLength));
					var headTurnFraction = A3($elm$core$Basics$clamp, 0.0, 1.0, (10.0 - segRemaining) / 10.0);
					var lookingAt = A2(
						$ianmackenzie$elm_geometry$Point3d$translateBy,
						A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, $author$project$Tools$Flythrough$eyeHeight),
						A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, currentRoad.endPoint.space, nextRoad.endPoint.space, headTurnFraction));
					var camera3d = A2(
						$ianmackenzie$elm_geometry$Point3d$translateBy,
						A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, $author$project$Tools$Flythrough$eyeHeight),
						A3($ianmackenzie$elm_geometry$Point3d$interpolateFrom, currentRoad.startPoint.space, currentRoad.endPoint.space, segFraction));
					return $elm$core$Maybe$Just(
						_Utils_update(
							status,
							{cameraPosition: camera3d, focusPoint: lookingAt, gradient: currentRoad.gradientAtStart, lastUpdated: newTime, metresFromRouteStart: newDistance}));
				}
		}
	});
var $author$project$Tools$Flythrough$advanceFlythrough = F3(
	function (posixTime, options, track) {
		var _v0 = options.flythrough;
		if (_v0.$ === 'Just') {
			var flythrough = _v0.a;
			var updatedFlythrough = A4($author$project$Tools$Flythrough$advanceInternal, posixTime, flythrough, options.flythroughSpeed, track);
			var newOptions = _Utils_update(
				options,
				{flythrough: updatedFlythrough});
			return _Utils_Tuple2(
				newOptions,
				function () {
					if (updatedFlythrough.$ === 'Just') {
						var stillFlying = updatedFlythrough.a;
						return _List_fromArray(
							[
								$author$project$Actions$SetCurrent(
								A2($author$project$DomainModel$indexFromDistanceRoundedDown, stillFlying.metresFromRouteStart, track.trackTree))
							]);
					} else {
						return _List_fromArray(
							[
								$author$project$Actions$SetCurrent(options.savedCurrentPosition),
								$author$project$Actions$StopFlythroughTicks
							]);
					}
				}());
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[$author$project$Actions$StopFlythroughTicks]));
		}
	});
var $author$project$ToolsController$flythroughTick = F3(
	function (options, posix, track) {
		var _v0 = A3($author$project$Tools$Flythrough$advanceFlythrough, posix, options.flythroughSettings, track);
		var updatedFlythrough = _v0.a;
		var actions = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				options,
				{flythroughSettings: updatedFlythrough}),
			actions);
	});
var $author$project$ViewMode$ViewGraph = {$: 'ViewGraph'};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $author$project$PaneLayoutManager$isViewVisible = F2(
	function (mode, options) {
		return A2(
			$elm$core$List$any,
			function (pane) {
				return _Utils_eq(pane.activeView, mode);
			},
			function () {
				var _v0 = options.paneLayout;
				switch (_v0.$) {
					case 'PanesOne':
						return _List_fromArray(
							[options.pane1]);
					case 'PanesLeftRight':
						return _List_fromArray(
							[options.pane1, options.pane2]);
					case 'PanesUpperLower':
						return _List_fromArray(
							[options.pane1, options.pane2]);
					case 'PanesOnePlusTwo':
						return _List_fromArray(
							[options.pane1, options.pane2, options.pane3]);
					default:
						return _List_fromArray(
							[options.pane1, options.pane2, options.pane3, options.pane4]);
				}
			}());
	});
var $author$project$PaneLayoutManager$forceRouteView = function (options) {
	if (A2($author$project$PaneLayoutManager$isViewVisible, $author$project$ViewMode$ViewGraph, options)) {
		return options;
	} else {
		var pane1 = options.pane1;
		return _Utils_update(
			options,
			{
				pane1: _Utils_update(
					pane1,
					{activeView: $author$project$ViewMode$ViewGraph}),
				viewBeforeRouteViewForced: $elm$core$Maybe$Just(options.pane1.activeView)
			});
	}
};
var $author$project$Tools$I18N$availableI18N = _List_fromArray(
	[$author$project$Locations$UK$location]);
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $author$project$Tools$I18N$fromCountryCode = function (code) {
	var _v0 = A2(
		$elm_community$list_extra$List$Extra$find,
		function (loc) {
			return _Utils_eq(loc.country.code, code);
		},
		$author$project$Tools$I18N$availableI18N);
	if (_v0.$ === 'Just') {
		var location = _v0.a;
		return location;
	} else {
		return $author$project$Tools$I18N$defaultLocation;
	}
};
var $author$project$Tools$Graph$getTrack = F2(
	function (edge, options) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.track;
			},
			A2($elm$core$Dict$get, edge, options.graph.edges));
	});
var $author$project$OAuth$Bearer = function (a) {
	return {$: 'Bearer', a: a};
};
var $author$project$Tools$StravaOptions$StravaConnected = function (a) {
	return {$: 'StravaConnected', a: a};
};
var $author$project$Tools$StravaTools$haveReceivedToken = F2(
	function (token, settings) {
		return _Utils_update(
			settings,
			{
				stravaStatus: $author$project$Tools$StravaOptions$StravaConnected(
					$author$project$OAuth$Bearer(token))
			});
	});
var $author$project$ViewMode$ViewThird = {$: 'ViewThird'};
var $author$project$ViewMap$initialiseContext = function (currentContext) {
	if (currentContext.$ === 'Just') {
		var context = currentContext.a;
		return _Utils_update(
			context,
			{
				lastMapClick: _Utils_Tuple2(0, 0),
				mapClickDebounce: false
			});
	} else {
		return {
			draggable: false,
			followOrange: false,
			lastMapClick: _Utils_Tuple2(0, 0),
			mapClickDebounce: false,
			mapStyle: $author$project$ViewMap$defaultStyle,
			mapStyleMenuOpen: false
		};
	}
};
var $author$project$Tools$GraphOptions$ClickNone = {$: 'ClickNone'};
var $author$project$ViewGraphContext$DragNone = {$: 'DragNone'};
var $author$project$ViewGraphContext$EdgeSketch = {$: 'EdgeSketch'};
var $ianmackenzie$elm_geometry$Point2d$origin = $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
	{x: 0, y: 0});
var $author$project$DomainModel$startPoint = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).startPoint;
};
var $author$project$ViewGraph$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 14.0,
					dragAction: $author$project$ViewGraphContext$DragNone,
					fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 14.0
				});
		} else {
			return {
				clickFeature: $author$project$Tools$GraphOptions$ClickNone,
				clickPoint: $elm$core$Maybe$Nothing,
				defaultZoomLevel: 14.0,
				dragAction: $author$project$ViewGraphContext$DragNone,
				edgeMode: $author$project$ViewGraphContext$EdgeSketch,
				fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: false,
				haveDisplayedEditingReminder: false,
				mouseHere: $ianmackenzie$elm_geometry$Point2d$origin,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 14.0
			};
		}
	});
var $author$project$ViewPlanContext$DragNone = {$: 'DragNone'};
var $author$project$ViewPlan$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 16.0,
					dragAction: $author$project$ViewPlanContext$DragNone,
					fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 16.0
				});
		} else {
			return {
				defaultZoomLevel: 16.0,
				dragAction: $author$project$ViewPlanContext$DragNone,
				fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: true,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 16.0
			};
		}
	});
var $author$project$ViewProfileChartContext$DragNone = {$: 'DragNone'};
var $author$project$ViewProfileChartsCanvas$initialiseView = F3(
	function (suffix, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 0.0,
					dragAction: $author$project$ViewProfileChartContext$DragNone,
					focalPoint: $ianmackenzie$elm_units$Quantity$half(
						$author$project$DomainModel$trueLength(treeNode)),
					metresPerPixel: 10.0,
					waitingForClickDelay: false,
					zoomLevel: 0.0
				});
		} else {
			return {
				colouredChart: false,
				contextSuffix: suffix,
				defaultZoomLevel: 0.0,
				dragAction: $author$project$ViewProfileChartContext$DragNone,
				emphasis: 1.0,
				focalPoint: $ianmackenzie$elm_units$Quantity$half(
					$author$project$DomainModel$trueLength(treeNode)),
				focalPoint3d: $ianmackenzie$elm_geometry$Point3d$origin,
				followSelectedPoint: false,
				metresPerPixel: 10.0,
				mouseEvent: $elm$core$Maybe$Nothing,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 0.0
			};
		}
	});
var $author$project$View3dCommonElements$DragNone = {$: 'DragNone'};
var $ianmackenzie$elm_geometry$Direction2d$negativeY = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 0, y: -1});
var $author$project$ViewThirdPerson$initialiseView = F3(
	function (current, treeNode, currentContext) {
		if (currentContext.$ === 'Just') {
			var context = currentContext.a;
			return _Utils_update(
				context,
				{
					cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$negativeY,
					cameraDistance: $ianmackenzie$elm_units$Length$kilometers(10),
					cameraElevation: $ianmackenzie$elm_units$Angle$degrees(30),
					defaultZoomLevel: 14.0,
					dragAction: $author$project$View3dCommonElements$DragNone,
					fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
					focalPoint: $author$project$DomainModel$startPoint(
						A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 14.0
				});
		} else {
			return {
				cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$negativeY,
				cameraDistance: $ianmackenzie$elm_units$Length$kilometers(10),
				cameraElevation: $ianmackenzie$elm_units$Angle$degrees(30),
				defaultZoomLevel: 14.0,
				dragAction: $author$project$View3dCommonElements$DragNone,
				fieldOfView: $ianmackenzie$elm_units$Angle$degrees(45),
				focalPoint: $author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, current, treeNode)),
				followSelectedPoint: true,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 14.0
			};
		}
	});
var $author$project$PaneContext$paneIdToString = function (paneId) {
	switch (paneId.$) {
		case 'Pane1':
			return '1';
		case 'Pane2':
			return '2';
		case 'Pane3':
			return '3';
		default:
			return '4';
	}
};
var $author$project$PaneLayoutManager$initialisePane = F3(
	function (track, options, pane) {
		return _Utils_update(
			pane,
			{
				activeView: _Utils_eq(pane.activeView, $author$project$ViewMode$ViewInfo) ? $author$project$ViewMode$ViewThird : pane.activeView,
				firstPersonContext: $elm$core$Maybe$Just(
					A3($author$project$ViewThirdPerson$initialiseView, 0, track.trackTree, pane.firstPersonContext)),
				graphContext: $elm$core$Maybe$Just(
					A3($author$project$ViewGraph$initialiseView, 0, track.trackTree, pane.graphContext)),
				mapContext: $elm$core$Maybe$Just(
					$author$project$ViewMap$initialiseContext(pane.mapContext)),
				planContext: $elm$core$Maybe$Just(
					A3($author$project$ViewPlan$initialiseView, 0, track.trackTree, pane.planContext)),
				profileContext: $elm$core$Maybe$Just(
					A3(
						$author$project$ViewProfileChartsCanvas$initialiseView,
						$author$project$PaneContext$paneIdToString(pane.paneId),
						track.trackTree,
						pane.profileContext)),
				thirdPersonContext: $elm$core$Maybe$Just(
					A3($author$project$ViewThirdPerson$initialiseView, 0, track.trackTree, pane.thirdPersonContext))
			});
	});
var $author$project$PaneLayoutManager$initialise = F2(
	function (track, options) {
		return _Utils_update(
			options,
			{
				pane1: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane1),
				pane2: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane2),
				pane3: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane3),
				pane4: A3($author$project$PaneLayoutManager$initialisePane, track, options, options.pane4)
			});
	});
var $author$project$Tools$NamedSegment$initialise = function (segments) {
	return {landUsePreferCloser: false, landUseProximity: $elm$core$Maybe$Nothing, namedSegments: segments, selectedSegment: $elm$core$Maybe$Nothing};
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $author$project$Actions$MakeRouteFromGraph = {$: 'MakeRouteFromGraph'};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $ianmackenzie$elm_geometry$LineSegment2d$endPoint = function (_v0) {
	var _v1 = _v0.a;
	var end = _v1.b;
	return end;
};
var $elm_community$list_extra$List$Extra$reverseAppend = F2(
	function (list1, list2) {
		return A3($elm$core$List$foldl, $elm$core$List$cons, list2, list1);
	});
var $elm_community$list_extra$List$Extra$interweaveHelp = F3(
	function (acc, list1, list2) {
		interweaveHelp:
		while (true) {
			var _v0 = _Utils_Tuple2(list1, list2);
			if (_v0.a.b) {
				if (_v0.b.b) {
					var _v1 = _v0.a;
					var x = _v1.a;
					var xs = _v1.b;
					var _v2 = _v0.b;
					var y = _v2.a;
					var ys = _v2.b;
					var $temp$acc = A2(
						$elm$core$List$cons,
						y,
						A2($elm$core$List$cons, x, acc)),
						$temp$list1 = xs,
						$temp$list2 = ys;
					acc = $temp$acc;
					list1 = $temp$list1;
					list2 = $temp$list2;
					continue interweaveHelp;
				} else {
					return A2($elm_community$list_extra$List$Extra$reverseAppend, acc, list1);
				}
			} else {
				return A2($elm_community$list_extra$List$Extra$reverseAppend, acc, list2);
			}
		}
	});
var $elm_community$list_extra$List$Extra$interweave = $elm_community$list_extra$List$Extra$interweaveHelp(_List_Nil);
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $ianmackenzie$elm_geometry$Direction3d$projectInto = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var d = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var projectedY = ((d.x * j.x) + (d.y * j.y)) + (d.z * j.z);
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		var projectedX = ((d.x * i.x) + (d.y * i.y)) + (d.z * i.z);
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(projectedX),
			$elm$core$Basics$abs(projectedY));
		if (!largestComponent) {
			return $elm$core$Maybe$Nothing;
		} else {
			var scaledY = projectedY / largestComponent;
			var scaledX = projectedX / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt((scaledX * scaledX) + (scaledY * scaledY));
			return $elm$core$Maybe$Just(
				$ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
					{x: scaledX / scaledLength, y: scaledY / scaledLength}));
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LineSegment2d = function (a) {
	return {$: 'LineSegment2d', a: a};
};
var $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints = $ianmackenzie$elm_geometry$Geometry$Types$LineSegment2d;
var $ianmackenzie$elm_geometry$LineSegment3d$projectInto = F2(
	function (sketchPlane, lineSegment) {
		var project = $ianmackenzie$elm_geometry$Point3d$projectInto(sketchPlane);
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		return $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
			_Utils_Tuple2(
				project(p1),
				project(p2)));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$startPoint = function (_v0) {
	var _v1 = _v0.a;
	var start = _v1.a;
	return start;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$originPoint = function (_v0) {
	var properties = _v0.a;
	return properties.originPoint;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$xDirection = function (_v0) {
	var properties = _v0.a;
	return properties.xDirection;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$yDirection = function (_v0) {
	var properties = _v0.a;
	return properties.yDirection;
};
var $ianmackenzie$elm_geometry$SketchPlane3d$translateBy = F2(
	function (vector, sketchPlane) {
		return $ianmackenzie$elm_geometry$SketchPlane3d$unsafe(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					vector,
					$ianmackenzie$elm_geometry$SketchPlane3d$originPoint(sketchPlane)),
				xDirection: $ianmackenzie$elm_geometry$SketchPlane3d$xDirection(sketchPlane),
				yDirection: $ianmackenzie$elm_geometry$SketchPlane3d$yDirection(sketchPlane)
			});
	});
var $author$project$Tools$Graph$trivialGraph = function (track) {
	var traversal = {direction: $author$project$Tools$GraphOptions$Natural, edge: 0};
	var _v0 = _Utils_Tuple3(
		A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree),
		A2(
			$author$project$DomainModel$earthPointFromIndex,
			$author$project$DomainModel$skipCount(track.trackTree),
			track.trackTree),
		A2($author$project$DomainModel$earthPointFromIndex, 1, track.trackTree));
	var startNode = _v0.a;
	var endNode = _v0.b;
	var discriminator = _v0.c;
	var edges = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				0,
				{
					highNode: 2,
					lowNode: 1,
					originalDirection: $author$project$Tools$GraphOptions$Natural,
					track: track,
					via: $author$project$Tools$Graph$makeXY(discriminator)
				})
			]));
	var nodes = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				0,
				$author$project$Tools$Graph$makeXY(startNode)),
				_Utils_Tuple2(
				2,
				$author$project$Tools$Graph$makeXY(endNode))
			]));
	return {
		edges: edges,
		nodes: nodes,
		referenceLonLat: track.referenceLonLat,
		userRoute: _List_fromArray(
			[traversal])
	};
};
var $ianmackenzie$elm_geometry$Vector2d$withLength = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var d = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: a * d.x, y: a * d.y});
	});
var $author$project$Tools$Graph$makeNewRoute = function (options) {
	var useNudgeTool = F3(
		function (nudgeOption, track, index) {
			return A4($author$project$Tools$Nudge$nudgeTrackPoint, nudgeOption, 1.0, index, track);
		});
	var trim = options.minimumRadiusAtPlaces;
	var renderJunction = function (junction) {
		var _v25 = junction.arc;
		if (_v25.$ === 'Just') {
			var arc = _v25.a;
			return A2(
				$elm$core$List$map,
				$author$project$DomainModel$withoutTime,
				$ianmackenzie$elm_geometry$Polyline3d$vertices(
					A2(
						$ianmackenzie$elm_geometry$Arc3d$approximate,
						$ianmackenzie$elm_units$Length$meters(0.1),
						arc)));
		} else {
			return _List_Nil;
		}
	};
	var graph = options.graph;
	var isNotFirstUseOfEdge = function () {
		var _v22 = A3(
			$elm$core$List$foldl,
			F2(
				function (_v23, _v24) {
					var edge = _v23.edge;
					var traversed = _v24.a;
					var outputs = _v24.b;
					return _Utils_Tuple2(
						A2($elm$core$Set$insert, edge, traversed),
						A2(
							$elm$core$List$cons,
							A2($elm$core$Set$member, edge, traversed),
							outputs));
				}),
			_Utils_Tuple2($elm$core$Set$empty, _List_Nil),
			graph.userRoute);
		var flags = _v22.b;
		return $elm$core$List$reverse(flags);
	}();
	var trimTraversal = F4(
		function (preceding, _v21, repetition, following) {
			var edge = _v21.edge;
			var direction = _v21.direction;
			var _v17 = A2($elm$core$Dict$get, edge, graph.edges);
			if (_v17.$ === 'Just') {
				var edgeInfo = _v17.a;
				var defaultNudge = $author$project$Tools$Nudge$defaultOptions;
				var correctedOffset = function () {
					if (direction.$ === 'Natural') {
						return options.centreLineOffset;
					} else {
						return $ianmackenzie$elm_units$Quantity$negate(options.centreLineOffset);
					}
				}();
				var nudgeOptions = _Utils_update(
					defaultNudge,
					{
						horizontal: correctedOffset,
						vertical: repetition ? $ianmackenzie$elm_units$Length$centimeters(-1) : $ianmackenzie$elm_units$Quantity$zero
					});
				var _v18 = _Utils_Tuple2(
					A2($author$project$DomainModel$indexFromDistance, trim, edgeInfo.track.trackTree) + 1,
					A2(
						$author$project$DomainModel$indexFromDistance,
						A2(
							$ianmackenzie$elm_units$Quantity$minus,
							trim,
							$author$project$DomainModel$trueLength(edgeInfo.track.trackTree)),
						edgeInfo.track.trackTree) - 1);
				var firstOffsetIndex = _v18.a;
				var lastOffsetIndex = _v18.b;
				var nudgedPoints = A2(
					$elm$core$List$map,
					A2(useNudgeTool, nudgeOptions, edgeInfo.track.trackTree),
					A2($elm$core$List$range, firstOffsetIndex, lastOffsetIndex));
				if (direction.$ === 'Natural') {
					return nudgedPoints;
				} else {
					return $elm$core$List$reverse(nudgedPoints);
				}
			} else {
				return _List_Nil;
			}
		});
	var dummyJunction = {arc: $elm$core$Maybe$Nothing, trim: $ianmackenzie$elm_units$Quantity$zero};
	var computeJunction = F2(
		function (inbound, outbound) {
			var _v1 = _Utils_Tuple2(
				A2($elm$core$Dict$get, inbound.edge, graph.edges),
				A2($elm$core$Dict$get, outbound.edge, graph.edges));
			if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
				var inEdge = _v1.a.a;
				var outEdge = _v1.b.a;
				var geometryPoint = function (point) {
					return A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, point);
				};
				var lineEquationFromSegment = function (segment) {
					return A2(
						$author$project$Geometry101$lineEquationFromTwoPoints,
						geometryPoint(
							$ianmackenzie$elm_geometry$LineSegment2d$startPoint(segment)),
						geometryPoint(
							$ianmackenzie$elm_geometry$LineSegment2d$endPoint(segment)));
				};
				var actualVertex = function () {
					var _v16 = inbound.direction;
					if (_v16.$ === 'Natural') {
						return A2(
							$author$project$DomainModel$earthPointFromIndex,
							$author$project$DomainModel$skipCount(inEdge.track.trackTree),
							inEdge.track.trackTree);
					} else {
						return A2($author$project$DomainModel$earthPointFromIndex, 0, inEdge.track.trackTree);
					}
				}();
				var _v2 = function () {
					var _v3 = outbound.direction;
					if (_v3.$ === 'Natural') {
						return A2($author$project$DomainModel$interpolateTrack, trim, outEdge.track.trackTree);
					} else {
						return A2(
							$author$project$DomainModel$interpolateTrack,
							A2(
								$ianmackenzie$elm_units$Quantity$minus,
								trim,
								$author$project$DomainModel$trueLength(outEdge.track.trackTree)),
							outEdge.track.trackTree);
					}
				}();
				var outboundTrimPoint = _v2.b;
				var _v4 = function () {
					var _v5 = inbound.direction;
					if (_v5.$ === 'Natural') {
						return A2(
							$author$project$DomainModel$interpolateTrack,
							A2(
								$ianmackenzie$elm_units$Quantity$minus,
								trim,
								$author$project$DomainModel$trueLength(inEdge.track.trackTree)),
							inEdge.track.trackTree);
					} else {
						return A2($author$project$DomainModel$interpolateTrack, trim, inEdge.track.trackTree);
					}
				}();
				var inboundTrimPoint = _v4.b;
				var _v6 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$LineSegment3d$from, inboundTrimPoint.space, actualVertex.space),
					A2($ianmackenzie$elm_geometry$LineSegment3d$from, actualVertex.space, outboundTrimPoint.space));
				var inboundRoad = _v6.a;
				var outboundRoad = _v6.b;
				var meanHeight = $ianmackenzie$elm_units$Quantity$half(
					A2(
						$ianmackenzie$elm_units$Quantity$plus,
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(inboundTrimPoint.space),
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(outboundTrimPoint.space)));
				var planeFor2dArc = A2(
					$ianmackenzie$elm_geometry$SketchPlane3d$translateBy,
					A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, meanHeight),
					$ianmackenzie$elm_geometry$SketchPlane3d$xy);
				var _v7 = _Utils_Tuple2(
					A2(
						$elm$core$Maybe$withDefault,
						$ianmackenzie$elm_geometry$Direction2d$positiveX,
						A2(
							$ianmackenzie$elm_geometry$Direction3d$projectInto,
							planeFor2dArc,
							A2(
								$elm$core$Maybe$withDefault,
								$ianmackenzie$elm_geometry$Direction3d$positiveZ,
								A2($ianmackenzie$elm_geometry$Direction3d$from, inboundTrimPoint.space, actualVertex.space)))),
					A2(
						$elm$core$Maybe$withDefault,
						$ianmackenzie$elm_geometry$Direction2d$positiveX,
						A2(
							$ianmackenzie$elm_geometry$Direction3d$projectInto,
							planeFor2dArc,
							A2(
								$elm$core$Maybe$withDefault,
								$ianmackenzie$elm_geometry$Direction3d$positiveZ,
								A2($ianmackenzie$elm_geometry$Direction3d$from, actualVertex.space, outboundTrimPoint.space)))));
				var inboundDirection = _v7.a;
				var outboundDirection = _v7.b;
				var _v8 = _Utils_Tuple2(
					A2(
						$ianmackenzie$elm_geometry$Vector2d$withLength,
						options.centreLineOffset,
						$ianmackenzie$elm_geometry$Direction2d$rotateClockwise(inboundDirection)),
					A2(
						$ianmackenzie$elm_geometry$Vector2d$withLength,
						options.centreLineOffset,
						$ianmackenzie$elm_geometry$Direction2d$rotateClockwise(outboundDirection)));
				var offsetVectorInbound = _v8.a;
				var offsetVectorOutbound = _v8.b;
				var _v9 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$LineSegment3d$projectInto, planeFor2dArc, inboundRoad),
					A2($ianmackenzie$elm_geometry$LineSegment3d$projectInto, planeFor2dArc, outboundRoad));
				var inboundRoad2d = _v9.a;
				var outboundRoad2d = _v9.b;
				var _v10 = _Utils_Tuple2(
					lineEquationFromSegment(inboundRoad2d),
					lineEquationFromSegment(outboundRoad2d));
				var inboundLineEquation = _v10.a;
				var outboundLineEquation = _v10.b;
				var _v11 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, planeFor2dArc, inboundTrimPoint.space),
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, planeFor2dArc, outboundTrimPoint.space));
				var inboundTrim2d = _v11.a;
				var outboundTrim2d = _v11.b;
				var _v12 = _Utils_Tuple2(
					A2(
						$author$project$Geometry101$linePerpendicularTo,
						inboundLineEquation,
						geometryPoint(inboundTrim2d)),
					A2(
						$author$project$Geometry101$linePerpendicularTo,
						outboundLineEquation,
						geometryPoint(outboundTrim2d)));
				var perpToInbound = _v12.a;
				var perToOutbound = _v12.b;
				var arcCentre = A2(
					$elm$core$Maybe$map,
					$ianmackenzie$elm_geometry$Point2d$fromRecord($ianmackenzie$elm_units$Length$meters),
					A2($author$project$Geometry101$lineIntersection, perpToInbound, perToOutbound));
				var arc = function () {
					if (arcCentre.$ === 'Just') {
						var centre = arcCentre.a;
						var turnAngle = A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, inboundDirection, outboundDirection);
						var _v15 = _Utils_Tuple2(
							A2($ianmackenzie$elm_geometry$Point2d$translateBy, offsetVectorInbound, inboundTrim2d),
							A2($ianmackenzie$elm_geometry$Point2d$translateBy, offsetVectorOutbound, outboundTrim2d));
						var offsetInboundTrimPoint = _v15.a;
						return $elm$core$Maybe$Just(
							A3($ianmackenzie$elm_geometry$Arc2d$sweptAround, centre, turnAngle, offsetInboundTrimPoint));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				if (arc.$ === 'Just') {
					var foundArc = arc.a;
					return {
						arc: $elm$core$Maybe$Just(
							A2($ianmackenzie$elm_geometry$Arc3d$on, planeFor2dArc, foundArc)),
						trim: trim
					};
				} else {
					return dummyJunction;
				}
			} else {
				return dummyJunction;
			}
		});
	var junctions = A3(
		$elm$core$List$map2,
		computeJunction,
		graph.userRoute,
		A2($elm$core$List$drop, 1, graph.userRoute));
	var renderedArcs = A2($elm$core$List$map, renderJunction, junctions);
	var trimmedTraversals = A5(
		$elm$core$List$map4,
		trimTraversal,
		A2($elm$core$List$cons, dummyJunction, junctions),
		graph.userRoute,
		isNotFirstUseOfEdge,
		_Utils_ap(
			junctions,
			_List_fromArray(
				[dummyJunction])));
	var newEarthPoints = _Utils_ap(
		A2($elm$core$List$take, 1, trimmedTraversals),
		A2(
			$elm_community$list_extra$List$Extra$interweave,
			renderedArcs,
			A2($elm$core$List$drop, 1, trimmedTraversals)));
	var newTrack = A2(
		$elm$core$Maybe$map,
		$author$project$TrackLoaded$newTrackFromTree(graph.referenceLonLat),
		A2(
			$author$project$DomainModel$treeFromSourcesWithExistingReference,
			graph.referenceLonLat,
			A2(
				$elm$core$List$map,
				$author$project$DomainModel$gpxFromPointWithReference(graph.referenceLonLat),
				$elm$core$List$concat(newEarthPoints))));
	var _v0 = _Utils_Tuple2(options.originalTrack, newTrack);
	if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
		var oldTrack = _v0.a.a;
		var track = _v0.b.a;
		var trackWithUndo = A5(
			$author$project$TrackLoaded$addToUndoStack,
			$author$project$Actions$MakeRouteFromGraph,
			0,
			0,
			$author$project$DomainModel$getAllGPXPointsInNaturalOrder(oldTrack.trackTree),
			track);
		return _Utils_update(
			options,
			{
				analyzed: false,
				editingTrack: 0,
				graph: $author$project$Tools$Graph$trivialGraph(trackWithUndo),
				originalTrack: $elm$core$Maybe$Nothing,
				selectedTraversal: 0,
				undoGraph: $elm$core$Maybe$Just(graph),
				undoOriginalTrack: options.originalTrack
			});
	} else {
		return options;
	}
};
var $ianmackenzie$elm_units$Constants$mile = 5280 * $ianmackenzie$elm_units$Constants$foot;
var $ianmackenzie$elm_units$Length$miles = function (numMiles) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$mile * numMiles);
};
var $elm$file$File$name = _File_name;
var $ianmackenzie$elm_geometry$Point3d$distanceFromAxis = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = axis.direction;
		var d = _v3.a;
		var projection = ((deltaX * d.x) + (deltaY * d.y)) + (deltaZ * d.z);
		var perpX = deltaX - (projection * d.x);
		var perpY = deltaY - (projection * d.y);
		var perpZ = deltaZ - (projection * d.z);
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(perpX),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(perpY),
				$elm$core$Basics$abs(perpZ)));
		if (!largestComponent) {
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			var scaledZ = perpZ / largestComponent;
			var scaledY = perpY / largestComponent;
			var scaledX = perpX / largestComponent;
			var scaledDistance = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_units$Quantity$Quantity(scaledDistance * largestComponent);
		}
	});
var $ianmackenzie$elm_units$Quantity$positiveInfinity = $ianmackenzie$elm_units$Quantity$Quantity(1 / 0);
var $ianmackenzie$elm_geometry$BoundingBox2d$contains = F2(
	function (point, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox),
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(point)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox),
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(point)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(point)) && A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(point))));
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$unsafeOffsetBy = F2(
	function (amount, boundingBox) {
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
			{
				maxX: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox)),
				maxY: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox)),
				minX: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox)),
				minY: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox))
			});
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$expandBy = F2(
	function (amount, boundingBox) {
		return A2(
			$ianmackenzie$elm_geometry$BoundingBox2d$unsafeOffsetBy,
			$ianmackenzie$elm_units$Quantity$abs(amount),
			boundingBox);
	});
var $ianmackenzie$elm_geometry$LineSegment2d$from = F2(
	function (startPoint_, endPoint_) {
		return $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
			_Utils_Tuple2(startPoint_, endPoint_));
	});
var $ianmackenzie$elm_units$Length$inches = function (numInches) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$inch * numInches);
};
var $ianmackenzie$elm_units$Length$inch = $ianmackenzie$elm_units$Length$inches(1);
var $ianmackenzie$elm_geometry$LineSegment2d$endpoints = function (_v0) {
	var endpoints_ = _v0.a;
	return endpoints_;
};
var $ianmackenzie$elm_geometry$Point2d$interpolateFrom = F3(
	function (_v0, _v1, t) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return (t <= 0.5) ? $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p1.x + (t * (p2.x - p1.x)), y: p1.y + (t * (p2.y - p1.y))}) : $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p2.x + ((1 - t) * (p1.x - p2.x)), y: p2.y + ((1 - t) * (p1.y - p2.y))});
	});
var $ianmackenzie$elm_units$Quantity$lessThan = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return _Utils_cmp(x, y) < 0;
	});
var $ianmackenzie$elm_geometry$Point2d$signedDistanceFrom = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.y - p0.y) * d.x) - ((p.x - p0.x) * d.y));
	});
var $ianmackenzie$elm_units$Quantity$times = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x * y);
	});
var $ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis = F2(
	function (axis, lineSegment) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		var d1 = A2($ianmackenzie$elm_geometry$Point2d$signedDistanceFrom, axis, p1);
		var d2 = A2($ianmackenzie$elm_geometry$Point2d$signedDistanceFrom, axis, p2);
		var product = A2($ianmackenzie$elm_units$Quantity$times, d2, d1);
		if (A2($ianmackenzie$elm_units$Quantity$lessThan, $ianmackenzie$elm_units$Quantity$zero, product)) {
			var t = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				d1,
				A2($ianmackenzie$elm_units$Quantity$minus, d2, d1));
			return $elm$core$Maybe$Just(
				A3($ianmackenzie$elm_geometry$Point2d$interpolateFrom, p1, p2, t));
		} else {
			if (A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, product)) {
				return $elm$core$Maybe$Nothing;
			} else {
				if (!_Utils_eq(d1, $ianmackenzie$elm_units$Quantity$zero)) {
					return $elm$core$Maybe$Just(p2);
				} else {
					if (!_Utils_eq(d2, $ianmackenzie$elm_units$Quantity$zero)) {
						return $elm$core$Maybe$Just(p1);
					} else {
						if (_Utils_eq(p1, p2)) {
							return $elm$core$Maybe$Just(p1);
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$Direction3d$componentIn = F2(
	function (_v0, _v1) {
		var d2 = _v0.a;
		var d1 = _v1.a;
		return ((d1.x * d2.x) + (d1.y * d2.y)) + (d1.z * d2.z);
	});
var $ianmackenzie$elm_geometry$Axis3d$direction = function (_v0) {
	var axis = _v0.a;
	return axis.direction;
};
var $ianmackenzie$elm_geometry$Axis3d$originPoint = function (_v0) {
	var axis = _v0.a;
	return axis.originPoint;
};
var $ianmackenzie$elm_geometry$Point3d$signedDistanceFrom = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var p = _v1.a;
		var _v2 = plane.originPoint;
		var p0 = _v2.a;
		var _v3 = plane.normalDirection;
		var n = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((((p.x - p0.x) * n.x) + ((p.y - p0.y) * n.y)) + ((p.z - p0.z) * n.z));
	});
var $ianmackenzie$elm_geometry$Point3d$translateIn = F3(
	function (_v0, _v1, _v2) {
		var d = _v0.a;
		var distance = _v1.a;
		var p = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p.x + (distance * d.x), y: p.y + (distance * d.y), z: p.z + (distance * d.z)});
	});
var $ianmackenzie$elm_geometry$Axis3d$intersectionWithPlane = F2(
	function (plane, axis) {
		var axisDirection = $ianmackenzie$elm_geometry$Axis3d$direction(axis);
		var _v0 = plane;
		var normalDirection = _v0.a.normalDirection;
		var normalComponent = A2($ianmackenzie$elm_geometry$Direction3d$componentIn, normalDirection, axisDirection);
		if (!normalComponent) {
			return $elm$core$Maybe$Nothing;
		} else {
			var axisOrigin = $ianmackenzie$elm_geometry$Axis3d$originPoint(axis);
			var normalDistance = A2($ianmackenzie$elm_geometry$Point3d$signedDistanceFrom, plane, axisOrigin);
			var axialDistance = A2($ianmackenzie$elm_units$Quantity$multiplyBy, (-1) / normalComponent, normalDistance);
			return $elm$core$Maybe$Just(
				A3($ianmackenzie$elm_geometry$Point3d$translateIn, axisDirection, axialDistance, axisOrigin));
		}
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Axis2d = function (a) {
	return {$: 'Axis2d', a: a};
};
var $ianmackenzie$elm_geometry$Axis2d$through = F2(
	function (givenPoint, givenDirection) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Axis2d(
			{direction: givenDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Axis3d$projectInto = F2(
	function (sketchPlane, _v0) {
		var axis = _v0.a;
		var projectedOrigin = A2($ianmackenzie$elm_geometry$Point3d$projectInto, sketchPlane, axis.originPoint);
		return A2(
			$elm$core$Maybe$map,
			$ianmackenzie$elm_geometry$Axis2d$through(projectedOrigin),
			A2($ianmackenzie$elm_geometry$Direction3d$projectInto, sketchPlane, axis.direction));
	});
var $author$project$SpatialIndex$queryNearestToAxisUsing = F4(
	function (current, axis, valuation, initialState) {
		var updateNearestWithContent = F2(
			function (indexEntry, state) {
				var metric = valuation(indexEntry.content);
				return A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$inch, state.currentBestMetric, metric) ? _Utils_update(
					state,
					{
						currentBestContent: A2($elm$core$List$cons, indexEntry, state.currentBestContent)
					}) : (A2($ianmackenzie$elm_units$Quantity$lessThan, state.currentBestMetric, metric) ? {
					currentBestContent: _List_fromArray(
						[indexEntry]),
					currentBestMetric: metric
				} : state);
			});
		var helperWithPoint = F3(
			function (node, point2d, inputState) {
				if (node.$ === 'Blank') {
					return inputState;
				} else {
					var hasContent = node.a;
					var boxWithThreshold = A2($ianmackenzie$elm_geometry$BoundingBox2d$expandBy, inputState.currentBestMetric, hasContent.box);
					var boundsWithinThreshold = A2($ianmackenzie$elm_geometry$BoundingBox2d$contains, point2d, boxWithThreshold);
					if (boundsWithinThreshold) {
						var updatedNearest = A3($elm$core$List$foldl, updateNearestWithContent, inputState, hasContent.contents);
						return A3(
							helperWithPoint,
							hasContent.sw,
							point2d,
							A3(
								helperWithPoint,
								hasContent.se,
								point2d,
								A3(
									helperWithPoint,
									hasContent.nw,
									point2d,
									A3(helperWithPoint, hasContent.ne, point2d, updatedNearest))));
					} else {
						return inputState;
					}
				}
			});
		var helperWithAxis = F3(
			function (node, axis2d, inputState) {
				if (node.$ === 'Blank') {
					return inputState;
				} else {
					var hasContent = node.a;
					var boxWithThreshold = A2($ianmackenzie$elm_geometry$BoundingBox2d$expandBy, inputState.currentBestMetric, hasContent.box);
					var _v2 = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(boxWithThreshold);
					var minX = _v2.minX;
					var maxX = _v2.maxX;
					var minY = _v2.minY;
					var maxY = _v2.maxY;
					var _v3 = _Utils_Tuple2(
						_Utils_Tuple2(
							A2($ianmackenzie$elm_geometry$Point2d$xy, maxX, minY),
							A2($ianmackenzie$elm_geometry$Point2d$xy, maxX, maxY)),
						_Utils_Tuple2(
							A2($ianmackenzie$elm_geometry$Point2d$xy, minX, minY),
							A2($ianmackenzie$elm_geometry$Point2d$xy, minX, maxY)));
					var _v4 = _v3.a;
					var se = _v4.a;
					var ne = _v4.b;
					var _v5 = _v3.b;
					var nw = _v5.a;
					var sw = _v5.b;
					var _v6 = _Utils_Tuple2(
						_Utils_Tuple2(
							A2($ianmackenzie$elm_geometry$LineSegment2d$from, ne, nw),
							A2($ianmackenzie$elm_geometry$LineSegment2d$from, se, sw)),
						_Utils_Tuple2(
							A2($ianmackenzie$elm_geometry$LineSegment2d$from, ne, se),
							A2($ianmackenzie$elm_geometry$LineSegment2d$from, nw, sw)));
					var _v7 = _v6.a;
					var north = _v7.a;
					var south = _v7.b;
					var _v8 = _v6.b;
					var east = _v8.a;
					var west = _v8.b;
					var boundsWithinThreshold = !$elm$core$List$isEmpty(
						A2(
							$elm$core$List$filterMap,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis, axis2d, north),
									A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis, axis2d, south),
									A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis, axis2d, east),
									A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis, axis2d, west)
								])));
					if (boundsWithinThreshold) {
						var updatedNearest = A3($elm$core$List$foldl, updateNearestWithContent, inputState, hasContent.contents);
						return A3(
							helperWithAxis,
							hasContent.sw,
							axis2d,
							A3(
								helperWithAxis,
								hasContent.se,
								axis2d,
								A3(
									helperWithAxis,
									hasContent.nw,
									axis2d,
									A3(helperWithAxis, hasContent.ne, axis2d, updatedNearest))));
					} else {
						return inputState;
					}
				}
			});
		var _v9 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Axis3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, axis),
			A2($ianmackenzie$elm_geometry$Axis3d$intersectionWithPlane, $ianmackenzie$elm_geometry$Plane3d$xy, axis));
		if (_v9.a.$ === 'Just') {
			var axis2d = _v9.a.a;
			return A3(helperWithAxis, current, axis2d, initialState);
		} else {
			if (_v9.b.$ === 'Just') {
				var _v10 = _v9.a;
				var pointOnXY = _v9.b.a;
				return A3(
					helperWithPoint,
					current,
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, pointOnXY),
					initialState);
			} else {
				return initialState;
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $author$project$DomainModel$nearestToRay = F4(
	function (ray, tree, leafIndex, current) {
		var valuationFunction = function (leafEntry) {
			var leafToTest = $author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, leafEntry.leafIndex, tree));
			return A2(
				$ianmackenzie$elm_units$Quantity$min,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leafToTest.startPoint.space),
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leafToTest.endPoint.space));
		};
		var nearestPointForLeaf = function (leafEntry) {
			var indexOfLeaf = leafEntry.content.leafIndex;
			var leafToTest = $author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, indexOfLeaf, tree));
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leafToTest.endPoint.space),
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, ray, leafToTest.startPoint.space)) ? indexOfLeaf : (indexOfLeaf + 1);
		};
		var nearestLeafs = A4(
			$author$project$SpatialIndex$queryNearestToAxisUsing,
			leafIndex,
			ray,
			valuationFunction,
			{currentBestContent: _List_Nil, currentBestMetric: $ianmackenzie$elm_units$Quantity$positiveInfinity});
		var nearestPoints = $elm_community$list_extra$List$Extra$unique(
			A2($elm$core$List$map, nearestPointForLeaf, nearestLeafs.currentBestContent));
		return A2(
			$elm$core$Maybe$withDefault,
			current,
			A2(
				$elm_community$list_extra$List$Extra$minimumBy,
				function (pointIndex) {
					return $elm$core$Basics$abs(pointIndex - current);
				},
				nearestPoints));
	});
var $ianmackenzie$elm_geometry$Direction3d$negativeZ = $ianmackenzie$elm_geometry$Direction3d$unsafe(
	{x: 0, y: 0, z: -1});
var $author$project$DomainModel$nearestToEarthPoint = F4(
	function (earthPoint, current, treeNode, leafIndex) {
		var ray = A2($ianmackenzie$elm_geometry$Axis3d$withDirection, $ianmackenzie$elm_geometry$Direction3d$negativeZ, earthPoint.space);
		return A4($author$project$DomainModel$nearestToRay, ray, treeNode, leafIndex, current);
	});
var $author$project$DomainModel$nearestToLonLat = F5(
	function (click, current, treeNode, referenceLonLat, leafIndex) {
		var asEarthPoint = A2($author$project$DomainModel$pointFromGpxWithReference, referenceLonLat, click);
		return A4($author$project$DomainModel$nearestToEarthPoint, asEarthPoint, current, treeNode, leafIndex);
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$ViewMode$ViewProfileCanvas = {$: 'ViewProfileCanvas'};
var $ianmackenzie$elm_units$Length$inKilometers = function (length) {
	return 0.001 * $ianmackenzie$elm_units$Length$inMeters(length);
};
var $ianmackenzie$elm_units$Length$inMiles = function (length) {
	return $ianmackenzie$elm_units$Length$inMeters(length) / $ianmackenzie$elm_units$Constants$mile;
};
var $author$project$SceneBuilderProfile$commonChartScales = F4(
	function (profile, imperial, track, isGradients) {
		var orangeDistance = A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree);
		var halfOfView = $ianmackenzie$elm_units$Quantity$half(
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				A2($elm$core$Basics$pow, 0.5, profile.zoomLevel),
				$author$project$DomainModel$trueLength(track.trackTree)));
		var _v0 = _Utils_Tuple2(
			halfOfView,
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				halfOfView,
				$author$project$DomainModel$trueLength(track.trackTree)));
		var leftmostCentreDistance = _v0.a;
		var rightmostCentreDistance = _v0.b;
		var focalPoint = profile.followSelectedPoint ? A3($ianmackenzie$elm_units$Quantity$clamp, leftmostCentreDistance, rightmostCentreDistance, orangeDistance) : profile.focalPoint;
		var _v1 = _Utils_Tuple2(
			A2($ianmackenzie$elm_units$Quantity$minus, halfOfView, focalPoint),
			A2($ianmackenzie$elm_units$Quantity$plus, halfOfView, focalPoint));
		var startDistance = _v1.a;
		var endDistance = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2($author$project$DomainModel$indexFromDistanceRoundedDown, startDistance, track.trackTree),
			A2($author$project$DomainModel$indexFromDistanceRoundedUp, endDistance, track.trackTree));
		var firstPointIndex = _v2.a;
		var lastPointIndex = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$DomainModel$distanceFromIndex, firstPointIndex, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, lastPointIndex, track.trackTree));
		var firstPointDistance = _v3.a;
		var lastPointDistance = _v3.b;
		var _v4 = imperial ? _Utils_Tuple2(
			'Miles',
			isGradients ? '%' : 'Feet') : _Utils_Tuple2(
			'Kilometers',
			isGradients ? '%' : 'Meters');
		var distanceUnits = _v4.a;
		var altitudeUnits = _v4.b;
		var _v5 = imperial ? _Utils_Tuple2($ianmackenzie$elm_units$Length$inMiles, $ianmackenzie$elm_units$Length$inFeet) : _Utils_Tuple2($ianmackenzie$elm_units$Length$inKilometers, $ianmackenzie$elm_units$Length$inMeters);
		var distanceFunction = _v5.a;
		var altitudeFunction = _v5.b;
		var options = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'animations',
					$elm$json$Json$Encode$bool(false)),
					_Utils_Tuple2(
					'responsive',
					$elm$json$Json$Encode$bool(true)),
					_Utils_Tuple2(
					'plugins',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'legend',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'display',
											$elm$json$Json$Encode$bool(false))
										])))
							]))),
					_Utils_Tuple2(
					'element',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'point',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'pointStyle',
											$elm$json$Json$Encode$bool(false))
										])))
							]))),
					_Utils_Tuple2(
					'scales',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'x',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'type',
											$elm$json$Json$Encode$string('linear')),
											_Utils_Tuple2(
											'min',
											$elm$json$Json$Encode$float(
												distanceFunction(startDistance))),
											_Utils_Tuple2(
											'max',
											$elm$json$Json$Encode$float(
												distanceFunction(endDistance))),
											_Utils_Tuple2(
											'title',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'text',
														$elm$json$Json$Encode$string(distanceUnits)),
														_Utils_Tuple2(
														'display',
														$elm$json$Json$Encode$bool(true))
													])))
										]))),
								_Utils_Tuple2(
								'y',
								$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'type',
											$elm$json$Json$Encode$string('linear')),
											_Utils_Tuple2(
											'title',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'text',
														$elm$json$Json$Encode$string(altitudeUnits)),
														_Utils_Tuple2(
														'display',
														$elm$json$Json$Encode$bool(true))
													])))
										])))
							])))
				]));
		return {altitudeFunction: altitudeFunction, distanceFunction: distanceFunction, endDistance: endDistance, firstPointDistance: firstPointDistance, firstPointIndex: firstPointIndex, focalPoint: focalPoint, lastPointDistance: lastPointDistance, lastPointIndex: lastPointIndex, options: options, startDistance: startDistance};
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$SceneBuilderProfile$gradientChart = F3(
	function (profile, imperial, track) {
		var orangeDistance = A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree);
		var commonInfo = A4($author$project$SceneBuilderProfile$commonChartScales, profile, imperial, track, true);
		var makeGradientPoint = F3(
			function (gpx, distance, gradient) {
				var fDistance = commonInfo.distanceFunction(distance);
				var altitude = commonInfo.altitudeFunction(gpx.altitude);
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'x',
							$elm$json$Json$Encode$float(fDistance)),
							_Utils_Tuple2(
							'y',
							$elm$json$Json$Encode$float(gradient))
						]));
			});
		var coordinateCollector = F2(
			function (road, _v2) {
				var lastDistance = _v2.a;
				var outputs = _v2.b;
				var newDistance = A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, lastDistance);
				return _Utils_Tuple2(
					newDistance,
					A2(
						$elm$core$List$cons,
						A3(makeGradientPoint, road.sourceData.b, lastDistance, road.gradientAtStart),
						outputs));
			});
		var coordinates = function () {
			var _v1 = A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				commonInfo.firstPointIndex,
				commonInfo.lastPointIndex,
				$elm$core$Basics$always(
					$elm$core$Maybe$Just(
						$elm$core$Basics$floor(profile.zoomLevel + 8))),
				0,
				track.trackTree,
				coordinateCollector,
				_Utils_Tuple2(commonInfo.firstPointDistance, _List_Nil));
			var points = _v1.b;
			return $elm$core$List$reverse(points);
		}();
		var gradientDataset = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'backgroundColor',
					$elm$json$Json$Encode$string('rgba(182,198,237,0.6)')),
					_Utils_Tuple2(
					'borderColor',
					$elm$json$Json$Encode$string('rgba(77,110,205,0.6')),
					_Utils_Tuple2(
					'pointStyle',
					$elm$json$Json$Encode$bool(false)),
					_Utils_Tuple2(
					'data',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, coordinates)),
					_Utils_Tuple2(
					'fill',
					$elm$json$Json$Encode$bool(true)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string('gradient')),
					_Utils_Tuple2(
					'stepped',
					$elm$json$Json$Encode$bool(true))
				]));
		var gradientPointFromIndex = function (index) {
			var gradient = $author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, index, track.trackTree)).gradientAtStart;
			var asGPX = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
			var asDist = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
			return A3(makeGradientPoint, asGPX, asDist, gradient);
		};
		var orangePoint = _List_fromArray(
			[
				gradientPointFromIndex(track.currentPosition)
			]);
		var orangeDataset = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'backgroundColor',
					$elm$json$Json$Encode$string('orange')),
					_Utils_Tuple2(
					'borderColor',
					$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
					_Utils_Tuple2(
					'pointStyle',
					$elm$json$Json$Encode$string('circle')),
					_Utils_Tuple2(
					'pointRadius',
					$elm$json$Json$Encode$float(10)),
					_Utils_Tuple2(
					'data',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, orangePoint)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string('orange'))
				]));
		var purpleDataset = function () {
			var _v0 = track.markerPosition;
			if (_v0.$ === 'Just') {
				var purple = _v0.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'backgroundColor',
							$elm$json$Json$Encode$string('purple')),
							_Utils_Tuple2(
							'borderColor',
							$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
							_Utils_Tuple2(
							'pointStyle',
							$elm$json$Json$Encode$string('circle')),
							_Utils_Tuple2(
							'pointRadius',
							$elm$json$Json$Encode$float(10)),
							_Utils_Tuple2(
							'data',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										gradientPointFromIndex(purple)
									]))),
							_Utils_Tuple2(
							'label',
							$elm$json$Json$Encode$string('purple'))
						]));
			} else {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2('data', $elm$json$Json$Encode$null)
						]));
			}
		}();
		var chartStuff = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('line')),
					_Utils_Tuple2(
					'data',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'datasets',
								A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_List_fromArray(
										[gradientDataset, purpleDataset, orangeDataset])))
							]))),
					_Utils_Tuple2('options', commonInfo.options)
				]));
		return chartStuff;
	});
var $author$project$MapPortController$paintCanvasGradientChart = F3(
	function (profileContext, imperial, track) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('Gradient')),
						_Utils_Tuple2(
						'container',
						$elm$json$Json$Encode$string('gradient.' + profileContext.contextSuffix)),
						_Utils_Tuple2(
						'chart',
						A3($author$project$SceneBuilderProfile$gradientChart, profileContext, imperial, track))
					])));
	});
var $ianmackenzie$elm_units_interval$Quantity$Interval$intersects = F2(
	function (_v0, _v2) {
		var _v1 = _v0.a;
		var a1 = _v1.a.a;
		var b1 = _v1.b.a;
		var _v3 = _v2.a;
		var a2 = _v3.a.a;
		var b2 = _v3.b.a;
		return (_Utils_cmp(a1, b2) < 1) && (_Utils_cmp(b1, a2) > -1);
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			_Utils_chr('-'),
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $author$project$UtilsForViews$uiColourHexString = function (colour) {
	var leadingZeroes = function (str) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				2 - $elm$core$String$length(str),
				'0'),
			str);
	};
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(colour);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var _v1 = _Utils_Tuple3(
		$elm$core$Basics$floor(red * 255),
		$elm$core$Basics$floor(green * 255),
		$elm$core$Basics$floor(blue * 255));
	var redInt = _v1.a;
	var greenInt = _v1.b;
	var blueInt = _v1.c;
	return '#' + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(redInt)) + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(greenInt)) + leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(blueInt))));
};
var $author$project$SceneBuilderProfile$profileChartMonochrome = F5(
	function (profile, imperial, track, segments, previews) {
		var commonInfo = A4($author$project$SceneBuilderProfile$commonChartScales, profile, imperial, track, false);
		var firstPoint = A2($author$project$DomainModel$gpxPointFromIndex, commonInfo.firstPointIndex, track.trackTree);
		var makeProfilePoint = F2(
			function (gpx, distance) {
				var fDistance = commonInfo.distanceFunction(distance);
				var altitude = commonInfo.altitudeFunction(gpx.altitude);
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'x',
							$elm$json$Json$Encode$float(fDistance)),
							_Utils_Tuple2(
							'y',
							$elm$json$Json$Encode$float(altitude))
						]));
			});
		var coordinateCollector = F2(
			function (road, _v4) {
				var lastDistance = _v4.a;
				var outputs = _v4.b;
				var newDistance = A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, lastDistance);
				return _Utils_Tuple2(
					newDistance,
					A2(
						$elm$core$List$cons,
						A2(makeProfilePoint, road.sourceData.b, newDistance),
						outputs));
			});
		var profilePointFromIndex = function (index) {
			var asGPX = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
			var asDist = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
			return A2(makeProfilePoint, asGPX, asDist);
		};
		var orangePoint = _List_fromArray(
			[
				profilePointFromIndex(track.currentPosition)
			]);
		var orangeDataset = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'backgroundColor',
					$elm$json$Json$Encode$string('orange')),
					_Utils_Tuple2(
					'borderColor',
					$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
					_Utils_Tuple2(
					'pointStyle',
					$elm$json$Json$Encode$string('circle')),
					_Utils_Tuple2(
					'pointRadius',
					$elm$json$Json$Encode$float(10)),
					_Utils_Tuple2(
					'data',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, orangePoint)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string('orange'))
				]));
		var purpleDataset = function () {
			var _v3 = track.markerPosition;
			if (_v3.$ === 'Just') {
				var purple = _v3.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'backgroundColor',
							$elm$json$Json$Encode$string('purple')),
							_Utils_Tuple2(
							'borderColor',
							$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
							_Utils_Tuple2(
							'pointStyle',
							$elm$json$Json$Encode$string('circle')),
							_Utils_Tuple2(
							'pointRadius',
							$elm$json$Json$Encode$float(10)),
							_Utils_Tuple2(
							'data',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										profilePointFromIndex(purple)
									]))),
							_Utils_Tuple2(
							'label',
							$elm$json$Json$Encode$string('purple'))
						]));
			} else {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2('data', $elm$json$Json$Encode$null)
						]));
			}
		}();
		var segmentDataset = function (segment) {
			var windowInterval = A2($ianmackenzie$elm_units_interval$Quantity$Interval$from, commonInfo.startDistance, commonInfo.endDistance);
			var segmentInterval = A2($ianmackenzie$elm_units_interval$Quantity$Interval$from, segment.startDistance, segment.endDistance);
			var segmentCoordinates = function () {
				var segmentStartIndex = A2($author$project$DomainModel$indexFromDistance, segment.startDistance, track.trackTree);
				var segmentStartPoint = A2($author$project$DomainModel$gpxPointFromIndex, segmentStartIndex, track.trackTree);
				var segmentEndIndex = A2($author$project$DomainModel$indexFromDistance, segment.endDistance, track.trackTree);
				var _v2 = A7(
					$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
					segmentStartIndex,
					segmentEndIndex,
					$elm$core$Basics$always($elm$core$Maybe$Nothing),
					0,
					track.trackTree,
					coordinateCollector,
					_Utils_Tuple2(
						segment.startDistance,
						_List_fromArray(
							[
								A2(makeProfilePoint, segmentStartPoint, segment.startDistance)
							])));
				var points = _v2.b;
				return $elm$core$List$reverse(points);
			}();
			return A2($ianmackenzie$elm_units_interval$Quantity$Interval$intersects, segmentInterval, windowInterval) ? $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'backgroundColor',
							$elm$json$Json$Encode$string('#ffc0cb')),
							_Utils_Tuple2(
							'borderColor',
							$elm$json$Json$Encode$string('#ffc0cb')),
							_Utils_Tuple2(
							'pointStyle',
							$elm$json$Json$Encode$bool(false)),
							_Utils_Tuple2(
							'data',
							A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, segmentCoordinates)),
							_Utils_Tuple2(
							'fill',
							$elm$json$Json$Encode$bool(true)),
							_Utils_Tuple2(
							'label',
							$elm$json$Json$Encode$string(segment.name))
						]))) : $elm$core$Maybe$Nothing;
		};
		var segmentDatasets = A2($elm$core$List$filterMap, segmentDataset, segments);
		var chartCoordinates = function (tree) {
			var _v1 = A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				commonInfo.firstPointIndex,
				commonInfo.lastPointIndex,
				$elm$core$Basics$always(
					$elm$core$Maybe$Just(
						$elm$core$Basics$floor(profile.zoomLevel + 8))),
				0,
				tree,
				coordinateCollector,
				_Utils_Tuple2(
					commonInfo.firstPointDistance,
					_List_fromArray(
						[
							A2(makeProfilePoint, firstPoint, commonInfo.firstPointDistance)
						])));
			var points = _v1.b;
			return $elm$core$List$reverse(points);
		};
		var previewDataset = F2(
			function (tag, preview) {
				var _v0 = preview.shape;
				if (_v0.$ === 'PreviewProfile') {
					var tree = _v0.a;
					var colour = $author$project$UtilsForViews$uiColourHexString(preview.colour);
					return $elm$core$Maybe$Just(
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'backgroundColor',
									$elm$json$Json$Encode$string(colour)),
									_Utils_Tuple2(
									'borderColor',
									$elm$json$Json$Encode$string(colour)),
									_Utils_Tuple2(
									'pointStyle',
									$elm$json$Json$Encode$bool(false)),
									_Utils_Tuple2(
									'data',
									A2(
										$elm$json$Json$Encode$list,
										$elm$core$Basics$identity,
										chartCoordinates(tree))),
									_Utils_Tuple2(
									'fill',
									$elm$json$Json$Encode$bool(false)),
									_Utils_Tuple2(
									'label',
									$elm$json$Json$Encode$string(tag))
								])));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
		var previewDatasets = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			$elm$core$Dict$values(
				A2($elm$core$Dict$map, previewDataset, previews)));
		var profileDataset = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'backgroundColor',
					$elm$json$Json$Encode$string('rgba(182,198,237,0.6)')),
					_Utils_Tuple2(
					'borderColor',
					$elm$json$Json$Encode$string('rgba(77,110,205,0.6')),
					_Utils_Tuple2(
					'pointStyle',
					$elm$json$Json$Encode$bool(false)),
					_Utils_Tuple2(
					'data',
					A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						chartCoordinates(track.trackTree))),
					_Utils_Tuple2(
					'fill',
					$elm$json$Json$Encode$string('stack')),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string('altitude'))
				]));
		var chartStuff = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('line')),
					_Utils_Tuple2(
					'data',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'datasets',
								A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									A2(
										$elm$core$List$cons,
										profileDataset,
										_Utils_ap(
											previewDatasets,
											_Utils_ap(
												segmentDatasets,
												_List_fromArray(
													[purpleDataset, orangeDataset]))))))
							]))),
					_Utils_Tuple2('options', commonInfo.options)
				]));
		return chartStuff;
	});
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$UtilsForViews$colourHexString = function (colour) {
	var leadingZeroes = function (str) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				2 - $elm$core$String$length(str),
				'0'),
			str);
	};
	var _v0 = $avh4$elm_color$Color$toRgba(colour);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var _v1 = _Utils_Tuple3(
		$elm$core$Basics$floor(red * 255),
		$elm$core$Basics$floor(green * 255),
		$elm$core$Basics$floor(blue * 255));
	var redInt = _v1.a;
	var greenInt = _v1.b;
	var blueInt = _v1.c;
	return '#' + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(redInt)) + (leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(greenInt)) + leadingZeroes(
		$rtfeldman$elm_hex$Hex$toString(blueInt))));
};
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$scaleFrom255 = function (c) {
	return c / 255;
};
var $avh4$elm_color$Color$rgb255 = F3(
	function (r, g, b) {
		return A4(
			$avh4$elm_color$Color$RgbaSpace,
			$avh4$elm_color$Color$scaleFrom255(r),
			$avh4$elm_color$Color$scaleFrom255(g),
			$avh4$elm_color$Color$scaleFrom255(b),
			1.0);
	});
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $avh4$elm_color$Color$toHsla = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var minColor = A2(
		$elm$core$Basics$min,
		r,
		A2($elm$core$Basics$min, g, b));
	var maxColor = A2(
		$elm$core$Basics$max,
		r,
		A2($elm$core$Basics$max, g, b));
	var l = (minColor + maxColor) / 2;
	var s = _Utils_eq(minColor, maxColor) ? 0 : ((l < 0.5) ? ((maxColor - minColor) / (maxColor + minColor)) : ((maxColor - minColor) / ((2 - maxColor) - minColor)));
	var h1 = _Utils_eq(maxColor, r) ? ((g - b) / (maxColor - minColor)) : (_Utils_eq(maxColor, g) ? (2 + ((b - r) / (maxColor - minColor))) : (4 + ((r - g) / (maxColor - minColor))));
	var h2 = h1 * (1 / 6);
	var h3 = $elm$core$Basics$isNaN(h2) ? 0 : ((h2 < 0) ? (h2 + 1) : h2);
	return {alpha: a, hue: h3, lightness: l, saturation: s};
};
var $author$project$ColourPalette$gradientHue = function (slope) {
	var x = (A3($elm$core$Basics$clamp, -20.0, 20.0, slope) + 20.0) / 40.0;
	var steepestDescentHue = $avh4$elm_color$Color$toHsla(
		A3($avh4$elm_color$Color$rgb255, 143, 87, 255)).hue;
	var steepestAscentHue = $avh4$elm_color$Color$toHsla(
		A3($avh4$elm_color$Color$rgb255, 255, 30, 30)).hue;
	return (x * steepestAscentHue) + ((1.0 - x) * steepestDescentHue);
};
var $avh4$elm_color$Color$hsla = F4(
	function (hue, sat, light, alpha) {
		var _v0 = _Utils_Tuple3(hue, sat, light);
		var h = _v0.a;
		var s = _v0.b;
		var l = _v0.c;
		var m2 = (l <= 0.5) ? (l * (s + 1)) : ((l + s) - (l * s));
		var m1 = (l * 2) - m2;
		var hueToRgb = function (h__) {
			var h_ = (h__ < 0) ? (h__ + 1) : ((h__ > 1) ? (h__ - 1) : h__);
			return ((h_ * 6) < 1) ? (m1 + (((m2 - m1) * h_) * 6)) : (((h_ * 2) < 1) ? m2 : (((h_ * 3) < 2) ? (m1 + (((m2 - m1) * ((2 / 3) - h_)) * 6)) : m1));
		};
		var b = hueToRgb(h - (1 / 3));
		var g = hueToRgb(h);
		var r = hueToRgb(h + (1 / 3));
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, alpha);
	});
var $avh4$elm_color$Color$hsl = F3(
	function (h, s, l) {
		return A4($avh4$elm_color$Color$hsla, h, s, l, 1.0);
	});
var $author$project$ColourPalette$gradientColourPastel = function (slope) {
	return A3(
		$avh4$elm_color$Color$hsl,
		$author$project$ColourPalette$gradientHue(slope),
		0.6,
		0.7);
};
var $author$project$SceneBuilderProfile$profileChartWithColours = F3(
	function (profile, imperial, track) {
		var gradientFromBucketNumber = function (bucket) {
			return bucket * 4;
		};
		var commonInfo = A4($author$project$SceneBuilderProfile$commonChartScales, profile, imperial, track, false);
		var firstPoint = A2($author$project$DomainModel$gpxPointFromIndex, commonInfo.firstPointIndex, track.trackTree);
		var makeNullPoint = function (distance) {
			var fDistance = commonInfo.distanceFunction(distance);
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'x',
						$elm$json$Json$Encode$float(fDistance)),
						_Utils_Tuple2('y', $elm$json$Json$Encode$null)
					]));
		};
		var datasetForGradientBucket = F2(
			function (bucketKey, _v6) {
				var bucketEndsAt = _v6.bucketEndsAt;
				var chartEntries = _v6.chartEntries;
				var dummyStart = makeNullPoint(commonInfo.startDistance);
				var dummyEnd = makeNullPoint(commonInfo.endDistance);
				var paddedEntries = A2(
					$elm$core$List$cons,
					dummyStart,
					_Utils_ap(
						chartEntries,
						_List_fromArray(
							[dummyEnd])));
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'backgroundColor',
							$elm$json$Json$Encode$string(
								$author$project$UtilsForViews$colourHexString(
									$author$project$ColourPalette$gradientColourPastel(
										gradientFromBucketNumber(bucketKey))))),
							_Utils_Tuple2(
							'borderColor',
							$elm$json$Json$Encode$string('rgba(77,110,205,0.6')),
							_Utils_Tuple2(
							'pointStyle',
							$elm$json$Json$Encode$bool(false)),
							_Utils_Tuple2(
							'data',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								$elm$core$List$reverse(chartEntries))),
							_Utils_Tuple2(
							'fill',
							$elm$json$Json$Encode$string('stack')),
							_Utils_Tuple2(
							'spanGaps',
							$elm$json$Json$Encode$bool(false))
						]));
			});
		var makeProfilePoint = F2(
			function (gpx, distance) {
				var fDistance = commonInfo.distanceFunction(distance);
				var altitude = commonInfo.altitudeFunction(gpx.altitude);
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'x',
							$elm$json$Json$Encode$float(fDistance)),
							_Utils_Tuple2(
							'y',
							$elm$json$Json$Encode$float(altitude))
						]));
			});
		var profilePointFromIndex = function (index) {
			var asGPX = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
			var asDist = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
			return A2(makeProfilePoint, asGPX, asDist);
		};
		var orangePoint = _List_fromArray(
			[
				profilePointFromIndex(track.currentPosition)
			]);
		var orangeDataset = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'backgroundColor',
					$elm$json$Json$Encode$string('orange')),
					_Utils_Tuple2(
					'borderColor',
					$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
					_Utils_Tuple2(
					'pointStyle',
					$elm$json$Json$Encode$string('circle')),
					_Utils_Tuple2(
					'pointRadius',
					$elm$json$Json$Encode$float(10)),
					_Utils_Tuple2(
					'data',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, orangePoint)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string('orange'))
				]));
		var purpleDataset = function () {
			var _v5 = track.markerPosition;
			if (_v5.$ === 'Just') {
				var purple = _v5.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'backgroundColor',
							$elm$json$Json$Encode$string('purple')),
							_Utils_Tuple2(
							'borderColor',
							$elm$json$Json$Encode$string('rgba(255,0,0,1.0')),
							_Utils_Tuple2(
							'pointStyle',
							$elm$json$Json$Encode$string('circle')),
							_Utils_Tuple2(
							'pointRadius',
							$elm$json$Json$Encode$float(10)),
							_Utils_Tuple2(
							'data',
							A2(
								$elm$json$Json$Encode$list,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										profilePointFromIndex(purple)
									]))),
							_Utils_Tuple2(
							'label',
							$elm$json$Json$Encode$string('purple'))
						]));
			} else {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2('data', $elm$json$Json$Encode$null)
						]));
			}
		}();
		var bucketNumberFromGradient = function (gradient) {
			return A3(
				$elm$core$Basics$clamp,
				-4,
				4,
				$elm$core$Basics$round(gradient / 5));
		};
		var roadSectionCollector = F2(
			function (road, _v4) {
				var distanceAtStart = _v4.a;
				var buckets = _v4.b;
				var distanceAtEnd = A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, distanceAtStart);
				var bucketKey = bucketNumberFromGradient(road.gradientAtStart);
				var _v1 = _Utils_Tuple2(
					A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, commonInfo.startDistance, distanceAtStart),
					A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, commonInfo.endDistance, distanceAtEnd));
				var startWithinView = _v1.a;
				var endWithinView = _v1.b;
				var _v2 = _Utils_Tuple2(
					A2(makeProfilePoint, road.sourceData.a, distanceAtStart),
					A2(makeProfilePoint, road.sourceData.b, distanceAtEnd));
				var startOfThisSegment = _v2.a;
				var endOfThisSegment = _v2.b;
				var newPoints = function () {
					var _v3 = A2($elm$core$Dict$get, bucketKey, buckets);
					if (_v3.$ === 'Just') {
						var bucket = _v3.a;
						if (A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$centimeter, bucket.bucketEndsAt, distanceAtStart)) {
							return A2($elm$core$List$cons, endOfThisSegment, bucket.chartEntries);
						} else {
							var interveningNull = makeNullPoint(
								$ianmackenzie$elm_units$Quantity$half(
									A2($ianmackenzie$elm_units$Quantity$plus, bucket.bucketEndsAt, distanceAtStart)));
							return A2(
								$elm$core$List$cons,
								endOfThisSegment,
								A2(
									$elm$core$List$cons,
									startOfThisSegment,
									A2($elm$core$List$cons, interveningNull, bucket.chartEntries)));
						}
					} else {
						return _List_fromArray(
							[endOfThisSegment, startOfThisSegment]);
					}
				}();
				var newBucket = {bucketEndsAt: distanceAtEnd, chartEntries: newPoints};
				return _Utils_Tuple2(
					distanceAtEnd,
					A3($elm$core$Dict$insert, bucketKey, newBucket, buckets));
			});
		var roadSectionCollections = function () {
			var _v0 = A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				commonInfo.firstPointIndex,
				commonInfo.lastPointIndex,
				$elm$core$Basics$always(
					$elm$core$Maybe$Just(
						$elm$core$Basics$floor(profile.zoomLevel + 8))),
				0,
				track.trackTree,
				roadSectionCollector,
				_Utils_Tuple2(commonInfo.firstPointDistance, $elm$core$Dict$empty));
			var buckets = _v0.b;
			return buckets;
		}();
		var roadSectionDatasets = $elm$core$Dict$values(
			A2($elm$core$Dict$map, datasetForGradientBucket, roadSectionCollections));
		var chartStuff = $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string('line')),
					_Utils_Tuple2(
					'data',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'datasets',
								A2(
									$elm$json$Json$Encode$list,
									$elm$core$Basics$identity,
									_Utils_ap(
										roadSectionDatasets,
										_List_fromArray(
											[purpleDataset, orangeDataset]))))
							]))),
					_Utils_Tuple2('options', commonInfo.options)
				]));
		return chartStuff;
	});
var $author$project$SceneBuilderProfile$profileChart = F5(
	function (profile, imperial, track, segments, previews) {
		return profile.colouredChart ? A3($author$project$SceneBuilderProfile$profileChartWithColours, profile, imperial, track) : A5($author$project$SceneBuilderProfile$profileChartMonochrome, profile, imperial, track, segments, previews);
	});
var $author$project$MapPortController$paintCanvasProfileChart = F5(
	function (profileContext, imperial, track, segments, previews) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('Profile')),
						_Utils_Tuple2(
						'container',
						$elm$json$Json$Encode$string('altitude.' + profileContext.contextSuffix)),
						_Utils_Tuple2(
						'chart',
						A5($author$project$SceneBuilderProfile$profileChart, profileContext, imperial, track, segments, previews))
					])));
	});
var $author$project$PaneLayoutManager$paintProfileCharts = F5(
	function (panes, imperial, track, segments, previews) {
		var visiblePanes = function () {
			var _v1 = panes.paneLayout;
			switch (_v1.$) {
				case 'PanesOne':
					return _List_fromArray(
						[panes.pane1]);
				case 'PanesLeftRight':
					return _List_fromArray(
						[panes.pane1, panes.pane2]);
				case 'PanesUpperLower':
					return _List_fromArray(
						[panes.pane1, panes.pane2]);
				case 'PanesOnePlusTwo':
					return _List_fromArray(
						[panes.pane1, panes.pane2, panes.pane3]);
				default:
					return _List_fromArray(
						[panes.pane1, panes.pane2, panes.pane3, panes.pane4]);
			}
		}();
		var paintIfProfileVisible = function (pane) {
			if (_Utils_eq(pane.activeView, $author$project$ViewMode$ViewProfileCanvas)) {
				var _v0 = pane.profileContext;
				if (_v0.$ === 'Just') {
					var context = _v0.a;
					return $elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A5($author$project$MapPortController$paintCanvasProfileChart, context, imperial, track, segments, previews),
								A3($author$project$MapPortController$paintCanvasGradientChart, context, imperial, track)
							]));
				} else {
					return $elm$core$Platform$Cmd$none;
				}
			} else {
				return $elm$core$Platform$Cmd$none;
			}
		};
		return $elm$core$Platform$Cmd$batch(
			A2($elm$core$List$map, paintIfProfileVisible, visiblePanes));
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$GpxParser$asRegex = function (t) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString(t));
};
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm_community$maybe_extra$Maybe$Extra$join = function (mx) {
	if (mx.$ === 'Just') {
		var x = mx.a;
		return x;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$toFloat = _String_toFloat;
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (_v0.$ === 'Just') {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (_v0.$ === 'Just') {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
										$elm$parser$Parser$succeed(0)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $author$project$GpxParser$parseGPXPoints = function (xml) {
	var value = function (x) {
		var _v6 = x.submatches;
		if (_v6.b && (_v6.a.$ === 'Just')) {
			var val = _v6.a.a;
			return $elm$core$String$toFloat(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var trkpts = A2(
		$elm$regex$Regex$find,
		$author$project$GpxParser$asRegex('(<trkpt(.|\\s)*?)(trkpt>|\\/>)'),
		xml);
	var timestamp = function (trkpt) {
		return A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime, $elm$core$Result$toMaybe),
			$elm_community$maybe_extra$Maybe$Extra$join(
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$List$head,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.submatches;
						},
						$elm$core$List$head(
							A2(
								$elm$regex$Regex$find,
								$author$project$GpxParser$asRegex('<time>(.*)<\\/time>'),
								trkpt))))));
	};
	var sameLocation = F2(
		function (_v4, _v5) {
			var a = _v4.a;
			var b = _v5.a;
			return _Utils_eq(a.latitude, b.latitude) && _Utils_eq(a.longitude, b.longitude);
		});
	var matches = function (xs) {
		return A2($elm$core$List$map, value, xs);
	};
	var longitude = function (trkpt) {
		return matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('lon=\\\"([\\d\\.-]*)\\\"'),
				trkpt));
	};
	var latitude = function (trkpt) {
		return matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('lat=\\\"([\\d\\.-]*)\\\"'),
				trkpt));
	};
	var elevation = function (trkpt) {
		var _v3 = matches(
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('<ele>([\\d\\.-]*)<\\/ele>'),
				trkpt));
		if (_v3.b && (_v3.a.$ === 'Just')) {
			var alt = _v3.a.a;
			return $ianmackenzie$elm_units$Length$meters(alt);
		} else {
			return $ianmackenzie$elm_units$Quantity$zero;
		}
	};
	var earthVector = function (trkpt) {
		var trkptString = trkpt.match;
		var _v0 = _Utils_Tuple2(
			latitude(trkptString),
			longitude(trkptString));
		if (((_v0.a.b && (_v0.a.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var _v1 = _v0.a;
			var lat = _v1.a.a;
			var _v2 = _v0.b;
			var lon = _v2.a.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					A4(
						$author$project$DomainModel$GPXSource,
						$ianmackenzie$elm_geometry$Direction2d$fromAngle(
							$ianmackenzie$elm_units$Angle$degrees(lon)),
						$ianmackenzie$elm_units$Angle$degrees(lat),
						elevation(trkptString),
						timestamp(trkptString)),
					trkpt.index));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	return A2(
		$author$project$Utils$deDupe,
		sameLocation,
		A2($elm$core$List$filterMap, earthVector, trkpts));
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convert = F2(
	function (convertChars, string) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				$elm$core$String$fromChar,
				convertChars(
					$elm$core$String$toList(string))));
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertCode = F5(
	function (mayber, lister, pre, post, list) {
		var string = $elm$core$String$fromList(list);
		var maybe = mayber(string);
		if (maybe.$ === 'Nothing') {
			return $elm$core$List$concat(
				_List_fromArray(
					[pre, list, post]));
		} else {
			var something = maybe.a;
			return lister(something);
		}
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$friendlyConverterDictionary = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (_v0) {
			var a = _v0.a;
			var b = _v0.b;
			return _Utils_Tuple2(
				a,
				$elm$core$Char$fromCode(b));
		},
		_List_fromArray(
			[
				_Utils_Tuple2('quot', 34),
				_Utils_Tuple2('amp', 38),
				_Utils_Tuple2('lt', 60),
				_Utils_Tuple2('gt', 62),
				_Utils_Tuple2('nbsp', 160),
				_Utils_Tuple2('iexcl', 161),
				_Utils_Tuple2('cent', 162),
				_Utils_Tuple2('pound', 163),
				_Utils_Tuple2('curren', 164),
				_Utils_Tuple2('yen', 165),
				_Utils_Tuple2('brvbar', 166),
				_Utils_Tuple2('sect', 167),
				_Utils_Tuple2('uml', 168),
				_Utils_Tuple2('copy', 169),
				_Utils_Tuple2('ordf', 170),
				_Utils_Tuple2('laquo', 171),
				_Utils_Tuple2('not', 172),
				_Utils_Tuple2('shy', 173),
				_Utils_Tuple2('reg', 174),
				_Utils_Tuple2('macr', 175),
				_Utils_Tuple2('deg', 176),
				_Utils_Tuple2('plusmn', 177),
				_Utils_Tuple2('sup2', 178),
				_Utils_Tuple2('sup3', 179),
				_Utils_Tuple2('acute', 180),
				_Utils_Tuple2('micro', 181),
				_Utils_Tuple2('para', 182),
				_Utils_Tuple2('middot', 183),
				_Utils_Tuple2('cedil', 184),
				_Utils_Tuple2('sup1', 185),
				_Utils_Tuple2('ordm', 186),
				_Utils_Tuple2('raquo', 187),
				_Utils_Tuple2('frac14', 188),
				_Utils_Tuple2('frac12', 189),
				_Utils_Tuple2('frac34', 190),
				_Utils_Tuple2('iquest', 191),
				_Utils_Tuple2('Agrave', 192),
				_Utils_Tuple2('Aacute', 193),
				_Utils_Tuple2('Acirc', 194),
				_Utils_Tuple2('Atilde', 195),
				_Utils_Tuple2('Auml', 196),
				_Utils_Tuple2('Aring', 197),
				_Utils_Tuple2('AElig', 198),
				_Utils_Tuple2('Ccedil', 199),
				_Utils_Tuple2('Egrave', 200),
				_Utils_Tuple2('Eacute', 201),
				_Utils_Tuple2('Ecirc', 202),
				_Utils_Tuple2('Euml', 203),
				_Utils_Tuple2('Igrave', 204),
				_Utils_Tuple2('Iacute', 205),
				_Utils_Tuple2('Icirc', 206),
				_Utils_Tuple2('Iuml', 207),
				_Utils_Tuple2('ETH', 208),
				_Utils_Tuple2('Ntilde', 209),
				_Utils_Tuple2('Ograve', 210),
				_Utils_Tuple2('Oacute', 211),
				_Utils_Tuple2('Ocirc', 212),
				_Utils_Tuple2('Otilde', 213),
				_Utils_Tuple2('Ouml', 214),
				_Utils_Tuple2('times', 215),
				_Utils_Tuple2('Oslash', 216),
				_Utils_Tuple2('Ugrave', 217),
				_Utils_Tuple2('Uacute', 218),
				_Utils_Tuple2('Ucirc', 219),
				_Utils_Tuple2('Uuml', 220),
				_Utils_Tuple2('Yacute', 221),
				_Utils_Tuple2('THORN', 222),
				_Utils_Tuple2('szlig', 223),
				_Utils_Tuple2('agrave', 224),
				_Utils_Tuple2('aacute', 225),
				_Utils_Tuple2('acirc', 226),
				_Utils_Tuple2('atilde', 227),
				_Utils_Tuple2('auml', 228),
				_Utils_Tuple2('aring', 229),
				_Utils_Tuple2('aelig', 230),
				_Utils_Tuple2('ccedil', 231),
				_Utils_Tuple2('egrave', 232),
				_Utils_Tuple2('eacute', 233),
				_Utils_Tuple2('ecirc', 234),
				_Utils_Tuple2('euml', 235),
				_Utils_Tuple2('igrave', 236),
				_Utils_Tuple2('iacute', 237),
				_Utils_Tuple2('icirc', 238),
				_Utils_Tuple2('iuml', 239),
				_Utils_Tuple2('eth', 240),
				_Utils_Tuple2('ntilde', 241),
				_Utils_Tuple2('ograve', 242),
				_Utils_Tuple2('oacute', 243),
				_Utils_Tuple2('ocirc', 244),
				_Utils_Tuple2('otilde', 245),
				_Utils_Tuple2('ouml', 246),
				_Utils_Tuple2('divide', 247),
				_Utils_Tuple2('oslash', 248),
				_Utils_Tuple2('ugrave', 249),
				_Utils_Tuple2('uacute', 250),
				_Utils_Tuple2('ucirc', 251),
				_Utils_Tuple2('uuml', 252),
				_Utils_Tuple2('yacute', 253),
				_Utils_Tuple2('thorn', 254),
				_Utils_Tuple2('yuml', 255),
				_Utils_Tuple2('Amacr', 256),
				_Utils_Tuple2('amacr', 257),
				_Utils_Tuple2('Abreve', 258),
				_Utils_Tuple2('abreve', 259),
				_Utils_Tuple2('Aogon', 260),
				_Utils_Tuple2('aogon', 261),
				_Utils_Tuple2('Cacute', 262),
				_Utils_Tuple2('cacute', 263),
				_Utils_Tuple2('Ccirc', 264),
				_Utils_Tuple2('ccirc', 265),
				_Utils_Tuple2('Cdod', 266),
				_Utils_Tuple2('cdot', 267),
				_Utils_Tuple2('Ccaron', 268),
				_Utils_Tuple2('ccaron', 269),
				_Utils_Tuple2('Dcaron', 270),
				_Utils_Tuple2('dcaron', 271),
				_Utils_Tuple2('Dstork', 272),
				_Utils_Tuple2('dstork', 273),
				_Utils_Tuple2('Emacr', 274),
				_Utils_Tuple2('emacr', 275),
				_Utils_Tuple2('Edot', 278),
				_Utils_Tuple2('edot', 279),
				_Utils_Tuple2('Eogon', 280),
				_Utils_Tuple2('eogon', 281),
				_Utils_Tuple2('Ecaron', 282),
				_Utils_Tuple2('ecaron', 283),
				_Utils_Tuple2('Gcirc', 284),
				_Utils_Tuple2('gcirc', 285),
				_Utils_Tuple2('Gbreve', 286),
				_Utils_Tuple2('gbreve', 287),
				_Utils_Tuple2('Gdot', 288),
				_Utils_Tuple2('gdot', 289),
				_Utils_Tuple2('Gcedil', 290),
				_Utils_Tuple2('gcedil', 291),
				_Utils_Tuple2('Hcirc', 292),
				_Utils_Tuple2('hcirc', 293),
				_Utils_Tuple2('Hstork', 294),
				_Utils_Tuple2('hstork', 295),
				_Utils_Tuple2('Itilde', 296),
				_Utils_Tuple2('itilde', 297),
				_Utils_Tuple2('Imacr', 298),
				_Utils_Tuple2('imacr', 299),
				_Utils_Tuple2('Iogon', 302),
				_Utils_Tuple2('iogon', 303),
				_Utils_Tuple2('Idot', 304),
				_Utils_Tuple2('inodot', 305),
				_Utils_Tuple2('IJlog', 306),
				_Utils_Tuple2('ijlig', 307),
				_Utils_Tuple2('Jcirc', 308),
				_Utils_Tuple2('jcirc', 309),
				_Utils_Tuple2('Kcedil', 310),
				_Utils_Tuple2('kcedil', 311),
				_Utils_Tuple2('kgreen', 312),
				_Utils_Tuple2('Lacute', 313),
				_Utils_Tuple2('lacute', 314),
				_Utils_Tuple2('Lcedil', 315),
				_Utils_Tuple2('lcedil', 316),
				_Utils_Tuple2('Lcaron', 317),
				_Utils_Tuple2('lcaron', 318),
				_Utils_Tuple2('Lmodot', 319),
				_Utils_Tuple2('lmidot', 320),
				_Utils_Tuple2('Lstork', 321),
				_Utils_Tuple2('lstork', 322),
				_Utils_Tuple2('Nacute', 323),
				_Utils_Tuple2('nacute', 324),
				_Utils_Tuple2('Ncedil', 325),
				_Utils_Tuple2('ncedil', 326),
				_Utils_Tuple2('Ncaron', 327),
				_Utils_Tuple2('ncaron', 328),
				_Utils_Tuple2('napos', 329),
				_Utils_Tuple2('ENG', 330),
				_Utils_Tuple2('eng', 331),
				_Utils_Tuple2('Omacr', 332),
				_Utils_Tuple2('omacr', 333),
				_Utils_Tuple2('Odblac', 336),
				_Utils_Tuple2('odblac', 337),
				_Utils_Tuple2('OEling', 338),
				_Utils_Tuple2('oelig', 339),
				_Utils_Tuple2('Racute', 340),
				_Utils_Tuple2('racute', 341),
				_Utils_Tuple2('Rcedil', 342),
				_Utils_Tuple2('rcedil', 343),
				_Utils_Tuple2('Rcaron', 344),
				_Utils_Tuple2('rcaron', 345),
				_Utils_Tuple2('Sacute', 346),
				_Utils_Tuple2('sacute', 347),
				_Utils_Tuple2('Scirc', 348),
				_Utils_Tuple2('scirc', 349),
				_Utils_Tuple2('Scedil', 350),
				_Utils_Tuple2('scedil', 351),
				_Utils_Tuple2('Scaron', 352),
				_Utils_Tuple2('scaron', 353),
				_Utils_Tuple2('Tcedil', 354),
				_Utils_Tuple2('tcedil', 355),
				_Utils_Tuple2('Tcaron', 356),
				_Utils_Tuple2('tcaron', 357),
				_Utils_Tuple2('Tstork', 358),
				_Utils_Tuple2('tstork', 359),
				_Utils_Tuple2('Utilde', 360),
				_Utils_Tuple2('utilde', 361),
				_Utils_Tuple2('Umacr', 362),
				_Utils_Tuple2('umacr', 363),
				_Utils_Tuple2('Ubreve', 364),
				_Utils_Tuple2('ubreve', 365),
				_Utils_Tuple2('Uring', 366),
				_Utils_Tuple2('uring', 367),
				_Utils_Tuple2('Udblac', 368),
				_Utils_Tuple2('udblac', 369),
				_Utils_Tuple2('Uogon', 370),
				_Utils_Tuple2('uogon', 371),
				_Utils_Tuple2('Wcirc', 372),
				_Utils_Tuple2('wcirc', 373),
				_Utils_Tuple2('Ycirc', 374),
				_Utils_Tuple2('ycirc', 375),
				_Utils_Tuple2('Yuml', 376),
				_Utils_Tuple2('Zacute', 377),
				_Utils_Tuple2('zacute', 378),
				_Utils_Tuple2('Zdot', 379),
				_Utils_Tuple2('zdot', 380),
				_Utils_Tuple2('Zcaron', 381),
				_Utils_Tuple2('zcaron', 382),
				_Utils_Tuple2('fnof', 402),
				_Utils_Tuple2('imped', 437),
				_Utils_Tuple2('gacute', 501),
				_Utils_Tuple2('jmath', 567),
				_Utils_Tuple2('circ', 710),
				_Utils_Tuple2('tilde', 732),
				_Utils_Tuple2('Alpha', 913),
				_Utils_Tuple2('Beta', 914),
				_Utils_Tuple2('Gamma', 915),
				_Utils_Tuple2('Delta', 916),
				_Utils_Tuple2('Epsilon', 917),
				_Utils_Tuple2('Zeta', 918),
				_Utils_Tuple2('Eta', 919),
				_Utils_Tuple2('Theta', 920),
				_Utils_Tuple2('Iota', 921),
				_Utils_Tuple2('Kappa', 922),
				_Utils_Tuple2('Lambda', 923),
				_Utils_Tuple2('Mu', 924),
				_Utils_Tuple2('Nu', 925),
				_Utils_Tuple2('Xi', 926),
				_Utils_Tuple2('Omicron', 927),
				_Utils_Tuple2('Pi', 928),
				_Utils_Tuple2('Rho', 929),
				_Utils_Tuple2('Sigma', 931),
				_Utils_Tuple2('Tau', 932),
				_Utils_Tuple2('Upsilon', 933),
				_Utils_Tuple2('Phi', 934),
				_Utils_Tuple2('Chi', 935),
				_Utils_Tuple2('Psi', 936),
				_Utils_Tuple2('Omega', 937),
				_Utils_Tuple2('alpha', 945),
				_Utils_Tuple2('beta', 946),
				_Utils_Tuple2('gamma', 947),
				_Utils_Tuple2('delta', 948),
				_Utils_Tuple2('epsilon', 949),
				_Utils_Tuple2('zeta', 950),
				_Utils_Tuple2('eta', 951),
				_Utils_Tuple2('theta', 952),
				_Utils_Tuple2('iota', 953),
				_Utils_Tuple2('kappa', 954),
				_Utils_Tuple2('lambda', 955),
				_Utils_Tuple2('mu', 956),
				_Utils_Tuple2('nu', 957),
				_Utils_Tuple2('xi', 958),
				_Utils_Tuple2('omicron', 959),
				_Utils_Tuple2('pi', 960),
				_Utils_Tuple2('rho', 961),
				_Utils_Tuple2('sigmaf', 962),
				_Utils_Tuple2('sigma', 963),
				_Utils_Tuple2('tau', 934),
				_Utils_Tuple2('upsilon', 965),
				_Utils_Tuple2('phi', 966),
				_Utils_Tuple2('chi', 967),
				_Utils_Tuple2('psi', 968),
				_Utils_Tuple2('omega', 969),
				_Utils_Tuple2('thetasym', 977),
				_Utils_Tuple2('upsih', 978),
				_Utils_Tuple2('straightphi', 981),
				_Utils_Tuple2('piv', 982),
				_Utils_Tuple2('Gammad', 988),
				_Utils_Tuple2('gammad', 989),
				_Utils_Tuple2('varkappa', 1008),
				_Utils_Tuple2('varrho', 1009),
				_Utils_Tuple2('straightepsilon', 1013),
				_Utils_Tuple2('backepsilon', 1014),
				_Utils_Tuple2('ensp', 8194),
				_Utils_Tuple2('emsp', 8195),
				_Utils_Tuple2('thinsp', 8201),
				_Utils_Tuple2('zwnj', 8204),
				_Utils_Tuple2('zwj', 8205),
				_Utils_Tuple2('lrm', 8206),
				_Utils_Tuple2('rlm', 8207),
				_Utils_Tuple2('ndash', 8211),
				_Utils_Tuple2('mdash', 8212),
				_Utils_Tuple2('lsquo', 8216),
				_Utils_Tuple2('rsquo', 8217),
				_Utils_Tuple2('sbquo', 8218),
				_Utils_Tuple2('ldquo', 8220),
				_Utils_Tuple2('rdquo', 8221),
				_Utils_Tuple2('bdquo', 8222),
				_Utils_Tuple2('dagger', 8224),
				_Utils_Tuple2('Dagger', 8225),
				_Utils_Tuple2('bull', 8226),
				_Utils_Tuple2('hellip', 8230),
				_Utils_Tuple2('permil', 8240),
				_Utils_Tuple2('prime', 8242),
				_Utils_Tuple2('Prime', 8243),
				_Utils_Tuple2('lsaquo', 8249),
				_Utils_Tuple2('rsaquo', 8250),
				_Utils_Tuple2('oline', 8254),
				_Utils_Tuple2('frasl', 8260),
				_Utils_Tuple2('sigma', 963),
				_Utils_Tuple2('euro', 8364),
				_Utils_Tuple2('image', 8465),
				_Utils_Tuple2('weierp', 8472),
				_Utils_Tuple2('real', 8476),
				_Utils_Tuple2('trade', 8482),
				_Utils_Tuple2('alefsym', 8501),
				_Utils_Tuple2('larr', 8592),
				_Utils_Tuple2('uarr', 8593),
				_Utils_Tuple2('rarr', 8594),
				_Utils_Tuple2('darr', 8595),
				_Utils_Tuple2('harr', 8596),
				_Utils_Tuple2('crarr', 8629),
				_Utils_Tuple2('lArr', 8656),
				_Utils_Tuple2('uArr', 8657),
				_Utils_Tuple2('rArr', 8658),
				_Utils_Tuple2('dArr', 8659),
				_Utils_Tuple2('hArr', 8660),
				_Utils_Tuple2('forall', 8704),
				_Utils_Tuple2('part', 8706),
				_Utils_Tuple2('exist', 8707),
				_Utils_Tuple2('empty', 8709),
				_Utils_Tuple2('nabla', 8711),
				_Utils_Tuple2('isin', 8712),
				_Utils_Tuple2('notin', 8713),
				_Utils_Tuple2('ni', 8715),
				_Utils_Tuple2('prod', 8719),
				_Utils_Tuple2('sum', 8721),
				_Utils_Tuple2('minus', 8722),
				_Utils_Tuple2('lowast', 8727),
				_Utils_Tuple2('radic', 8730),
				_Utils_Tuple2('prop', 8733),
				_Utils_Tuple2('infin', 8734),
				_Utils_Tuple2('ang', 8736),
				_Utils_Tuple2('and', 8743),
				_Utils_Tuple2('or', 8744),
				_Utils_Tuple2('cap', 8745),
				_Utils_Tuple2('cup', 8746),
				_Utils_Tuple2('int', 8747),
				_Utils_Tuple2('there4', 8756),
				_Utils_Tuple2('sim', 8764),
				_Utils_Tuple2('cong', 8773),
				_Utils_Tuple2('asymp', 8776),
				_Utils_Tuple2('ne', 8800),
				_Utils_Tuple2('equiv', 8801),
				_Utils_Tuple2('le', 8804),
				_Utils_Tuple2('ge', 8805),
				_Utils_Tuple2('sub', 8834),
				_Utils_Tuple2('sup', 8835),
				_Utils_Tuple2('nsub', 8836),
				_Utils_Tuple2('sube', 8838),
				_Utils_Tuple2('supe', 8839),
				_Utils_Tuple2('oplus', 8853),
				_Utils_Tuple2('otimes', 8855),
				_Utils_Tuple2('perp', 8869),
				_Utils_Tuple2('sdot', 8901),
				_Utils_Tuple2('loz', 9674),
				_Utils_Tuple2('spades', 9824),
				_Utils_Tuple2('clubs', 9827),
				_Utils_Tuple2('hearts', 9829),
				_Utils_Tuple2('diams', 9830)
			])));
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertFriendlyCodeToChar = function (string) {
	return A2($elm$core$Dict$get, string, $marcosh$elm_html_to_unicode$ElmEscapeHtml$friendlyConverterDictionary);
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertFriendlyCode = A2(
	$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertCode,
	$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertFriendlyCodeToChar,
	function (_char) {
		return _List_fromArray(
			[_char]);
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertDecimalCode = A2(
	$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertCode,
	$elm$core$String$toInt,
	function (_int) {
		return _List_fromArray(
			[
				$elm$core$Char$fromCode(_int)
			]);
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$charOffset = F2(
	function (basis, c) {
		return $elm$core$Char$toCode(c) - $elm$core$Char$toCode(basis);
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$isBetween = F3(
	function (lower, upper, c) {
		var ci = $elm$core$Char$toCode(c);
		return (_Utils_cmp(
			$elm$core$Char$toCode(lower),
			ci) < 1) && (_Utils_cmp(
			ci,
			$elm$core$Char$toCode(upper)) < 1);
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$intFromChar = function (c) {
	var validInt = function (i) {
		return (i < 16) ? $elm$core$Maybe$Just(i) : $elm$core$Maybe$Nothing;
	};
	var toInt = A3(
		$marcosh$elm_html_to_unicode$ElmEscapeHtml$isBetween,
		_Utils_chr('0'),
		_Utils_chr('9'),
		c) ? $elm$core$Maybe$Just(
		A2(
			$marcosh$elm_html_to_unicode$ElmEscapeHtml$charOffset,
			_Utils_chr('0'),
			c)) : (A3(
		$marcosh$elm_html_to_unicode$ElmEscapeHtml$isBetween,
		_Utils_chr('a'),
		_Utils_chr('z'),
		c) ? $elm$core$Maybe$Just(
		10 + A2(
			$marcosh$elm_html_to_unicode$ElmEscapeHtml$charOffset,
			_Utils_chr('a'),
			c)) : (A3(
		$marcosh$elm_html_to_unicode$ElmEscapeHtml$isBetween,
		_Utils_chr('A'),
		_Utils_chr('Z'),
		c) ? $elm$core$Maybe$Just(
		10 + A2(
			$marcosh$elm_html_to_unicode$ElmEscapeHtml$charOffset,
			_Utils_chr('A'),
			c)) : $elm$core$Maybe$Nothing));
	return A2($elm$core$Maybe$andThen, validInt, toInt);
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$parseIntR = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Just(0);
	} else {
		var _v1 = _v0.a;
		var c = _v1.a;
		var tail = _v1.b;
		return A2(
			$elm$core$Maybe$andThen,
			function (ci) {
				return A2(
					$elm$core$Maybe$andThen,
					function (ri) {
						return $elm$core$Maybe$Just(ci + (ri * 16));
					},
					$marcosh$elm_html_to_unicode$ElmEscapeHtml$parseIntR(tail));
			},
			$marcosh$elm_html_to_unicode$ElmEscapeHtml$intFromChar(c));
	}
};
var $elm$core$String$reverse = _String_reverse;
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$parseIntHex = function (string) {
	return $marcosh$elm_html_to_unicode$ElmEscapeHtml$parseIntR(
		$elm$core$String$reverse(string));
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertHexadecimalCode = A2(
	$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertCode,
	$marcosh$elm_html_to_unicode$ElmEscapeHtml$parseIntHex,
	function (_int) {
		return _List_fromArray(
			[
				$elm$core$Char$fromCode(_int)
			]);
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$convertNumericalCode = F3(
	function (pre, post, list) {
		if (!list.b) {
			return $elm$core$List$concat(
				_List_fromArray(
					[pre, post]));
		} else {
			if ('x' === list.a.valueOf()) {
				var tail = list.b;
				return A3(
					$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertHexadecimalCode,
					A2(
						$elm$core$List$append,
						pre,
						_List_fromArray(
							[
								_Utils_chr('x')
							])),
					post,
					tail);
			} else {
				var anyOtherList = list;
				return A3($marcosh$elm_html_to_unicode$ElmEscapeHtml$convertDecimalCode, pre, post, anyOtherList);
			}
		}
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$noAmpUnicodeConverter = F3(
	function (pre, post, list) {
		if (!list.b) {
			return _List_fromArray(
				[pre, post]);
		} else {
			if ('#' === list.a.valueOf()) {
				var tail = list.b;
				return A3(
					$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertNumericalCode,
					_List_fromArray(
						[
							pre,
							_Utils_chr('#')
						]),
					_List_fromArray(
						[post]),
					tail);
			} else {
				var head = list.a;
				var tail = list.b;
				return A3(
					$marcosh$elm_html_to_unicode$ElmEscapeHtml$convertFriendlyCode,
					_List_fromArray(
						[pre]),
					_List_fromArray(
						[post]),
					A2($elm$core$List$cons, head, tail));
			}
		}
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$unicodeConverter = F2(
	function (post, list) {
		if (!list.b) {
			return _List_fromArray(
				[post]);
		} else {
			var head = list.a;
			var tail = list.b;
			return A3($marcosh$elm_html_to_unicode$ElmEscapeHtml$noAmpUnicodeConverter, head, post, tail);
		}
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$parser = F3(
	function (charsToBeParsed, charsOnParsing, charsParsed) {
		parser:
		while (true) {
			if (!charsToBeParsed.b) {
				return charsParsed;
			} else {
				var head = charsToBeParsed.a;
				var tail = charsToBeParsed.b;
				if (_Utils_eq(
					head,
					_Utils_chr('&'))) {
					var $temp$charsToBeParsed = tail,
						$temp$charsOnParsing = _List_fromArray(
						[head]),
						$temp$charsParsed = charsParsed;
					charsToBeParsed = $temp$charsToBeParsed;
					charsOnParsing = $temp$charsOnParsing;
					charsParsed = $temp$charsParsed;
					continue parser;
				} else {
					if (_Utils_eq(
						head,
						_Utils_chr(';'))) {
						var $temp$charsToBeParsed = tail,
							$temp$charsOnParsing = _List_Nil,
							$temp$charsParsed = A2(
							$elm$core$List$append,
							charsParsed,
							A2($marcosh$elm_html_to_unicode$ElmEscapeHtml$unicodeConverter, head, charsOnParsing));
						charsToBeParsed = $temp$charsToBeParsed;
						charsOnParsing = $temp$charsOnParsing;
						charsParsed = $temp$charsParsed;
						continue parser;
					} else {
						if (!$elm$core$List$isEmpty(charsOnParsing)) {
							var $temp$charsToBeParsed = tail,
								$temp$charsOnParsing = A2(
								$elm$core$List$append,
								charsOnParsing,
								_List_fromArray(
									[head])),
								$temp$charsParsed = charsParsed;
							charsToBeParsed = $temp$charsToBeParsed;
							charsOnParsing = $temp$charsOnParsing;
							charsParsed = $temp$charsParsed;
							continue parser;
						} else {
							var $temp$charsToBeParsed = tail,
								$temp$charsOnParsing = _List_Nil,
								$temp$charsParsed = A2(
								$elm$core$List$append,
								charsParsed,
								_List_fromArray(
									[head]));
							charsToBeParsed = $temp$charsToBeParsed;
							charsOnParsing = $temp$charsOnParsing;
							charsParsed = $temp$charsParsed;
							continue parser;
						}
					}
				}
			}
		}
	});
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$unescapeChars = function (list) {
	return A3($marcosh$elm_html_to_unicode$ElmEscapeHtml$parser, list, _List_Nil, _List_Nil);
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$unescape = $marcosh$elm_html_to_unicode$ElmEscapeHtml$convert($marcosh$elm_html_to_unicode$ElmEscapeHtml$unescapeChars);
var $author$project$GpxParser$parseSegments = function (xml) {
	var trackSegmentStarts = A2(
		$elm$core$List$map,
		function ($) {
			return $.index;
		},
		A2(
			$elm$regex$Regex$find,
			$author$project$GpxParser$asRegex('<trkseg>'),
			xml));
	var trackPoints = $author$project$GpxParser$parseGPXPoints(xml);
	var segmentExtent = function (match) {
		var segmentIndex = (-1) + A2(
			$elm$core$Maybe$withDefault,
			$elm$core$List$length(trackSegmentStarts),
			A2(
				$elm_community$list_extra$List$Extra$findIndex,
				function (segStart) {
					return _Utils_cmp(segStart, match.index) > 0;
				},
				trackSegmentStarts));
		var segmentStartOffset = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm_community$list_extra$List$Extra$getAt, segmentIndex, trackSegmentStarts));
		var segmentEndOffset = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$String$length(xml) - 1,
			A2($elm_community$list_extra$List$Extra$getAt, 1 + segmentIndex, trackSegmentStarts));
		var lastContainedPoint = (-1) + A2(
			$elm$core$Maybe$withDefault,
			$elm$core$List$length(trackPoints),
			A2(
				$elm_community$list_extra$List$Extra$findIndex,
				function (_v2) {
					var tpOffset = _v2.b;
					return _Utils_cmp(tpOffset, segmentEndOffset) > 0;
				},
				trackPoints));
		var firstContainedPoint = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm_community$list_extra$List$Extra$findIndex,
				function (_v1) {
					var tpOffset = _v1.b;
					return _Utils_cmp(tpOffset, segmentStartOffset) > 0;
				},
				trackPoints));
		return _Utils_Tuple3(
			function () {
				var _v0 = match.submatches;
				if (_v0.b && (_v0.a.$ === 'Just')) {
					var sub1 = _v0.a.a;
					return $marcosh$elm_html_to_unicode$ElmEscapeHtml$unescape(sub1);
				} else {
					return '';
				}
			}(),
			firstContainedPoint,
			lastContainedPoint);
	};
	var namedSegments = A2(
		$elm$regex$Regex$find,
		$author$project$GpxParser$asRegex('namedSegment>(.*)<\\/.*:namedSegment'),
		xml);
	return _Utils_Tuple2(
		A2($elm$core$List$map, $elm$core$Tuple$first, trackPoints),
		A2($elm$core$List$map, segmentExtent, namedSegments));
};
var $author$project$Tools$SplitAndJoin$parseAndAppend = F2(
	function (content, track) {
		var track2 = $author$project$GpxParser$parseSegments(content).a;
		var currentGpx = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		var newTree = $author$project$DomainModel$treeFromSourcePoints(
			_Utils_ap(currentGpx, track2));
		return newTree;
	});
var $author$project$GpxParser$parseTrackName = function (xml) {
	var _v0 = A2(
		$elm$regex$Regex$find,
		$author$project$GpxParser$asRegex('<trk>[.|\\s]*<name>(.*)<\\/name>'),
		xml);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var x = _v0.a;
		var _v1 = x.submatches;
		if (!_v1.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var n = _v1.a;
			return A2($elm$core$Maybe$map, $marcosh$elm_html_to_unicode$ElmEscapeHtml$unescape, n);
		}
	}
};
var $author$project$Tools$StravaTools$extractFromLngLat = function (latlng) {
	if ((latlng.b && latlng.b.b) && (!latlng.b.b.b)) {
		var latitude = latlng.a;
		var _v1 = latlng.b;
		var longitude = _v1.a;
		return {
			altitude: $ianmackenzie$elm_units$Quantity$zero,
			latitude: $ianmackenzie$elm_units$Angle$degrees(latitude),
			longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
				$ianmackenzie$elm_units$Angle$degrees(longitude)),
			timestamp: $elm$core$Maybe$Nothing
		};
	} else {
		return {altitude: $ianmackenzie$elm_units$Quantity$zero, latitude: $ianmackenzie$elm_units$Quantity$zero, longitude: $ianmackenzie$elm_geometry$Direction2d$positiveX, timestamp: $elm$core$Maybe$Nothing};
	}
};
var $author$project$Tools$StravaTools$paste = F2(
	function (options, track) {
		var _v0 = _Utils_Tuple2(options.externalSegment, options.preview);
		if ((_v0.a.$ === 'SegmentPreviewed') && _v0.b.b) {
			var segment = _v0.a.a;
			var _v1 = _v0.b;
			var segmentStartGpx = $author$project$Tools$StravaTools$extractFromLngLat(segment.start_latlng);
			var segmentEndGpx = $author$project$Tools$StravaTools$extractFromLngLat(segment.end_latlng);
			var pStartingTrackPoint = A5($author$project$DomainModel$nearestToLonLat, segmentStartGpx, 0, track.trackTree, track.referenceLonLat, track.leafIndex);
			var pEndingTrackPoint = A5($author$project$DomainModel$nearestToLonLat, segmentEndGpx, 0, track.trackTree, track.referenceLonLat, track.leafIndex);
			var _v2 = (_Utils_cmp(pEndingTrackPoint, pStartingTrackPoint) < 0) ? _Utils_Tuple3(
				$elm$core$List$reverse(options.preview),
				pEndingTrackPoint,
				pStartingTrackPoint) : _Utils_Tuple3(options.preview, pStartingTrackPoint, pEndingTrackPoint);
			var readyToPaste = _v2.a;
			var useStart = _v2.b;
			var useEnd = _v2.c;
			var altitudeAdjustment = function () {
				var altitudeInRoute = A2($author$project$DomainModel$gpxPointFromIndex, pStartingTrackPoint, track.trackTree).altitude;
				var segmentAltitude = function () {
					if (readyToPaste.b) {
						var head = readyToPaste.a;
						return head.gpx.altitude;
					} else {
						return altitudeInRoute;
					}
				}();
				return A2($ianmackenzie$elm_units$Quantity$minus, segmentAltitude, altitudeInRoute);
			}();
			var adjustAltitude = function (gps) {
				return options.adjustSegmentAltitude ? _Utils_update(
					gps,
					{
						altitude: A2($ianmackenzie$elm_units$Quantity$plus, altitudeAdjustment, gps.altitude)
					}) : gps;
			};
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				useStart,
				$author$project$DomainModel$skipCount(track.trackTree) - useEnd,
				track.referenceLonLat,
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						adjustAltitude,
						function ($) {
							return $.gpx;
						}),
					readyToPaste),
				track.trackTree);
			var oldPoints = A3(
				$author$project$DomainModel$extractPointsInRange,
				useStart,
				$author$project$DomainModel$skipCount(track.trackTree) - useEnd,
				track.trackTree);
			return _Utils_Tuple3(
				newTree,
				A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints),
				_Utils_Tuple2(useStart, useEnd));
		} else {
			return _Utils_Tuple3(
				$elm$core$Maybe$Nothing,
				_List_Nil,
				_Utils_Tuple2(0, 0));
		}
	});
var $author$project$Main$FetchElevationsFromMap = {$: 'FetchElevationsFromMap'};
var $author$project$Main$ReplaceTrackOnMapAfterStyleChange = {$: 'ReplaceTrackOnMapAfterStyleChange'};
var $author$project$Main$TimeToUpdateMemory = {$: 'TimeToUpdateMemory'};
var $author$project$SceneBuilderMap$latLonPairFromGpx = function (_v0) {
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$float,
		_List_fromArray(
			[
				$ianmackenzie$elm_units$Angle$inDegrees(
				$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)),
				$ianmackenzie$elm_units$Angle$inDegrees(latitude)
			]));
};
var $author$project$SceneBuilderMap$renderMapJsonWithoutCulling = function (track) {
	var coordinates = A2(
		$elm$core$List$map,
		$author$project$SceneBuilderMap$latLonPairFromGpx,
		$author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree));
	var geometry = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('LineString')),
				_Utils_Tuple2(
				'coordinates',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, coordinates))
			]));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Feature')),
				_Utils_Tuple2(
				'properties',
				$elm$json$Json$Encode$object(_List_Nil)),
				_Utils_Tuple2('geometry', geometry)
			]));
};
var $author$project$SceneBuilderMap$latLonPair = function (_v0) {
	var lon = _v0.a;
	var lat = _v0.b;
	var ele = _v0.c;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$float,
		_List_fromArray(
			[
				$ianmackenzie$elm_units$Angle$inDegrees(lon),
				$ianmackenzie$elm_units$Angle$inDegrees(lat)
			]));
};
var $author$project$SceneBuilderMap$makePoint = function (lonLat) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Point')),
				_Utils_Tuple2(
				'coordinates',
				$author$project$SceneBuilderMap$latLonPair(lonLat))
			]));
};
var $author$project$SceneBuilderMap$makeFeature = function (tp) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Feature')),
				_Utils_Tuple2(
				'geometry',
				$author$project$SceneBuilderMap$makePoint(tp))
			]));
};
var $author$project$SceneBuilderMap$mapLocation = function (point) {
	var _v0 = point;
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return _Utils_Tuple3(
		$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude),
		latitude,
		altitude);
};
var $author$project$SceneBuilderMap$trackPointsToJSONwithoutCulling = function (track) {
	var missingLastPoint = $author$project$SceneBuilderMap$makeFeature(
		$author$project$SceneBuilderMap$mapLocation(
			$author$project$DomainModel$getLastLeaf(track.trackTree).sourceData.b));
	var foldFn = F2(
		function (road, output) {
			var _v0 = $author$project$SceneBuilderMap$mapLocation(road.sourceData.a);
			var lon = _v0.a;
			var lat = _v0.b;
			var alt = _v0.c;
			return A2(
				$elm$core$List$cons,
				$author$project$SceneBuilderMap$makeFeature(
					_Utils_Tuple3(lon, lat, alt)),
				output);
		});
	var depthFn = function (road) {
		return $elm$core$Maybe$Nothing;
	};
	var features = A2(
		$elm$core$List$cons,
		missingLastPoint,
		A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			depthFn,
			0,
			track.trackTree,
			foldFn,
			_List_Nil));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('FeatureCollection')),
				_Utils_Tuple2(
				'features',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, features))
			]));
};
var $author$project$MapPortController$addFullTrackToMap = function (track) {
	var _v0 = A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree);
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Track')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude))),
					_Utils_Tuple2(
					'zoom',
					$elm$json$Json$Encode$float(10.0)),
					_Utils_Tuple2(
					'data',
					$author$project$SceneBuilderMap$renderMapJsonWithoutCulling(track)),
					_Utils_Tuple2(
					'points',
					$author$project$SceneBuilderMap$trackPointsToJSONwithoutCulling(track))
				])));
};
var $author$project$MapPortController$addMarkersToMap = function (track) {
	var encodePos = function (_v1) {
		var longitude = _v1.longitude;
		var latitude = _v1.latitude;
		var altitude = _v1.altitude;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude)))
				]));
	};
	return $author$project$MapPortController$mapCommands(
		function () {
			var _v0 = track.markerPosition;
			if (_v0.$ === 'Just') {
				var purple = _v0.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Cmd',
							$elm$json$Json$Encode$string('Mark')),
							_Utils_Tuple2(
							'orange',
							encodePos(
								A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree))),
							_Utils_Tuple2(
							'purple',
							encodePos(
								A2($author$project$DomainModel$gpxPointFromIndex, purple, track.trackTree)))
						]));
			} else {
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Cmd',
							$elm$json$Json$Encode$string('Mark')),
							_Utils_Tuple2(
							'orange',
							encodePos(
								A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree)))
						]));
			}
		}());
};
var $author$project$MapPortController$centreMapOnCurrent = function (track) {
	var _v0 = A2($author$project$DomainModel$gpxPointFromIndex, track.currentPosition, track.trackTree);
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Centre')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'lon',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(
							$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))),
					_Utils_Tuple2(
					'lat',
					$elm$json$Json$Encode$float(
						$ianmackenzie$elm_units$Angle$inDegrees(latitude)))
				])));
};
var $author$project$MapPortController$hidePreview = function (tag) {
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('HidePreview')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'label',
					$elm$json$Json$Encode$string(tag))
				])));
};
var $author$project$MapPortController$refreshMap = $author$project$MapPortController$mapCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('Repaint')),
				_Utils_Tuple2(
				'token',
				$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey))
			])));
var $author$project$DomainModel$lngLatPair = function (_v0) {
	var longitude = _v0.a;
	var latitude = _v0.b;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$json$Json$Encode$float,
		_List_fromArray(
			[
				$ianmackenzie$elm_units$Angle$inDegrees(longitude),
				$ianmackenzie$elm_units$Angle$inDegrees(latitude)
			]));
};
var $author$project$SceneBuilderMap$lineToJSON = function (points) {
	var coordinates = A2(
		$elm$core$List$map,
		function (_v0) {
			var longitude = _v0.longitude;
			var latitude = _v0.latitude;
			var altitude = _v0.altitude;
			return $author$project$DomainModel$lngLatPair(
				_Utils_Tuple3(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude),
					latitude,
					altitude));
		},
		points);
	var geometry = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('LineString')),
				_Utils_Tuple2(
				'coordinates',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, coordinates))
			]));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('Feature')),
				_Utils_Tuple2(
				'properties',
				$elm$json$Json$Encode$object(_List_Nil)),
				_Utils_Tuple2('geometry', geometry)
			]));
};
var $author$project$SceneBuilderMap$makeFeatureFromGPX = function (_v0) {
	var longitude = _v0.longitude;
	var latitude = _v0.latitude;
	var altitude = _v0.altitude;
	return $author$project$SceneBuilderMap$makeFeature(
		_Utils_Tuple3(
			$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude),
			latitude,
			altitude));
};
var $author$project$SceneBuilderMap$pointsToJSON = function (points) {
	var features = A2($elm$core$List$map, $author$project$SceneBuilderMap$makeFeatureFromGPX, points);
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('FeatureCollection')),
				_Utils_Tuple2(
				'features',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, features))
			]));
};
var $author$project$SceneBuilderMap$renderPreview = function (_v0) {
	var tag = _v0.tag;
	var shape = _v0.shape;
	var colour = _v0.colour;
	var points = _v0.points;
	switch (shape.$) {
		case 'PreviewCircle':
			return $author$project$SceneBuilderMap$pointsToJSON(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.gpx;
					},
					points));
		case 'PreviewLine':
			return $author$project$SceneBuilderMap$lineToJSON(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.gpx;
					},
					points));
		case 'PreviewToolSupplied':
			return $elm$json$Json$Encode$null;
		default:
			return $elm$json$Json$Encode$null;
	}
};
var $author$project$Tools$StravaTools$oauthCommands = _Platform_outgoingPort('oauthCommands', $elm$core$Basics$identity);
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Tools$StravaTools$requestAuthorisation = function () {
	var config = $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'clientId',
				$elm$json$Json$Encode$string($author$project$StravaAuth$configuration.clientId)),
				_Utils_Tuple2(
				'clientSecret',
				$elm$json$Json$Encode$string($author$project$StravaAuth$configuration.clientSecret)),
				_Utils_Tuple2(
				'authorizationUrl',
				$elm$json$Json$Encode$string(
					$elm$url$Url$toString($author$project$StravaAuth$configuration.authorizationEndpoint))),
				_Utils_Tuple2(
				'tokenUrl',
				$elm$json$Json$Encode$string(
					$elm$url$Url$toString($author$project$StravaAuth$configuration.tokenEndpoint))),
				_Utils_Tuple2(
				'useBasicAuthorizationHeader',
				$elm$json$Json$Encode$bool(true)),
				_Utils_Tuple2(
				'redirectUri',
				$elm$json$Json$Encode$string('http://localhost')),
				_Utils_Tuple2(
				'scope',
				$elm$json$Json$Encode$string('read_all,activity:read_all'))
			]));
	return $author$project$Tools$StravaTools$oauthCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('RequestAuth')),
					_Utils_Tuple2('config', config)
				])));
}();
var $author$project$MapPortController$requestElevations = $author$project$MapPortController$mapCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('Elev'))
			])));
var $author$project$Tools$StravaTypes$StravaActivity = F2(
	function (activityName, activityStart) {
		return {activityName: activityName, activityStart: activityStart};
	});
var $author$project$Tools$StravaDataLoad$decodeStravaActivity = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Tools$StravaTypes$StravaActivity,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'start_date', $elm$json$Json$Decode$string));
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $author$project$OAuth$tokenToString = function (_v0) {
	var t = _v0.a;
	return 'Bearer ' + t;
};
var $author$project$OAuth$useToken = function (token) {
	return $elm$core$List$cons(
		A2(
			$elm$http$Http$header,
			'Authorization',
			$author$project$OAuth$tokenToString(token)));
};
var $author$project$Tools$StravaDataLoad$requestStravaActivity = F3(
	function (msg, activityId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$decodeStravaActivity),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'activities', activityId]),
					_List_Nil)
			});
	});
var $author$project$Tools$StravaTypes$StravaActivityStreams = F3(
	function (latLngs, altitude, time) {
		return {altitude: altitude, latLngs: latLngs, time: time};
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $author$project$Tools$StravaTypes$StravaLatLng = F2(
	function (lat, lng) {
		return {lat: lat, lng: lng};
	});
var $author$project$Tools$StravaDataLoad$decodeStravaLatLng = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Tools$StravaTypes$StravaLatLng,
	A2($elm$json$Json$Decode$field, '0', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, '1', $elm$json$Json$Decode$float));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Tools$StravaDataLoad$decodeStravaActivityStreams = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Tools$StravaTypes$StravaActivityStreams,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['latlng', 'data']),
		$elm$json$Json$Decode$list($author$project$Tools$StravaDataLoad$decodeStravaLatLng)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['altitude', 'data']),
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['time', 'data']),
		$elm$json$Json$Decode$list($elm$json$Json$Decode$int)));
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 'QueryParameter', a: a, b: b};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$Tools$StravaDataLoad$requestStravaActivityStreams = F3(
	function (msg, activityId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$decodeStravaActivityStreams),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'activities', activityId, 'streams']),
					_List_fromArray(
						[
							A2($elm$url$Url$Builder$string, 'keys', 'latlng,altitude,time'),
							A2($elm$url$Url$Builder$string, 'key_by_type', 'true')
						]))
			});
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $author$project$Tools$StravaDataLoad$requestStravaRoute = F3(
	function (msg, routeId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: $elm$http$Http$expectString(msg),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'routes', routeId, 'export_gpx']),
					_List_Nil)
			});
	});
var $author$project$Tools$StravaTypes$StravaRoute = F4(
	function (name, description, distance, elevation_gain) {
		return {description: description, distance: distance, elevation_gain: elevation_gain, name: name};
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Tools$StravaDataLoad$stravaRouteDecoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Tools$StravaTypes$StravaRoute,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['name']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['description']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['distance']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['elevation_gain']),
		$elm$json$Json$Decode$float));
var $author$project$Tools$StravaDataLoad$requestStravaRouteHeader = F3(
	function (msg, routeId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$stravaRouteDecoder),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'routes', routeId]),
					_List_Nil)
			});
	});
var $author$project$Tools$StravaTypes$StravaSegment = F6(
	function (name, distance, elevation_high, elevation_low, start_latlng, end_latlng) {
		return {distance: distance, elevation_high: elevation_high, elevation_low: elevation_low, end_latlng: end_latlng, name: name, start_latlng: start_latlng};
	});
var $elm$json$Json$Decode$map6 = _Json_map6;
var $author$project$Tools$StravaDataLoad$stravaSegmentDecoder = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Tools$StravaTypes$StravaSegment,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['name']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['distance']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['elevation_high']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['elevation_low']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['start_latlng']),
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['end_latlng']),
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float)));
var $author$project$Tools$StravaDataLoad$requestStravaSegment = F3(
	function (msg, segmentId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$stravaSegmentDecoder),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'segments', segmentId]),
					_List_Nil)
			});
	});
var $author$project$Tools$StravaTypes$StravaSegmentStreams = F3(
	function (latLngs, distances, altitude) {
		return {altitude: altitude, distances: distances, latLngs: latLngs};
	});
var $author$project$Tools$StravaTypes$StravaLatLngStream = F5(
	function (is_type, data, series_type, original_size, resolution) {
		return {data: data, is_type: is_type, original_size: original_size, resolution: resolution, series_type: series_type};
	});
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$Tools$StravaDataLoad$decodeLatLngStream = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Tools$StravaTypes$StravaLatLngStream,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'data',
		$elm$json$Json$Decode$list($author$project$Tools$StravaDataLoad$decodeStravaLatLng)),
	A2($elm$json$Json$Decode$field, 'series_type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'original_size', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'resolution', $elm$json$Json$Decode$string));
var $author$project$Tools$StravaTypes$StravaAltitudeStream = F5(
	function (is_type, data, series_type, original_size, resolution) {
		return {data: data, is_type: is_type, original_size: original_size, resolution: resolution, series_type: series_type};
	});
var $author$project$Tools$StravaDataLoad$decodeStravaAltitudeStream = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Tools$StravaTypes$StravaAltitudeStream,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'data',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float)),
	A2($elm$json$Json$Decode$field, 'series_type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'original_size', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'resolution', $elm$json$Json$Decode$string));
var $author$project$Tools$StravaTypes$StravaDistanceStream = F5(
	function (is_type, data, series_type, original_size, resolution) {
		return {data: data, is_type: is_type, original_size: original_size, resolution: resolution, series_type: series_type};
	});
var $author$project$Tools$StravaDataLoad$decodeStravaDistanceStream = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Tools$StravaTypes$StravaDistanceStream,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'data',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float)),
	A2($elm$json$Json$Decode$field, 'series_type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'original_size', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'resolution', $elm$json$Json$Decode$string));
var $author$project$Tools$StravaDataLoad$decodeStravaSegmentStreams = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Tools$StravaTypes$StravaSegmentStreams,
	A2($elm$json$Json$Decode$field, '0', $author$project$Tools$StravaDataLoad$decodeLatLngStream),
	A2($elm$json$Json$Decode$field, '1', $author$project$Tools$StravaDataLoad$decodeStravaDistanceStream),
	A2($elm$json$Json$Decode$field, '2', $author$project$Tools$StravaDataLoad$decodeStravaAltitudeStream));
var $author$project$Tools$StravaDataLoad$requestStravaSegmentStreams = F3(
	function (msg, segmentId, token) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Tools$StravaDataLoad$decodeStravaSegmentStreams),
				headers: A2($author$project$OAuth$useToken, token, _List_Nil),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$Tools$StravaDataLoad$stravaApiRoot,
					_List_fromArray(
						['api', 'v3', 'segments', segmentId, 'streams']),
					_List_Nil)
			});
	});
var $author$project$MapPortController$setMapStyle = function (url) {
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Style')),
					_Utils_Tuple2(
					'style',
					$elm$json$Json$Encode$string(url))
				])));
};
var $author$project$MapPortController$showPreview = F4(
	function (tag, shape, colour, geoJson) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('ShowPreview')),
						_Utils_Tuple2(
						'token',
						$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
						_Utils_Tuple2(
						'label',
						$elm$json$Json$Encode$string(tag)),
						_Utils_Tuple2(
						'shape',
						$elm$json$Json$Encode$string(shape)),
						_Utils_Tuple2(
						'colour',
						$elm$json$Json$Encode$string(colour)),
						_Utils_Tuple2('data', geoJson)
					])));
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$maxX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxX;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$maxY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxY;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$maxZ = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.maxZ;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$minX = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minX;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$minY = function (_v0) {
	var boundingBox = _v0.a;
	return boundingBox.minY;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$unsafeOffsetBy = F2(
	function (amount, boundingBox) {
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)),
				maxY: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)),
				maxZ: A2(
					$ianmackenzie$elm_units$Quantity$plus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox)),
				minX: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox)),
				minY: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox)),
				minZ: A2(
					$ianmackenzie$elm_units$Quantity$minus,
					amount,
					$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox))
			});
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$expandBy = F2(
	function (amount, boundingBox) {
		return A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$unsafeOffsetBy,
			$ianmackenzie$elm_units$Quantity$abs(amount),
			boundingBox);
	});
var $author$project$MapPortController$zoomMapToFitTrack = function (track) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(
		A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$expandBy,
			$ianmackenzie$elm_units$Length$kilometers(2),
			$author$project$DomainModel$boundingBox(track.trackTree)));
	var minX = _v0.minX;
	var maxX = _v0.maxX;
	var minY = _v0.minY;
	var maxY = _v0.maxY;
	var minZ = _v0.minZ;
	var _v1 = _Utils_Tuple2(
		A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, minY, minZ),
		A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, maxY, minZ));
	var swCorner = _v1.a;
	var neCorner = _v1.b;
	var _v2 = _Utils_Tuple2(
		A2(
			$author$project$DomainModel$gpxFromPointWithReference,
			track.referenceLonLat,
			$author$project$DomainModel$withoutTime(swCorner)),
		A2(
			$author$project$DomainModel$gpxFromPointWithReference,
			track.referenceLonLat,
			$author$project$DomainModel$withoutTime(neCorner)));
	var swGpx = _v2.a;
	var neGpx = _v2.b;
	var _v3 = _Utils_Tuple2(
		_List_fromArray(
			[
				$elm$json$Json$Encode$float(
				$ianmackenzie$elm_units$Angle$inDegrees(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(swGpx.longitude))),
				$elm$json$Json$Encode$float(
				$ianmackenzie$elm_units$Angle$inDegrees(swGpx.latitude))
			]),
		_List_fromArray(
			[
				$elm$json$Json$Encode$float(
				$ianmackenzie$elm_units$Angle$inDegrees(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(neGpx.longitude))),
				$elm$json$Json$Encode$float(
				$ianmackenzie$elm_units$Angle$inDegrees(neGpx.latitude))
			]));
	var swLonLat = _v3.a;
	var neLonLat = _v3.b;
	var bbox = _List_fromArray(
		[
			A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, swLonLat),
			A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, neLonLat)
		]);
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('Bounds')),
					_Utils_Tuple2(
					'token',
					$elm$json$Json$Encode$string($author$project$MapboxKey$mapboxKey)),
					_Utils_Tuple2(
					'bbox',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, bbox))
				])));
};
var $author$project$Main$showTrackOnMapCentered = F3(
	function (panes, imperial, track) {
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$MapPortController$addFullTrackToMap(track),
					$author$project$MapPortController$zoomMapToFitTrack(track),
					$author$project$MapPortController$addMarkersToMap(track)
				]));
	});
var $author$project$LocalStorage$storageSetItem = F2(
	function (key, value) {
		return $author$project$LocalStorage$storageCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('storage.set')),
						_Utils_Tuple2(
						'key',
						$elm$json$Json$Encode$string(key)),
						_Utils_Tuple2('value', value)
					])));
	});
var $elm$file$File$toString = _File_toString;
var $ianmackenzie$elm_geometry$BoundingBox3d$intersects = F2(
	function (other, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox)) && A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(other),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox))))));
	});
var $author$project$SceneBuilderMap$trackPointsToJSON = function (track) {
	var missingLastPoint = $author$project$SceneBuilderMap$makeFeature(
		$author$project$SceneBuilderMap$mapLocation(
			$author$project$DomainModel$getLastLeaf(track.trackTree).sourceData.b));
	var fullRenderBoxSize = $ianmackenzie$elm_units$Length$kilometers(4);
	var fullRenderBox = A2(
		$ianmackenzie$elm_geometry$BoundingBox3d$expandBy,
		fullRenderBoxSize,
		$ianmackenzie$elm_geometry$BoundingBox3d$singleton(
			A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree).space));
	var foldFn = F2(
		function (road, output) {
			var _v0 = $author$project$SceneBuilderMap$mapLocation(road.sourceData.a);
			var lon = _v0.a;
			var lat = _v0.b;
			var alt = _v0.c;
			return A2(
				$elm$core$List$cons,
				$author$project$SceneBuilderMap$makeFeature(
					_Utils_Tuple3(lon, lat, alt)),
				output);
		});
	var depthFn = function (road) {
		return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderBox, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(10);
	};
	var features = A2(
		$elm$core$List$cons,
		missingLastPoint,
		A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(track.trackTree),
			depthFn,
			0,
			track.trackTree,
			foldFn,
			_List_Nil));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('FeatureCollection')),
				_Utils_Tuple2(
				'features',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, features))
			]));
};
var $author$project$MapPortController$toggleDragging = F2(
	function (isDragging, track) {
		return $author$project$MapPortController$mapCommands(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Cmd',
						$elm$json$Json$Encode$string('Drag')),
						_Utils_Tuple2(
						'Enable',
						$elm$json$Json$Encode$bool(isDragging)),
						_Utils_Tuple2(
						'points',
						$author$project$SceneBuilderMap$trackPointsToJSON(track))
					])));
	});
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $author$project$LandUseDataTypes$LandUseWaitingOSM = {$: 'LandUseWaitingOSM'};
var $author$project$TrackLoaded$trackFromPoints = F2(
	function (trackName, gpxTrack) {
		var _v0 = $author$project$DomainModel$treeFromSourcePoints(gpxTrack);
		if (_v0.$ === 'Just') {
			var aTree = _v0.a;
			var landuse = $author$project$LandUseDataTypes$emptyLandUse;
			return $elm$core$Maybe$Just(
				{
					currentPosition: 0,
					landUseData: _Utils_update(
						landuse,
						{status: $author$project$LandUseDataTypes$LandUseWaitingOSM}),
					lastMapClick: _Utils_Tuple2(0, 0),
					leafIndex: $author$project$TrackLoaded$indexLeaves(aTree),
					markerPosition: $elm$core$Maybe$Nothing,
					redos: _List_Nil,
					referenceLonLat: A2($author$project$DomainModel$gpxPointFromIndex, 0, aTree),
					renderDepth: 10,
					trackName: $elm$core$Maybe$Just(trackName),
					trackTree: aTree,
					undos: _List_Nil
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$UtilsForViews$withLeadingZeros = F2(
	function (beforePoint, raw) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				beforePoint - $elm$core$String$length(raw),
				'0'),
			raw);
	});
var $author$project$WriteGPX$writeFooter = '</trk></gpx>\n';
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeDictionary = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (_v0) {
			var _char = _v0.a;
			var string = _v0.b;
			return _Utils_Tuple2(
				_char,
				$elm$core$String$toList(string));
		},
		_List_fromArray(
			[
				_Utils_Tuple2(
				_Utils_chr('&'),
				'&amp;'),
				_Utils_Tuple2(
				_Utils_chr('<'),
				'&lt;'),
				_Utils_Tuple2(
				_Utils_chr('>'),
				'&gt;'),
				_Utils_Tuple2(
				_Utils_chr('\"'),
				'&quot;'),
				_Utils_Tuple2(
				_Utils_chr('\''),
				'&#39;'),
				_Utils_Tuple2(
				_Utils_chr('`'),
				'&#96;'),
				_Utils_Tuple2(
				_Utils_chr(' '),
				'&#32;'),
				_Utils_Tuple2(
				_Utils_chr('!'),
				'&#33;'),
				_Utils_Tuple2(
				_Utils_chr('@'),
				'&#64;'),
				_Utils_Tuple2(
				_Utils_chr('$'),
				'&#36;'),
				_Utils_Tuple2(
				_Utils_chr('%'),
				'&#37;'),
				_Utils_Tuple2(
				_Utils_chr('('),
				'&#40;'),
				_Utils_Tuple2(
				_Utils_chr(')'),
				'&#41;'),
				_Utils_Tuple2(
				_Utils_chr('='),
				'&#61;'),
				_Utils_Tuple2(
				_Utils_chr('+'),
				'&#43;'),
				_Utils_Tuple2(
				_Utils_chr('{'),
				'&#123;'),
				_Utils_Tuple2(
				_Utils_chr('}'),
				'&#125;'),
				_Utils_Tuple2(
				_Utils_chr('['),
				'&#91;'),
				_Utils_Tuple2(
				_Utils_chr(']'),
				'&#93;')
			])));
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeChar = function (_char) {
	return A2(
		$elm$core$Maybe$withDefault,
		_List_fromArray(
			[_char]),
		A2($elm$core$Dict$get, _char, $marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeDictionary));
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeChars = function (list) {
	return $elm$core$List$concat(
		A2($elm$core$List$map, $marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeChar, list));
};
var $marcosh$elm_html_to_unicode$ElmEscapeHtml$escape = $marcosh$elm_html_to_unicode$ElmEscapeHtml$convert($marcosh$elm_html_to_unicode$ElmEscapeHtml$escapeChars);
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $lukewestby$elm_string_interpolate$String$Interpolate$applyInterpolation = F2(
	function (replacements, _v0) {
		var match = _v0.match;
		var ordinalString = A2(
			$elm$core$Basics$composeL,
			$elm$core$String$dropLeft(1),
			$elm$core$String$dropRight(1))(match);
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				function (value) {
					return A2($elm$core$Array$get, value, replacements);
				},
				$elm$core$String$toInt(ordinalString)));
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $lukewestby$elm_string_interpolate$String$Interpolate$interpolationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('\\{\\d+\\}'));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $lukewestby$elm_string_interpolate$String$Interpolate$interpolate = F2(
	function (string, args) {
		var asArray = $elm$core$Array$fromList(args);
		return A3(
			$elm$regex$Regex$replace,
			$lukewestby$elm_string_interpolate$String$Interpolate$interpolationRegex,
			$lukewestby$elm_string_interpolate$String$Interpolate$applyInterpolation(asArray),
			string);
	});
var $author$project$WriteGPX$optionsIfNotDefault = function (options) {
	return _Utils_eq(options, $author$project$Tools$RGTOptions$defaults) ? '' : $elm$core$String$concat(
		_List_fromArray(
			[
				'<extensions>\n<rgt:parserOptions>',
				options.disableElevationFixes ? '\n<rgt:disableElevationFixes/>' : '',
				options.disableAdvancedSmoothing ? '\n<rgt:disableAdvancedSmoothing/>' : '',
				(!_Utils_eq(options.maxSlope, $author$project$Tools$RGTOptions$defaults.maxSlope)) ? A2(
				$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
				'\n<rgt:maxSlope>{0}</rgt:maxSlope>',
				_List_fromArray(
					[
						$elm$core$String$fromFloat(options.maxSlope)
					])) : '',
				'\n</rgt:parserOptions>\n</extensions>\n'
			]));
};
var $author$project$WriteGPX$preamble = '<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<gpx version="1.1"\n  creator="GPXmagic"\n  xmlns="http://www.topografix.com/GPX/1/1"\n  xmlns:rgt="http://www.rgtcycling.com/XML/GpxExtensions/v1">\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://www.topografix.com/GPX/1/1\n  http://www.topografix.com/GPX/1/1/gpx.xsd">\n  <metadata>\n    <name>Smoothed with GPXmagic</name>\n    <author>\n      <link href="https://www.stepwiserefinement.co.uk">\n        <text>GPXmagic v3</text>\n        <type>text/html</type>\n      </link>\n    </author>\n  </metadata>\n';
var $author$project$WriteGPX$writePreamble = F2(
	function (trackName, rgtOptions) {
		return $author$project$WriteGPX$preamble + ($author$project$WriteGPX$optionsIfNotDefault(rgtOptions) + ('<trk>  <name>' + ($marcosh$elm_html_to_unicode$ElmEscapeHtml$escape(trackName) + '</name>')));
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString = F2(
	function (digits, time) {
		return A3(
			$elm$core$String$padLeft,
			digits,
			_Utils_chr('0'),
			$elm$core$String$fromInt(time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime = function (time) {
	return A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		4,
		A2($elm$time$Time$toYear, $elm$time$Time$utc, time)) + ('-' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		$rtfeldman$elm_iso8601_date_strings$Iso8601$fromMonth(
			A2($elm$time$Time$toMonth, $elm$time$Time$utc, time))) + ('-' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toDay, $elm$time$Time$utc, time)) + ('T' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toHour, $elm$time$Time$utc, time)) + (':' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toMinute, $elm$time$Time$utc, time)) + (':' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2($elm$time$Time$toSecond, $elm$time$Time$utc, time)) + ('.' + (A2(
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toPaddedString,
		3,
		A2($elm$time$Time$toMillis, $elm$time$Time$utc, time)) + 'Z'))))))))))));
};
var $author$project$WriteGPX$writeTrackPoint = function (gpx) {
	var _v0 = gpx.timestamp;
	if (_v0.$ === 'Just') {
		var isTimed = _v0.a;
		return A2(
			$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
			'<trkpt lat=\"{0}\" lon=\"{1}\"><ele>{2}</ele><time>{3}</time></trkpt>\n',
			_List_fromArray(
				[
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Angle$inDegrees(gpx.latitude)),
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Angle$inDegrees(
						$ianmackenzie$elm_geometry$Direction2d$toAngle(gpx.longitude))),
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Length$inMeters(gpx.altitude)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$fromTime(isTimed)
				]));
	} else {
		return A2(
			$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
			'<trkpt lat=\"{0}\" lon=\"{1}\"><ele>{2}</ele></trkpt>\n',
			_List_fromArray(
				[
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Angle$inDegrees(gpx.latitude)),
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Angle$inDegrees(
						$ianmackenzie$elm_geometry$Direction2d$toAngle(gpx.longitude))),
					$elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Length$inMeters(gpx.altitude))
				]));
	}
};
var $author$project$WriteGPX$writeSegment = F2(
	function (segmentName, trackPoints) {
		var namePart = function () {
			if (segmentName.$ === 'Just') {
				var name = segmentName.a;
				return '<extensions><rgt:namedSegment>' + ($marcosh$elm_html_to_unicode$ElmEscapeHtml$escape(name) + '</rgt:namedSegment></extensions>');
			} else {
				return '';
			}
		}();
		return '\n<trkseg>\n' + ($elm$core$String$concat(
			A2($elm$core$List$map, $author$project$WriteGPX$writeTrackPoint, trackPoints)) + (namePart + '</trkseg>\n'));
	});
var $author$project$WriteGPX$writeGPX = F4(
	function (name, options, track, segments) {
		var writeSegments = F2(
			function (segs, startFrom) {
				if (segs.b) {
					var seg = segs.a;
					var moreSegs = segs.b;
					var _v1 = _Utils_Tuple2(
						A2($author$project$DomainModel$indexFromDistance, seg.startDistance, track.trackTree),
						A2($author$project$DomainModel$indexFromDistance, seg.endDistance, track.trackTree));
					var segStartIndex = _v1.a;
					var segEndIndex = _v1.b;
					var precedingPoints = A2(
						$elm$core$List$map,
						$elm$core$Tuple$second,
						A3(
							$author$project$DomainModel$extractPointsInRange,
							startFrom,
							($author$project$DomainModel$skipCount(track.trackTree) - segStartIndex) + 1,
							track.trackTree));
					var segmentPoints = A2(
						$elm$core$List$map,
						$elm$core$Tuple$second,
						A3(
							$author$project$DomainModel$extractPointsInRange,
							segStartIndex,
							$author$project$DomainModel$skipCount(track.trackTree) - segEndIndex,
							track.trackTree));
					return _Utils_ap(
						A2($author$project$WriteGPX$writeSegment, $elm$core$Maybe$Nothing, precedingPoints),
						_Utils_ap(
							A2(
								$author$project$WriteGPX$writeSegment,
								$elm$core$Maybe$Just(seg.name),
								segmentPoints),
							A2(writeSegments, moreSegs, segEndIndex)));
				} else {
					return A2(
						$author$project$WriteGPX$writeSegment,
						$elm$core$Maybe$Nothing,
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							A3($author$project$DomainModel$extractPointsInRange, startFrom + 1, 0, track.trackTree)));
				}
			});
		var useName = A2($elm$core$Maybe$withDefault, 'A track from GPXmagic', name);
		return _Utils_ap(
			A2($author$project$WriteGPX$writePreamble, useName, options),
			_Utils_ap(
				A2(writeSegments, segments, 0),
				$author$project$WriteGPX$writeFooter));
	});
var $author$project$Tools$SplitAndJoin$writeOneSection = F4(
	function (sections, options, track, rgtOptions) {
		if (sections.b) {
			var _v1 = sections.a;
			var index = _v1.a;
			var start = _v1.b;
			var end = _v1.c;
			var trackName = A2($elm$core$Maybe$withDefault, 'track', track.trackName);
			var processingFunction = options.applyAutofix ? function (atrack) {
				var fixedTree = $author$project$Tools$OneClickQuickFix$apply(atrack);
				return _Utils_update(
					atrack,
					{
						trackTree: A2($elm$core$Maybe$withDefault, atrack.trackTree, fixedTree)
					});
			} : $elm$core$Basics$identity;
			var filename = trackName + ('_' + (A2(
				$author$project$UtilsForViews$withLeadingZeros,
				2,
				$elm$core$String$fromInt(index)) + '.gpx'));
			var _v2 = options.addBuffers ? _Utils_Tuple2(
				$ianmackenzie$elm_units$Length$meters(start - 60.0),
				$ianmackenzie$elm_units$Length$meters(end + 140.0)) : _Utils_Tuple2(
				$ianmackenzie$elm_units$Length$meters(start),
				$ianmackenzie$elm_units$Length$meters(end));
			var metricStart = _v2.a;
			var metricEnd = _v2.b;
			var trackExtract = function () {
				var _v4 = _Utils_Tuple2(
					A2($author$project$DomainModel$indexFromDistance, metricStart, track.trackTree),
					A2($author$project$DomainModel$indexFromDistance, metricEnd, track.trackTree));
				var startIndex = _v4.a;
				var endIndex = _v4.b;
				return A2(
					$author$project$TrackLoaded$trackFromPoints,
					trackName,
					A2(
						$elm$core$List$map,
						$elm$core$Tuple$second,
						A3(
							$author$project$DomainModel$extractPointsInRange,
							startIndex,
							$author$project$DomainModel$skipCount(track.trackTree) - endIndex,
							track.trackTree)));
			}();
			var content = function () {
				if (trackExtract.$ === 'Just') {
					var subTrack = trackExtract.a;
					return A4(
						$author$project$WriteGPX$writeGPX,
						track.trackName,
						rgtOptions,
						processingFunction(subTrack),
						_List_Nil);
				} else {
					return 'failed to make the track section';
				}
			}();
			return A3($elm$file$File$Download$string, filename, 'text/gpx', content);
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Main$performActionCommands = F2(
	function (actions, model) {
		var showPreviewOnMap = function (tag) {
			var _v18 = A2($elm$core$Dict$get, tag, model.previews);
			if (_v18.$ === 'Just') {
				var useThisData = _v18.a;
				var _v19 = useThisData.shape;
				switch (_v19.$) {
					case 'PreviewCircle':
						return A4(
							$author$project$MapPortController$showPreview,
							useThisData.tag,
							'circle',
							$author$project$UtilsForViews$uiColourHexString(useThisData.colour),
							$author$project$SceneBuilderMap$renderPreview(useThisData));
					case 'PreviewLine':
						return A4(
							$author$project$MapPortController$showPreview,
							useThisData.tag,
							'line',
							$author$project$UtilsForViews$uiColourHexString(useThisData.colour),
							$author$project$SceneBuilderMap$renderPreview(useThisData));
					default:
						return $elm$core$Platform$Cmd$none;
				}
			} else {
				return $elm$core$Platform$Cmd$none;
			}
		};
		var performAction = function (action) {
			var _v0 = _Utils_Tuple2(action, model.track);
			_v0$32:
			while (true) {
				switch (_v0.a.$) {
					case 'RequestStravaAuth':
						var _v1 = _v0.a;
						return $author$project$Tools$StravaTools$requestAuthorisation;
					case 'SetCurrent':
						if (_v0.b.$ === 'Just') {
							var track = _v0.b.a;
							return $author$project$MapPortController$addMarkersToMap(track);
						} else {
							break _v0$32;
						}
					case 'SetCurrentFromMapClick':
						if (_v0.b.$ === 'Just') {
							return $elm$core$Platform$Cmd$none;
						} else {
							break _v0$32;
						}
					case 'MapCenterOnCurrent':
						if (_v0.b.$ === 'Just') {
							var _v2 = _v0.a;
							var track = _v0.b.a;
							return $author$project$MapPortController$centreMapOnCurrent(track);
						} else {
							break _v0$32;
						}
					case 'MapRefresh':
						if (_v0.b.$ === 'Just') {
							var _v3 = _v0.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$MapPortController$refreshMap,
										A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews)
									]));
						} else {
							break _v0$32;
						}
					case 'MakeMapPointsDraggable':
						if (_v0.b.$ === 'Just') {
							var flag = _v0.a.a;
							var track = _v0.b.a;
							return A2($author$project$MapPortController$toggleDragging, flag, track);
						} else {
							break _v0$32;
						}
					case 'ShowPreview':
						if (_v0.b.$ === 'Just') {
							var previewData = _v0.a.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										showPreviewOnMap(previewData.tag),
										A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews)
									]));
						} else {
							break _v0$32;
						}
					case 'HidePreview':
						if (_v0.b.$ === 'Just') {
							var tag = _v0.a.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$MapPortController$hidePreview(tag),
										A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews)
									]));
						} else {
							break _v0$32;
						}
					case 'DelayMessage':
						if (_v0.b.$ === 'Just') {
							var _v4 = _v0.a;
							var _int = _v4.a;
							var msg = _v4.b;
							return A2($andrewMacmurray$elm_delay$Delay$after, _int, msg);
						} else {
							break _v0$32;
						}
					case 'TrackHasChanged':
						if (_v0.b.$ === 'Just') {
							var _v5 = _v0.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$MapPortController$addFullTrackToMap(track),
										$author$project$MapPortController$addMarkersToMap(track),
										$elm$core$Platform$Cmd$batch(
										A2(
											$elm$core$List$map,
											showPreviewOnMap,
											$elm$core$Dict$keys(model.previews))),
										A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews)
									]));
						} else {
							break _v0$32;
						}
					case 'PointerChange':
						if (_v0.b.$ === 'Just') {
							var _v6 = _v0.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								A2(
									$elm$core$List$cons,
									A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews),
									A2(
										$elm$core$List$cons,
										$author$project$MapPortController$addMarkersToMap(track),
										A2(
											$elm$core$List$map,
											showPreviewOnMap,
											$elm$core$Dict$keys(model.previews)))));
						} else {
							break _v0$32;
						}
					case 'SetMarker':
						if (_v0.b.$ === 'Just') {
							var track = _v0.b.a;
							return $author$project$MapPortController$addMarkersToMap(track);
						} else {
							break _v0$32;
						}
					case 'StoreLocally':
						var _v7 = _v0.a;
						var key = _v7.a;
						var value = _v7.b;
						return A2($author$project$LocalStorage$storageSetItem, key, value);
					case 'HeapStatusUpdate':
						return A2($andrewMacmurray$elm_delay$Delay$after, 5000, $author$project$Main$TimeToUpdateMemory);
					case 'AddFullTrackToMapForElevations':
						if (_v0.b.$ === 'Just') {
							var _v8 = _v0.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$MapPortController$addFullTrackToMap(track),
										A2($andrewMacmurray$elm_delay$Delay$after, 100, $author$project$Main$FetchElevationsFromMap)
									]));
						} else {
							break _v0$32;
						}
					case 'FetchMapElevations':
						var _v9 = _v0.a;
						return $author$project$MapPortController$requestElevations;
					case 'SetMapStyle':
						var url = _v0.a.a;
						return $elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$MapPortController$setMapStyle(url),
									A2($andrewMacmurray$elm_delay$Delay$after, 1000, $author$project$Main$ReplaceTrackOnMapAfterStyleChange)
								]));
					case 'SelectSvgFile':
						var message = _v0.a.a;
						return A2(
							$elm$file$File$Select$file,
							_List_fromArray(
								['text/svg']),
							message);
					case 'LoadSvgFile':
						var _v10 = _v0.a;
						var message = _v10.a;
						var file = _v10.b;
						return A2(
							$elm$core$Task$perform,
							message,
							$elm$file$File$toString(file));
					case 'TrackFromSvg':
						if (_v0.b.$ === 'Just') {
							var track = _v0.b.a;
							return A3($author$project$Main$showTrackOnMapCentered, model.paneLayoutOptions, model.toolOptions.imperial, track);
						} else {
							break _v0$32;
						}
					case 'SelectGpxFile':
						var message = _v0.a.a;
						return A2(
							$elm$file$File$Select$file,
							_List_fromArray(
								['text/gpx']),
							message);
					case 'LoadGpxFile':
						var _v11 = _v0.a;
						var message = _v11.a;
						var file = _v11.b;
						return A2(
							$elm$core$Task$perform,
							message,
							$elm$file$File$toString(file));
					case 'TrackFromGpx':
						if (_v0.b.$ === 'Just') {
							var track = _v0.b.a;
							return A3($author$project$Main$showTrackOnMapCentered, model.paneLayoutOptions, model.toolOptions.imperial, track);
						} else {
							break _v0$32;
						}
					case 'LoadGpxFromStrava':
						if (_v0.b.$ === 'Just') {
							var track = _v0.b.a;
							return A3($author$project$Main$showTrackOnMapCentered, model.paneLayoutOptions, model.toolOptions.imperial, track);
						} else {
							break _v0$32;
						}
					case 'RequestStravaRouteHeader':
						var _v12 = _v0.a;
						var msg = _v12.a;
						var routeId = _v12.b;
						var token = _v12.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaRouteHeader, msg, routeId, token);
					case 'RequestStravaRoute':
						var _v13 = _v0.a;
						var msg = _v13.a;
						var routeId = _v13.b;
						var token = _v13.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaRoute, msg, routeId, token);
					case 'RequestStravaActivity':
						var _v14 = _v0.a;
						var msg = _v14.a;
						var activityId = _v14.b;
						var token = _v14.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaActivity, msg, activityId, token);
					case 'RequestStravaActivityStreams':
						var _v15 = _v0.a;
						var msg = _v15.a;
						var activityId = _v15.b;
						var token = _v15.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaActivityStreams, msg, activityId, token);
					case 'RequestStravaSegment':
						var _v16 = _v0.a;
						var msg = _v16.a;
						var segmentId = _v16.b;
						var token = _v16.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaSegment, msg, segmentId, token);
					case 'RequestStravaSegmentStreams':
						var _v17 = _v0.a;
						var msg = _v17.a;
						var segmentId = _v17.b;
						var token = _v17.c;
						return A3($author$project$Tools$StravaDataLoad$requestStravaSegmentStreams, msg, segmentId, token);
					case 'WriteTrackSections':
						if (_v0.b.$ === 'Just') {
							var sections = _v0.a.a;
							var track = _v0.b.a;
							return A4($author$project$Tools$SplitAndJoin$writeOneSection, sections, model.toolOptions.splitAndJoinOptions, track, model.rgtOptions);
						} else {
							break _v0$32;
						}
					case 'RenderProfile':
						if (_v0.b.$ === 'Just') {
							var context = _v0.a.a;
							var track = _v0.b.a;
							return $elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A5($author$project$MapPortController$paintCanvasProfileChart, context, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews),
										A3($author$project$MapPortController$paintCanvasGradientChart, context, model.toolOptions.imperial, track)
									]));
						} else {
							break _v0$32;
						}
					default:
						break _v0$32;
				}
			}
			return $elm$core$Platform$Cmd$none;
		};
		return $elm$core$Platform$Cmd$batch(
			A2($elm$core$List$map, performAction, actions));
	});
var $author$project$MyIP$processIpInfo = function (response) {
	if (response.$ === 'Ok') {
		var ipInfo = response.a;
		return $elm$core$Maybe$Just(ipInfo);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$LandUseDataTypes$LandUseError = function (a) {
	return {$: 'LandUseError', a: a};
};
var $author$project$LandUseDataTypes$LandUseWaitingMap = {$: 'LandUseWaitingMap'};
var $author$project$Utils$errorToString = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var url = error.a;
			return 'The URL ' + (url + ' was invalid');
		case 'Timeout':
			return 'Unable to reach the server, try again';
		case 'NetworkError':
			return 'Unable to reach the server';
		case 'BadStatus':
			switch (error.a) {
				case 504:
					return 'The Overpass server is busy; land use data not available';
				case 500:
					return 'The server had a problem, try again later';
				case 400:
					return 'Error 400 trying to fetch land use data';
				default:
					return 'Unknown error';
			}
		default:
			var errorMessage = error.a;
			return errorMessage;
	}
};
var $author$project$MapPortController$fetchElevationsForPoints = function (rawData) {
	return $author$project$MapPortController$mapCommands(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cmd',
					$elm$json$Json$Encode$string('LandUse')),
					_Utils_Tuple2(
					'data',
					A2($elm$json$Json$Encode$list, $author$project$SceneBuilderMap$latLonPairFromGpx, rawData))
				])));
};
var $author$project$LandUseDataOSM$fetchAltitudesFromMap = function (raw) {
	var rawNodes = A2(
		$elm$core$List$filterMap,
		function (element) {
			if (element.$ === 'OSMNode') {
				var node = element.a;
				return $elm$core$Maybe$Just(node);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		},
		raw.elements);
	var gpxLike = A2(
		$elm$core$List$map,
		function (rawNode) {
			return {
				altitude: $ianmackenzie$elm_units$Quantity$zero,
				latitude: $ianmackenzie$elm_units$Angle$degrees(rawNode.lat),
				longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
					$ianmackenzie$elm_units$Angle$degrees(rawNode.lon)),
				timestamp: $elm$core$Maybe$Nothing
			};
		},
		rawNodes);
	return $author$project$MapPortController$fetchElevationsForPoints(gpxLike);
};
var $author$project$LandUseDataOSM$processLandUseData = F2(
	function (results, track) {
		if (results.$ === 'Ok') {
			var landUse = results.a;
			return _Utils_Tuple2(
				_Utils_update(
					$author$project$LandUseDataTypes$emptyLandUse,
					{rawData: landUse, status: $author$project$LandUseDataTypes$LandUseWaitingMap}),
				$author$project$LandUseDataOSM$fetchAltitudesFromMap(landUse));
		} else {
			var error = results.a;
			return _Utils_Tuple2(
				_Utils_update(
					$author$project$LandUseDataTypes$emptyLandUse,
					{
						status: $author$project$LandUseDataTypes$LandUseError(
							$author$project$Utils$errorToString(error))
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Actions$HeapStatusUpdate = function (a) {
	return {$: 'HeapStatusUpdate', a: a};
};
var $author$project$Actions$StoredValueRetrieved = F2(
	function (a, b) {
		return {$: 'StoredValueRetrieved', a: a, b: b};
	});
var $author$project$Tools$MemoryUsage$HeapStatus = F3(
	function (jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize) {
		return {jsHeapSizeLimit: jsHeapSizeLimit, totalJSHeapSize: totalJSHeapSize, usedJSHeapSize: usedJSHeapSize};
	});
var $author$project$LocalStorage$memoryDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Tools$MemoryUsage$HeapStatus,
	A2($elm$json$Json$Decode$field, 'jsHeapSizeLimit', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'totalJSHeapSize', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'usedJSHeapSize', $elm$json$Json$Decode$int));
var $author$project$LocalStorage$msgDecoder = A2($elm$json$Json$Decode$field, 'msg', $elm$json$Json$Decode$string);
var $author$project$LocalStorage$processStoragePortMessage = F2(
	function (json, model) {
		var jsonMsg = A2($elm$json$Json$Decode$decodeValue, $author$project$LocalStorage$msgDecoder, json);
		_v0$2:
		while (true) {
			if (jsonMsg.$ === 'Ok') {
				switch (jsonMsg.a) {
					case 'storage.got':
						var value = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$value),
							json);
						var key = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
							json);
						var _v1 = _Utils_Tuple2(key, value);
						if ((_v1.a.$ === 'Ok') && (_v1.b.$ === 'Ok')) {
							var someKey = _v1.a.a;
							var somevalue = _v1.b.a;
							return _List_fromArray(
								[
									A2($author$project$Actions$StoredValueRetrieved, someKey, somevalue)
								]);
						} else {
							return _List_Nil;
						}
					case 'memory':
						var memory = A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'memory', $author$project$LocalStorage$memoryDecoder),
							json);
						if (memory.$ === 'Ok') {
							var gotMemory = memory.a;
							return _List_fromArray(
								[
									$author$project$Actions$HeapStatusUpdate(gotMemory)
								]);
						} else {
							return _List_Nil;
						}
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return _List_Nil;
	});
var $author$project$ViewProfileChartsCanvas$handleClick = F3(
	function (trackDistance, context, track) {
		if (context.$ === 'Just') {
			var isContext = context.a;
			return isContext.waitingForClickDelay ? $elm$core$Maybe$Just(
				A2($author$project$DomainModel$indexFromDistance, trackDistance, track.trackTree)) : $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$PaneLayoutManager$profileViewHandlesClick = F4(
	function (container, trackDistance, options, track) {
		var _v0 = $elm_community$list_extra$List$Extra$last(
			A2($elm$core$String$split, '.', container));
		_v0$4:
		while (true) {
			if (_v0.$ === 'Just') {
				switch (_v0.a) {
					case '1':
						return A3($author$project$ViewProfileChartsCanvas$handleClick, trackDistance, options.pane1.profileContext, track);
					case '2':
						return A3($author$project$ViewProfileChartsCanvas$handleClick, trackDistance, options.pane2.profileContext, track);
					case '3':
						return A3($author$project$ViewProfileChartsCanvas$handleClick, trackDistance, options.pane3.profileContext, track);
					case '4':
						return A3($author$project$ViewProfileChartsCanvas$handleClick, trackDistance, options.pane4.profileContext, track);
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $author$project$ToolsController$Expanded = {$: 'Expanded'};
var $author$project$ToolsController$encodeDock = function (dock) {
	switch (dock.$) {
		case 'DockUpperLeft':
			return 'upperleft';
		case 'DockLowerLeft':
			return 'lowerleft';
		case 'DockUpperRight':
			return 'upperright';
		case 'DockLowerRight':
			return 'lowerright';
		case 'DockBottom':
			return 'bottom';
		default:
			return 'none';
	}
};
var $author$project$ToolsController$encodeState = function (state) {
	switch (state.$) {
		case 'Expanded':
			return 'expanded';
		case 'Contracted':
			return 'contracted';
		case 'Disabled':
			return 'disabled';
		case 'AlwaysOpen':
			return 'always';
		case 'SettingsOpen':
			return 'open';
		default:
			return 'closed';
	}
};
var $author$project$ToolsController$encodeType = function (toolType) {
	switch (toolType.$) {
		case 'ToolTimestamps':
			return 'ToolTimestamps';
		case 'ToolTrackInfo':
			return 'ToolTrackInfo';
		case 'ToolAbruptDirectionChanges':
			return 'ToolAbruptDirectionChanges';
		case 'ToolDeletePoints':
			return 'ToolDeletePoints';
		case 'ToolEssentials':
			return 'ToolEssentials';
		case 'ToolBezierSplines':
			return 'ToolBezierSplines';
		case 'ToolCentroidAverage':
			return 'ToolCentroidAverage';
		case 'ToolCurveFormer':
			return 'ToolCurveFormer';
		case 'ToolBendSmoother':
			return 'ToolBendSmoother';
		case 'ToolNudge':
			return 'ToolNudge';
		case 'ToolGradientProblems':
			return 'ToolAbruptGradientChanges';
		case 'ToolDisplaySettings':
			return 'ToolDisplaySettings';
		case 'ToolOutAndBack':
			return 'ToolOutAndBack';
		case 'ToolSimplify':
			return 'ToolSimplify';
		case 'ToolInterpolate':
			return 'ToolInterpolate';
		case 'ToolProfileSmooth':
			return 'ToolProfileSmooth';
		case 'ToolMoveScaleRotate':
			return 'ToolMoveScaleRotate';
		case 'ToolFlythrough':
			return 'ToolFlythrough';
		case 'ToolStrava':
			return 'ToolStrava';
		case 'ToolMoveAndStretch':
			return 'ToolMoveAndStretch';
		case 'ToolStartFinish':
			return 'ToolStartFinish';
		case 'ToolSplitAndJoin':
			return 'ToolSplitAndJoin';
		case 'ToolIntersections':
			return 'ToolIntersections';
		case 'ToolStraighten':
			return 'ToolStraighten';
		case 'ToolGraph':
			return 'ToolGraph';
		case 'ToolSettings':
			return 'ToolSettings';
		case 'ToolLandUse':
			return 'ToolLandUse';
		case 'ToolSmartSmoother':
			return 'ToolTreeSmoother';
		default:
			return 'ToolNamedSegments';
	}
};
var $author$project$ToolsController$encodeOneTool = function (tool) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeType(tool.toolType))),
				_Utils_Tuple2(
				'state',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeState(tool.state))),
				_Utils_Tuple2(
				'dock',
				$elm$json$Json$Encode$string(
					$author$project$ToolsController$encodeDock(tool.dock))),
				_Utils_Tuple2(
				'tab',
				$author$project$ToolsController$encodeColour(tool.tabColour)),
				_Utils_Tuple2(
				'text',
				$author$project$ToolsController$encodeColour(tool.textColour))
			]));
};
var $author$project$ToolsController$encodeToolState = function (options) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		A2($elm$core$List$map, $author$project$ToolsController$encodeOneTool, options.tools));
};
var $smucode$elm_flat_colors$FlatColors$SwedishPalette$freeSpeechBlue = A3($mdgriffith$elm_ui$Element$rgb255, 60, 64, 198);
var $author$project$ToolsController$getColour = F2(
	function (toolType, entries) {
		return A2(
			$elm$core$Maybe$withDefault,
			$smucode$elm_flat_colors$FlatColors$SwedishPalette$freeSpeechBlue,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.tabColour;
				},
				A2(
					$elm_community$list_extra$List$Extra$find,
					function (tab) {
						return _Utils_eq(tab.toolType, toolType);
					},
					entries)));
	});
var $author$project$Actions$HidePreview = function (a) {
	return {$: 'HidePreview', a: a};
};
var $author$project$PreviewData$PreviewCircle = {$: 'PreviewCircle'};
var $author$project$Actions$ShowPreview = function (a) {
	return {$: 'ShowPreview', a: a};
};
var $author$project$Tools$BendSmoother$previewActions = F3(
	function (options, colour, track) {
		var _v0 = options.smoothedBend;
		if (_v0.$ === 'Just') {
			var bend = _v0.a;
			return _List_fromArray(
				[
					$author$project$Actions$ShowPreview(
					{colour: colour, points: bend.nodes, shape: $author$project$PreviewData$PreviewCircle, tag: 'bend'})
				]);
		} else {
			return _List_fromArray(
				[
					$author$project$Actions$HidePreview('bend')
				]);
		}
	});
var $ianmackenzie$elm_geometry$Direction2d$xComponent = function (_v0) {
	var d = _v0.a;
	return d.x;
};
var $ianmackenzie$elm_geometry$Direction2d$yComponent = function (_v0) {
	var d = _v0.a;
	return d.y;
};
var $ianmackenzie$elm_geometry$Arc2d$centerPoint = function (_v0) {
	var arc = _v0.a;
	var y0 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(arc.startPoint);
	var x0 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(arc.startPoint);
	var r = A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
	var dy = $ianmackenzie$elm_geometry$Direction2d$yComponent(arc.xDirection);
	var dx = $ianmackenzie$elm_geometry$Direction2d$xComponent(arc.xDirection);
	var cy = A2(
		$ianmackenzie$elm_units$Quantity$plus,
		A2($ianmackenzie$elm_units$Quantity$multiplyBy, dx, r),
		y0);
	var cx = A2(
		$ianmackenzie$elm_units$Quantity$minus,
		A2($ianmackenzie$elm_units$Quantity$multiplyBy, dy, r),
		x0);
	return A2($ianmackenzie$elm_geometry$Point2d$xy, cx, cy);
};
var $author$project$Geometry101$interpolateScalar = F3(
	function (fraction, a, b) {
		return (b * fraction) + (a * (1.0 - fraction));
	});
var $author$project$Geometry101$interpolateLine = F3(
	function (fraction, p1, p2) {
		return {
			x: A3($author$project$Geometry101$interpolateScalar, fraction, p1.x, p2.x),
			y: A3($author$project$Geometry101$interpolateScalar, fraction, p1.y, p2.y)
		};
	});
var $ianmackenzie$elm_geometry$Point2d$meters = F2(
	function (x, y) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $author$project$Geometry101$pointAlongRoad = F2(
	function (road, distanceFromStart) {
		var roadLength = A2($author$project$Geometry101$distance, road.startAt, road.endsAt);
		return A3($author$project$Geometry101$interpolateLine, distanceFromStart / roadLength, road.startAt, road.endsAt);
	});
var $author$project$Geometry101$pointsToGeometry = F2(
	function (p1, p2) {
		return {endsAt: p2, startAt: p1};
	});
var $ianmackenzie$elm_geometry$Point3d$toRecord = F2(
	function (fromQuantity, point) {
		return {
			x: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(point)),
			y: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(point)),
			z: fromQuantity(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(point))
		};
	});
var $author$project$Tools$BendSmoother$toPlanarPoint = function (pt) {
	var _v0 = A2($ianmackenzie$elm_geometry$Point3d$toRecord, $ianmackenzie$elm_units$Length$inMeters, pt.space);
	var x = _v0.x;
	var y = _v0.y;
	return {x: x, y: y};
};
var $author$project$Tools$BendSmoother$convergentRoadsArc = F3(
	function (p, r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd));
		var midAB = _v4.a;
		var midCD = _v4.b;
		var _v5 = (_Utils_cmp(
			A2($author$project$Geometry101$distance, p, midAB),
			A2($author$project$Geometry101$distance, p, midCD)) < 1) ? _Utils_Tuple2(
			midAB,
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pd),
				A2($author$project$Geometry101$distance, p, midAB))) : _Utils_Tuple2(
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pa),
				A2($author$project$Geometry101$distance, p, midCD)),
			midCD);
		var firstTangentPoint = _v5.a;
		var secondTangentPoint = _v5.b;
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, firstTangentPoint),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, secondTangentPoint));
		var perpFromFirstTangentPoint = _v6.a;
		var perpFromSecondTangentPoint = _v6.b;
		var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
		var findArc = function (centre) {
			var radius = A2($author$project$Geometry101$distance, centre, firstTangentPoint);
			var bisectorAsRoad = {endsAt: p, startAt: centre};
			var midArcPoint = A2($author$project$Geometry101$pointAlongRoad, bisectorAsRoad, radius);
			return A3(
				$ianmackenzie$elm_geometry$Arc2d$throughPoints,
				A2($ianmackenzie$elm_geometry$Point2d$meters, firstTangentPoint.x, firstTangentPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, secondTangentPoint.x, secondTangentPoint.y));
		};
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Maybe$map, findArc, circleCenter));
	});
var $author$project$Tools$BendSmoother$divergentRoadsArc = F3(
	function (p, r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd));
		var midAB = _v4.a;
		var midCD = _v4.b;
		var _v5 = (_Utils_cmp(
			A2($author$project$Geometry101$distance, p, midAB),
			A2($author$project$Geometry101$distance, p, midCD)) > -1) ? _Utils_Tuple2(
			midAB,
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pc),
				A2($author$project$Geometry101$distance, p, midAB))) : _Utils_Tuple2(
			A2(
				$author$project$Geometry101$pointAlongRoad,
				A2($author$project$Geometry101$pointsToGeometry, p, pb),
				A2($author$project$Geometry101$distance, p, midCD)),
			midCD);
		var firstTangentPoint = _v5.a;
		var secondTangentPoint = _v5.b;
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, firstTangentPoint),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, secondTangentPoint));
		var perpFromFirstTangentPoint = _v6.a;
		var perpFromSecondTangentPoint = _v6.b;
		var circleCenter = A2($author$project$Geometry101$lineIntersection, perpFromFirstTangentPoint, perpFromSecondTangentPoint);
		var findArc = function (centre) {
			var radius = A2($author$project$Geometry101$distance, centre, firstTangentPoint);
			var bisectorAsRoad = {endsAt: centre, startAt: p};
			var midArcPoint = A2(
				$author$project$Geometry101$pointAlongRoad,
				bisectorAsRoad,
				radius + A2($author$project$Geometry101$distance, p, centre));
			return A3(
				$ianmackenzie$elm_geometry$Arc2d$throughPoints,
				A2($ianmackenzie$elm_geometry$Point2d$meters, firstTangentPoint.x, firstTangentPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
				A2($ianmackenzie$elm_geometry$Point2d$meters, secondTangentPoint.x, secondTangentPoint.y));
		};
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Maybe$map, findArc, circleCenter));
	});
var $author$project$Geometry101$findIntercept = F2(
	function (r1, r2) {
		var r2Line = A2($author$project$Geometry101$lineEquationFromTwoPoints, r2.startAt, r2.endsAt);
		var r1Line = A2($author$project$Geometry101$lineEquationFromTwoPoints, r1.startAt, r1.endsAt);
		return A2($author$project$Geometry101$lineIntersection, r1Line, r2Line);
	});
var $author$project$Geometry101$antiInterpolate = F3(
	function (p, pa, pb) {
		var bDist = A2($author$project$Geometry101$distance, p, pb);
		var ab = A2($author$project$Geometry101$distance, pa, pb);
		var aDist = A2($author$project$Geometry101$distance, p, pa);
		return (_Utils_cmp(aDist + bDist, ab) < 1) ? (aDist / ab) : ((_Utils_cmp(aDist, bDist) > 0) ? (aDist / ab) : ((_Utils_cmp(bDist, aDist) > 0) ? ((-1.0) * (aDist / ab)) : 0.0));
	});
var $author$project$Geometry101$isAfter = F2(
	function (r, p) {
		return A3($author$project$Geometry101$antiInterpolate, p, r.startAt, r.endsAt) > 1.0;
	});
var $author$project$Geometry101$isBefore = F2(
	function (r, p) {
		return A3($author$project$Geometry101$antiInterpolate, p, r.startAt, r.endsAt) < 0.0;
	});
var $ianmackenzie$elm_geometry$Quantity$Extra$aXbY = F4(
	function (a, _v0, b, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((a * x) + (b * y));
	});
var $ianmackenzie$elm_units$Angle$sin = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$sin(angle);
};
var $ianmackenzie$elm_geometry$Quantity$Extra$rSinTheta = F2(
	function (r, theta) {
		return A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$sin(theta),
			r);
	});
var $ianmackenzie$elm_units$Angle$tan = function (_v0) {
	var angle = _v0.a;
	return $elm$core$Basics$tan(angle);
};
var $ianmackenzie$elm_geometry$Arc2d$pointOn = F2(
	function (_v0, parameterValue) {
		var arc = _v0.a;
		var y0 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(arc.startPoint);
		var x0 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(arc.startPoint);
		var dy = $ianmackenzie$elm_geometry$Direction2d$yComponent(arc.xDirection);
		var dx = $ianmackenzie$elm_geometry$Direction2d$xComponent(arc.xDirection);
		var arcSweptAngle = arc.sweptAngle;
		var arcSignedLength = arc.signedLength;
		if (_Utils_eq(arcSweptAngle, $ianmackenzie$elm_units$Quantity$zero)) {
			var distance = A2($ianmackenzie$elm_units$Quantity$multiplyBy, parameterValue, arcSignedLength);
			var px = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, dx, distance),
				x0);
			var py = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, dy, distance),
				y0);
			return A2($ianmackenzie$elm_geometry$Point2d$xy, px, py);
		} else {
			var theta = A2($ianmackenzie$elm_units$Quantity$multiplyBy, parameterValue, arcSweptAngle);
			var arcRadius = A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arcSignedLength, arcSweptAngle);
			var x = A2($ianmackenzie$elm_geometry$Quantity$Extra$rSinTheta, arcRadius, theta);
			var y = A2(
				$ianmackenzie$elm_units$Quantity$lessThan,
				$ianmackenzie$elm_units$Angle$radians($elm$core$Basics$pi / 2),
				$ianmackenzie$elm_units$Quantity$abs(theta)) ? A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				$ianmackenzie$elm_units$Angle$tan(
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, 0.5, theta)),
				x) : A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				1 - $ianmackenzie$elm_units$Angle$cos(theta),
				arcRadius);
			var px = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A4($ianmackenzie$elm_geometry$Quantity$Extra$aXbY, dx, x, -dy, y),
				x0);
			var py = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				A4($ianmackenzie$elm_geometry$Quantity$Extra$aXbY, dy, x, dx, y),
				y0);
			return A2($ianmackenzie$elm_geometry$Point2d$xy, px, py);
		}
	});
var $ianmackenzie$elm_geometry$Arc2d$endPoint = function (arc) {
	return A2($ianmackenzie$elm_geometry$Arc2d$pointOn, arc, 1.0);
};
var $ianmackenzie$elm_geometry$Vector3d$fromMeters = function (givenComponents) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(givenComponents);
};
var $ianmackenzie$elm_geometry$Point3d$fromTuple = F2(
	function (toQuantity, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		var z = _v0.c;
		return A3(
			$ianmackenzie$elm_geometry$Point3d$xyz,
			toQuantity(x),
			toQuantity(y),
			toQuantity(z));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$vector = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$Vector2d$from, p1, p2);
};
var $ianmackenzie$elm_geometry$LineSegment2d$length = function (givenSegment) {
	return $ianmackenzie$elm_geometry$Vector2d$length(
		$ianmackenzie$elm_geometry$LineSegment2d$vector(givenSegment));
};
var $ianmackenzie$elm_geometry$Arc2d$radius = function (_v0) {
	var arc = _v0.a;
	return A2($ianmackenzie$elm_geometry$Quantity$Extra$lOverTheta, arc.signedLength, arc.sweptAngle);
};
var $ianmackenzie$elm_geometry$Geometry$Types$Polyline2d = function (a) {
	return {$: 'Polyline2d', a: a};
};
var $ianmackenzie$elm_geometry$Polyline2d$fromVertices = function (givenVertices) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Polyline2d(givenVertices);
};
var $ianmackenzie$elm_geometry$Arc2d$segments = F2(
	function (numSegments, arc) {
		return $ianmackenzie$elm_geometry$Polyline2d$fromVertices(
			A2(
				$ianmackenzie$elm_1d_parameter$Parameter1d$steps,
				numSegments,
				$ianmackenzie$elm_geometry$Arc2d$pointOn(arc)));
	});
var $ianmackenzie$elm_geometry$Polyline2d$vertices = function (_v0) {
	var polylineVertices = _v0.a;
	return polylineVertices;
};
var $ianmackenzie$elm_geometry$Polyline2d$segments = function (polyline) {
	var _v0 = $ianmackenzie$elm_geometry$Polyline2d$vertices(polyline);
	if (!_v0.b) {
		return _List_Nil;
	} else {
		var all = _v0;
		var first = all.a;
		var rest = all.b;
		return A3($elm$core$List$map2, $ianmackenzie$elm_geometry$LineSegment2d$from, all, rest);
	}
};
var $ianmackenzie$elm_geometry$Arc2d$startPoint = function (_v0) {
	var properties = _v0.a;
	return properties.startPoint;
};
var $ianmackenzie$elm_geometry$Arc2d$sweptAngle = function (_v0) {
	var properties = _v0.a;
	return properties.sweptAngle;
};
var $ianmackenzie$elm_geometry$Point3d$fromMeters = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(givenCoordinates);
};
var $ianmackenzie$elm_geometry$Point2d$toMeters = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $author$project$Tools$BendSmoother$withElevation = F2(
	function (elevation, p2) {
		var _v0 = $ianmackenzie$elm_geometry$Point2d$toMeters(p2);
		var x = _v0.x;
		var y = _v0.y;
		return $ianmackenzie$elm_geometry$Point3d$fromMeters(
			{x: x, y: y, z: elevation});
	});
var $author$project$Tools$BendSmoother$makeSmoothBend = F4(
	function (trackPointSpacing, roadAB, roadCD, arc) {
		var trueArcLength = $elm$core$Basics$abs(
			$ianmackenzie$elm_units$Angle$inRadians(
				$ianmackenzie$elm_geometry$Arc2d$sweptAngle(arc))) * $ianmackenzie$elm_units$Length$inMeters(
			$ianmackenzie$elm_geometry$Arc2d$radius(arc));
		var numberPointsOnArc = $elm$core$Basics$ceiling(trueArcLength / trackPointSpacing);
		var segments = $ianmackenzie$elm_geometry$Polyline2d$segments(
			A2($ianmackenzie$elm_geometry$Arc2d$segments, numberPointsOnArc - 1, arc));
		var realArcLength = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeL, $ianmackenzie$elm_units$Length$inMeters, $ianmackenzie$elm_geometry$LineSegment2d$length),
				segments));
		var _v0 = _Utils_Tuple2(roadAB.sourceData.a.timestamp, roadCD.sourceData.b.timestamp);
		var timeAtA = _v0.a;
		var timeAtD = _v0.b;
		var _v1 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_geometry$Point2d$toRecord,
				$ianmackenzie$elm_units$Length$inMeters,
				$ianmackenzie$elm_geometry$Arc2d$startPoint(arc)),
			A2(
				$ianmackenzie$elm_geometry$Point2d$toRecord,
				$ianmackenzie$elm_units$Length$inMeters,
				$ianmackenzie$elm_geometry$Arc2d$endPoint(arc)));
		var p1 = _v1.a;
		var p2 = _v1.b;
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(roadAB.startPoint.space)),
			$ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$zCoordinate(roadCD.endPoint.space)));
		var elevationAtA = _v2.a;
		var elevationAtD = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_geometry$Point3d$fromTuple,
				$ianmackenzie$elm_units$Length$meters,
				_Utils_Tuple3(p1.x, p1.y, elevationAtA)),
			A2(
				$ianmackenzie$elm_geometry$Point3d$fromTuple,
				$ianmackenzie$elm_units$Length$meters,
				_Utils_Tuple3(p2.x, p2.y, elevationAtD)));
		var tang1 = _v3.a;
		var tang2 = _v3.b;
		var _v4 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Length$inMeters(
				A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, roadAB.startPoint.space, tang1)),
			$ianmackenzie$elm_units$Length$inMeters(
				A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, tang2, roadCD.endPoint.space)));
		var entryStraightLength = _v4.a;
		var exitStraightLength = _v4.b;
		var totalNewLength = (entryStraightLength + realArcLength) + exitStraightLength;
		var _v5 = _Utils_Tuple2(
			A3($author$project$Utils$interpolateTimes, entryStraightLength / totalNewLength, timeAtA, timeAtD),
			A3($author$project$Utils$interpolateTimes, exitStraightLength / totalNewLength, timeAtD, timeAtA));
		var tangent1Time = _v5.a;
		var tangent2Time = _v5.b;
		var newArcTimes = A3(
			$author$project$Utils$equalIntervals,
			$elm$core$List$length(segments),
			tangent1Time,
			tangent2Time);
		var _v6 = _Utils_Tuple2(elevationAtA + ((entryStraightLength / totalNewLength) * (elevationAtD - elevationAtA)), elevationAtD + ((exitStraightLength / totalNewLength) * (elevationAtA - elevationAtD)));
		var tangent1Elevation = _v6.a;
		var tangent2Elevation = _v6.b;
		var _v7 = _Utils_Tuple2(
			{
				space: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					$ianmackenzie$elm_geometry$Vector3d$fromMeters(
						{x: 0, y: 0, z: tangent1Elevation - elevationAtA}),
					tang1),
				time: tangent1Time
			},
			{
				space: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					$ianmackenzie$elm_geometry$Vector3d$fromMeters(
						{x: 0, y: 0, z: tangent2Elevation - elevationAtD}),
					tang2),
				time: tangent2Time
			});
		var newEntryPoint = _v7.a;
		var newExitPoint = _v7.b;
		var eleIncrement = (tangent2Elevation - tangent1Elevation) / (numberPointsOnArc - 1);
		var elevate = F2(
			function (point2d, i) {
				return A2($author$project$Tools$BendSmoother$withElevation, tangent1Elevation + (i * eleIncrement), point2d);
			});
		var newArcPoints = A3(
			$elm$core$List$map2,
			elevate,
			A2(
				$elm$core$List$map,
				$ianmackenzie$elm_geometry$LineSegment2d$startPoint,
				A2($elm$core$List$drop, 1, segments)),
			A2($elm$core$List$range, 1, numberPointsOnArc - 1));
		var newEarthPoints = _Utils_ap(
			_List_fromArray(
				[roadAB.startPoint, newEntryPoint]),
			_Utils_ap(
				A3($elm$core$List$map2, $author$project$DomainModel$withTime, newArcTimes, newArcPoints),
				_List_fromArray(
					[newExitPoint, roadCD.endPoint])));
		return A2(
			$elm$core$List$drop,
			1,
			A2(
				$elm$core$List$take,
				$elm$core$List$length(newEarthPoints) - 1,
				newEarthPoints));
	});
var $author$project$Tools$BendSmoother$parallelFindSemicircle = F2(
	function (r1, r2) {
		var _v0 = _Utils_Tuple2(
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r1.endPoint)),
			_Utils_Tuple2(
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.startPoint),
				$author$project$Tools$BendSmoother$toPlanarPoint(r2.endPoint)));
		var _v1 = _v0.a;
		var pa = _v1.a;
		var pb = _v1.b;
		var _v2 = _v0.b;
		var pc = _v2.a;
		var pd = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pa, pb),
			A2($author$project$Geometry101$lineEquationFromTwoPoints, pc, pd));
		var r1Equation = _v3.a;
		var r2Equation = _v3.b;
		var _v4 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pc, pd),
			A3($author$project$Geometry101$interpolateLine, 0.5, pd, pa));
		var midDA = _v4.b;
		var _v5 = _Utils_Tuple2(
			A3($author$project$Geometry101$interpolateLine, 0.5, pa, pb),
			A3($author$project$Geometry101$interpolateLine, 0.5, pb, pc));
		var midBC = _v5.b;
		var middle = A3($author$project$Geometry101$interpolateLine, 0.5, midBC, midDA);
		var _v6 = _Utils_Tuple2(
			A2($author$project$Geometry101$linePerpendicularTo, r1Equation, middle),
			A2($author$project$Geometry101$linePerpendicularTo, r2Equation, middle));
		var radiusToFirstTangentPoint = _v6.a;
		var radiusToSecondTangentPoint = _v6.b;
		var _v7 = _Utils_Tuple2(
			A2($author$project$Geometry101$lineIntersection, r1Equation, radiusToFirstTangentPoint),
			A2($author$project$Geometry101$lineIntersection, r2Equation, radiusToSecondTangentPoint));
		var firstTangentPoint = _v7.a;
		var secondTangentPoint = _v7.b;
		var _v8 = _Utils_Tuple2(firstTangentPoint, secondTangentPoint);
		if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
			var t1 = _v8.a.a;
			var t2 = _v8.b.a;
			var radius = A2($author$project$Geometry101$distance, middle, t1);
			if ((radius > 0.0) && (radius < 1000.0)) {
				var centreLine = {endsAt: midBC, startAt: middle};
				var midArcPoint = A2($author$project$Geometry101$pointAlongRoad, centreLine, radius);
				return A3(
					$ianmackenzie$elm_geometry$Arc2d$throughPoints,
					A2($ianmackenzie$elm_geometry$Point2d$meters, t1.x, t1.y),
					A2($ianmackenzie$elm_geometry$Point2d$meters, midArcPoint.x, midArcPoint.y),
					A2($ianmackenzie$elm_geometry$Point2d$meters, t2.x, t2.y));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$roadToGeometry = function (road) {
	return {
		endsAt: {
			x: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(road.endPoint.space)),
			y: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(road.endPoint.space))
		},
		startAt: {
			x: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(road.startPoint.space)),
			y: $ianmackenzie$elm_units$Length$inMeters(
				$ianmackenzie$elm_geometry$Point3d$yCoordinate(road.startPoint.space))
		}
	};
};
var $author$project$Tools$BendSmoother$lookForSmoothBendOption = F4(
	function (trackPointSpacing, track, pointA, pointD) {
		var _v0 = _Utils_Tuple2(
			$author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, pointA, track.trackTree)),
			$author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, pointD - 1, track.trackTree)));
		var roadAB = _v0.a;
		var roadCD = _v0.b;
		var _v1 = _Utils_Tuple2(
			$author$project$Tools$BendSmoother$roadToGeometry(roadAB),
			$author$project$Tools$BendSmoother$roadToGeometry(roadCD));
		var roadIn = _v1.a;
		var roadOut = _v1.b;
		var arcFinderGeneral = function (p) {
			return (A2($author$project$Geometry101$isBefore, roadIn, p) && A2($author$project$Geometry101$isAfter, roadOut, p)) ? A3($author$project$Tools$BendSmoother$divergentRoadsArc, p, roadAB, roadCD) : ((A2($author$project$Geometry101$isAfter, roadIn, p) && A2($author$project$Geometry101$isBefore, roadOut, p)) ? A3($author$project$Tools$BendSmoother$convergentRoadsArc, p, roadAB, roadCD) : $elm$core$Maybe$Nothing);
		};
		var maybeArc = function () {
			var _v4 = A2($author$project$Geometry101$findIntercept, roadIn, roadOut);
			if (_v4.$ === 'Nothing') {
				return A2($author$project$Tools$BendSmoother$parallelFindSemicircle, roadAB, roadCD);
			} else {
				var p = _v4.a;
				return arcFinderGeneral(p);
			}
		}();
		if (maybeArc.$ === 'Just') {
			var arc = maybeArc.a;
			var nodes = A4($author$project$Tools$BendSmoother$makeSmoothBend, trackPointSpacing, roadAB, roadCD, arc);
			var distanceToBend = A2(
				$ianmackenzie$elm_units$Quantity$plus,
				function () {
					if (nodes.b) {
						var p1 = nodes.a;
						return A2(
							$ianmackenzie$elm_geometry$Point3d$distanceFrom,
							A2($author$project$DomainModel$earthPointFromIndex, pointA, track.trackTree).space,
							p1.space);
					} else {
						return $ianmackenzie$elm_units$Quantity$zero;
					}
				}(),
				A2($author$project$DomainModel$distanceFromIndex, pointA, track.trackTree));
			var previewsWithAdjustedDistance = A3($author$project$TrackLoaded$asPreviewPoints, track, distanceToBend, nodes);
			return $elm$core$Maybe$Just(
				{
					centre: $ianmackenzie$elm_geometry$Arc2d$centerPoint(arc),
					endIndex: pointD,
					nodes: previewsWithAdjustedDistance,
					radius: $ianmackenzie$elm_units$Length$inMeters(
						$ianmackenzie$elm_geometry$Arc2d$radius(arc)),
					startIndex: pointA
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$BendSmoother$tryBendSmoother = F2(
	function (track, options) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var startPoint = _v1.a;
		var endPoint = _v1.b;
		return _Utils_update(
			options,
			{
				smoothedBend: (_Utils_cmp(endPoint, startPoint + 2) > -1) ? A4($author$project$Tools$BendSmoother$lookForSmoothBendOption, options.bendTrackPointSpacing, track, startPoint, endPoint) : $elm$core$Maybe$Nothing
			});
	});
var $author$project$Tools$BendSmoother$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = A2($author$project$Tools$BendSmoother$tryBendSmoother, theTrack, options);
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$BendSmoother$previewActions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('bend')
					]));
		}
	});
var $author$project$PreviewData$PreviewProfile = function (a) {
	return {$: 'PreviewProfile', a: a};
};
var $author$project$Tools$BezierSplines$actions = F3(
	function (options, previewColour, track) {
		var profilePreview = function (ptree) {
			return $author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: _List_Nil,
					shape: $author$project$PreviewData$PreviewProfile(ptree),
					tag: 'bezierprofile'
				});
		};
		var previewTree = A2($author$project$Tools$BezierSplines$applyUsingOptions, options, track);
		var _v0 = _Utils_Tuple2(options.extent, previewTree);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'ExtentIsRange') {
				if (_v0.b.$ === 'Just') {
					var _v1 = _v0.a;
					var ptree = _v0.b.a;
					var normalPreview = $author$project$Actions$ShowPreview(
						{
							colour: previewColour,
							points: A2($author$project$Tools$BezierSplines$computeNewPoints, options, track),
							shape: $author$project$PreviewData$PreviewCircle,
							tag: 'bezier'
						});
					return _List_fromArray(
						[
							normalPreview,
							profilePreview(ptree)
						]);
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'Just') {
					var _v2 = _v0.a;
					var ptree = _v0.b.a;
					return _List_fromArray(
						[
							profilePreview(ptree)
						]);
				} else {
					break _v0$2;
				}
			}
		}
		return _List_fromArray(
			[
				$author$project$Actions$HidePreview('bezier'),
				$author$project$Actions$HidePreview('bezierprofile')
			]);
	});
var $author$project$Tools$BezierSplines$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$BezierSplines$actions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('bezier'),
						$author$project$Actions$HidePreview('bezierprofile')
					]));
		}
	});
var $author$project$Tools$CentroidAverage$actions = F3(
	function (newOptions, previewColour, track) {
		var profilePreview = function (tree) {
			return $author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: _List_Nil,
					shape: $author$project$PreviewData$PreviewProfile(tree),
					tag: 'centroidprofile'
				});
		};
		var previewTree = A2($author$project$Tools$CentroidAverage$applyUsingOptions, newOptions, track);
		if (previewTree.$ === 'Just') {
			var tree = previewTree.a;
			var normalPreview = $author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A2($author$project$Tools$CentroidAverage$computeNewPoints, newOptions, track),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'centroid'
				});
			return _List_fromArray(
				[
					normalPreview,
					profilePreview(tree)
				]);
		} else {
			return _List_fromArray(
				[
					$author$project$Actions$HidePreview('centroid'),
					$author$project$Actions$HidePreview('centroidprofile')
				]);
		}
	});
var $author$project$Tools$CentroidAverage$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$CentroidAverage$actions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('centroid'),
						$author$project$Actions$HidePreview('centroidprofile')
					]));
		}
	});
var $author$project$PreviewData$PreviewToolSupplied = function (a) {
	return {$: 'PreviewToolSupplied', a: a};
};
var $avh4$elm_color$Color$blue = A4($avh4$elm_color$Color$RgbaSpace, 52 / 255, 101 / 255, 164 / 255, 1.0);
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Constant = function (a) {
	return {$: 'Constant', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$UnlitMaterial = F2(
	function (a, b) {
		return {$: 'UnlitMaterial', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs = {$: 'UseMeshUvs'};
var $elm_explorations$linear_algebra$Math$Vector3$vec3 = _MJS_v3;
var $ianmackenzie$elm_3d_scene$Scene3d$Material$toVec3 = function (givenColor) {
	var _v0 = $avh4$elm_color$Color$toRgba(givenColor);
	var blue = _v0.blue;
	var green = _v0.green;
	var red = _v0.red;
	return A3($elm_explorations$linear_algebra$Math$Vector3$vec3, red, green, blue);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Material$color = function (givenColor) {
	return A2(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UnlitMaterial,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant(
			$ianmackenzie$elm_3d_scene$Scene3d$Material$toVec3(givenColor)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity = function (a) {
	return {$: 'Entity', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode = F2(
	function (a, b) {
		return {$: 'PointNode', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantPointFragment = {
	src: '\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ',
	attributes: {},
	uniforms: {constantColor: 'constantColor', pointRadius: 'pointRadius', sceneProperties: 'sceneProperties'}
};
var $elm_explorations$webgl$WebGL$Mesh1 = F2(
	function (a, b) {
		return {$: 'Mesh1', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$points = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 0});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex = $elm_explorations$webgl$WebGL$points(
	_List_fromArray(
		[
			{dummyAttribute: 1}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissivePointFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ',
	attributes: {},
	uniforms: {emissiveColor: 'emissiveColor', pointRadius: 'pointRadius', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyNode = {$: 'EmptyNode'};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty = $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity($ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyNode);
var $elm_explorations$webgl$WebGL$Internal$enableOption = F2(
	function (ctx, option) {
		switch (option.$) {
			case 'Alpha':
				return A2(_WebGL_enableAlpha, ctx, option);
			case 'Depth':
				return A2(_WebGL_enableDepth, ctx, option);
			case 'Stencil':
				return A2(_WebGL_enableStencil, ctx, option);
			case 'Antialias':
				return A2(_WebGL_enableAntialias, ctx, option);
			case 'ClearColor':
				return A2(_WebGL_enableClearColor, ctx, option);
			default:
				return A2(_WebGL_enablePreserveDrawingBuffer, ctx, option);
		}
	});
var $elm_explorations$webgl$WebGL$Internal$enableSetting = F2(
	function (cache, setting) {
		switch (setting.$) {
			case 'Blend':
				return A2(_WebGL_enableBlend, cache, setting);
			case 'DepthTest':
				return A2(_WebGL_enableDepthTest, cache, setting);
			case 'StencilTest':
				return A2(_WebGL_enableStencilTest, cache, setting);
			case 'Scissor':
				return A2(_WebGL_enableScissor, cache, setting);
			case 'ColorMask':
				return A2(_WebGL_enableColorMask, cache, setting);
			case 'CullFace':
				return A2(_WebGL_enableCullFace, cache, setting);
			case 'PolygonOffset':
				return A2(_WebGL_enablePolygonOffset, cache, setting);
			case 'SampleCoverage':
				return A2(_WebGL_enableSampleCoverage, cache, setting);
			default:
				return _WebGL_enableSampleAlphaToCoverage(cache);
		}
	});
var $elm_explorations$webgl$WebGL$entityWith = _WebGL_entity;
var $ianmackenzie$elm_units$Luminance$inNits = function (_v0) {
	var numNits = _v0.a;
	return numNits;
};
var $elm_explorations$linear_algebra$Math$Vector3$scale = _MJS_v3scale;
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex = {
	src: '\n        precision highp float;\n        \n        attribute lowp float dummyAttribute;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 pointPosition;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(pointPosition, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling * dummyAttribute + 2.0;\n        }\n    ',
	attributes: {dummyAttribute: 'dummyAttribute'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', pointPosition: 'pointPosition', pointRadius: 'pointRadius', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_geometry$BoundingBox3d$midZ = function (_v0) {
	var boundingBox = _v0.a;
	return A3($ianmackenzie$elm_units$Quantity$interpolateFrom, boundingBox.minZ, boundingBox.maxZ, 0.5);
};
var $ianmackenzie$elm_geometry$BoundingBox3d$centerPoint = function (boundingBox) {
	return A3(
		$ianmackenzie$elm_geometry$Point3d$xyz,
		$ianmackenzie$elm_geometry$BoundingBox3d$midX(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox3d$midY(boundingBox),
		$ianmackenzie$elm_geometry$BoundingBox3d$midZ(boundingBox));
};
var $ianmackenzie$elm_geometry$BoundingBox3d$dimensions = function (boundingBox) {
	return _Utils_Tuple3(
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minX(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxX(boundingBox)),
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minY(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxY(boundingBox)),
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(boundingBox)));
};
var $ianmackenzie$elm_geometry$Point3d$unwrap = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds = function (boundingBox) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$dimensions(boundingBox);
	var xDimension = _v0.a.a;
	var yDimension = _v0.b.a;
	var zDimension = _v0.c.a;
	return {
		centerPoint: $ianmackenzie$elm_geometry$Point3d$unwrap(
			$ianmackenzie$elm_geometry$BoundingBox3d$centerPoint(boundingBox)),
		halfX: xDimension / 2,
		halfY: yDimension / 2,
		halfZ: zDimension / 2
	};
};
var $ianmackenzie$elm_units$Pixels$toFloat = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $elm_explorations$linear_algebra$Math$Vector3$fromRecord = _MJS_v3fromRecord;
var $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3 = function (point) {
	return $elm_explorations$linear_algebra$Math$Vector3$fromRecord(
		$ianmackenzie$elm_geometry$Point3d$unwrap(point));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$point = F3(
	function (givenRadius, givenMaterial, givenPoint) {
		var boundingBox = $ianmackenzie$elm_geometry$BoundingBox3d$singleton(givenPoint);
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		switch (givenMaterial.$) {
			case 'UnlitMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantPointFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex,
										{
											constantColor: color,
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											pointPosition: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(givenPoint),
											pointRadius: $ianmackenzie$elm_units$Pixels$toFloat(givenRadius),
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					var data = givenMaterial.b.a.data;
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'EmissiveMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a.a;
					var backlight = givenMaterial.c;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$singlePointVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissivePointFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$dummyVertex,
										{
											emissiveColor: A2(
												$elm_explorations$linear_algebra$Math$Vector3$scale,
												$ianmackenzie$elm_units$Luminance$inNits(backlight),
												color),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											pointPosition: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(givenPoint),
											pointRadius: $ianmackenzie$elm_units$Pixels$toFloat(givenRadius),
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'LambertianMaterial':
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			default:
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$point = F3(
	function (_v0, givenMaterial, givenPoint) {
		var radius = _v0.radius;
		return A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$point, radius, givenMaterial, givenPoint);
	});
var $author$project$Tools$CurveFormer$highlightPoints = F3(
	function (color, points, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color(color);
		var highlightPoint = function (index) {
			var xyzt = A2($author$project$DomainModel$earthPointFromIndex, index, track.trackTree);
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(5)
				},
				material,
				xyzt.space);
		};
		return A2($elm$core$List$map, highlightPoint, points);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Circle3d = function (a) {
	return {$: 'Circle3d', a: a};
};
var $ianmackenzie$elm_geometry$Circle3d$withRadius = F3(
	function (givenRadius, givenAxialDirection, givenCenterPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Circle3d(
			{
				axialDirection: givenAxialDirection,
				centerPoint: givenCenterPoint,
				radius: $ianmackenzie$elm_units$Quantity$abs(givenRadius)
			});
	});
var $ianmackenzie$elm_geometry$Vector2d$xComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.x);
};
var $ianmackenzie$elm_geometry$Vector2d$yComponent = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(v.y);
};
var $author$project$Tools$CurveFormer$getCircle = F2(
	function (options, track) {
		var translation = A3(
			$ianmackenzie$elm_geometry$Vector3d$xyz,
			$ianmackenzie$elm_geometry$Vector2d$xComponent(options.vector),
			$ianmackenzie$elm_units$Quantity$negate(
				$ianmackenzie$elm_geometry$Vector2d$yComponent(options.vector)),
			$ianmackenzie$elm_units$Quantity$zero);
		var centre = function () {
			var _v0 = options.referencePoint;
			if (_v0.$ === 'Just') {
				var localReference = _v0.a;
				return A2($ianmackenzie$elm_geometry$Point3d$translateBy, translation, localReference.space);
			} else {
				var orange = A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree);
				return A2($ianmackenzie$elm_geometry$Point3d$translateBy, translation, orange.space);
			}
		}();
		return A3($ianmackenzie$elm_geometry$Circle3d$withRadius, options.pushRadius, $ianmackenzie$elm_geometry$Direction3d$positiveZ, centre);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode = F2(
	function (a, b) {
		return {$: 'MeshNode', a: a, b: b};
	});
var $ianmackenzie$elm_geometry$LineSegment3d$boundingBox = function (lineSegment) {
	var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
	var p1 = _v0.a;
	var p2 = _v0.b;
	return A2($ianmackenzie$elm_geometry$BoundingBox3d$from, p1, p2);
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment = {
	src: '\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ',
	attributes: {},
	uniforms: {constantColor: 'constantColor'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {emissiveColor: 'emissiveColor', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex = {
	src: '\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ',
	attributes: {lineSegmentVertex: 'lineSegmentVertex'},
	uniforms: {lineSegmentEndPoint: 'lineSegmentEndPoint', lineSegmentStartPoint: 'lineSegmentStartPoint', modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$webgl$WebGL$Mesh2 = F2(
	function (a, b) {
		return {$: 'Mesh2', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$lines = $elm_explorations$webgl$WebGL$Mesh2(
	{elemSize: 2, indexSize: 0, mode: 1});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices = $elm_explorations$webgl$WebGL$lines(
	_List_fromArray(
		[
			_Utils_Tuple2(
			{lineSegmentVertex: 0},
			{lineSegmentVertex: 1})
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegment = F2(
	function (givenMaterial, givenLineSegment) {
		var boundingBox = $ianmackenzie$elm_geometry$LineSegment3d$boundingBox(givenLineSegment);
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(givenLineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		switch (givenMaterial.$) {
			case 'UnlitMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices,
										{
											constantColor: color,
											lineSegmentEndPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2),
											lineSegmentStartPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					var _v2 = givenMaterial.a;
					var data = givenMaterial.b.a.data;
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'EmissiveMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a.a;
					var backlight = givenMaterial.c;
					return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
						A2(
							$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
							bounds,
							F8(
								function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
									return A5(
										$elm_explorations$webgl$WebGL$entityWith,
										settings,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lineSegmentVertex,
										$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment,
										$ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegmentVertices,
										{
											emissiveColor: A2(
												$elm_explorations$linear_algebra$Math$Vector3$scale,
												$ianmackenzie$elm_units$Luminance$inNits(backlight),
												color),
											lineSegmentEndPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2),
											lineSegmentStartPoint: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1),
											modelMatrix: modelMatrix,
											modelScale: modelScale,
											projectionMatrix: projectionMatrix,
											sceneProperties: sceneProperties,
											viewMatrix: viewMatrix
										});
								})));
				} else {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			case 'LambertianMaterial':
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			default:
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$lineSegment = F2(
	function (givenMaterial, givenLineSegment) {
		return A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$lineSegment, givenMaterial, givenLineSegment);
	});
var $ianmackenzie$elm_geometry$Polyline3d$segments = function (polyline) {
	var _v0 = $ianmackenzie$elm_geometry$Polyline3d$vertices(polyline);
	if (!_v0.b) {
		return _List_Nil;
	} else {
		var all = _v0;
		var first = all.a;
		var rest = all.b;
		return A3($elm$core$List$map2, $ianmackenzie$elm_geometry$LineSegment3d$from, all, rest);
	}
};
var $ianmackenzie$elm_geometry$Circle3d$axialDirection = function (_v0) {
	var circle = _v0.a;
	return circle.axialDirection;
};
var $ianmackenzie$elm_geometry$Circle3d$axis = function (_v0) {
	var circle = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, circle.centerPoint, circle.axialDirection);
};
var $ianmackenzie$elm_geometry$Circle3d$centerPoint = function (_v0) {
	var circle = _v0.a;
	return circle.centerPoint;
};
var $ianmackenzie$elm_geometry$Direction3d$perpendicularTo = function (_v0) {
	var d = _v0.a;
	var absZ = $elm$core$Basics$abs(d.z);
	var absY = $elm$core$Basics$abs(d.y);
	var absX = $elm$core$Basics$abs(d.x);
	if (_Utils_cmp(absX, absY) < 1) {
		if (_Utils_cmp(absX, absZ) < 1) {
			var scale = $elm$core$Basics$sqrt((d.z * d.z) + (d.y * d.y));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: 0, y: (-d.z) / scale, z: d.y / scale});
		} else {
			var scale = $elm$core$Basics$sqrt((d.y * d.y) + (d.x * d.x));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: (-d.y) / scale, y: d.x / scale, z: 0});
		}
	} else {
		if (_Utils_cmp(absY, absZ) < 1) {
			var scale = $elm$core$Basics$sqrt((d.z * d.z) + (d.x * d.x));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: d.z / scale, y: 0, z: (-d.x) / scale});
		} else {
			var scale = $elm$core$Basics$sqrt((d.x * d.x) + (d.y * d.y));
			return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
				{x: (-d.y) / scale, y: d.x / scale, z: 0});
		}
	}
};
var $ianmackenzie$elm_geometry$Circle3d$radius = function (_v0) {
	var properties = _v0.a;
	return properties.radius;
};
var $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis = function (direction) {
	var xDirection = $ianmackenzie$elm_geometry$Direction3d$perpendicularTo(direction);
	var _v0 = xDirection;
	var dX = _v0.a;
	var _v1 = direction;
	var d = _v1.a;
	var yDirection = $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
		{x: (d.y * dX.z) - (d.z * dX.y), y: (d.z * dX.x) - (d.x * dX.z), z: (d.x * dX.y) - (d.y * dX.x)});
	return _Utils_Tuple2(xDirection, yDirection);
};
var $ianmackenzie$elm_geometry$Point3d$projectOntoAxis = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		var distance = (((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y), z: p0.z + (distance * d.z)});
	});
var $ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct = F2(
	function (_v0, _v1) {
		var d1 = _v0.a;
		var d2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: (d1.y * d2.z) - (d1.z * d2.y), y: (d1.z * d2.x) - (d1.x * d2.z), z: (d1.x * d2.y) - (d1.y * d2.x)});
	});
var $ianmackenzie$elm_geometry$Arc3d$sweptAround = F3(
	function (givenAxis, givenSweptAngle, givenStartPoint) {
		var computedCenterPoint = A2($ianmackenzie$elm_geometry$Point3d$projectOntoAxis, givenAxis, givenStartPoint);
		var yVector = A2($ianmackenzie$elm_geometry$Vector3d$from, givenStartPoint, computedCenterPoint);
		var axisDirection = $ianmackenzie$elm_geometry$Axis3d$direction(givenAxis);
		var _v0 = $ianmackenzie$elm_geometry$Vector3d$direction(yVector);
		if (_v0.$ === 'Just') {
			var computedYDirection = _v0.a;
			var computedXDirection = A2($ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct, computedYDirection, axisDirection);
			var computedRadius = $ianmackenzie$elm_geometry$Vector3d$length(yVector);
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
				{
					signedLength: A2($ianmackenzie$elm_geometry$Quantity$Extra$rTheta, computedRadius, givenSweptAngle),
					startPoint: givenStartPoint,
					sweptAngle: givenSweptAngle,
					xDirection: computedXDirection,
					yDirection: computedYDirection
				});
		} else {
			var _v1 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(axisDirection);
			var computedXDirection = _v1.a;
			var computedYDirection = _v1.b;
			return $ianmackenzie$elm_geometry$Geometry$Types$Arc3d(
				{signedLength: $ianmackenzie$elm_units$Quantity$zero, startPoint: givenStartPoint, sweptAngle: givenSweptAngle, xDirection: computedXDirection, yDirection: computedYDirection});
		}
	});
var $ianmackenzie$elm_units$Angle$turns = function (numTurns) {
	return $ianmackenzie$elm_units$Angle$radians((2 * $elm$core$Basics$pi) * numTurns);
};
var $ianmackenzie$elm_geometry$Circle3d$toArc = function (circle) {
	var radialDirection = $ianmackenzie$elm_geometry$Direction3d$perpendicularTo(
		$ianmackenzie$elm_geometry$Circle3d$axialDirection(circle));
	var startPoint = A3(
		$ianmackenzie$elm_geometry$Point3d$translateIn,
		radialDirection,
		$ianmackenzie$elm_geometry$Circle3d$radius(circle),
		$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle));
	return A3(
		$ianmackenzie$elm_geometry$Arc3d$sweptAround,
		$ianmackenzie$elm_geometry$Circle3d$axis(circle),
		$ianmackenzie$elm_units$Angle$turns(1),
		startPoint);
};
var $avh4$elm_color$Color$white = A4($avh4$elm_color$Color$RgbaSpace, 255 / 255, 255 / 255, 255 / 255, 1.0);
var $author$project$Tools$CurveFormer$showCircle = F2(
	function (options, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$white);
		var drawSegment = function (segment) {
			return A2($ianmackenzie$elm_3d_scene$Scene3d$lineSegment, material, segment);
		};
		var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
		var arc = $ianmackenzie$elm_geometry$Circle3d$toArc(circle);
		var segments = $ianmackenzie$elm_geometry$Polyline3d$segments(
			A2($ianmackenzie$elm_geometry$Arc3d$segments, 20, arc));
		return A2($elm$core$List$map, drawSegment, segments);
	});
var $avh4$elm_color$Color$lightYellow = A4($avh4$elm_color$Color$RgbaSpace, 255 / 255, 233 / 255, 79 / 255, 1.0);
var $author$project$Tools$CurveFormer$showDisc = F2(
	function (options, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$lightYellow);
		var drawSegment = function (segment) {
			return A2($ianmackenzie$elm_3d_scene$Scene3d$lineSegment, material, segment);
		};
		if (options.usePullRadius) {
			var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
			var direction = $ianmackenzie$elm_geometry$Circle3d$axialDirection(circle);
			var centre = $ianmackenzie$elm_geometry$Circle3d$centerPoint(circle);
			var outerCircle = A3($ianmackenzie$elm_geometry$Circle3d$withRadius, options.pullRadius, direction, centre);
			var arc = $ianmackenzie$elm_geometry$Circle3d$toArc(outerCircle);
			var segments = $ianmackenzie$elm_geometry$Polyline3d$segments(
				A2($ianmackenzie$elm_geometry$Arc3d$segments, 20, arc));
			return A2($elm$core$List$map, drawSegment, segments);
		} else {
			return _List_Nil;
		}
	});
var $author$project$Tools$CurveFormer$showToolTrackInteractions = F2(
	function (options, track) {
		return _Utils_ap(
			A2($author$project$Tools$CurveFormer$showCircle, options, track),
			_Utils_ap(
				A2($author$project$Tools$CurveFormer$showDisc, options, track),
				_Utils_ap(
					A3(
						$author$project$Tools$CurveFormer$highlightPoints,
						$avh4$elm_color$Color$white,
						$elm$core$Dict$keys(options.pointsWithinCircle),
						track),
					A3(
						$author$project$Tools$CurveFormer$highlightPoints,
						$avh4$elm_color$Color$blue,
						$elm$core$Dict$keys(options.pointsWithinDisc),
						track))));
	});
var $author$project$Tools$CurveFormer$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{colour: colour, points: newOptions.newTrackPoints, shape: $author$project$PreviewData$PreviewCircle, tag: 'formerOutcome'}),
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: _List_Nil,
					shape: $author$project$PreviewData$PreviewToolSupplied(
						A2($author$project$Tools$CurveFormer$showToolTrackInteractions, newOptions, track)),
					tag: 'formerTool'
				})
			]);
	});
var $author$project$Tools$CurveFormer$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$CurveFormer$previewActions, $author$project$Tools$CurveFormer$defaultOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('formerOutcome'),
						$author$project$Actions$HidePreview('formerTool')
					]));
		}
	});
var $author$project$UtilsForViews$fullDepthRenderingBoxSize = $ianmackenzie$elm_units$Length$kilometers(4);
var $ianmackenzie$elm_geometry$Point3d$coordinates = function (_v0) {
	var p = _v0.a;
	return _Utils_Tuple3(
		$ianmackenzie$elm_units$Quantity$Quantity(p.x),
		$ianmackenzie$elm_units$Quantity$Quantity(p.y),
		$ianmackenzie$elm_units$Quantity$Quantity(p.z));
};
var $ianmackenzie$elm_geometry$BoundingBox3d$withDimensions = F2(
	function (_v0, givenCenterPoint) {
		var givenLength = _v0.a;
		var givenWidth = _v0.b;
		var givenHeight = _v0.c;
		var halfWidth = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenWidth));
		var halfLength = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenLength));
		var halfHeight = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenHeight));
		var _v1 = $ianmackenzie$elm_geometry$Point3d$coordinates(givenCenterPoint);
		var x0 = _v1.a;
		var y0 = _v1.b;
		var z0 = _v1.c;
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$plus, halfLength, x0),
				maxY: A2($ianmackenzie$elm_units$Quantity$plus, halfWidth, y0),
				maxZ: A2($ianmackenzie$elm_units$Quantity$plus, halfHeight, z0),
				minX: A2($ianmackenzie$elm_units$Quantity$minus, halfLength, x0),
				minY: A2($ianmackenzie$elm_units$Quantity$minus, halfWidth, y0),
				minZ: A2($ianmackenzie$elm_units$Quantity$minus, halfHeight, z0)
			});
	});
var $author$project$Tools$DeletePoints$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var fullRenderingZone = A2(
				$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
				_Utils_Tuple3($author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize),
				$author$project$DomainModel$startPoint(
					A2($author$project$DomainModel$leafFromIndex, theTrack.currentPosition, theTrack.trackTree)).space);
			var foldFn = F2(
				function (road, accum) {
					return A2($elm$core$List$cons, road.startPoint, accum);
				});
			var depthFunction = function (road) {
				return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderingZone, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(10);
			};
			var _v1 = $author$project$TrackLoaded$getRangeFromMarkers(theTrack);
			var fromStart = _v1.a;
			var fromEnd = _v1.b;
			var distanceToPreview = A2($author$project$DomainModel$distanceFromIndex, fromStart, theTrack.trackTree);
			var previews = function () {
				var _v2 = theTrack.markerPosition;
				if (_v2.$ === 'Just') {
					return A2(
						$elm$core$List$drop,
						1,
						$elm$core$List$reverse(
							A7(
								$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
								fromStart,
								$author$project$DomainModel$skipCount(theTrack.trackTree) - fromEnd,
								depthFunction,
								0,
								theTrack.trackTree,
								foldFn,
								_List_Nil)));
				} else {
					return _List_fromArray(
						[
							A2($author$project$DomainModel$earthPointFromIndex, fromStart, theTrack.trackTree)
						]);
				}
			}();
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{
						singlePoint: _Utils_eq(theTrack.markerPosition, $elm$core$Maybe$Nothing)
					}),
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: A3($author$project$TrackLoaded$asPreviewPoints, theTrack, distanceToPreview, previews),
							shape: $author$project$PreviewData$PreviewCircle,
							tag: 'delete'
						})
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('delete')
					]));
		}
	});
var $author$project$TrackLoaded$getAsPreviewPoint = F2(
	function (tree, index) {
		return {
			earthPoint: A2($author$project$DomainModel$earthPointFromIndex, index, tree),
			gpx: A2($author$project$DomainModel$gpxPointFromIndex, index, tree)
		};
	});
var $author$project$TrackLoaded$buildPreview = F2(
	function (indices, tree) {
		return A2(
			$elm$core$List$map,
			$author$project$TrackLoaded$getAsPreviewPoint(tree),
			indices);
	});
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$Tools$DirectionChanges$actions = F3(
	function (options, previewColour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: function () {
						var _v0 = options.mode;
						if (_v0.$ === 'DirectionChangeAbrupt') {
							return A2(
								$author$project$TrackLoaded$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, options.singlePointBreaches),
								track.trackTree);
						} else {
							return A2(
								$author$project$TrackLoaded$buildPreview,
								A2($elm$core$List$concatMap, $elm$core$Tuple$first, options.bendBreaches),
								track.trackTree);
						}
					}(),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'kinks'
				})
			]);
	});
var $author$project$Tools$DirectionChanges$findBendsWithRadius = F2(
	function (tree, options) {
		var windowLength = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$inRadians(options.threshold),
			options.radius);
		var consumeLength = F2(
			function (_v0, roads) {
				consumeLength:
				while (true) {
					var runningLength = _v0.a;
					var retainedRoads = _v0.b;
					if (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, windowLength, runningLength)) {
						return $elm$core$List$reverse(retainedRoads);
					} else {
						if (!roads.b) {
							return $elm$core$List$reverse(retainedRoads);
						} else {
							var _v2 = roads.a;
							var n = _v2.a;
							var aRoad = _v2.b;
							var moreRoads = roads.b;
							var $temp$_v0 = _Utils_Tuple2(
								A2($ianmackenzie$elm_units$Quantity$plus, runningLength, aRoad.trueLength),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(n, aRoad),
									retainedRoads)),
								$temp$roads = moreRoads;
							_v0 = $temp$_v0;
							roads = $temp$roads;
							continue consumeLength;
						}
					}
				}
			});
		var runningDirectionChange = F2(
			function (road, _v8) {
				var newIndex = _v8.a;
				var window = _v8.b;
				var outputs = _v8.c;
				var radiansTurned = function (sections) {
					if (!sections.b) {
						return 0;
					} else {
						if (!sections.b.b) {
							return 0;
						} else {
							var _v5 = sections.a;
							var first = _v5.b;
							var _v6 = sections.b;
							var _v7 = _v6.a;
							var n = _v7.a;
							var second = _v7.b;
							var more = _v6.b;
							return radiansTurned(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(n, second),
									more)) + $ianmackenzie$elm_units$Angle$inRadians(
								A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, first.directionAtStart, second.directionAtStart));
						}
					}
				};
				var newWindow = A2(
					consumeLength,
					_Utils_Tuple2($ianmackenzie$elm_units$Quantity$zero, _List_Nil),
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(newIndex, road),
						window));
				var turnDuringWindow = radiansTurned(newWindow);
				return (_Utils_cmp(
					$elm$core$Basics$abs(turnDuringWindow),
					$ianmackenzie$elm_units$Angle$inRadians(options.threshold)) > -1) ? _Utils_Tuple3(
					newIndex + 1,
					_List_Nil,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								newIndex + 1,
								A2(
									$elm$core$List$cons,
									newIndex,
									A2($elm$core$List$map, $elm$core$Tuple$first, window))),
							A2($ianmackenzie$elm_units$Quantity$divideBy, turnDuringWindow, windowLength)),
						outputs)) : _Utils_Tuple3(newIndex + 1, newWindow, outputs);
			});
		var _v3 = A3(
			$author$project$DomainModel$foldOverRoute,
			runningDirectionChange,
			tree,
			_Utils_Tuple3(0, _List_Nil, _List_Nil));
		var bendStarts = _v3.c;
		return $elm$core$List$reverse(bendStarts);
	});
var $author$project$Tools$DirectionChanges$findDirectionChanges = F2(
	function (options, tree) {
		var helper = F3(
			function (skip, treeNode, accum) {
				if (treeNode.$ === 'Leaf') {
					return accum;
				} else {
					var node = treeNode.a;
					var thisNodeAngle = $ianmackenzie$elm_units$Quantity$abs(
						A2(
							$ianmackenzie$elm_geometry$Direction2d$angleFrom,
							$author$project$DomainModel$asRecord(node.left).directionAtEnd,
							$author$project$DomainModel$asRecord(node.right).directionAtStart));
					var withThisNodeIfNeeded = function (acc) {
						return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, options.threshold, thisNodeAngle) ? A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								skip + $author$project$DomainModel$skipCount(node.left),
								thisNodeAngle),
							acc) : acc;
					};
					return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, options.threshold, node.nodeContent.directionChangeMaximumAbs) ? withThisNodeIfNeeded(
						A3(
							helper,
							skip,
							node.left,
							A3(
								helper,
								skip + $author$project$DomainModel$skipCount(node.left),
								node.right,
								accum))) : accum;
				}
			});
		var _v1 = options.mode;
		if (_v1.$ === 'DirectionChangeAbrupt') {
			return _Utils_update(
				options,
				{
					currentPointBreach: 0,
					singlePointBreaches: A3(helper, 0, tree, _List_Nil)
				});
		} else {
			return _Utils_update(
				options,
				{
					bendBreaches: A2($author$project$Tools$DirectionChanges$findBendsWithRadius, tree, options),
					currentBendBreach: 0
				});
		}
	});
var $author$project$Tools$DirectionChanges$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				A3($author$project$Tools$DirectionChanges$actions, populatedOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('kinks')
					]));
		}
	});
var $author$project$Tools$Essentials$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{orange: theTrack.currentPosition, purple: theTrack.markerPosition}),
				_List_Nil);
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Tools$Flythrough$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			return _Utils_Tuple2(options, _List_Nil);
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{flythrough: $elm$core$Maybe$Nothing}),
				_List_fromArray(
					[$author$project$Actions$StopFlythroughTicks]));
		}
	});
var $author$project$Tools$GradientProblems$findAbruptDirectionChanges = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v2) {
				var index = _v2.a;
				var previousIfAny = _v2.b;
				var outputs = _v2.c;
				if (previousIfAny.$ === 'Nothing') {
					return _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						outputs);
				} else {
					var previousRoad = previousIfAny.a;
					var change = $elm$core$Basics$abs(road.gradientAtStart - previousRoad.gradientAtStart);
					return (_Utils_cmp(change, options.threshold) > 0) ? _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(index, change),
							outputs)) : _Utils_Tuple3(
						index + 1,
						$elm$core$Maybe$Just(road),
						outputs);
				}
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple3(0, $elm$core$Maybe$Nothing, _List_Nil));
		var breaches = _v0.c;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$GradientProblems$findAbruptDirectionChanges, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: A2(
								$author$project$TrackLoaded$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, populatedOptions.breaches),
								theTrack.trackTree),
							shape: $author$project$PreviewData$PreviewCircle,
							tag: 'ridge'
						})
					]));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{breaches: _List_Nil}),
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('ridge')
					]));
		}
	});
var $ianmackenzie$elm_geometry$Point2d$equalWithin = F3(
	function (_v0, _v1, _v2) {
		var eps = _v0.a;
		var p1 = _v1.a;
		var p2 = _v2.a;
		if (eps > 0) {
			var ny = (p2.y - p1.y) / eps;
			var nx = (p2.x - p1.x) / eps;
			return ((nx * nx) + (ny * ny)) <= 1;
		} else {
			if (!eps) {
				return _Utils_eq(p1.x, p2.x) && _Utils_eq(p1.y, p2.y);
			} else {
				return false;
			}
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$DomainModel$insertPointsIntoLeaf = F4(
	function (leafNumber, reference, newInternalPoints, tree) {
		var helper = F2(
			function (leafOffset, treeNode) {
				if (treeNode.$ === 'Leaf') {
					var leaf = treeNode.a;
					var _v1 = leaf.sourceData;
					var gpxStart = _v1.a;
					var gpxEnd = _v1.b;
					var _v2 = A2(
						$author$project$DomainModel$treeFromSourcesWithExistingReference,
						reference,
						A2(
							$elm$core$List$cons,
							gpxStart,
							_Utils_ap(
								newInternalPoints,
								_List_fromArray(
									[gpxEnd]))));
					if (_v2.$ === 'Just') {
						var newTree = _v2.a;
						return newTree;
					} else {
						return treeNode;
					}
				} else {
					var node = treeNode.a;
					return (_Utils_cmp(
						leafOffset,
						$author$project$DomainModel$skipCount(node.left)) < 0) ? A2(
						$author$project$DomainModel$joiningNode,
						A2(helper, leafOffset, node.left),
						node.right) : A2(
						$author$project$DomainModel$joiningNode,
						node.left,
						A2(
							helper,
							leafOffset - $author$project$DomainModel$skipCount(node.left),
							node.right));
				}
			});
		return A2(helper, leafNumber, tree);
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$intersects = F2(
	function (other, boundingBox) {
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox)) && (A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox)) && A2(
			$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(other),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox))));
	});
var $author$project$SpatialIndex$queryInternal = F4(
	function (current, queryArea, queryFilter, accumulator) {
		if (current.$ === 'Blank') {
			return accumulator;
		} else {
			var node = current.a;
			if (A2($ianmackenzie$elm_geometry$BoundingBox2d$intersects, node.box, queryArea)) {
				var fromThisNode = A2(
					$elm$core$List$filter,
					function (possible) {
						return A2($ianmackenzie$elm_geometry$BoundingBox2d$intersects, queryArea, possible.box) && queryFilter(possible.content);
					},
					node.contents);
				return A4(
					$author$project$SpatialIndex$queryInternal,
					node.sw,
					queryArea,
					queryFilter,
					A4(
						$author$project$SpatialIndex$queryInternal,
						node.se,
						queryArea,
						queryFilter,
						A4(
							$author$project$SpatialIndex$queryInternal,
							node.ne,
							queryArea,
							queryFilter,
							A4(
								$author$project$SpatialIndex$queryInternal,
								node.nw,
								queryArea,
								queryFilter,
								A2($elm$core$List$cons, fromThisNode, accumulator)))));
			} else {
				return accumulator;
			}
		}
	});
var $author$project$SpatialIndex$query = F2(
	function (current, queryArea) {
		return $elm$core$List$concat(
			A4(
				$author$project$SpatialIndex$queryInternal,
				current,
				queryArea,
				$elm$core$Basics$always(true),
				_List_Nil));
	});
var $ianmackenzie$elm_geometry$Point3d$signedDistanceAlong = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z));
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$singleton = function (point) {
	return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
		{
			maxX: $ianmackenzie$elm_geometry$Point2d$xCoordinate(point),
			maxY: $ianmackenzie$elm_geometry$Point2d$yCoordinate(point),
			minX: $ianmackenzie$elm_geometry$Point2d$xCoordinate(point),
			minY: $ianmackenzie$elm_geometry$Point2d$yCoordinate(point)
		});
};
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
	});
var $author$project$DomainModel$updatePointByIndexInSitu = F4(
	function (index, newGPX, referencePoint, tree) {
		if ((index < 0) || (_Utils_cmp(
			index,
			$author$project$DomainModel$skipCount(tree)) > 0)) {
			return tree;
		} else {
			if (tree.$ === 'Leaf') {
				var leaf = tree.a;
				return (!index) ? $author$project$DomainModel$Leaf(
					A3($author$project$DomainModel$makeRoadSection, referencePoint, newGPX, leaf.sourceData.b)) : $author$project$DomainModel$Leaf(
					A3($author$project$DomainModel$makeRoadSection, referencePoint, leaf.sourceData.a, newGPX));
			} else {
				var node = tree.a;
				return A2(
					$author$project$DomainModel$joiningNode,
					A4($author$project$DomainModel$updatePointByIndexInSitu, index, newGPX, referencePoint, node.left),
					A4(
						$author$project$DomainModel$updatePointByIndexInSitu,
						index - $author$project$DomainModel$skipCount(node.left),
						newGPX,
						referencePoint,
						node.right));
			}
		}
	});
var $ianmackenzie$elm_geometry$Axis3d$z = A2($ianmackenzie$elm_geometry$Axis3d$through, $ianmackenzie$elm_geometry$Point3d$origin, $ianmackenzie$elm_geometry$Direction3d$z);
var $author$project$Tools$Graph$identifyPointsToBeMerged = F2(
	function (tolerance, track) {
		var insertPointsInLeaf = F3(
			function (leafNumber, newPoints, tree) {
				var asGPX = A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.earthPoint;
						},
						$author$project$DomainModel$gpxFromPointWithReference(track.referenceLonLat)),
					newPoints);
				return A4($author$project$DomainModel$insertPointsIntoLeaf, leafNumber, track.referenceLonLat, asGPX, tree);
			});
		var indexPoint = F2(
			function (leaf, _v17) {
				var pointNumber = _v17.a;
				var indexBuild = _v17.b;
				return _Utils_Tuple2(
					pointNumber + 1,
					A2(
						$author$project$SpatialIndex$add,
						{
							box: $ianmackenzie$elm_geometry$BoundingBox2d$singleton(
								A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, leaf.endPoint.space)),
							content: {pointIndex: pointNumber}
						},
						indexBuild));
			});
		var addTolerance = function (box) {
			return A2($ianmackenzie$elm_geometry$BoundingBox2d$expandBy, tolerance, box);
		};
		var growBox = addTolerance(
			$author$project$UtilsForViews$flatBox(
				$author$project$DomainModel$boundingBox(track.trackTree)));
		var emptyPointIndex = A2(
			$author$project$SpatialIndex$empty,
			growBox,
			$ianmackenzie$elm_units$Length$meters(100.0));
		var pointWithTolerance = function (pt) {
			return addTolerance(
				$ianmackenzie$elm_geometry$BoundingBox2d$singleton(
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, pt)));
		};
		var findNearbyLeaves = function (pointNumber) {
			var pt = A2($author$project$DomainModel$earthPointFromIndex, pointNumber, track.trackTree);
			var results = $elm_community$list_extra$List$Extra$unique(
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.content;
						},
						function ($) {
							return $.leafIndex;
						}),
					A2(
						$author$project$SpatialIndex$query,
						track.leafIndex,
						pointWithTolerance(pt.space))));
			var thisPoint2d = A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, pt.space);
			var isThisLeafClose = function (leafNumber) {
				var leaf = $author$project$DomainModel$asRecord(
					A2($author$project$DomainModel$leafFromIndex, leafNumber, track.trackTree));
				var isNotConnected = (!_Utils_eq(leafNumber, pointNumber)) && (!_Utils_eq(leafNumber + 1, pointNumber));
				var axis3d = A2(
					$elm$core$Maybe$withDefault,
					$ianmackenzie$elm_geometry$Axis3d$z,
					A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, leaf.startPoint.space, leaf.endPoint.space));
				var axis2d = A2(
					$ianmackenzie$elm_geometry$Axis2d$through,
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, leaf.startPoint.space),
					leaf.directionAtStart);
				var _v16 = _Utils_Tuple3(
					A2($ianmackenzie$elm_geometry$Point3d$signedDistanceAlong, axis3d, pt.space),
					$ianmackenzie$elm_units$Quantity$abs(
						A2($ianmackenzie$elm_geometry$Point2d$signedDistanceFrom, axis2d, thisPoint2d)),
					A2($ianmackenzie$elm_geometry$Point3d$projectOntoAxis, axis3d, pt.space));
				var along = _v16.a;
				var from = _v16.b;
				var foot = _v16.c;
				var isAfterStart = $ianmackenzie$elm_units$Quantity$greaterThanZero(along);
				var isBeforeEnd = A2(
					$ianmackenzie$elm_units$Quantity$lessThan,
					$author$project$DomainModel$trueLength(
						$author$project$DomainModel$Leaf(leaf)),
					along);
				var isShortPerp = A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, tolerance, from);
				return (isNotConnected && (isShortPerp && (isAfterStart && isBeforeEnd))) ? $elm$core$Maybe$Just(
					{
						distanceAlong: along,
						earthPoint: $author$project$DomainModel$withoutTime(foot),
						leafNumber: leafNumber,
						sourcePointNumber: pointNumber
					}) : $elm$core$Maybe$Nothing;
			};
			return A2($elm$core$List$filterMap, isThisLeafClose, results);
		};
		var findNearbyLeavesFoldFn = F2(
			function (road, _v15) {
				var leafNumber = _v15.a;
				var outputs = _v15.b;
				return _Utils_Tuple2(
					leafNumber + 1,
					function () {
						var _v14 = findNearbyLeaves(leafNumber + 1);
						if (!_v14.b) {
							return outputs;
						} else {
							var nearby = _v14;
							return _Utils_ap(nearby, outputs);
						}
					}());
			});
		var perpendicularFeetGroupedByLeaf = function () {
			var sortEachLeafEntries = F2(
				function (_v13, unsorted) {
					return A2(
						$elm$core$List$sortBy,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.distanceAlong;
							},
							$ianmackenzie$elm_units$Length$inMeters),
						A2(
							$elm_community$list_extra$List$Extra$uniqueBy,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.distanceAlong;
								},
								$ianmackenzie$elm_units$Length$inMeters),
							unsorted));
				});
			var addToLeafDict = F2(
				function (newEntry, dict) {
					var _v12 = A2($elm$core$Dict$get, newEntry.leafNumber, dict);
					if (_v12.$ === 'Just') {
						var prevEntries = _v12.a;
						return A3(
							$elm$core$Dict$insert,
							newEntry.leafNumber,
							A2($elm$core$List$cons, newEntry, prevEntries),
							dict);
					} else {
						return A3(
							$elm$core$Dict$insert,
							newEntry.leafNumber,
							_List_fromArray(
								[newEntry]),
							dict);
					}
				});
			var _v11 = A3(
				$author$project$DomainModel$foldOverRoute,
				findNearbyLeavesFoldFn,
				track.trackTree,
				_Utils_Tuple2(
					0,
					findNearbyLeaves(0)));
			var findAllNearbyLeaves = _v11.b;
			var leafDictUnsorted = A3($elm$core$List$foldl, addToLeafDict, $elm$core$Dict$empty, findAllNearbyLeaves);
			return A2($elm$core$Dict$map, sortEachLeafEntries, leafDictUnsorted);
		}();
		var treeWithAddedPoints = A3($elm$core$Dict$foldr, insertPointsInLeaf, track.trackTree, perpendicularFeetGroupedByLeaf);
		var _v0 = A3(
			$author$project$DomainModel$foldOverRoute,
			indexPoint,
			treeWithAddedPoints,
			_Utils_Tuple2(
				1,
				A2(
					$author$project$SpatialIndex$add,
					{
						box: pointWithTolerance(
							A2($author$project$DomainModel$earthPointFromIndex, 0, treeWithAddedPoints).space),
						content: {pointIndex: 0}
					},
					emptyPointIndex)));
		var pointIndex = _v0.b;
		var pointsNearPoint = F2(
			function (pointNumber, tree) {
				var pt = A2($author$project$DomainModel$earthPointFromIndex, pointNumber, tree);
				var results = A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.content;
						},
						function ($) {
							return $.pointIndex;
						}),
					A2(
						$author$project$SpatialIndex$query,
						pointIndex,
						pointWithTolerance(pt.space)));
				var thisPoint2d = A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, pt.space);
				return A2(
					$elm$core$List$filter,
					function (ptidx) {
						return A3(
							$ianmackenzie$elm_geometry$Point2d$equalWithin,
							tolerance,
							thisPoint2d,
							A2(
								$ianmackenzie$elm_geometry$Point3d$projectInto,
								$ianmackenzie$elm_geometry$SketchPlane3d$xy,
								A2($author$project$DomainModel$earthPointFromIndex, ptidx, tree).space));
					},
					results);
			});
		var pointsNearPointFoldWrapper = F2(
			function (road, _v10) {
				var leafNumber = _v10.a;
				var collection = _v10.b;
				var _v9 = A2(pointsNearPoint, leafNumber + 1, treeWithAddedPoints);
				if (!_v9.b) {
					return _Utils_Tuple2(leafNumber + 1, collection);
				} else {
					var notEmpty = _v9;
					return _Utils_Tuple2(
						leafNumber + 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(leafNumber + 1, notEmpty),
							collection));
				}
			});
		var _v1 = A3(
			$author$project$DomainModel$foldOverRoute,
			pointsNearPointFoldWrapper,
			treeWithAddedPoints,
			_Utils_Tuple2(
				0,
				function () {
					var _v2 = A2(pointsNearPoint, 0, treeWithAddedPoints);
					if (!_v2.b) {
						return _List_Nil;
					} else {
						var notEmpty = _v2;
						return _List_fromArray(
							[
								_Utils_Tuple2(0, notEmpty)
							]);
					}
				}()));
		var nearbyPointsForEachPoint = _v1.b;
		var groupsOfNearbyPoints = function () {
			var retainUnclaimedGroupMembers = F2(
				function (group, _v8) {
					var claimed = _v8.a;
					var retained = _v8.b;
					var remaining = A2(
						$elm$core$List$filter,
						function (i) {
							return !A2($elm$core$Set$member, i, claimed);
						},
						group);
					if (remaining.b && remaining.b.b) {
						var _v7 = remaining.b;
						return _Utils_Tuple2(
							A2(
								$elm$core$Set$union,
								claimed,
								$elm$core$Set$fromList(remaining)),
							A2($elm$core$List$cons, remaining, retained));
					} else {
						return _Utils_Tuple2(claimed, retained);
					}
				});
			var groupsInDescendingSizeOrder = A2(
				$elm$core$List$sortBy,
				A2($elm$core$Basics$composeR, $elm$core$List$length, $elm$core$Basics$negate),
				A2(
					$elm$core$List$map,
					function (_v5) {
						var home = _v5.a;
						var others = _v5.b;
						return A2($elm$core$List$cons, home, others);
					},
					nearbyPointsForEachPoint));
			var _v4 = A3(
				$elm$core$List$foldl,
				retainUnclaimedGroupMembers,
				_Utils_Tuple2($elm$core$Set$empty, _List_Nil),
				groupsInDescendingSizeOrder);
			var groupsWithPriorClaimsRemoved = _v4.b;
			return groupsWithPriorClaimsRemoved;
		}();
		var clustersWithCentroids = function () {
			var makeProperCluster = function (pointNumbers) {
				return {
					centroid: function () {
						var _v3 = A2(
							$elm$core$List$map,
							function (pt) {
								return A2($author$project$DomainModel$earthPointFromIndex, pt, treeWithAddedPoints);
							},
							pointNumbers);
						if (!_v3.b) {
							return $ianmackenzie$elm_geometry$Point3d$origin;
						} else {
							var pt1 = _v3.a;
							var more = _v3.b;
							return A2(
								$ianmackenzie$elm_geometry$Point3d$centroid,
								pt1.space,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.space;
									},
									more));
						}
					}(),
					pointsToAdjust: pointNumbers
				};
			};
			return A2($elm$core$List$map, makeProperCluster, groupsOfNearbyPoints);
		}();
		var treeWithCentroidsApplied = function () {
			var movePoint = F3(
				function (centroid, pointNumber, tree) {
					return A4($author$project$DomainModel$updatePointByIndexInSitu, pointNumber, centroid, track.referenceLonLat, tree);
				});
			var mapCluster = F2(
				function (cluster, outputTree) {
					var asGPS = A2(
						$author$project$DomainModel$gpxFromPointWithReference,
						track.referenceLonLat,
						$author$project$DomainModel$withoutTime(cluster.centroid));
					return A3(
						$elm$core$List$foldl,
						movePoint(asGPS),
						outputTree,
						cluster.pointsToAdjust);
				});
			return A3($elm$core$List$foldl, mapCluster, treeWithAddedPoints, clustersWithCentroids);
		}();
		return _Utils_Tuple2(clustersWithCentroids, treeWithCentroidsApplied);
	});
var $author$project$Tools$Graph$showNewPoints = F2(
	function (pointInfo, track) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$white);
		var locations = A2(
			$elm$core$List$map,
			function ($) {
				return $.centroid;
			},
			pointInfo);
		var highlightPoint = function (point) {
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(3)
				},
				material,
				point);
		};
		return A2($elm$core$List$map, highlightPoint, locations);
	});
var $smucode$elm_flat_colors$FlatColors$AmericanPalette$sourLemon = A3($mdgriffith$elm_ui$Element$rgb255, 255, 234, 167);
var $author$project$Tools$Graph$makePreview = F2(
	function (options, track) {
		return $author$project$Actions$ShowPreview(
			{
				colour: $smucode$elm_flat_colors$FlatColors$AmericanPalette$sourLemon,
				points: _List_Nil,
				shape: $author$project$PreviewData$PreviewToolSupplied(
					A2($author$project$Tools$Graph$showNewPoints, options.clustersForPreview, track)),
				tag: 'graph'
			});
	});
var $author$project$Tools$Graph$lookForClusters = F3(
	function (options, tolerance, track) {
		var _v0 = A2($author$project$Tools$Graph$identifyPointsToBeMerged, tolerance, track);
		var clusters = _v0.a;
		var suggestedNewTree = _v0.b;
		var suggestedNewTrack = _Utils_update(
			track,
			{
				trackTree: A2(
					$elm$core$Maybe$withDefault,
					suggestedNewTree,
					A2(
						$author$project$DomainModel$treeFromSourcesWithExistingReference,
						track.referenceLonLat,
						$author$project$TrackLoaded$removeAdjacentDuplicates(
							$author$project$DomainModel$getAllGPXPointsInNaturalOrder(suggestedNewTree))))
			});
		var newOptions = _Utils_update(
			options,
			{
				clustersForPreview: clusters,
				matchingTolerance: tolerance,
				suggestedNewGraph: $elm$core$Maybe$Just(
					$author$project$Tools$Graph$buildGraph(suggestedNewTrack)),
				suggestedNewTree: $elm$core$Maybe$Just(suggestedNewTree)
			});
		return _Utils_Tuple2(
			newOptions,
			_List_fromArray(
				[
					A2($author$project$Tools$Graph$makePreview, newOptions, track)
				]));
	});
var $author$project$Tools$Graph$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var graph = options.graph;
			var lastTrack = A2($elm$core$Dict$get, options.editingTrack, graph.edges);
			var newGraph = _Utils_update(
				graph,
				{
					edges: function () {
						if (lastTrack.$ === 'Just') {
							var edgeInfo = lastTrack.a;
							return A3(
								$elm$core$Dict$insert,
								options.editingTrack,
								_Utils_update(
									edgeInfo,
									{track: theTrack}),
								graph.edges);
						} else {
							return graph.edges;
						}
					}()
				});
			var newOptions = _Utils_update(
				options,
				{graph: newGraph});
			return (!options.analyzed) ? A3($author$project$Tools$Graph$lookForClusters, newOptions, newOptions.matchingTolerance, theTrack) : _Utils_Tuple2(
				newOptions,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('graph')
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('graph')
					]));
		}
	});
var $author$project$Tools$InterpolateOptions$ExtentIsTrack = {$: 'ExtentIsTrack'};
var $author$project$Tools$Interpolate$actions = F3(
	function (newOptions, previewColour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A3($author$project$Tools$Interpolate$computeNewPoints, true, newOptions, track),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'interpolate'
				})
			]);
	});
var $author$project$Tools$Interpolate$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = _Utils_update(
				options,
				{
					extent: function () {
						var _v1 = theTrack.markerPosition;
						if (_v1.$ === 'Just') {
							return $author$project$Tools$InterpolateOptions$ExtentIsRange;
						} else {
							return $author$project$Tools$InterpolateOptions$ExtentIsTrack;
						}
					}()
				});
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$Interpolate$actions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('interpolate')
					]));
		}
	});
var $author$project$RoadIndex$ContraDirection = {$: 'ContraDirection'};
var $author$project$RoadIndex$Crossing = function (a) {
	return {$: 'Crossing', a: a};
};
var $author$project$RoadIndex$SameDirection = {$: 'SameDirection'};
var $ianmackenzie$elm_units_interval$Quantity$Interval$contains = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var _v2 = _v1.a;
		var a = _v2.a.a;
		var b = _v2.b.a;
		return (_Utils_cmp(a, x) < 1) && (_Utils_cmp(x, b) < 1);
	});
var $ianmackenzie$elm_geometry$Vector2d$cross = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((v1.x * v2.y) - (v1.y * v2.x));
	});
var $ianmackenzie$elm_geometry$Vector2d$dot = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((v1.x * v2.x) + (v1.y * v2.y));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$interpolate = F2(
	function (lineSegment, t) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
		var start = _v0.a;
		var end = _v0.b;
		return A3($ianmackenzie$elm_geometry$Point2d$interpolateFrom, start, end, t);
	});
var $ianmackenzie$elm_geometry$LineSegment2d$intersectionPoint = F2(
	function (lineSegment1, lineSegment2) {
		var s = $ianmackenzie$elm_geometry$LineSegment2d$vector(lineSegment2);
		var r = $ianmackenzie$elm_geometry$LineSegment2d$vector(lineSegment1);
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment2);
		var q = _v0.a;
		var q_ = _v0.b;
		var _v1 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment1);
		var p = _v1.a;
		var p_ = _v1.b;
		var pq = A2($ianmackenzie$elm_geometry$Vector2d$from, p, q);
		var pqXr = A2($ianmackenzie$elm_geometry$Vector2d$cross, r, pq);
		var pqXs = A2($ianmackenzie$elm_geometry$Vector2d$cross, s, pq);
		var pq_ = A2($ianmackenzie$elm_geometry$Vector2d$from, p, q_);
		var rXpq_ = A2($ianmackenzie$elm_geometry$Vector2d$cross, pq_, r);
		var uDenominator = A2($ianmackenzie$elm_units$Quantity$plus, rXpq_, pqXr);
		var qp_ = A2($ianmackenzie$elm_geometry$Vector2d$from, q, p_);
		var sXqp_ = A2($ianmackenzie$elm_geometry$Vector2d$cross, qp_, s);
		var tDenominator = A2($ianmackenzie$elm_units$Quantity$minus, sXqp_, pqXs);
		if (_Utils_eq(tDenominator, $ianmackenzie$elm_units$Quantity$zero) || _Utils_eq(uDenominator, $ianmackenzie$elm_units$Quantity$zero)) {
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThan,
				$ianmackenzie$elm_units$Quantity$zero,
				A2($ianmackenzie$elm_geometry$Vector2d$dot, s, r)) ? (_Utils_eq(p_, q_) ? $elm$core$Maybe$Just(p_) : (_Utils_eq(p, q) ? $elm$core$Maybe$Just(p) : $elm$core$Maybe$Nothing)) : (_Utils_eq(p_, q) ? $elm$core$Maybe$Just(p_) : (_Utils_eq(p, q_) ? $elm$core$Maybe$Just(p) : $elm$core$Maybe$Nothing));
		} else {
			var u = A2($ianmackenzie$elm_units$Quantity$ratio, pqXr, uDenominator);
			var t = A2($ianmackenzie$elm_units$Quantity$ratio, pqXs, tDenominator);
			if (((0 <= t) && (t <= 1)) && ((0 <= u) && (u <= 1))) {
				var intersection = (_Utils_cmp(
					A2($elm$core$Basics$min, t, 1 - t),
					A2($elm$core$Basics$min, u, 1 - u)) < 1) ? A2($ianmackenzie$elm_geometry$LineSegment2d$interpolate, lineSegment1, t) : A2($ianmackenzie$elm_geometry$LineSegment2d$interpolate, lineSegment2, u);
				return $elm$core$Maybe$Just(intersection);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $ianmackenzie$elm_geometry$Point2d$signedDistanceAlong = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$signedDistanceFrom = F2(
	function (axis, _v0) {
		var _v1 = _v0.a;
		var p1 = _v1.a;
		var p2 = _v1.b;
		return A2(
			$ianmackenzie$elm_units_interval$Quantity$Interval$from,
			A2($ianmackenzie$elm_geometry$Point2d$signedDistanceFrom, axis, p1),
			A2($ianmackenzie$elm_geometry$Point2d$signedDistanceFrom, axis, p2));
	});
var $author$project$RoadIndex$checkLeafForIntersections = F2(
	function (myRoad, _v0) {
		var myLeafNumber = _v0.a;
		var index = _v0.b;
		var intersects = _v0.c;
		var thisSegment = A2(
			$ianmackenzie$elm_geometry$LineSegment3d$projectInto,
			$ianmackenzie$elm_geometry$SketchPlane3d$xy,
			A2($ianmackenzie$elm_geometry$LineSegment3d$from, myRoad.startPoint.space, myRoad.endPoint.space));
		var thisAxis = A2(
			$ianmackenzie$elm_geometry$Axis2d$through,
			A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, myRoad.startPoint.space),
			myRoad.directionAtStart);
		var roadHasOverlap = function (_v5) {
			var otherIndex = _v5.a;
			var otherRoad = _v5.b;
			var notAdjacent = $elm$core$Basics$abs(myLeafNumber - otherIndex) > 1;
			if (notAdjacent) {
				var otherSegment = A2(
					$ianmackenzie$elm_geometry$LineSegment3d$projectInto,
					$ianmackenzie$elm_geometry$SketchPlane3d$xy,
					A2($ianmackenzie$elm_geometry$LineSegment3d$from, otherRoad.startPoint.space, otherRoad.endPoint.space));
				var intersectPoint = A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionPoint, thisSegment, otherSegment);
				var axisSeparation = A2($ianmackenzie$elm_geometry$LineSegment2d$signedDistanceFrom, thisAxis, otherSegment);
				var proximal = A2($ianmackenzie$elm_units_interval$Quantity$Interval$contains, $ianmackenzie$elm_units$Quantity$zero, axisSeparation);
				var axisIntersection = A2($ianmackenzie$elm_geometry$LineSegment2d$intersectionWithAxis, thisAxis, otherSegment);
				var parallelAndClose = proximal && _Utils_eq(axisIntersection, $elm$core$Maybe$Nothing);
				var _v1 = _Utils_Tuple2(
					A2(
						$ianmackenzie$elm_geometry$Point2d$signedDistanceAlong,
						thisAxis,
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, otherRoad.startPoint.space)),
					A2(
						$ianmackenzie$elm_geometry$Point2d$signedDistanceAlong,
						thisAxis,
						A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, otherRoad.endPoint.space)));
				var startAlongAxis = _v1.a;
				var sameDirection = A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, startAlongAxis);
				var _v2 = _Utils_Tuple3(intersectPoint, parallelAndClose, sameDirection);
				if (_v2.a.$ === 'Just') {
					var pt = _v2.a.a;
					return $elm$core$Maybe$Just(
						{
							category: $author$project$RoadIndex$Crossing(pt),
							otherSegment: otherIndex,
							thisSegment: myLeafNumber
						});
				} else {
					if (_v2.b) {
						if (_v2.c) {
							var _v3 = _v2.a;
							return $elm$core$Maybe$Just(
								{category: $author$project$RoadIndex$SameDirection, otherSegment: otherIndex, thisSegment: myLeafNumber});
						} else {
							var _v4 = _v2.a;
							return $elm$core$Maybe$Just(
								{category: $author$project$RoadIndex$ContraDirection, otherSegment: otherIndex, thisSegment: myLeafNumber});
						}
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var prepContent = {
			box: $author$project$UtilsForViews$flatBox(myRoad.boundingBox),
			content: _Utils_Tuple2(myLeafNumber, myRoad)
		};
		var candidates = A2(
			$elm$core$List$map,
			function ($) {
				return $.content;
			},
			A2($author$project$SpatialIndex$query, index, prepContent.box));
		return _Utils_Tuple3(
			myLeafNumber + 1,
			A2($author$project$SpatialIndex$add, prepContent, index),
			_Utils_ap(
				A2($elm$core$List$filterMap, roadHasOverlap, candidates),
				intersects));
	});
var $author$project$RoadIndex$findFeatures = function (treeNode) {
	var planarBox = $author$project$UtilsForViews$flatBox(
		$author$project$DomainModel$boundingBox(treeNode));
	var _v0 = A3(
		$author$project$DomainModel$foldOverRoute,
		$author$project$RoadIndex$checkLeafForIntersections,
		treeNode,
		_Utils_Tuple3(
			0,
			A2(
				$author$project$SpatialIndex$empty,
				planarBox,
				$ianmackenzie$elm_units$Length$meters(5.0)),
			_List_Nil));
	var intersections = _v0.c;
	return $elm$core$List$reverse(intersections);
};
var $author$project$Tools$Intersections$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = _Utils_update(
				options,
				{
					features: $author$project$RoadIndex$findFeatures(theTrack.trackTree)
				});
			return _Utils_Tuple2(
				newOptions,
				_List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: A2(
								$author$project$TrackLoaded$buildPreview,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.thisSegment;
									},
									newOptions.features),
								theTrack.trackTree),
							shape: $author$project$PreviewData$PreviewCircle,
							tag: 'features'
						})
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('features')
					]));
		}
	});
var $author$project$Actions$NoAction = {$: 'NoAction'};
var $author$project$PreviewData$PreviewLine = {$: 'PreviewLine'};
var $author$project$Tools$MoveAndStretch$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{colour: colour, points: newOptions.preview, shape: $author$project$PreviewData$PreviewLine, tag: 'stretch'}),
				function () {
				var _v0 = newOptions.mode;
				if (_v0.$ === 'Stretch') {
					var mark = _v0.a;
					return $author$project$Actions$ShowPreview(
						{
							colour: colour,
							points: _List_Nil,
							shape: $author$project$PreviewData$PreviewToolSupplied(
								A3(
									$author$project$Tools$CurveFormer$highlightPoints,
									$avh4$elm_color$Color$white,
									_List_fromArray(
										[mark]),
									track)),
							tag: 'stretchMark'
						});
				} else {
					return $author$project$Actions$NoAction;
				}
			}()
			]);
	});
var $author$project$Tools$MoveAndStretch$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$MoveAndStretch$previewActions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('stretch'),
						$author$project$Actions$HidePreview('stretchMark')
					]));
		}
	});
var $author$project$Tools$MoveScaleRotate$actions = F3(
	function (options, previewColour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: previewColour,
					points: A2($author$project$Tools$MoveScaleRotate$rotateAndScale, options, track),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'affine'
				})
			]);
	});
var $author$project$Tools$MoveScaleRotate$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newSettings = _Utils_update(
				$author$project$Tools$MoveScaleRotate$defaultOptions,
				{
					desiredTrackLength: $author$project$DomainModel$trueLength(theTrack.trackTree)
				});
			return _Utils_Tuple2(
				newSettings,
				A3($author$project$Tools$MoveScaleRotate$actions, newSettings, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('affine')
					]));
		}
	});
var $author$project$Tools$NamedSegment$exclusionZones = function (track) {
	var trackLength = $author$project$DomainModel$trueLength(track.trackTree);
	var fromStart = A2(
		$elm$core$List$range,
		0,
		A2(
			$author$project$DomainModel$indexFromDistanceRoundedDown,
			$ianmackenzie$elm_units$Length$meters(110),
			track.trackTree));
	var fromEnd = A2(
		$elm$core$List$range,
		A2(
			$author$project$DomainModel$indexFromDistanceRoundedUp,
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				$ianmackenzie$elm_units$Length$meters(190),
				trackLength),
			track.trackTree),
		$author$project$DomainModel$skipCount(track.trackTree));
	return $author$project$Actions$ShowPreview(
		{
			colour: $smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds,
			points: A2(
				$author$project$TrackLoaded$buildPreview,
				_Utils_ap(fromStart, fromEnd),
				track.trackTree),
			shape: $author$project$PreviewData$PreviewCircle,
			tag: 'deadzones'
		});
};
var $author$project$Tools$NamedSegment$makePreview = F3(
	function (colour, options, track) {
		var getStartIndex = function (segment) {
			return A2($author$project$DomainModel$indexFromDistanceRoundedUp, segment.startDistance, track.trackTree);
		};
		var getEndIndex = function (segment) {
			return A2($author$project$DomainModel$indexFromDistanceRoundedDown, segment.endDistance, track.trackTree);
		};
		var segmentIndices = function (segment) {
			return A2(
				$elm$core$List$range,
				getStartIndex(segment),
				getEndIndex(segment));
		};
		var previewPoints = A2(
			$author$project$TrackLoaded$buildPreview,
			A2($elm$core$List$concatMap, segmentIndices, options.namedSegments),
			track.trackTree);
		return $author$project$Actions$ShowPreview(
			{colour: colour, points: previewPoints, shape: $author$project$PreviewData$PreviewCircle, tag: 'segments'});
	});
var $author$project$Tools$NamedSegment$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Tools$NamedSegment$exclusionZones(theTrack),
						A3($author$project$Tools$NamedSegment$makePreview, colour, options, theTrack)
					]));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('segments'),
						$author$project$Actions$HidePreview('deadzones'),
						$author$project$Actions$HidePreview('segmentprofile')
					]));
		}
	});
var $author$project$Tools$Nudge$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2($author$project$Tools$Nudge$computeNudgedPoints, newOptions, track).b,
					shape: $author$project$PreviewData$PreviewLine,
					tag: 'nudge'
				})
			]);
	});
var $author$project$Tools$Nudge$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			return _Utils_Tuple2(
				options,
				A3($author$project$Tools$Nudge$previewActions, options, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('nudge')
					]));
		}
	});
var $author$project$TrackLoaded$previewFromTree = F4(
	function (tree, start, end, depthLimit) {
		var internalFoldFn = F2(
			function (road, _v1) {
				var descendingDistance = _v1.a;
				var accum = _v1.b;
				return _Utils_Tuple2(
					A2($ianmackenzie$elm_units$Quantity$minus, road.trueLength, descendingDistance),
					A2(
						$elm$core$List$cons,
						{earthPoint: road.endPoint, gpx: road.sourceData.b},
						accum));
			});
		var endDistance = A2($author$project$DomainModel$distanceFromIndex, end, tree);
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			start,
			end,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(depthLimit)),
			0,
			tree,
			internalFoldFn,
			_Utils_Tuple2(endDistance, _List_Nil));
		var endPoints = _v0.b;
		return A2(
			$elm$core$List$cons,
			A2($author$project$TrackLoaded$getAsPreviewPoint, tree, start),
			endPoints);
	});
var $author$project$Tools$ProfileSmooth$previewActions = F3(
	function (newOptions, previewColour, track) {
		var _v0 = function () {
			var _v1 = track.markerPosition;
			if (_v1.$ === 'Just') {
				return $author$project$TrackLoaded$getRangeFromMarkers(track);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		}();
		var start = _v0.a;
		var end = _v0.b;
		var _v2 = newOptions.previewData;
		if (_v2.$ === 'Just') {
			var previewTree = _v2.a;
			var normalPreview = A4(
				$author$project$TrackLoaded$previewFromTree,
				previewTree,
				start,
				$author$project$DomainModel$skipCount(previewTree) - end,
				10);
			return _List_fromArray(
				[
					$author$project$Actions$ShowPreview(
					{colour: previewColour, points: normalPreview, shape: $author$project$PreviewData$PreviewCircle, tag: 'limit'}),
					$author$project$Actions$ShowPreview(
					{
						colour: previewColour,
						points: _List_Nil,
						shape: $author$project$PreviewData$PreviewProfile(previewTree),
						tag: 'limitProfile'
					})
				]);
		} else {
			return _List_fromArray(
				[
					$author$project$Actions$HidePreview('limit'),
					$author$project$Actions$HidePreview('limitprofile')
				]);
		}
	});
var $author$project$Tools$ProfileSmooth$previewWithNewOptions = F2(
	function (track, options) {
		var adjustedPoints = A2($author$project$Tools$ProfileSmooth$computeNewPoints, options, track);
		return _Utils_update(
			options,
			{
				previewData: A2(
					$author$project$DomainModel$treeFromSourcesWithExistingReference,
					A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree),
					A2($elm$core$List$map, $elm$core$Tuple$second, adjustedPoints))
			});
	});
var $author$project$Tools$ProfileSmooth$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = A2($author$project$Tools$ProfileSmooth$previewWithNewOptions, theTrack, options);
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('limit'),
						$author$project$Actions$HidePreview('limitProfile')
					]));
		}
	});
var $author$project$Tools$Simplify$actions = F3(
	function (colour, options, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2(
						$author$project$TrackLoaded$buildPreview,
						$elm$core$Dict$keys(options.pointsToRemove),
						track.trackTree),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'simplify'
				})
			]);
	});
var $author$project$Tools$Simplify$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var populatedOptions = A2($author$project$Tools$Simplify$findSimplifications, options, theTrack.trackTree);
			return _Utils_Tuple2(
				populatedOptions,
				A3($author$project$Tools$Simplify$actions, colour, populatedOptions, theTrack));
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{pointsToRemove: $elm$core$Dict$empty}),
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('simplify')
					]));
		}
	});
var $author$project$Tools$SmartSmoother$previewActions = F3(
	function (options, colour, track) {
		var profilePreview = function (tree) {
			return $author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: _List_Nil,
					shape: $author$project$PreviewData$PreviewProfile(tree),
					tag: 'smartprofile'
				});
		};
		var _v0 = A2($author$project$Tools$SmartSmoother$applyUsingOptions, options, track);
		var previewTree = _v0.a;
		if (previewTree.$ === 'Just') {
			var pTree = previewTree.a;
			var normalPreview = $author$project$Actions$ShowPreview(
				{
					colour: colour,
					points: A2($author$project$Tools$SmartSmoother$computeNewPoints, options, track),
					shape: $author$project$PreviewData$PreviewCircle,
					tag: 'smart'
				});
			return _List_fromArray(
				[
					normalPreview,
					profilePreview(pTree)
				]);
		} else {
			return _List_fromArray(
				[
					$author$project$Actions$HidePreview('smart'),
					$author$project$Actions$HidePreview('smartprofile')
				]);
		}
	});
var $author$project$Tools$SmartSmoother$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = _Utils_update(
				options,
				{
					newPoints: A2($author$project$Tools$SmartSmoother$computeNewPoints, options, theTrack)
				});
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$SmartSmoother$previewActions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('smart'),
						$author$project$Actions$HidePreview('smartprofile')
					]));
		}
	});
var $author$project$Tools$SplitAndJoin$toolStateChange = F4(
	function (opened, colour, options, track) {
		return _Utils_Tuple2(options, _List_Nil);
	});
var $author$project$Tools$StartFinishTypes$AlmostLoop = function (a) {
	return {$: 'AlmostLoop', a: a};
};
var $author$project$Tools$StartFinishTypes$IsALoop = {$: 'IsALoop'};
var $author$project$Tools$StartFinish$closeTheLoop = function (track) {
	var _v0 = _Utils_Tuple2(
		$author$project$DomainModel$getLastLeaf(track.trackTree),
		$author$project$DomainModel$getFirstLeaf(track.trackTree));
	var lastLeaf = _v0.a;
	var firstLeaf = _v0.b;
	var _v1 = _Utils_Tuple2(
		A2($ianmackenzie$elm_geometry$Point3d$midpoint, lastLeaf.startPoint.space, lastLeaf.endPoint.space),
		A2($ianmackenzie$elm_geometry$Point3d$midpoint, firstLeaf.startPoint.space, firstLeaf.endPoint.space));
	var midOfLast = _v1.a;
	var midOfFirst = _v1.b;
	var _v2 = _Utils_Tuple2(
		_Utils_Tuple2(midOfLast, lastLeaf.endPoint.space),
		_Utils_Tuple2(firstLeaf.startPoint.space, midOfFirst));
	var _v3 = _v2.a;
	var b1 = _v3.a;
	var c1 = _v3.b;
	var _v4 = _v2.b;
	var a2 = _v4.a;
	var b2 = _v4.b;
	var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, b1, c1, a2, b2);
	var polylineFromSpline = A2(
		$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
		$ianmackenzie$elm_units$Length$meters(0.1),
		spline);
	var vertices = A2(
		$elm$core$List$map,
		$author$project$DomainModel$withTime(lastLeaf.endPoint.time),
		$ianmackenzie$elm_geometry$Polyline3d$vertices(polylineFromSpline));
	return A3(
		$author$project$TrackLoaded$asPreviewPoints,
		track,
		$author$project$DomainModel$trueLength(track.trackTree),
		vertices);
};
var $author$project$Tools$StartFinish$previewActions = F3(
	function (newOptions, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{colour: colour, points: newOptions.pointsToClose, shape: $author$project$PreviewData$PreviewCircle, tag: 'loop'})
			]);
	});
var $author$project$Tools$StartFinish$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var _v1 = _Utils_Tuple2(
				A2(
					$ianmackenzie$elm_geometry$Point3d$projectInto,
					$ianmackenzie$elm_geometry$SketchPlane3d$xy,
					A2($author$project$DomainModel$earthPointFromIndex, 0, theTrack.trackTree).space),
				A2(
					$ianmackenzie$elm_geometry$Point3d$projectInto,
					$ianmackenzie$elm_geometry$SketchPlane3d$xy,
					A2(
						$author$project$DomainModel$earthPointFromIndex,
						$author$project$DomainModel$skipCount(theTrack.trackTree),
						theTrack.trackTree).space));
			var first = _v1.a;
			var last = _v1.b;
			var separation = A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, first, last);
			var _v2 = A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				$ianmackenzie$elm_units$Length$meters(5.0),
				separation) ? _Utils_Tuple2($author$project$Tools$StartFinishTypes$IsALoop, _List_Nil) : (A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				$ianmackenzie$elm_units$Length$meters(100),
				separation) ? _Utils_Tuple2(
				$author$project$Tools$StartFinishTypes$AlmostLoop(separation),
				$author$project$Tools$StartFinish$closeTheLoop(theTrack)) : _Utils_Tuple2(
				$author$project$Tools$StartFinishTypes$NotALoop(separation),
				_List_Nil));
			var loopiness = _v2.a;
			var points = _v2.b;
			var newOptions = _Utils_update(
				options,
				{loopiness: loopiness, pointsToClose: points});
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$StartFinish$previewActions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('loop')
					]));
		}
	});
var $author$project$Tools$StravaTools$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			return _Utils_Tuple2(options, _List_Nil);
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[$author$project$Actions$StopFlythroughTicks]));
		}
	});
var $author$project$Tools$TimestampOptions$Estimated = {$: 'Estimated'};
var $author$project$Tools$Timestamp$actions = F3(
	function (newOptions, previewColour, track) {
		return _List_Nil;
	});
var $author$project$Tools$Timestamp$estimatedTime = F2(
	function (power, track) {
		var computeSpeedAndTimes = F2(
			function (road, inputTime) {
				var thisSectionDuration = A2($author$project$Tools$Timestamp$durationForSection, power, road);
				return A2($ianmackenzie$elm_units$Quantity$plus, thisSectionDuration, inputTime);
			});
		return A3($author$project$DomainModel$foldOverRoute, computeSpeedAndTimes, track.trackTree, $ianmackenzie$elm_units$Quantity$zero);
	});
var $author$project$Tools$Timestamp$trackHasTimestamps = function (track) {
	return !_Utils_eq(
		$elm$core$Maybe$Nothing,
		A2($author$project$DomainModel$earthPointFromIndex, 0, track.trackTree).time);
};
var $author$project$Tools$Timestamp$toolStateChange = F4(
	function (opened, colour, options, track) {
		var _v0 = _Utils_Tuple2(opened, track);
		if (_v0.a && (_v0.b.$ === 'Just')) {
			var theTrack = _v0.b.a;
			var newOptions = _Utils_update(
				options,
				{
					desiredStartMillis: A2($author$project$Tools$Timestamp$relativeMillisToPoint, theTrack.currentPosition, theTrack),
					estimatedDuration: A2($author$project$Tools$Timestamp$estimatedTime, options.steadyPower, theTrack),
					extent: $author$project$Tools$TimestampOptions$ExtentOrangeToEnd,
					mode: $author$project$Tools$Timestamp$trackHasTimestamps(theTrack) ? options.mode : $author$project$Tools$TimestampOptions$Estimated
				});
			return _Utils_Tuple2(
				newOptions,
				A3($author$project$Tools$Timestamp$actions, newOptions, colour, theTrack));
		} else {
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$HidePreview('timestamps')
					]));
		}
	});
var $author$project$ToolsController$toolStateHasChanged = F4(
	function (toolType, newState, isTrack, options) {
		switch (toolType.$) {
			case 'ToolTrackInfo':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolAbruptDirectionChanges':
				var _v1 = A4(
					$author$project$Tools$DirectionChanges$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.directionChangeOptions,
					isTrack);
				var newToolOptions = _v1.a;
				var actions = _v1.b;
				var newOptions = _Utils_update(
					options,
					{directionChangeOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolDeletePoints':
				var _v2 = A4(
					$author$project$Tools$DeletePoints$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.deleteOptions,
					isTrack);
				var newToolOptions = _v2.a;
				var actions = _v2.b;
				var newOptions = _Utils_update(
					options,
					{deleteOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolEssentials':
				var _v3 = A4(
					$author$project$Tools$Essentials$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.essentialOptions,
					isTrack);
				var newToolOptions = _v3.a;
				var newOptions = _Utils_update(
					options,
					{essentialOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolBezierSplines':
				var _v4 = A4(
					$author$project$Tools$BezierSplines$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.bezierSplineOptions,
					isTrack);
				var newToolOptions = _v4.a;
				var actions = _v4.b;
				var newOptions = _Utils_update(
					options,
					{bezierSplineOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolCentroidAverage':
				var _v5 = A4(
					$author$project$Tools$CentroidAverage$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.centroidAverageOptions,
					isTrack);
				var newToolOptions = _v5.a;
				var actions = _v5.b;
				var newOptions = _Utils_update(
					options,
					{centroidAverageOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolCurveFormer':
				var _v6 = A4(
					$author$project$Tools$CurveFormer$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.curveFormerOptions,
					isTrack);
				var newToolOptions = _v6.a;
				var actions = _v6.b;
				var newOptions = _Utils_update(
					options,
					{curveFormerOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolBendSmoother':
				var _v7 = A4(
					$author$project$Tools$BendSmoother$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.bendSmootherOptions,
					isTrack);
				var newToolOptions = _v7.a;
				var actions = _v7.b;
				var newOptions = _Utils_update(
					options,
					{bendSmootherOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolNudge':
				var _v8 = A4(
					$author$project$Tools$Nudge$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.nudgeOptions,
					isTrack);
				var newToolOptions = _v8.a;
				var actions = _v8.b;
				var newOptions = _Utils_update(
					options,
					{nudgeOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolGradientProblems':
				var _v9 = A4(
					$author$project$Tools$GradientProblems$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.gradientProblemOptions,
					isTrack);
				var newToolOptions = _v9.a;
				var actions = _v9.b;
				var newOptions = _Utils_update(
					options,
					{gradientProblemOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolDisplaySettings':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolOutAndBack':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolSimplify':
				var _v10 = A4(
					$author$project$Tools$Simplify$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.simplifySettings,
					isTrack);
				var newToolOptions = _v10.a;
				var actions = _v10.b;
				var newOptions = _Utils_update(
					options,
					{simplifySettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolInterpolate':
				var _v11 = A4(
					$author$project$Tools$Interpolate$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.interpolateSettings,
					isTrack);
				var newToolOptions = _v11.a;
				var actions = _v11.b;
				var newOptions = _Utils_update(
					options,
					{interpolateSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolTimestamps':
				var _v12 = A4(
					$author$project$Tools$Timestamp$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.timestampOptions,
					isTrack);
				var newToolOptions = _v12.a;
				var actions = _v12.b;
				var newOptions = _Utils_update(
					options,
					{timestampOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolProfileSmooth':
				var _v13 = A4(
					$author$project$Tools$ProfileSmooth$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.profileSmoothSettings,
					isTrack);
				var newToolOptions = _v13.a;
				var actions = _v13.b;
				var newOptions = _Utils_update(
					options,
					{profileSmoothSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolMoveScaleRotate':
				var _v14 = A4(
					$author$project$Tools$MoveScaleRotate$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.moveScaleRotateSettings,
					isTrack);
				var newToolOptions = _v14.a;
				var actions = _v14.b;
				var newOptions = _Utils_update(
					options,
					{moveScaleRotateSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolFlythrough':
				var _v15 = A4(
					$author$project$Tools$Flythrough$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.flythroughSettings,
					isTrack);
				var newToolOptions = _v15.a;
				var actions = _v15.b;
				var newOptions = _Utils_update(
					options,
					{flythroughSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolStrava':
				var _v16 = A4(
					$author$project$Tools$StravaTools$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.stravaSettings,
					isTrack);
				var newToolOptions = _v16.a;
				var actions = _v16.b;
				var newOptions = _Utils_update(
					options,
					{stravaSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolMoveAndStretch':
				var _v17 = A4(
					$author$project$Tools$MoveAndStretch$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.moveAndStretchSettings,
					isTrack);
				var newToolOptions = _v17.a;
				var actions = _v17.b;
				var newOptions = _Utils_update(
					options,
					{moveAndStretchSettings: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolStartFinish':
				var _v18 = A4(
					$author$project$Tools$StartFinish$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.startFinishOptions,
					isTrack);
				var newToolOptions = _v18.a;
				var actions = _v18.b;
				var newOptions = _Utils_update(
					options,
					{startFinishOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolSplitAndJoin':
				var _v19 = A4(
					$author$project$Tools$SplitAndJoin$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.splitAndJoinOptions,
					isTrack);
				var newToolOptions = _v19.a;
				var actions = _v19.b;
				var newOptions = _Utils_update(
					options,
					{splitAndJoinOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolIntersections':
				var _v20 = A4(
					$author$project$Tools$Intersections$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.intersectionOptions,
					isTrack);
				var newToolOptions = _v20.a;
				var actions = _v20.b;
				var newOptions = _Utils_update(
					options,
					{intersectionOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolStraighten':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolGraph':
				var _v21 = A4(
					$author$project$Tools$Graph$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.graphOptions,
					isTrack);
				var newGraphOptions = _v21.a;
				var actions = _v21.b;
				var newOptions = _Utils_update(
					options,
					{graphOptions: newGraphOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			case 'ToolSettings':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolLandUse':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options))
						]));
			case 'ToolSmartSmoother':
				var _v22 = A4(
					$author$project$Tools$SmartSmoother$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.smartSmootherOptions,
					isTrack);
				var newToolOptions = _v22.a;
				var actions = _v22.b;
				var newOptions = _Utils_update(
					options,
					{smartSmootherOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
			default:
				var _v23 = A4(
					$author$project$Tools$NamedSegment$toolStateChange,
					_Utils_eq(newState, $author$project$ToolsController$Expanded),
					A2($author$project$ToolsController$getColour, toolType, options.tools),
					options.namedSegmentOptions,
					isTrack);
				var newToolOptions = _v23.a;
				var actions = _v23.b;
				var newOptions = _Utils_update(
					options,
					{namedSegmentOptions: newToolOptions});
				return _Utils_Tuple2(
					newOptions,
					A2(
						$elm$core$List$cons,
						A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(options)),
						actions));
		}
	});
var $author$project$ToolsController$refreshOpenTools = F2(
	function (isTrack, options) {
		var refreshOpenTool = F2(
			function (entry, _v1) {
				var inputOptions = _v1.a;
				var collectingActions = _v1.b;
				if (_Utils_eq(entry.state, $author$project$ToolsController$Expanded) || _Utils_eq(entry.state, $author$project$ToolsController$AlwaysOpen)) {
					var _v0 = A4($author$project$ToolsController$toolStateHasChanged, entry.toolType, $author$project$ToolsController$Expanded, isTrack, inputOptions);
					var incrementalModel = _v0.a;
					var incrementalActions = _v0.b;
					return _Utils_Tuple2(
						incrementalModel,
						_Utils_ap(incrementalActions, collectingActions));
				} else {
					return _Utils_Tuple2(inputOptions, collectingActions);
				}
			});
		return A3(
			$elm$core$List$foldl,
			refreshOpenTool,
			_Utils_Tuple2(options, _List_Nil),
			options.tools);
	});
var $author$project$SceneBuilder3D$NoContext = {$: 'NoContext'};
var $author$project$Tools$DisplaySettingsOptions$NoCurtain = {$: 'NoCurtain'};
var $avh4$elm_color$Color$black = A4($avh4$elm_color$Color$RgbaSpace, 0 / 255, 0 / 255, 0 / 255, 1.0);
var $smucode$elm_flat_colors$FlatColors$AussiePalette$blurple = A3($mdgriffith$elm_ui$Element$rgb255, 72, 52, 212);
var $ianmackenzie$elm_geometry$Vector3d$meters = F3(
	function (x, y, z) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: x, y: y, z: z});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Group = function (a) {
	return {$: 'Group', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$collectNodes = F2(
	function (drawables, accumulated) {
		collectNodes:
		while (true) {
			if (!drawables.b) {
				return accumulated;
			} else {
				var node = drawables.a.a;
				var rest = drawables.b;
				var $temp$drawables = rest,
					$temp$accumulated = A2($elm$core$List$cons, node, accumulated);
				drawables = $temp$drawables;
				accumulated = $temp$accumulated;
				continue collectNodes;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$group = function (drawables) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Group(
			A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$collectNodes, drawables, _List_Nil)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces = {$: 'KeepBackFaces'};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$colorTextureFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ',
	attributes: {},
	uniforms: {colorTexture: 'colorTexture'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveTextureFragment = {
	src: '\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {backlight: 'backlight', colorTexture: 'colorTexture', sceneProperties: 'sceneProperties'}
};
var $ianmackenzie$elm_geometry$BoundingBox3d$hullHelp = F7(
	function (currentMinX, currentMaxX, currentMinY, currentMaxY, currentMinZ, currentMaxZ, points) {
		hullHelp:
		while (true) {
			if (points.b) {
				var next = points.a;
				var rest = points.b;
				var _v1 = next;
				var z = _v1.a.z;
				var y = _v1.a.y;
				var x = _v1.a.x;
				var $temp$currentMinX = A2($elm$core$Basics$min, x, currentMinX),
					$temp$currentMaxX = A2($elm$core$Basics$max, x, currentMaxX),
					$temp$currentMinY = A2($elm$core$Basics$min, y, currentMinY),
					$temp$currentMaxY = A2($elm$core$Basics$max, y, currentMaxY),
					$temp$currentMinZ = A2($elm$core$Basics$min, z, currentMinZ),
					$temp$currentMaxZ = A2($elm$core$Basics$max, z, currentMaxZ),
					$temp$points = rest;
				currentMinX = $temp$currentMinX;
				currentMaxX = $temp$currentMaxX;
				currentMinY = $temp$currentMinY;
				currentMaxY = $temp$currentMaxY;
				currentMinZ = $temp$currentMinZ;
				currentMaxZ = $temp$currentMaxZ;
				points = $temp$points;
				continue hullHelp;
			} else {
				return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
					{
						maxX: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxX),
						maxY: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxY),
						maxZ: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxZ),
						minX: $ianmackenzie$elm_units$Quantity$Quantity(currentMinX),
						minY: $ianmackenzie$elm_units$Quantity$Quantity(currentMinY),
						minZ: $ianmackenzie$elm_units$Quantity$Quantity(currentMinZ)
					});
			}
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox3d$hull = F2(
	function (first, rest) {
		var _v0 = first;
		var z = _v0.a.z;
		var y = _v0.a.y;
		var x = _v0.a.x;
		return A7($ianmackenzie$elm_geometry$BoundingBox3d$hullHelp, x, x, y, y, z, z, rest);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', materialColor: 'materialColor', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', materialColorTexture: 'materialColorTexture', normalMapTexture: 'normalMapTexture', sceneProperties: 'sceneProperties', useNormalMap: 'useNormalMap', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$webgl$WebGL$Settings$FaceMode = function (a) {
	return {$: 'FaceMode', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$back = $elm_explorations$webgl$WebGL$Settings$FaceMode(1029);
var $elm_explorations$webgl$WebGL$Internal$CullFace = function (a) {
	return {$: 'CullFace', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$cullFace = function (_v0) {
	var faceMode = _v0.a;
	return $elm_explorations$webgl$WebGL$Internal$CullFace(faceMode);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullBackFaceSetting = $elm_explorations$webgl$WebGL$Settings$cullFace($elm_explorations$webgl$WebGL$Settings$back);
var $elm_explorations$webgl$WebGL$Settings$front = $elm_explorations$webgl$WebGL$Settings$FaceMode(1028);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullFrontFaceSetting = $elm_explorations$webgl$WebGL$Settings$cullFace($elm_explorations$webgl$WebGL$Settings$front);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings = F3(
	function (isRightHanded, backFaceSetting, settings) {
		if (backFaceSetting.$ === 'CullBackFaces') {
			return isRightHanded ? A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullBackFaceSetting, settings) : A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$cullFrontFaceSetting, settings);
		} else {
			return settings;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {baseColor: 'baseColor', enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', metallic: 'metallic', roughness: 'roughness', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment = {
	src: '\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ',
	attributes: {},
	uniforms: {baseColorTexture: 'baseColorTexture', constantBaseColor: 'constantBaseColor', constantMetallic: 'constantMetallic', constantRoughness: 'constantRoughness', enabledLights: 'enabledLights', lights12: 'lights12', lights34: 'lights34', lights56: 'lights56', lights78: 'lights78', metallicTexture: 'metallicTexture', normalMapTexture: 'normalMapTexture', roughnessTexture: 'roughnessTexture', sceneProperties: 'sceneProperties', useNormalMap: 'useNormalMap', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $elm_explorations$linear_algebra$Math$Matrix4$fromRecord = _MJS_m4x4fromRecord;
var $ianmackenzie$elm_geometry$Point3d$toMeters = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions = F4(
	function (firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var p4 = $ianmackenzie$elm_geometry$Point3d$toMeters(fourthPoint);
		var p3 = $ianmackenzie$elm_geometry$Point3d$toMeters(thirdPoint);
		var p2 = $ianmackenzie$elm_geometry$Point3d$toMeters(secondPoint);
		var p1 = $ianmackenzie$elm_geometry$Point3d$toMeters(firstPoint);
		return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{m11: p1.x, m12: p2.x, m13: p3.x, m14: p4.x, m21: p1.y, m22: p2.y, m23: p3.y, m24: p4.y, m31: p1.z, m32: p2.z, m33: p3.z, m34: p4.z, m41: 0, m42: 0, m43: 0, m44: 0});
	});
var $elm_explorations$webgl$WebGL$triangleFan = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 6});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices = $elm_explorations$webgl$WebGL$triangleFan(
	_List_fromArray(
		[
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 0, 0)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 1, 0, 1)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 1, 1, 2)
		},
			{
			quadVertex: A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 1, 3)
		}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantLambertianMaterial = function (a) {
	return {$: 'ConstantLambertianMaterial', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial = F2(
	function (a, b) {
		return {$: 'TexturedLambertianMaterial', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple = F2(
	function (fallbackData, channel) {
		if (channel.$ === 'Constant') {
			var _v1 = channel.a;
			return _Utils_Tuple2(fallbackData, 0.0);
		} else {
			var data = channel.a.data;
			return _Utils_Tuple2(data, 1.0);
		}
	});
var $elm_explorations$linear_algebra$Math$Vector3$getX = _MJS_v3getX;
var $elm_explorations$linear_algebra$Math$Vector3$getY = _MJS_v3getY;
var $elm_explorations$linear_algebra$Math$Vector3$getZ = _MJS_v3getZ;
var $elm_explorations$linear_algebra$Math$Vector4$vec4 = _MJS_v4;
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledVec3 = function (vector) {
	return A4(
		$elm_explorations$linear_algebra$Math$Vector4$vec4,
		$elm_explorations$linear_algebra$Math$Vector3$getX(vector),
		$elm_explorations$linear_algebra$Math$Vector3$getY(vector),
		$elm_explorations$linear_algebra$Math$Vector3$getZ(vector),
		1);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4 = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 0, 0, 0, 0);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple = F2(
	function (fallbackData, texture) {
		if (texture.$ === 'Constant') {
			var baseColor = texture.a.a;
			return _Utils_Tuple2(
				fallbackData,
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledVec3(baseColor));
		} else {
			var data = texture.a.data;
			return _Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$resolveLambertian = F2(
	function (materialColorTexture, normalMapTexture) {
		var _v0 = _Utils_Tuple2(materialColorTexture, normalMapTexture);
		if (_v0.a.$ === 'Constant') {
			if (_v0.b.$ === 'Constant') {
				var materialColor = _v0.a.a;
				var _v1 = _v0.b.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantLambertianMaterial(materialColor);
			} else {
				var data = _v0.b.a.data;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, materialColorTexture),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
			}
		} else {
			var data = _v0.a.a.data;
			return A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedLambertianMaterial,
				_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantPbrMaterial = F3(
	function (a, b, c) {
		return {$: 'ConstantPbrMaterial', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial = F4(
	function (a, b, c, d) {
		return {$: 'TexturedPbrMaterial', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$Tuple4 = F4(
	function (a, b, c, d) {
		return {$: 'Tuple4', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$linear_algebra$Math$Vector2$vec2 = _MJS_v2;
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledFloat = function (value) {
	return A2($elm_explorations$linear_algebra$Math$Vector2$vec2, value, 1);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2 = A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 0);
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple = F2(
	function (fallbackData, texture) {
		if (texture.$ === 'Constant') {
			var value = texture.a;
			return _Utils_Tuple2(
				fallbackData,
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$enabledFloat(value));
		} else {
			var data = texture.a.data;
			return _Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$resolvePbr = F4(
	function (baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture) {
		var _v0 = A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$Tuple4, baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture);
		if (_v0.a.$ === 'Constant') {
			if (_v0.b.$ === 'Constant') {
				if (_v0.c.$ === 'Constant') {
					if (_v0.d.$ === 'Constant') {
						var baseColor = _v0.a.a;
						var roughness = _v0.b.a;
						var metallic = _v0.c.a;
						var _v1 = _v0.d.a;
						return A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$ConstantPbrMaterial, baseColor, roughness, metallic);
					} else {
						var data = _v0.d.a.data;
						return A4(
							$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
							_Utils_Tuple2(data, 1.0));
					}
				} else {
					var data = _v0.c.a.data;
					return A4(
						$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
						_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2),
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
				}
			} else {
				var data = _v0.b.a.data;
				return A4(
					$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$vec3Tuple, data, baseColorTexture),
					_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec2),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
			}
		} else {
			var data = _v0.a.a.data;
			return A4(
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$TexturedPbrMaterial,
				_Utils_Tuple2(data, $ianmackenzie$elm_3d_scene$Scene3d$Entity$zeroVec4),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, roughnessTexture),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$floatTuple, data, metallicTexture),
				A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMapTuple, data, normalMapTexture));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ',
	attributes: {quadVertex: 'quadVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadMesh = F5(
	function (givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var boundingBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$hull,
			firstPoint,
			_List_fromArray(
				[secondPoint, thirdPoint, fourthPoint]));
		var bounds = $ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox);
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				function () {
					switch (givenMaterial.$) {
						case 'UnlitMaterial':
							if (givenMaterial.b.$ === 'Constant') {
								var color = givenMaterial.b.a;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												constantColor: color,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v1 = givenMaterial.a;
								var data = givenMaterial.b.a.data;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$colorTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												colorTexture: data,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							}
						case 'EmissiveMaterial':
							if (givenMaterial.b.$ === 'Constant') {
								var emissiveColor = givenMaterial.b.a.a;
								var backlight = givenMaterial.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												backlight: backlight,
												emissiveColor: A2(
													$elm_explorations$linear_algebra$Math$Vector3$scale,
													$ianmackenzie$elm_units$Luminance$inNits(backlight),
													emissiveColor),
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v2 = givenMaterial.a;
								var data = givenMaterial.b.a.data;
								var backlight = givenMaterial.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												backlight: $ianmackenzie$elm_units$Luminance$inNits(backlight),
												colorTexture: data,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							}
						case 'LambertianMaterial':
							var _v3 = givenMaterial.a;
							var materialColorTexture = givenMaterial.b;
							var normalMapTexture = givenMaterial.c;
							var _v4 = A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolveLambertian, materialColorTexture, normalMapTexture);
							if (_v4.$ === 'ConstantLambertianMaterial') {
								var materialColor = _v4.a.a;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v5, settings) {
										var lights = _v5.a;
										var enabledLights = _v5.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												materialColor: materialColor,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v6 = _v4.a;
								var materialColorData = _v6.a;
								var constantMaterialColor = _v6.b;
								var _v7 = _v4.b;
								var normalMapData = _v7.a;
								var useNormalMap = _v7.b;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v8, settings) {
										var lights = _v8.a;
										var enabledLights = _v8.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												materialColorTexture: materialColorData,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												normalMapTexture: normalMapData,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												sceneProperties: sceneProperties,
												useNormalMap: useNormalMap,
												viewMatrix: viewMatrix
											});
									});
							}
						default:
							var _v9 = givenMaterial.a;
							var baseColorTexture = givenMaterial.b;
							var roughnessTexture = givenMaterial.c;
							var metallicTexture = givenMaterial.d;
							var normalMapTexture = givenMaterial.e;
							var _v10 = A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolvePbr, baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture);
							if (_v10.$ === 'ConstantPbrMaterial') {
								var baseColor = _v10.a.a;
								var roughness = _v10.b;
								var metallic = _v10.c;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v11, settings) {
										var lights = _v11.a;
										var enabledLights = _v11.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$smoothQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												baseColor: baseColor,
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												metallic: metallic,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												roughness: roughness,
												sceneProperties: sceneProperties,
												viewMatrix: viewMatrix
											});
									});
							} else {
								var _v12 = _v10.a;
								var baseColorData = _v12.a;
								var constantBaseColor = _v12.b;
								var _v13 = _v10.b;
								var roughnessData = _v13.a;
								var constantRoughness = _v13.b;
								var _v14 = _v10.c;
								var metallicData = _v14.a;
								var constantMetallic = _v14.b;
								var _v15 = _v10.d;
								var normalMapData = _v15.a;
								var useNormalMap = _v15.b;
								return F8(
									function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v16, settings) {
										var lights = _v16.a;
										var enabledLights = _v16.b;
										return A5(
											$elm_explorations$webgl$WebGL$entityWith,
											A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces, settings),
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedQuadVertex,
											$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment,
											$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertices,
											{
												baseColorTexture: baseColorData,
												constantBaseColor: constantBaseColor,
												constantMetallic: constantMetallic,
												constantRoughness: constantRoughness,
												enabledLights: enabledLights,
												lights12: lights.lights12,
												lights34: lights.lights34,
												lights56: lights.lights56,
												lights78: lights.lights78,
												metallicTexture: metallicData,
												modelMatrix: modelMatrix,
												modelScale: modelScale,
												normalMapTexture: normalMapData,
												projectionMatrix: projectionMatrix,
												quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
												roughnessTexture: roughnessData,
												sceneProperties: sceneProperties,
												useNormalMap: useNormalMap,
												viewMatrix: viewMatrix
											});
									});
							}
					}
				}()));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode = function (a) {
	return {$: 'ShadowNode', a: a};
};
var $elm_explorations$webgl$WebGL$MeshIndexed3 = F3(
	function (a, b, c) {
		return {$: 'MeshIndexed3', a: a, b: b, c: c};
	});
var $elm_explorations$webgl$WebGL$indexedTriangles = $elm_explorations$webgl$WebGL$MeshIndexed3(
	{elemSize: 1, indexSize: 3, mode: 4});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadowMesh = function () {
	var quadShadowVertices = _List_fromArray(
		[
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 2, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 3, 1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 2, -1)
		},
			{
			quadShadowVertex: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 3, -1)
		}
		]);
	var quadShadowFaces = _List_fromArray(
		[
			_Utils_Tuple3(0, 1, 2),
			_Utils_Tuple3(0, 2, 3),
			_Utils_Tuple3(4, 6, 5),
			_Utils_Tuple3(4, 7, 6),
			_Utils_Tuple3(4, 5, 1),
			_Utils_Tuple3(1, 0, 4),
			_Utils_Tuple3(5, 6, 2),
			_Utils_Tuple3(2, 1, 5),
			_Utils_Tuple3(6, 7, 3),
			_Utils_Tuple3(3, 2, 6),
			_Utils_Tuple3(7, 4, 0),
			_Utils_Tuple3(0, 3, 7)
		]);
	return A2($elm_explorations$webgl$WebGL$indexedTriangles, quadShadowVertices, quadShadowFaces);
}();
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$quadShadowVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ',
	attributes: {quadShadowVertex: 'quadShadowVertex'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', quadVertexPositions: 'quadVertexPositions', sceneProperties: 'sceneProperties', shadowLight: 'shadowLight', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowFragment = {
	src: '\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ',
	attributes: {},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$Test = function (a) {
	return {$: 'Test', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$always = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(519);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation = function (a) {
	return {$: 'Operation', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7683);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$increment = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7682);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$keep = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7680);
var $elm_explorations$webgl$WebGL$Internal$StencilTest = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {$: 'StencilTest', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate = F3(
	function (_v0, options1, options2) {
		var writeMask = _v0.writeMask;
		var mask = _v0.mask;
		var ref = _v0.ref;
		var expandTest = F2(
			function (_v2, fn) {
				var expandedTest = _v2.a;
				return fn(expandedTest);
			});
		var expandOp = F2(
			function (_v1, fn) {
				var op = _v1.a;
				return fn(op);
			});
		var expand = function (options) {
			return A2(
				$elm$core$Basics$composeR,
				expandTest(options.test),
				A2(
					$elm$core$Basics$composeR,
					expandOp(options.fail),
					A2(
						$elm$core$Basics$composeR,
						expandOp(options.zfail),
						expandOp(options.zpass))));
		};
		return A2(
			expand,
			options2,
			A2(
				expand,
				options1,
				A3($elm_explorations$webgl$WebGL$Internal$StencilTest, ref, mask, writeMask)));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$leftHandedStencilTest = A3(
	$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
	{mask: 0, ref: 0, writeMask: 15},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$increment});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$rightHandedStencilTest = A3(
	$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
	{mask: 0, ref: 0, writeMask: 15},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$increment},
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$decrement});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowSettings = F2(
	function (isRightHanded, settings) {
		return isRightHanded ? A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$rightHandedStencilTest, settings) : A2($elm$core$List$cons, $ianmackenzie$elm_3d_scene$Scene3d$Entity$leftHandedStencilTest, settings);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow = F4(
	function (firstPoint, secondPoint, thirdPoint, fourthPoint) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			$ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode(
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, shadowLight, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowSettings, isRightHanded, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$quadShadowVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowFragment,
							$ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadowMesh,
							{
								modelMatrix: modelMatrix,
								modelScale: modelScale,
								projectionMatrix: projectionMatrix,
								quadVertexPositions: A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadVertexPositions, firstPoint, secondPoint, thirdPoint, fourthPoint),
								sceneProperties: sceneProperties,
								shadowLight: shadowLight,
								viewMatrix: viewMatrix
							});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$quad = F7(
	function (renderObject, renderShadow, givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint) {
		var meshEntity = A5($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadMesh, givenMaterial, firstPoint, secondPoint, thirdPoint, fourthPoint);
		var _v0 = _Utils_Tuple2(renderObject, renderShadow);
		if (_v0.a) {
			if (_v0.b) {
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$group(
					_List_fromArray(
						[
							meshEntity,
							A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow, firstPoint, secondPoint, thirdPoint, fourthPoint)
						]));
			} else {
				return meshEntity;
			}
		} else {
			if (_v0.b) {
				return A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$quadShadow, firstPoint, secondPoint, thirdPoint, fourthPoint);
			} else {
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$quad = F5(
	function (givenMaterial, p1, p2, p3, p4) {
		return A7($ianmackenzie$elm_3d_scene$Scene3d$Entity$quad, true, false, givenMaterial, p1, p2, p3, p4);
	});
var $ianmackenzie$elm_geometry$Vector3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var v = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.direction;
		var d = _v3.a;
		var qx = d.x * sinHalfAngle;
		var wx = qw * qx;
		var xx = qx * qx;
		var qy = d.y * sinHalfAngle;
		var wy = qw * qy;
		var xy = qx * qy;
		var yy = qy * qy;
		var a22 = 1 - (2 * (xx + yy));
		var qz = d.z * sinHalfAngle;
		var wz = qw * qz;
		var a01 = 2 * (xy - wz);
		var a10 = 2 * (xy + wz);
		var xz = qx * qz;
		var a02 = 2 * (xz + wy);
		var a20 = 2 * (xz - wy);
		var yz = qy * qz;
		var a12 = 2 * (yz - wx);
		var a21 = 2 * (yz + wx);
		var zz = qz * qz;
		var a00 = 1 - (2 * (yy + zz));
		var a11 = 1 - (2 * (xx + zz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: ((a00 * v.x) + (a01 * v.y)) + (a02 * v.z), y: ((a10 * v.x) + (a11 * v.y)) + (a12 * v.z), z: ((a20 * v.x) + (a21 * v.y)) + (a22 * v.z)});
	});
var $ianmackenzie$elm_geometry$Vector3d$scaleTo = F2(
	function (_v0, _v1) {
		var q = _v0.a;
		var v = _v1.a;
		var largestComponent = A2(
			$elm$core$Basics$max,
			$elm$core$Basics$abs(v.x),
			A2(
				$elm$core$Basics$max,
				$elm$core$Basics$abs(v.y),
				$elm$core$Basics$abs(v.z)));
		if (!largestComponent) {
			return $ianmackenzie$elm_geometry$Vector3d$zero;
		} else {
			var scaledZ = v.z / largestComponent;
			var scaledY = v.y / largestComponent;
			var scaledX = v.x / largestComponent;
			var scaledLength = $elm$core$Basics$sqrt(((scaledX * scaledX) + (scaledY * scaledY)) + (scaledZ * scaledZ));
			return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
				{x: (q * scaledX) / scaledLength, y: (q * scaledY) / scaledLength, z: (q * scaledZ) / scaledLength});
		}
	});
var $ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints = F2(
	function (_function, lineSegment) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment3d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		return $ianmackenzie$elm_geometry$LineSegment3d$fromEndpoints(
			_Utils_Tuple2(
				_function(p1),
				_function(p2)));
	});
var $ianmackenzie$elm_geometry$LineSegment3d$translateBy = F2(
	function (displacementVector, lineSegment) {
		return A2(
			$ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints,
			$ianmackenzie$elm_geometry$Point3d$translateBy(displacementVector),
			lineSegment);
	});
var $author$project$SceneBuilder3D$paintSomethingBetween = F4(
	function (width, material, pt1, pt2) {
		var roadAsSegment = A2($ianmackenzie$elm_geometry$LineSegment3d$from, pt1, pt2);
		var halfWidth = A2(
			$ianmackenzie$elm_geometry$Vector3d$scaleTo,
			width,
			A2(
				$ianmackenzie$elm_geometry$Vector3d$projectOnto,
				$ianmackenzie$elm_geometry$Plane3d$xy,
				A2($ianmackenzie$elm_geometry$Vector3d$from, pt1, pt2)));
		var _v0 = _Utils_Tuple2(
			A3(
				$ianmackenzie$elm_geometry$Vector3d$rotateAround,
				$ianmackenzie$elm_geometry$Axis3d$z,
				$ianmackenzie$elm_units$Angle$degrees(90),
				halfWidth),
			A3(
				$ianmackenzie$elm_geometry$Vector3d$rotateAround,
				$ianmackenzie$elm_geometry$Axis3d$z,
				$ianmackenzie$elm_units$Angle$degrees(-90),
				halfWidth));
		var leftKerbVector = _v0.a;
		var rightKerbVector = _v0.b;
		var _v1 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$LineSegment3d$translateBy, leftKerbVector, roadAsSegment),
			A2($ianmackenzie$elm_geometry$LineSegment3d$translateBy, rightKerbVector, roadAsSegment));
		var leftKerb = _v1.a;
		var rightKerb = _v1.b;
		return _List_fromArray(
			[
				A5(
				$ianmackenzie$elm_3d_scene$Scene3d$quad,
				material,
				$ianmackenzie$elm_geometry$LineSegment3d$startPoint(leftKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$endPoint(leftKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$endPoint(rightKerb),
				$ianmackenzie$elm_geometry$LineSegment3d$startPoint(rightKerb))
			]);
	});
var $author$project$SceneBuilder3D$centreLineBetween = F2(
	function (colouringFn, road) {
		var smallUpshiftTo = function (pt) {
			return A2(
				$ianmackenzie$elm_geometry$Point3d$translateBy,
				A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 0.005),
				pt);
		};
		var gradient = road.gradientAtStart;
		return A4(
			$author$project$SceneBuilder3D$paintSomethingBetween,
			$ianmackenzie$elm_units$Length$meters(0.5),
			$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
				colouringFn(gradient)),
			smallUpshiftTo(road.startPoint.space),
			smallUpshiftTo(road.endPoint.space));
	});
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $author$project$UtilsForViews$colorFromElmUiColour = function (c) {
	var _v0 = $mdgriffith$elm_ui$Element$toRgb(c);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return $avh4$elm_color$Color$fromRgba(
		{alpha: 1.0, blue: blue, green: green, red: red});
};
var $avh4$elm_color$Color$grey = A4($avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var $author$project$SceneBuilder3D$roadWidth = $ianmackenzie$elm_units$Length$meters(4.0);
var $author$project$SceneBuilder3D$indexTerrain = F2(
	function (box, trackTree) {
		var indexRoadSection = F2(
			function (road, _v4) {
				var leafIndex = _v4.a;
				var spaceIndex = _v4.b;
				var halfWidthVector = A2(
					$ianmackenzie$elm_geometry$Vector3d$scaleTo,
					$author$project$SceneBuilder3D$roadWidth,
					A2(
						$ianmackenzie$elm_geometry$Vector3d$projectOnto,
						$ianmackenzie$elm_geometry$Plane3d$xy,
						A2($ianmackenzie$elm_geometry$Vector3d$from, road.startPoint.space, road.endPoint.space)));
				var _v1 = _Utils_Tuple2(
					A3(
						$ianmackenzie$elm_geometry$Vector3d$rotateAround,
						$ianmackenzie$elm_geometry$Axis3d$z,
						$ianmackenzie$elm_units$Angle$degrees(90),
						halfWidthVector),
					A3(
						$ianmackenzie$elm_geometry$Vector3d$rotateAround,
						$ianmackenzie$elm_geometry$Axis3d$z,
						$ianmackenzie$elm_units$Angle$degrees(-90),
						halfWidthVector));
				var leftKerbVector = _v1.a;
				var rightKerbVector = _v1.b;
				var _v2 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$Point3d$translateBy, leftKerbVector, road.startPoint.space),
					A2($ianmackenzie$elm_geometry$Point3d$translateBy, rightKerbVector, road.startPoint.space));
				var leftNearKerb = _v2.a;
				var rightNearKerb = _v2.b;
				var _v3 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$Point3d$translateBy, leftKerbVector, road.endPoint.space),
					A2($ianmackenzie$elm_geometry$Point3d$translateBy, rightKerbVector, road.endPoint.space));
				var leftFarKerb = _v3.a;
				var rightFarKerb = _v3.b;
				var localBounds = A2(
					$ianmackenzie$elm_geometry$BoundingBox3d$hull,
					leftNearKerb,
					_List_fromArray(
						[leftFarKerb, rightFarKerb, rightNearKerb]));
				return _Utils_Tuple2(
					leafIndex + 1,
					A2(
						$author$project$SpatialIndex$add,
						{
							box: $author$project$UtilsForViews$flatBox(localBounds),
							content: {
								altitude: $ianmackenzie$elm_geometry$BoundingBox3d$minZ(localBounds),
								leafIndex: leafIndex
							}
						},
						spaceIndex));
			});
		var emptyIndex = A2(
			$author$project$SpatialIndex$empty,
			$author$project$UtilsForViews$flatBox(box),
			$ianmackenzie$elm_units$Length$meters(100.0));
		var _v0 = A3(
			$author$project$DomainModel$foldOverRoute,
			indexRoadSection,
			trackTree,
			_Utils_Tuple2(0, emptyIndex));
		var populatedIndex = _v0.b;
		return populatedIndex;
	});
var $smucode$elm_flat_colors$FlatColors$IndianPalette$keppel = A3($mdgriffith$elm_ui$Element$rgb255, 88, 177, 159);
var $ianmackenzie$elm_units$Length$kilometer = $ianmackenzie$elm_units$Length$kilometers(1);
var $avh4$elm_color$Color$lightCharcoal = A4($avh4$elm_color$Color$RgbaSpace, 136 / 255, 138 / 255, 133 / 255, 1.0);
var $avh4$elm_color$Color$lightOrange = A4($avh4$elm_color$Color$RgbaSpace, 252 / 255, 175 / 255, 62 / 255, 1.0);
var $ianmackenzie$elm_geometry$BoundingBox2d$hullHelp = F5(
	function (currentMinX, currentMaxX, currentMinY, currentMaxY, points) {
		hullHelp:
		while (true) {
			if (points.b) {
				var next = points.a;
				var rest = points.b;
				var _v1 = next;
				var y = _v1.a.y;
				var x = _v1.a.x;
				var $temp$currentMinX = A2($elm$core$Basics$min, x, currentMinX),
					$temp$currentMaxX = A2($elm$core$Basics$max, x, currentMaxX),
					$temp$currentMinY = A2($elm$core$Basics$min, y, currentMinY),
					$temp$currentMaxY = A2($elm$core$Basics$max, y, currentMaxY),
					$temp$points = rest;
				currentMinX = $temp$currentMinX;
				currentMaxX = $temp$currentMaxX;
				currentMinY = $temp$currentMinY;
				currentMaxY = $temp$currentMaxY;
				points = $temp$points;
				continue hullHelp;
			} else {
				return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
					{
						maxX: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxX),
						maxY: $ianmackenzie$elm_units$Quantity$Quantity(currentMaxY),
						minX: $ianmackenzie$elm_units$Quantity$Quantity(currentMinX),
						minY: $ianmackenzie$elm_units$Quantity$Quantity(currentMinY)
					});
			}
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$hull = F2(
	function (first, rest) {
		var _v0 = first;
		var y = _v0.a.y;
		var x = _v0.a.x;
		return A5($ianmackenzie$elm_geometry$BoundingBox2d$hullHelp, x, x, y, y, rest);
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$hullN = function (points) {
	if (points.b) {
		var first = points.a;
		var rest = points.b;
		return $elm$core$Maybe$Just(
			A2($ianmackenzie$elm_geometry$BoundingBox2d$hull, first, rest));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $ianmackenzie$elm_geometry$Polygon2d$outerLoop = function (_v0) {
	var polygon = _v0.a;
	return polygon.outerLoop;
};
var $ianmackenzie$elm_geometry$Polygon2d$boundingBox = function (polygon) {
	return $ianmackenzie$elm_geometry$BoundingBox2d$hullN(
		$ianmackenzie$elm_geometry$Polygon2d$outerLoop(polygon));
};
var $ianmackenzie$elm_geometry$Cone3d$axis = function (_v0) {
	var cone = _v0.a;
	return cone.axis;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces = {$: 'CullBackFaces'};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Facets = F4(
	function (a, b, c, d) {
		return {$: 'Facets', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Indexed = F4(
	function (a, b, c, d) {
		return {$: 'Indexed', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithNormals = F4(
	function (a, b, c, d) {
		return {$: 'MeshWithNormals', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithNormalsAndUvs = F4(
	function (a, b, c, d) {
		return {$: 'MeshWithNormalsAndUvs', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithTangents = F4(
	function (a, b, c, d) {
		return {$: 'MeshWithTangents', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithUvs = F4(
	function (a, b, c, d) {
		return {$: 'MeshWithUvs', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Triangles = F4(
	function (a, b, c, d) {
		return {$: 'Triangles', a: a, b: b, c: c, d: d};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$cullBackFaces = function (mesh) {
	switch (mesh.$) {
		case 'EmptyMesh':
			return mesh;
		case 'Triangles':
			var boundingBox = mesh.a;
			var meshTriangles = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$Triangles, boundingBox, meshTriangles, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'Facets':
			var boundingBox = mesh.a;
			var meshTriangles = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$Facets, boundingBox, meshTriangles, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'Indexed':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$Indexed, boundingBox, triangularMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'MeshWithNormals':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithNormals, boundingBox, triangularMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'MeshWithUvs':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithUvs, boundingBox, triangularMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'MeshWithNormalsAndUvs':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithNormalsAndUvs, boundingBox, triangularMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'MeshWithTangents':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			var webGLMesh = mesh.c;
			return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithTangents, boundingBox, triangularMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$CullBackFaces);
		case 'LineSegments':
			return mesh;
		case 'Polyline':
			return mesh;
		default:
			return mesh;
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyMesh = {$: 'EmptyMesh'};
var $ianmackenzie$elm_geometry$Vector3d$unwrap = function (_v0) {
	var givenComponents = _v0.a;
	return givenComponents;
};
var $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Vector3d$toVec3 = function (vector) {
	return $elm_explorations$linear_algebra$Math$Vector3$fromRecord(
		$ianmackenzie$elm_geometry$Vector3d$unwrap(vector));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectSmooth = F2(
	function (_v0, accumulated) {
		var normal = _v0.normal;
		var position = _v0.position;
		return A2(
			$elm$core$List$cons,
			{
				normal: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Vector3d$toVec3(normal),
				position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(position)
			},
			accumulated);
	});
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$faceIndices = function (_v0) {
	var mesh = _v0.a;
	return mesh.faceIndices;
};
var $ianmackenzie$elm_geometry$BoundingBox3d$fromExtrema = function (given) {
	return (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxX, given.minX) && (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxY, given.minY) && A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, given.maxZ, given.minZ))) ? $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(given) : $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox3d(
		{
			maxX: A2($ianmackenzie$elm_units$Quantity$max, given.minX, given.maxX),
			maxY: A2($ianmackenzie$elm_units$Quantity$max, given.minY, given.maxY),
			maxZ: A2($ianmackenzie$elm_units$Quantity$max, given.minZ, given.maxZ),
			minX: A2($ianmackenzie$elm_units$Quantity$min, given.minX, given.maxX),
			minY: A2($ianmackenzie$elm_units$Quantity$min, given.minY, given.maxY),
			minZ: A2($ianmackenzie$elm_units$Quantity$min, given.minZ, given.maxZ)
		});
};
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$vertexBoundsHelp = F7(
	function (minX, maxX, minY, maxY, minZ, maxZ, remaining) {
		vertexBoundsHelp:
		while (true) {
			if (remaining.b) {
				var next = remaining.a;
				var rest = remaining.b;
				var z = $elm_explorations$linear_algebra$Math$Vector3$getZ(next.position);
				var y = $elm_explorations$linear_algebra$Math$Vector3$getY(next.position);
				var x = $elm_explorations$linear_algebra$Math$Vector3$getX(next.position);
				var $temp$minX = A2($elm$core$Basics$min, minX, x),
					$temp$maxX = A2($elm$core$Basics$max, maxX, x),
					$temp$minY = A2($elm$core$Basics$min, minY, y),
					$temp$maxY = A2($elm$core$Basics$max, maxY, y),
					$temp$minZ = A2($elm$core$Basics$min, minZ, z),
					$temp$maxZ = A2($elm$core$Basics$max, maxZ, z),
					$temp$remaining = rest;
				minX = $temp$minX;
				maxX = $temp$maxX;
				minY = $temp$minY;
				maxY = $temp$maxY;
				minZ = $temp$minZ;
				maxZ = $temp$maxZ;
				remaining = $temp$remaining;
				continue vertexBoundsHelp;
			} else {
				return $ianmackenzie$elm_geometry$BoundingBox3d$fromExtrema(
					{
						maxX: $ianmackenzie$elm_units$Quantity$Quantity(maxX),
						maxY: $ianmackenzie$elm_units$Quantity$Quantity(maxY),
						maxZ: $ianmackenzie$elm_units$Quantity$Quantity(maxZ),
						minX: $ianmackenzie$elm_units$Quantity$Quantity(minX),
						minY: $ianmackenzie$elm_units$Quantity$Quantity(minY),
						minZ: $ianmackenzie$elm_units$Quantity$Quantity(minZ)
					});
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$vertexBounds = F2(
	function (first, rest) {
		var z = $elm_explorations$linear_algebra$Math$Vector3$getZ(first.position);
		var y = $elm_explorations$linear_algebra$Math$Vector3$getY(first.position);
		var x = $elm_explorations$linear_algebra$Math$Vector3$getX(first.position);
		return A7($ianmackenzie$elm_3d_scene$Scene3d$Mesh$vertexBoundsHelp, x, x, y, y, z, z, rest);
	});
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$vertices = function (_v0) {
	var mesh = _v0.a;
	return mesh.vertices;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$indexedFaces = function (givenMesh) {
	var collectedVertices = A3(
		$elm$core$Array$foldr,
		$ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectSmooth,
		_List_Nil,
		$ianmackenzie$elm_triangular_mesh$TriangularMesh$vertices(givenMesh));
	if (!collectedVertices.b) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyMesh;
	} else {
		var first = collectedVertices.a;
		var rest = collectedVertices.b;
		var webGLMesh = A2(
			$elm_explorations$webgl$WebGL$indexedTriangles,
			collectedVertices,
			$ianmackenzie$elm_triangular_mesh$TriangularMesh$faceIndices(givenMesh));
		var bounds = A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$vertexBounds, first, rest);
		return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$MeshWithNormals, bounds, givenMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
	}
};
var $ianmackenzie$elm_geometry$Direction3d$toVector = function (_v0) {
	var directionComponents = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(directionComponents);
};
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$TriangularMesh = function (a) {
	return {$: 'TriangularMesh', a: a};
};
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$triangles = function (faceVertices_) {
	return $ianmackenzie$elm_triangular_mesh$TriangularMesh$TriangularMesh(
		{
			faceIndices: A2(
				$elm$core$List$map,
				function (i) {
					return _Utils_Tuple3(3 * i, (3 * i) + 1, (3 * i) + 2);
				},
				A2(
					$elm$core$List$range,
					0,
					$elm$core$List$length(faceVertices_) - 1)),
			vertices: $elm$core$Array$fromList(
				$elm$core$List$concat(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var v1 = _v0.a;
							var v2 = _v0.b;
							var v3 = _v0.c;
							return _List_fromArray(
								[v1, v2, v3]);
						},
						faceVertices_)))
		});
};
var $ianmackenzie$elm_3d_scene$Scene3d$Primitives$cone = function () {
	var topZ = $ianmackenzie$elm_units$Length$meters(1);
	var tipPoint = A3($ianmackenzie$elm_geometry$Point3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, topZ);
	var subdivisions = 72;
	var wedgeAngle = A2(
		$ianmackenzie$elm_units$Quantity$divideBy,
		subdivisions,
		$ianmackenzie$elm_units$Angle$turns(1));
	var radius = $ianmackenzie$elm_units$Length$meters(1);
	var negativeZVector = $ianmackenzie$elm_geometry$Direction3d$toVector($ianmackenzie$elm_geometry$Direction3d$negativeZ);
	var elevationAngle = $ianmackenzie$elm_units$Angle$degrees(45);
	var bottomZ = $ianmackenzie$elm_units$Quantity$zero;
	var basePoint = A3($ianmackenzie$elm_geometry$Point3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, bottomZ);
	var wedge = function (startIndex) {
		var tipNormal = $ianmackenzie$elm_geometry$Vector3d$zero;
		var startAngle = A2($ianmackenzie$elm_units$Quantity$multiplyBy, startIndex, wedgeAngle);
		var startNormal = $ianmackenzie$elm_geometry$Direction3d$toVector(
			A2($ianmackenzie$elm_geometry$Direction3d$xyZ, startAngle, elevationAngle));
		var startX = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$cos(startAngle),
			radius);
		var startY = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$sin(startAngle),
			radius);
		var p0 = A3($ianmackenzie$elm_geometry$Point3d$xyz, startX, startY, bottomZ);
		var endIndex = A2($elm$core$Basics$modBy, subdivisions, startIndex + 1);
		var endAngle = A2($ianmackenzie$elm_units$Quantity$multiplyBy, endIndex, wedgeAngle);
		var endNormal = $ianmackenzie$elm_geometry$Direction3d$toVector(
			A2($ianmackenzie$elm_geometry$Direction3d$xyZ, endAngle, elevationAngle));
		var endX = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$cos(endAngle),
			radius);
		var endY = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Angle$sin(endAngle),
			radius);
		var p1 = A3($ianmackenzie$elm_geometry$Point3d$xyz, endX, endY, bottomZ);
		return _List_fromArray(
			[
				_Utils_Tuple3(
				{normal: negativeZVector, position: basePoint},
				{normal: negativeZVector, position: p1},
				{normal: negativeZVector, position: p0}),
				_Utils_Tuple3(
				{normal: startNormal, position: p0},
				{normal: endNormal, position: p1},
				{normal: tipNormal, position: tipPoint})
			]);
	};
	var wedges = A2(
		$elm$core$List$map,
		wedge,
		A2($elm$core$List$range, 0, subdivisions - 1));
	var triangularMesh = $ianmackenzie$elm_triangular_mesh$TriangularMesh$triangles(
		$elm$core$List$concat(wedges));
	return $ianmackenzie$elm_3d_scene$Scene3d$Mesh$cullBackFaces(
		$ianmackenzie$elm_3d_scene$Scene3d$Mesh$indexedFaces(triangularMesh));
}();
var $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyShadow = {$: 'EmptyShadow'};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Shadow = F3(
	function (a, b, c) {
		return {$: 'Shadow', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_units$Quantity$float = function (value) {
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $ianmackenzie$elm_geometry$Vector3d$normalize = $ianmackenzie$elm_geometry$Vector3d$scaleTo(
	$ianmackenzie$elm_units$Quantity$float(1));
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$triangleNormal = F3(
	function (p1, p2, p3) {
		var v2 = A2($ianmackenzie$elm_geometry$Vector3d$from, p2, p3);
		var v1 = A2($ianmackenzie$elm_geometry$Vector3d$from, p1, p2);
		return $ianmackenzie$elm_geometry$Vector3d$normalize(
			A2($ianmackenzie$elm_geometry$Vector3d$cross, v2, v1));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectShadowVertices = F3(
	function (getPosition, _v0, accumulated) {
		var mv1 = _v0.a;
		var mv2 = _v0.b;
		var mv3 = _v0.c;
		var p3 = getPosition(mv3);
		var p2 = getPosition(mv2);
		var p1 = getPosition(mv1);
		var faceNormal = $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Vector3d$toVec3(
			A3($ianmackenzie$elm_3d_scene$Scene3d$Mesh$triangleNormal, p1, p2, p3));
		var sv1 = {
			normal: faceNormal,
			position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1)
		};
		var sv2 = {
			normal: faceNormal,
			position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2)
		};
		var sv3 = {
			normal: faceNormal,
			position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p3)
		};
		return A2(
			$elm$core$List$cons,
			sv1,
			A2(
				$elm$core$List$cons,
				sv2,
				A2($elm$core$List$cons, sv3, accumulated)));
	});
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$vertex = F2(
	function (index, mesh) {
		return A2(
			$elm$core$Array$get,
			index,
			$ianmackenzie$elm_triangular_mesh$TriangularMesh$vertices(mesh));
	});
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$faceVertices = function (mesh) {
	var toFace = function (_v0) {
		var i = _v0.a;
		var j = _v0.b;
		var k = _v0.c;
		return A4(
			$elm$core$Maybe$map3,
			F3(
				function (firstVertex, secondVertex, thirdVertex) {
					return _Utils_Tuple3(firstVertex, secondVertex, thirdVertex);
				}),
			A2($ianmackenzie$elm_triangular_mesh$TriangularMesh$vertex, i, mesh),
			A2($ianmackenzie$elm_triangular_mesh$TriangularMesh$vertex, j, mesh),
			A2($ianmackenzie$elm_triangular_mesh$TriangularMesh$vertex, k, mesh));
	};
	return A2(
		$elm$core$List$filterMap,
		toFace,
		$ianmackenzie$elm_triangular_mesh$TriangularMesh$faceIndices(mesh));
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$indexed = F2(
	function (vertices_, faceIndices_) {
		var numVertices = $elm$core$Array$length(vertices_);
		var validIndices = function (_v0) {
			var i = _v0.a;
			var j = _v0.b;
			var k = _v0.c;
			return ((i >= 0) && (_Utils_cmp(i, numVertices) < 0)) && (((j >= 0) && (_Utils_cmp(j, numVertices) < 0)) && ((k >= 0) && (_Utils_cmp(k, numVertices) < 0)));
		};
		return A2($elm$core$List$all, validIndices, faceIndices_) ? $ianmackenzie$elm_triangular_mesh$TriangularMesh$TriangularMesh(
			{faceIndices: faceIndices_, vertices: vertices_}) : $ianmackenzie$elm_triangular_mesh$TriangularMesh$TriangularMesh(
			{
				faceIndices: A2($elm$core$List$filter, validIndices, faceIndices_),
				vertices: vertices_
			});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$edgeKey = F2(
	function (firstPoint, secondPoint) {
		var p2 = $ianmackenzie$elm_geometry$Point3d$toMeters(secondPoint);
		var p1 = $ianmackenzie$elm_geometry$Point3d$toMeters(firstPoint);
		return _Utils_Tuple2(
			_Utils_Tuple3(p1.x, p1.y, p1.z),
			_Utils_Tuple3(p2.x, p2.y, p2.z));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$zeroVec3 = A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 0, 0);
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdge = F6(
	function (p1, p2, start, end, neighborDict, _v0) {
		var shadowFaceIndices = _v0.a;
		var extraShadowVertices = _v0.b;
		var nextShadowVertexIndex = _v0.c;
		var _v1 = A2(
			$elm$core$Dict$get,
			A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$edgeKey, p1, p2),
			neighborDict);
		if (_v1.$ === 'Just') {
			var opposite = _v1.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					_Utils_Tuple3(start, opposite, end),
					shadowFaceIndices),
				extraShadowVertices,
				nextShadowVertexIndex);
		} else {
			var v2 = {
				normal: $ianmackenzie$elm_3d_scene$Scene3d$Mesh$zeroVec3,
				position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p2)
			};
			var v1 = {
				normal: $ianmackenzie$elm_3d_scene$Scene3d$Mesh$zeroVec3,
				position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(p1)
			};
			var b = nextShadowVertexIndex + 1;
			var a = nextShadowVertexIndex;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					_Utils_Tuple3(start, a, b),
					A2(
						$elm$core$List$cons,
						_Utils_Tuple3(start, b, end),
						shadowFaceIndices)),
				A2(
					$elm$core$List$cons,
					v2,
					A2($elm$core$List$cons, v1, extraShadowVertices)),
				nextShadowVertexIndex + 2);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdges = F5(
	function (getPosition, neighborDict, meshFaceVertices, nextShadowVertexIndex, state) {
		joinEdges:
		while (true) {
			if (meshFaceVertices.b) {
				var _v1 = meshFaceVertices.a;
				var mv1 = _v1.a;
				var mv2 = _v1.b;
				var mv3 = _v1.c;
				var remainingMeshFaceVertices = meshFaceVertices.b;
				var p3 = getPosition(mv3);
				var p2 = getPosition(mv2);
				var p1 = getPosition(mv1);
				var c = nextShadowVertexIndex + 2;
				var b = nextShadowVertexIndex + 1;
				var a = nextShadowVertexIndex;
				var $temp$getPosition = getPosition,
					$temp$neighborDict = neighborDict,
					$temp$meshFaceVertices = remainingMeshFaceVertices,
					$temp$nextShadowVertexIndex = nextShadowVertexIndex + 3,
					$temp$state = A6(
					$ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdge,
					p3,
					p1,
					c,
					a,
					neighborDict,
					A6(
						$ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdge,
						p2,
						p3,
						b,
						c,
						neighborDict,
						A6($ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdge, p1, p2, a, b, neighborDict, state)));
				getPosition = $temp$getPosition;
				neighborDict = $temp$neighborDict;
				meshFaceVertices = $temp$meshFaceVertices;
				nextShadowVertexIndex = $temp$nextShadowVertexIndex;
				state = $temp$state;
				continue joinEdges;
			} else {
				var _v2 = state;
				var shadowFaceIndices = _v2.a;
				var extraShadowVertices = _v2.b;
				return _Utils_Tuple2(
					shadowFaceIndices,
					$elm$core$List$reverse(extraShadowVertices));
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$visitFaces = F5(
	function (getPosition, meshFaceVertices, nextShadowVertexIndex, shadowFaceIndices, neighborDict) {
		visitFaces:
		while (true) {
			if (meshFaceVertices.b) {
				var _v1 = meshFaceVertices.a;
				var mv1 = _v1.a;
				var mv2 = _v1.b;
				var mv3 = _v1.c;
				var remainingMeshFaceVertices = meshFaceVertices.b;
				var p3 = getPosition(mv3);
				var p2 = getPosition(mv2);
				var p1 = getPosition(mv1);
				var c = nextShadowVertexIndex + 2;
				var b = nextShadowVertexIndex + 1;
				var a = nextShadowVertexIndex;
				var updatedNeighborDict = A3(
					$elm$core$Dict$insert,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$edgeKey, p1, p3),
					c,
					A3(
						$elm$core$Dict$insert,
						A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$edgeKey, p3, p2),
						b,
						A3(
							$elm$core$Dict$insert,
							A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$edgeKey, p2, p1),
							a,
							neighborDict)));
				var updatedShadowFaceIndices = A2(
					$elm$core$List$cons,
					_Utils_Tuple3(a, b, c),
					shadowFaceIndices);
				var $temp$getPosition = getPosition,
					$temp$meshFaceVertices = remainingMeshFaceVertices,
					$temp$nextShadowVertexIndex = nextShadowVertexIndex + 3,
					$temp$shadowFaceIndices = updatedShadowFaceIndices,
					$temp$neighborDict = updatedNeighborDict;
				getPosition = $temp$getPosition;
				meshFaceVertices = $temp$meshFaceVertices;
				nextShadowVertexIndex = $temp$nextShadowVertexIndex;
				shadowFaceIndices = $temp$shadowFaceIndices;
				neighborDict = $temp$neighborDict;
				continue visitFaces;
			} else {
				return _Utils_Tuple3(shadowFaceIndices, neighborDict, nextShadowVertexIndex);
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl = F3(
	function (meshBounds, getPosition, triangularMesh) {
		var meshFaceVertices = $ianmackenzie$elm_triangular_mesh$TriangularMesh$faceVertices(triangularMesh);
		var initialShadowVertices = A3(
			$elm$core$List$foldr,
			$ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectShadowVertices(getPosition),
			_List_Nil,
			meshFaceVertices);
		var _v0 = A5($ianmackenzie$elm_3d_scene$Scene3d$Mesh$visitFaces, getPosition, meshFaceVertices, 0, _List_Nil, $elm$core$Dict$empty);
		var initialShadowFaceIndices = _v0.a;
		var neighborDict = _v0.b;
		var nextShadowVertexIndex = _v0.c;
		var _v1 = A5(
			$ianmackenzie$elm_3d_scene$Scene3d$Mesh$joinEdges,
			getPosition,
			neighborDict,
			meshFaceVertices,
			0,
			_Utils_Tuple3(initialShadowFaceIndices, _List_Nil, nextShadowVertexIndex));
		var allShadowFaceIndices = _v1.a;
		var extraShadowVertices = _v1.b;
		var allShadowVertices = $elm$core$List$isEmpty(extraShadowVertices) ? initialShadowVertices : _Utils_ap(initialShadowVertices, extraShadowVertices);
		return A3(
			$ianmackenzie$elm_3d_scene$Scene3d$Types$Shadow,
			meshBounds,
			A2(
				$ianmackenzie$elm_triangular_mesh$TriangularMesh$indexed,
				$elm$core$Array$fromList(allShadowVertices),
				allShadowFaceIndices),
			A2($elm_explorations$webgl$WebGL$indexedTriangles, allShadowVertices, allShadowFaceIndices));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadow = function (mesh) {
	switch (mesh.$) {
		case 'EmptyMesh':
			return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyShadow;
		case 'Triangles':
			var boundingBox = mesh.a;
			var meshTriangles = mesh.b;
			var vertexTriples = A2($elm$core$List$map, $ianmackenzie$elm_geometry$Triangle3d$vertices, meshTriangles);
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				$elm$core$Basics$identity,
				$ianmackenzie$elm_triangular_mesh$TriangularMesh$triangles(vertexTriples));
		case 'Facets':
			var boundingBox = mesh.a;
			var meshTriangles = mesh.b;
			var vertexTriples = A2($elm$core$List$map, $ianmackenzie$elm_geometry$Triangle3d$vertices, meshTriangles);
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				$elm$core$Basics$identity,
				$ianmackenzie$elm_triangular_mesh$TriangularMesh$triangles(vertexTriples));
		case 'Indexed':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			return A3($ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl, boundingBox, $elm$core$Basics$identity, triangularMesh);
		case 'MeshWithNormals':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				function ($) {
					return $.position;
				},
				triangularMesh);
		case 'MeshWithUvs':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				function ($) {
					return $.position;
				},
				triangularMesh);
		case 'MeshWithNormalsAndUvs':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				function ($) {
					return $.position;
				},
				triangularMesh);
		case 'MeshWithTangents':
			var boundingBox = mesh.a;
			var triangularMesh = mesh.b;
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadowImpl,
				boundingBox,
				function ($) {
					return $.position;
				},
				triangularMesh);
		case 'LineSegments':
			return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyShadow;
		case 'Polyline':
			return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyShadow;
		default:
			return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyShadow;
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Primitives$coneShadow = $ianmackenzie$elm_3d_scene$Scene3d$Mesh$shadow($ianmackenzie$elm_3d_scene$Scene3d$Primitives$cone);
var $ianmackenzie$elm_geometry$Geometry$Types$Frame3d = function (a) {
	return {$: 'Frame3d', a: a};
};
var $ianmackenzie$elm_geometry$Frame3d$unsafe = function (properties) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(properties);
};
var $ianmackenzie$elm_geometry$Frame3d$fromZAxis = function (givenZAxis) {
	var givenZDirection = $ianmackenzie$elm_geometry$Axis3d$direction(givenZAxis);
	var _v0 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(givenZDirection);
	var computedXDirection = _v0.a;
	var computedYDirection = _v0.b;
	return $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: $ianmackenzie$elm_geometry$Axis3d$originPoint(givenZAxis),
			xDirection: computedXDirection,
			yDirection: computedYDirection,
			zDirection: givenZDirection
		});
};
var $ianmackenzie$elm_geometry$Cone3d$length = function (_v0) {
	var cone = _v0.a;
	return cone.length;
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ',
	attributes: {position: 'position', uv: 'uv'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$colorTextureMesh = F4(
	function (data, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$colorTextureFragment,
							webGLMesh,
							{colorTexture: data, modelMatrix: modelMatrix, modelScale: modelScale, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ',
	attributes: {position: 'position'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh = F4(
	function (color, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantFragment,
							webGLMesh,
							{constantColor: color, modelMatrix: modelMatrix, modelScale: modelScale, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$pointVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ',
	attributes: {position: 'position'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', pointRadius: 'pointRadius', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$constantPointMesh = F4(
	function (color, radius, bounds, webGLMesh) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							settings,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$pointVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$constantPointFragment,
							webGLMesh,
							{constantColor: color, modelMatrix: modelMatrix, modelScale: modelScale, pointRadius: radius, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh = F5(
	function (color, backlight, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$plainVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveFragment,
							webGLMesh,
							{
								emissiveColor: A2(
									$elm_explorations$linear_algebra$Math$Vector3$scale,
									$ianmackenzie$elm_units$Luminance$inNits(backlight),
									color),
								modelMatrix: modelMatrix,
								modelScale: modelScale,
								projectionMatrix: projectionMatrix,
								sceneProperties: sceneProperties,
								viewMatrix: viewMatrix
							});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$emissivePointMesh = F5(
	function (color, backlight, radius, bounds, webGLMesh) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$PointNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							settings,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$pointVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissivePointFragment,
							webGLMesh,
							{
								emissiveColor: A2(
									$elm_explorations$linear_algebra$Math$Vector3$scale,
									$ianmackenzie$elm_units$Luminance$inNits(backlight),
									color),
								modelMatrix: modelMatrix,
								modelScale: modelScale,
								pointRadius: radius,
								projectionMatrix: projectionMatrix,
								sceneProperties: sceneProperties,
								viewMatrix: viewMatrix
							});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$uniformVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ',
	attributes: {normal: 'normal', position: 'position'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$lambertianMesh = F4(
	function (color, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
						var lights = _v0.a;
						var enabledLights = _v0.b;
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$uniformVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianFragment,
							webGLMesh,
							{enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, materialColor: color, modelMatrix: modelMatrix, modelScale: modelScale, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$normalMappedVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ',
	attributes: {normal: 'normal', position: 'position', tangent: 'tangent', uv: 'uv'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMappedLambertianMesh = F6(
	function (materialColorData, normalMapData, useNormalMap, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
						var lights = _v0.a;
						var enabledLights = _v0.b;
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$normalMappedVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment,
							webGLMesh,
							{enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, materialColorTexture: materialColorData, modelMatrix: modelMatrix, modelScale: modelScale, normalMapTexture: normalMapData, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, useNormalMap: useNormalMap, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMappedPhysicalMesh = function (baseColorData) {
	return function (constantBaseColor) {
		return function (roughnessData) {
			return function (constantRoughness) {
				return function (metallicData) {
					return function (constantMetallic) {
						return function (normalMapData) {
							return function (useNormalMap) {
								return function (bounds) {
									return function (webGLMesh) {
										return function (backFaceSetting) {
											return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
												A2(
													$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
													bounds,
													F8(
														function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
															var lights = _v0.a;
															var enabledLights = _v0.b;
															return A5(
																$elm_explorations$webgl$WebGL$entityWith,
																A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
																$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$normalMappedVertex,
																$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment,
																webGLMesh,
																{baseColorTexture: baseColorData, constantBaseColor: constantBaseColor, constantMetallic: constantMetallic, constantRoughness: constantRoughness, enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, metallicTexture: metallicData, modelMatrix: modelMatrix, modelScale: modelScale, normalMapTexture: normalMapData, projectionMatrix: projectionMatrix, roughnessTexture: roughnessData, sceneProperties: sceneProperties, useNormalMap: useNormalMap, viewMatrix: viewMatrix});
														})));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$physicalMesh = F6(
	function (color, roughness, metallic, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
						var lights = _v0.a;
						var enabledLights = _v0.b;
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$uniformVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalFragment,
							webGLMesh,
							{baseColor: color, enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, metallic: metallic, modelMatrix: modelMatrix, modelScale: modelScale, projectionMatrix: projectionMatrix, roughness: roughness, sceneProperties: sceneProperties, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedEmissiveMesh = F5(
	function (colorData, backlight, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings) {
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$unlitVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$emissiveTextureFragment,
							webGLMesh,
							{
								backlight: $ianmackenzie$elm_units$Luminance$inNits(backlight),
								colorTexture: colorData,
								modelMatrix: modelMatrix,
								modelScale: modelScale,
								projectionMatrix: projectionMatrix,
								sceneProperties: sceneProperties,
								viewMatrix: viewMatrix
							});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ',
	attributes: {normal: 'normal', position: 'position', uv: 'uv'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedLambertianMesh = F4(
	function (materialColorData, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
						var lights = _v0.a;
						var enabledLights = _v0.b;
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$lambertianTextureFragment,
							webGLMesh,
							{enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, materialColorTexture: materialColorData, modelMatrix: modelMatrix, modelScale: modelScale, normalMapTexture: materialColorData, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, useNormalMap: 0.0, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedPhysicalMesh = F9(
	function (baseColorData, constantBaseColor, roughnessData, constantRoughness, metallicData, constantMetallic, bounds, webGLMesh, backFaceSetting) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
				bounds,
				F8(
					function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, _v0, settings) {
						var lights = _v0.a;
						var enabledLights = _v0.b;
						return A5(
							$elm_explorations$webgl$WebGL$entityWith,
							A3($ianmackenzie$elm_3d_scene$Scene3d$Entity$meshSettings, isRightHanded, backFaceSetting, settings),
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$texturedVertex,
							$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$physicalTexturesFragment,
							webGLMesh,
							{baseColorTexture: baseColorData, constantBaseColor: constantBaseColor, constantMetallic: constantMetallic, constantRoughness: constantRoughness, enabledLights: enabledLights, lights12: lights.lights12, lights34: lights.lights34, lights56: lights.lights56, lights78: lights.lights78, metallicTexture: metallicData, modelMatrix: modelMatrix, modelScale: modelScale, normalMapTexture: baseColorData, projectionMatrix: projectionMatrix, roughnessTexture: roughnessData, sceneProperties: sceneProperties, useNormalMap: 0.0, viewMatrix: viewMatrix});
					})));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$mesh = F2(
	function (givenMaterial, givenMesh) {
		switch (givenMaterial.$) {
			case 'UnlitMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var color = givenMaterial.b.a;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'Facets':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'Indexed':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormals':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'LineSegments':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								$ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
						case 'Polyline':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantMesh,
								color,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								$ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
						default:
							var boundingBox = givenMesh.a;
							var radius = givenMesh.b;
							var webGLMesh = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$constantPointMesh,
								color,
								radius,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh);
					}
				} else {
					var _v2 = givenMaterial.a;
					var data = givenMaterial.b.a.data;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$colorTextureMesh,
								data,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$colorTextureMesh,
								data,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$colorTextureMesh,
								data,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				}
			case 'EmissiveMaterial':
				if (givenMaterial.b.$ === 'Constant') {
					var emissiveColor = givenMaterial.b.a.a;
					var backlight = givenMaterial.c;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'Facets':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'Indexed':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormals':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'LineSegments':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								$ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
						case 'Polyline':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissiveMesh,
								emissiveColor,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								$ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
						default:
							var boundingBox = givenMesh.a;
							var radius = givenMesh.b;
							var webGLMesh = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$emissivePointMesh,
								emissiveColor,
								backlight,
								radius,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh);
					}
				} else {
					var _v5 = givenMaterial.a;
					var data = givenMaterial.b.a.data;
					var backlight = givenMaterial.c;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedEmissiveMesh,
								data,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedEmissiveMesh,
								data,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A5(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedEmissiveMesh,
								data,
								backlight,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				}
			case 'LambertianMaterial':
				var _v7 = givenMaterial.a;
				var materialColorTexture = givenMaterial.b;
				var normalMapTexture = givenMaterial.c;
				var _v8 = A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolveLambertian, materialColorTexture, normalMapTexture);
				if (_v8.$ === 'ConstantLambertianMaterial') {
					var materialColor = _v8.a.a;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$lambertianMesh,
								materialColor,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$lambertianMesh,
								materialColor,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'MeshWithUvs':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$lambertianMesh,
								materialColor,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$lambertianMesh,
								materialColor,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				} else {
					var _v10 = _v8.a;
					var materialColorData = _v10.a;
					var constantMaterialColor = _v10.b;
					var _v11 = _v8.b;
					var normalMapData = _v11.a;
					var useNormalMap = _v11.b;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithUvs':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A4(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedLambertianMesh,
								materialColorData,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var cullBackFaces = givenMesh.d;
							return A6(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMappedLambertianMesh,
								materialColorData,
								normalMapData,
								useNormalMap,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								cullBackFaces);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				}
			default:
				var _v13 = givenMaterial.a;
				var baseColorTexture = givenMaterial.b;
				var roughnessTexture = givenMaterial.c;
				var metallicTexture = givenMaterial.d;
				var normalMapTexture = givenMaterial.e;
				var _v14 = A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$resolvePbr, baseColorTexture, roughnessTexture, metallicTexture, normalMapTexture);
				if (_v14.$ === 'ConstantPbrMaterial') {
					var baseColor = _v14.a.a;
					var roughness = _v14.b;
					var metallic = _v14.c;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A6(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$physicalMesh,
								baseColor,
								roughness,
								metallic,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A6(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$physicalMesh,
								baseColor,
								roughness,
								metallic,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithUvs':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A6(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$physicalMesh,
								baseColor,
								roughness,
								metallic,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A6(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$physicalMesh,
								baseColor,
								roughness,
								metallic,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				} else {
					var _v16 = _v14.a;
					var baseColorData = _v16.a;
					var constantBaseColor = _v16.b;
					var _v17 = _v14.b;
					var roughnessData = _v17.a;
					var constantRoughness = _v17.b;
					var _v18 = _v14.c;
					var metallicData = _v18.a;
					var constantMetallic = _v18.b;
					var _v19 = _v14.d;
					var normalMapData = _v19.a;
					var useNormalMap = _v19.b;
					switch (givenMesh.$) {
						case 'EmptyMesh':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Triangles':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Facets':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Indexed':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormals':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithUvs':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'MeshWithNormalsAndUvs':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return A9(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$texturedPhysicalMesh,
								baseColorData,
								constantBaseColor,
								roughnessData,
								constantRoughness,
								metallicData,
								constantMetallic,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox),
								webGLMesh,
								backFaceSetting);
						case 'MeshWithTangents':
							var boundingBox = givenMesh.a;
							var webGLMesh = givenMesh.c;
							var backFaceSetting = givenMesh.d;
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$normalMappedPhysicalMesh(baseColorData)(constantBaseColor)(roughnessData)(constantRoughness)(metallicData)(constantMetallic)(normalMapData)(useNormalMap)(
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$toBounds(boundingBox))(webGLMesh)(backFaceSetting);
						case 'LineSegments':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						case 'Polyline':
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
						default:
							return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
					}
				}
		}
	});
var $ianmackenzie$elm_geometry$Direction3d$xComponent = function (_v0) {
	var d = _v0.a;
	return d.x;
};
var $ianmackenzie$elm_geometry$Direction3d$yComponent = function (_v0) {
	var d = _v0.a;
	return d.y;
};
var $ianmackenzie$elm_geometry$Direction3d$zComponent = function (_v0) {
	var d = _v0.a;
	return d.z;
};
var $ianmackenzie$elm_geometry$Frame3d$isRightHanded = function (_v0) {
	var frame = _v0.a;
	var i = $ianmackenzie$elm_geometry$Direction3d$zComponent(frame.zDirection);
	var h = $ianmackenzie$elm_geometry$Direction3d$yComponent(frame.zDirection);
	var g = $ianmackenzie$elm_geometry$Direction3d$xComponent(frame.zDirection);
	var f = $ianmackenzie$elm_geometry$Direction3d$zComponent(frame.yDirection);
	var e = $ianmackenzie$elm_geometry$Direction3d$yComponent(frame.yDirection);
	var d = $ianmackenzie$elm_geometry$Direction3d$xComponent(frame.yDirection);
	var c = $ianmackenzie$elm_geometry$Direction3d$zComponent(frame.xDirection);
	var b = $ianmackenzie$elm_geometry$Direction3d$yComponent(frame.xDirection);
	var a = $ianmackenzie$elm_geometry$Direction3d$xComponent(frame.xDirection);
	return (((((((a * e) * i) + ((b * f) * g)) + ((c * d) * h)) - ((c * e) * g)) - ((b * d) * i)) - ((a * f) * h)) > 0;
};
var $ianmackenzie$elm_geometry$Frame3d$originPoint = function (_v0) {
	var properties = _v0.a;
	return properties.originPoint;
};
var $ianmackenzie$elm_geometry$Direction3d$unwrap = function (_v0) {
	var coordinates = _v0.a;
	return coordinates;
};
var $ianmackenzie$elm_geometry$Frame3d$xDirection = function (_v0) {
	var properties = _v0.a;
	return properties.xDirection;
};
var $ianmackenzie$elm_geometry$Frame3d$yDirection = function (_v0) {
	var properties = _v0.a;
	return properties.yDirection;
};
var $ianmackenzie$elm_geometry$Frame3d$zDirection = function (_v0) {
	var properties = _v0.a;
	return properties.zDirection;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$placeIn = function (frame) {
	var p0 = $ianmackenzie$elm_geometry$Point3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$originPoint(frame));
	var k = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$zDirection(frame));
	var j = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$yDirection(frame));
	var i = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$xDirection(frame));
	return {
		isRightHanded: $ianmackenzie$elm_geometry$Frame3d$isRightHanded(frame),
		ix: i.x,
		iy: i.y,
		iz: i.z,
		jx: j.x,
		jy: j.y,
		jz: j.z,
		kx: k.x,
		ky: k.y,
		kz: k.z,
		px: p0.x,
		py: p0.y,
		pz: p0.z,
		scale: 1
	};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed = F2(
	function (a, b) {
		return {$: 'Transformed', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$compose = F2(
	function (t1, t2) {
		return {
			isRightHanded: _Utils_eq(t1.isRightHanded, t2.isRightHanded),
			ix: ((t1.ix * t2.ix) + (t1.iy * t2.jx)) + (t1.iz * t2.kx),
			iy: ((t1.ix * t2.iy) + (t1.iy * t2.jy)) + (t1.iz * t2.ky),
			iz: ((t1.ix * t2.iz) + (t1.iy * t2.jz)) + (t1.iz * t2.kz),
			jx: ((t1.jx * t2.ix) + (t1.jy * t2.jx)) + (t1.jz * t2.kx),
			jy: ((t1.jx * t2.iy) + (t1.jy * t2.jy)) + (t1.jz * t2.ky),
			jz: ((t1.jx * t2.iz) + (t1.jy * t2.jz)) + (t1.jz * t2.kz),
			kx: ((t1.kx * t2.ix) + (t1.ky * t2.jx)) + (t1.kz * t2.kx),
			ky: ((t1.kx * t2.iy) + (t1.ky * t2.jy)) + (t1.kz * t2.ky),
			kz: ((t1.kx * t2.iz) + (t1.ky * t2.jz)) + (t1.kz * t2.kz),
			px: t2.px + ((((t1.px * t2.ix) + (t1.py * t2.jx)) + (t1.pz * t2.kx)) * t2.scale),
			py: t2.py + ((((t1.px * t2.iy) + (t1.py * t2.jy)) + (t1.pz * t2.ky)) * t2.scale),
			pz: t2.pz + ((((t1.px * t2.iz) + (t1.py * t2.jz)) + (t1.pz * t2.kz)) * t2.scale),
			scale: t1.scale * t2.scale
		};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$transformBy = F2(
	function (transformation, _v0) {
		var node = _v0.a;
		switch (node.$) {
			case 'EmptyNode':
				return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
			case 'Transformed':
				var existingTransformation = node.a;
				var underlyingNode = node.b;
				var compositeTransformation = A2($ianmackenzie$elm_3d_scene$Scene3d$Transformation$compose, existingTransformation, transformation);
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed, compositeTransformation, underlyingNode));
			case 'MeshNode':
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed, transformation, node));
			case 'PointNode':
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed, transformation, node));
			case 'ShadowNode':
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed, transformation, node));
			default:
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed, transformation, node));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$placeIn = F2(
	function (frame, givenDrawable) {
		return A2(
			$ianmackenzie$elm_3d_scene$Scene3d$Entity$transformBy,
			$ianmackenzie$elm_3d_scene$Scene3d$Transformation$placeIn(frame),
			givenDrawable);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleBounds = F2(
	function (_v0, bounds) {
		var scaleX = _v0.a;
		var scaleY = _v0.b;
		var scaleZ = _v0.c;
		var originalCenterPoint = bounds.centerPoint;
		return {
			centerPoint: {x: scaleX * originalCenterPoint.x, y: scaleY * originalCenterPoint.y, z: scaleZ * originalCenterPoint.z},
			halfX: scaleX * bounds.halfX,
			halfY: scaleY * bounds.halfY,
			halfZ: scaleZ * bounds.halfZ
		};
	});
var $elm_explorations$linear_algebra$Math$Vector4$fromRecord = _MJS_v4fromRecord;
var $elm_explorations$linear_algebra$Math$Vector4$toRecord = _MJS_v4toRecord;
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleDrawFunction = function (_v0) {
	return function (originalDrawFunction) {
		return function (sceneProperties) {
			return function (modelScale) {
				return function (modelMatrix) {
					return function (isRightHanded) {
						return function (viewMatrix) {
							return function (projectionMatrix) {
								return function (lights) {
									return function (settings) {
										var scaleX = _v0.a;
										var scaleY = _v0.b;
										var scaleZ = _v0.c;
										var _v1 = $elm_explorations$linear_algebra$Math$Vector4$toRecord(modelScale);
										var w = _v1.w;
										var z = _v1.z;
										var y = _v1.y;
										var x = _v1.x;
										var updatedModelScale = $elm_explorations$linear_algebra$Math$Vector4$fromRecord(
											{w: w, x: x * scaleX, y: y * scaleY, z: z * scaleZ});
										return A8(originalDrawFunction, sceneProperties, updatedModelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, lights, settings);
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleNode = F2(
	function (scalingFactors, node) {
		switch (node.$) {
			case 'EmptyNode':
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyNode;
			case 'Transformed':
				var transformation = node.a;
				var underlyingNode = node.b;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$Types$Transformed,
					transformation,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleNode, scalingFactors, underlyingNode));
			case 'MeshNode':
				var bounds = node.a;
				var drawFunction = node.b;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$Types$MeshNode,
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleBounds, scalingFactors, bounds),
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleDrawFunction, scalingFactors, drawFunction));
			case 'PointNode':
				return node;
			case 'ShadowNode':
				var drawFunction = node.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode(
					A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleDrawFunction, scalingFactors, drawFunction));
			default:
				var childNodes = node.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Group(
					A2(
						$elm$core$List$map,
						$ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleNode(scalingFactors),
						childNodes));
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$preScale = F2(
	function (scalingFactors, _v0) {
		var node = _v0.a;
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$preScaleNode, scalingFactors, node));
	});
var $ianmackenzie$elm_geometry$Cone3d$radius = function (_v0) {
	var cone = _v0.a;
	return cone.radius;
};
var $ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowVertex = {
	src: '\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ',
	attributes: {normal: 'normal', position: 'position'},
	uniforms: {modelMatrix: 'modelMatrix', modelScale: 'modelScale', projectionMatrix: 'projectionMatrix', sceneProperties: 'sceneProperties', shadowLight: 'shadowLight', viewMatrix: 'viewMatrix'}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowDrawFunction = function (givenShadow) {
	if (givenShadow.$ === 'EmptyShadow') {
		return $elm$core$Maybe$Nothing;
	} else {
		var webGLMesh = givenShadow.c;
		return $elm$core$Maybe$Just(
			F8(
				function (sceneProperties, modelScale, modelMatrix, isRightHanded, viewMatrix, projectionMatrix, shadowLight, settings) {
					return A5(
						$elm_explorations$webgl$WebGL$entityWith,
						A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowSettings, isRightHanded, settings),
						$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowVertex,
						$ianmackenzie$elm_3d_scene$Scene3d$UnoptimizedShaders$shadowFragment,
						webGLMesh,
						{modelMatrix: modelMatrix, modelScale: modelScale, projectionMatrix: projectionMatrix, sceneProperties: sceneProperties, shadowLight: shadowLight, viewMatrix: viewMatrix});
				}));
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadow = function (givenShadow) {
	var _v0 = $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadowDrawFunction(givenShadow);
	if (_v0.$ === 'Just') {
		var drawFunction = _v0.a;
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Entity(
			$ianmackenzie$elm_3d_scene$Scene3d$Types$ShadowNode(drawFunction));
	} else {
		return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Entity$cone = F4(
	function (renderObject, renderShadow, givenMaterial, givenCone) {
		var baseFrame = $ianmackenzie$elm_geometry$Frame3d$fromZAxis(
			$ianmackenzie$elm_geometry$Cone3d$axis(givenCone));
		var baseEntity = A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$mesh, givenMaterial, $ianmackenzie$elm_3d_scene$Scene3d$Primitives$cone);
		var untransformedEntity = function () {
			var _v2 = _Utils_Tuple2(renderObject, renderShadow);
			if (_v2.a) {
				if (_v2.b) {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$group(
						_List_fromArray(
							[
								baseEntity,
								$ianmackenzie$elm_3d_scene$Scene3d$Entity$shadow($ianmackenzie$elm_3d_scene$Scene3d$Primitives$coneShadow)
							]));
				} else {
					return baseEntity;
				}
			} else {
				if (_v2.b) {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$shadow($ianmackenzie$elm_3d_scene$Scene3d$Primitives$coneShadow);
				} else {
					return $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
				}
			}
		}();
		var _v0 = $ianmackenzie$elm_geometry$Cone3d$radius(givenCone);
		var radius = _v0.a;
		var _v1 = $ianmackenzie$elm_geometry$Cone3d$length(givenCone);
		var length = _v1.a;
		return A2(
			$ianmackenzie$elm_3d_scene$Scene3d$Entity$placeIn,
			baseFrame,
			A2(
				$ianmackenzie$elm_3d_scene$Scene3d$Entity$preScale,
				_Utils_Tuple3(radius, radius, length),
				untransformedEntity));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$cone = F2(
	function (givenMaterial, givenCone) {
		return A4($ianmackenzie$elm_3d_scene$Scene3d$Entity$cone, true, false, givenMaterial, givenCone);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Cone3d = function (a) {
	return {$: 'Cone3d', a: a};
};
var $ianmackenzie$elm_geometry$Cone3d$from = F3(
	function (givenBasePoint, givenTipPoint, givenRadius) {
		var _v0 = A2($ianmackenzie$elm_geometry$Direction3d$from, givenBasePoint, givenTipPoint);
		if (_v0.$ === 'Just') {
			var computedDirection = _v0.a;
			return $elm$core$Maybe$Just(
				$ianmackenzie$elm_geometry$Geometry$Types$Cone3d(
					{
						axis: A2($ianmackenzie$elm_geometry$Axis3d$through, givenBasePoint, computedDirection),
						length: A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, givenBasePoint, givenTipPoint),
						radius: $ianmackenzie$elm_units$Quantity$abs(givenRadius)
					}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectPlain = F2(
	function (point, accumulated) {
		return A2(
			$elm$core$List$cons,
			{
				position: $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Point3d$toVec3(point)
			},
			accumulated);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$plainBoundsHelp = F7(
	function (minX, maxX, minY, maxY, minZ, maxZ, remaining) {
		plainBoundsHelp:
		while (true) {
			if (remaining.b) {
				var next = remaining.a;
				var rest = remaining.b;
				var z = $elm_explorations$linear_algebra$Math$Vector3$getZ(next.position);
				var y = $elm_explorations$linear_algebra$Math$Vector3$getY(next.position);
				var x = $elm_explorations$linear_algebra$Math$Vector3$getX(next.position);
				var $temp$minX = A2($elm$core$Basics$min, minX, x),
					$temp$maxX = A2($elm$core$Basics$max, maxX, x),
					$temp$minY = A2($elm$core$Basics$min, minY, y),
					$temp$maxY = A2($elm$core$Basics$max, maxY, y),
					$temp$minZ = A2($elm$core$Basics$min, minZ, z),
					$temp$maxZ = A2($elm$core$Basics$max, maxZ, z),
					$temp$remaining = rest;
				minX = $temp$minX;
				maxX = $temp$maxX;
				minY = $temp$minY;
				maxY = $temp$maxY;
				minZ = $temp$minZ;
				maxZ = $temp$maxZ;
				remaining = $temp$remaining;
				continue plainBoundsHelp;
			} else {
				return $ianmackenzie$elm_geometry$BoundingBox3d$fromExtrema(
					{
						maxX: $ianmackenzie$elm_units$Quantity$Quantity(maxX),
						maxY: $ianmackenzie$elm_units$Quantity$Quantity(maxY),
						maxZ: $ianmackenzie$elm_units$Quantity$Quantity(maxZ),
						minX: $ianmackenzie$elm_units$Quantity$Quantity(minX),
						minY: $ianmackenzie$elm_units$Quantity$Quantity(minY),
						minZ: $ianmackenzie$elm_units$Quantity$Quantity(minZ)
					});
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$plainBounds = F2(
	function (first, rest) {
		var z = $elm_explorations$linear_algebra$Math$Vector3$getZ(first.position);
		var y = $elm_explorations$linear_algebra$Math$Vector3$getY(first.position);
		var x = $elm_explorations$linear_algebra$Math$Vector3$getX(first.position);
		return A7($ianmackenzie$elm_3d_scene$Scene3d$Mesh$plainBoundsHelp, x, x, y, y, z, z, rest);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Mesh$indexedTriangles = function (givenMesh) {
	var collectedVertices = A3(
		$elm$core$Array$foldr,
		$ianmackenzie$elm_3d_scene$Scene3d$Mesh$collectPlain,
		_List_Nil,
		$ianmackenzie$elm_triangular_mesh$TriangularMesh$vertices(givenMesh));
	if (!collectedVertices.b) {
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$EmptyMesh;
	} else {
		var first = collectedVertices.a;
		var rest = collectedVertices.b;
		var webGLMesh = A2(
			$elm_explorations$webgl$WebGL$indexedTriangles,
			collectedVertices,
			$ianmackenzie$elm_triangular_mesh$TriangularMesh$faceIndices(givenMesh));
		var bounds = A2($ianmackenzie$elm_3d_scene$Scene3d$Mesh$plainBounds, first, rest);
		return A4($ianmackenzie$elm_3d_scene$Scene3d$Types$Indexed, bounds, givenMesh, webGLMesh, $ianmackenzie$elm_3d_scene$Scene3d$Types$KeepBackFaces);
	}
};
var $avh4$elm_color$Color$brown = A4($avh4$elm_color$Color$RgbaSpace, 193 / 255, 125 / 255, 17 / 255, 1.0);
var $avh4$elm_color$Color$darkGray = A4($avh4$elm_color$Color$RgbaSpace, 186 / 255, 189 / 255, 182 / 255, 1.0);
var $avh4$elm_color$Color$darkGreen = A4($avh4$elm_color$Color$RgbaSpace, 78 / 255, 154 / 255, 6 / 255, 1.0);
var $avh4$elm_color$Color$lightBlue = A4($avh4$elm_color$Color$RgbaSpace, 114 / 255, 159 / 255, 207 / 255, 1.0);
var $avh4$elm_color$Color$lightBrown = A4($avh4$elm_color$Color$RgbaSpace, 233 / 255, 185 / 255, 110 / 255, 1.0);
var $author$project$Tools$LandUseColours$landUseColours = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('tree', $avh4$elm_color$Color$darkGreen),
			_Utils_Tuple2('rock', $avh4$elm_color$Color$lightBrown),
			_Utils_Tuple2('peak', $avh4$elm_color$Color$white),
			_Utils_Tuple2('water', $avh4$elm_color$Color$lightBlue),
			_Utils_Tuple2('wood', $avh4$elm_color$Color$darkGreen),
			_Utils_Tuple2(
			'recreation_ground',
			A3($avh4$elm_color$Color$rgb255, 102, 133, 62)),
			_Utils_Tuple2(
			'grass',
			A3($avh4$elm_color$Color$rgb255, 94, 159, 17)),
			_Utils_Tuple2(
			'meadow',
			A3($avh4$elm_color$Color$rgb255, 163, 175, 50)),
			_Utils_Tuple2(
			'farmland',
			A3($avh4$elm_color$Color$rgb255, 152, 174, 53)),
			_Utils_Tuple2(
			'grassland',
			A3($avh4$elm_color$Color$rgb255, 101, 149, 44)),
			_Utils_Tuple2('forest', $avh4$elm_color$Color$darkGreen),
			_Utils_Tuple2('industrial', $avh4$elm_color$Color$darkGray),
			_Utils_Tuple2(
			'residential',
			A3($avh4$elm_color$Color$rgb255, 197, 182, 165)),
			_Utils_Tuple2(
			'retail',
			A3($avh4$elm_color$Color$rgb255, 206, 149, 121)),
			_Utils_Tuple2(
			'railway',
			A3($avh4$elm_color$Color$rgb255, 135, 122, 107)),
			_Utils_Tuple2('brownfield', $avh4$elm_color$Color$brown),
			_Utils_Tuple2(
			'quarry',
			A3($avh4$elm_color$Color$rgb255, 135, 130, 131))
		]));
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $ianmackenzie$elm_triangular_mesh$TriangularMesh$mapVertices = F2(
	function (_function, _v0) {
		var mesh = _v0.a;
		return $ianmackenzie$elm_triangular_mesh$TriangularMesh$TriangularMesh(
			{
				faceIndices: mesh.faceIndices,
				vertices: A2($elm$core$Array$map, _function, mesh.vertices)
			});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$mesh = F2(
	function (givenMaterial, givenMesh) {
		return A2($ianmackenzie$elm_3d_scene$Scene3d$Entity$mesh, givenMaterial, givenMesh);
	});
var $ianmackenzie$elm_geometry$Plane3d$originPoint = function (_v0) {
	var plane = _v0.a;
	return plane.originPoint;
};
var $author$project$SpatialIndex$queryWithFold = F4(
	function (current, queryArea, folder, accumulator) {
		if (current.$ === 'Blank') {
			return accumulator;
		} else {
			var node = current.a;
			if (A2($ianmackenzie$elm_geometry$BoundingBox2d$intersects, queryArea, node.box)) {
				var fromThisNode = A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.box;
						},
						$ianmackenzie$elm_geometry$BoundingBox2d$intersects(queryArea)),
					node.contents);
				return A4(
					$author$project$SpatialIndex$queryWithFold,
					node.sw,
					queryArea,
					folder,
					A4(
						$author$project$SpatialIndex$queryWithFold,
						node.se,
						queryArea,
						folder,
						A4(
							$author$project$SpatialIndex$queryWithFold,
							node.ne,
							queryArea,
							folder,
							A4(
								$author$project$SpatialIndex$queryWithFold,
								node.nw,
								queryArea,
								folder,
								A3($elm$core$List$foldl, folder, accumulator, fromThisNode)))));
			} else {
				return accumulator;
			}
		}
	});
var $ianmackenzie$elm_geometry$BoundingBox2d$union = F2(
	function (firstBox, secondBox) {
		var b2 = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(secondBox);
		var b1 = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(firstBox);
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$max, b1.maxX, b2.maxX),
				maxY: A2($ianmackenzie$elm_units$Quantity$max, b1.maxY, b2.maxY),
				minX: A2($ianmackenzie$elm_units$Quantity$min, b1.minX, b2.minX),
				minY: A2($ianmackenzie$elm_units$Quantity$min, b1.minY, b2.minY)
			});
	});
var $author$project$SceneBuilder3D$queryAltitudeFromIndex = F2(
	function (index, myBox) {
		var queryFoldFunction = F2(
			function (entry, accum) {
				return {
					count: accum.count + 1,
					minAltitude: A2($ianmackenzie$elm_units$Quantity$min, accum.minAltitude, entry.content.altitude),
					resultBox: function () {
						var _v0 = accum.resultBox;
						if (_v0.$ === 'Just') {
							var oldBox = _v0.a;
							return $elm$core$Maybe$Just(
								A2($ianmackenzie$elm_geometry$BoundingBox2d$union, oldBox, entry.box));
						} else {
							return $elm$core$Maybe$Just(entry.box);
						}
					}()
				};
			});
		var initialFoldState = {count: 0, minAltitude: $ianmackenzie$elm_units$Quantity$positiveInfinity, resultBox: $elm$core$Maybe$Nothing};
		return A4($author$project$SpatialIndex$queryWithFold, index, myBox, queryFoldFunction, initialFoldState);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$Polygon2d = function (a) {
	return {$: 'Polygon2d', a: a};
};
var $ianmackenzie$elm_geometry$Triangle2d$vertices = function (_v0) {
	var triangleVertices = _v0.a;
	return triangleVertices;
};
var $ianmackenzie$elm_geometry$Triangle2d$counterclockwiseArea = function (triangle) {
	var _v0 = $ianmackenzie$elm_geometry$Triangle2d$vertices(triangle);
	var p1 = _v0.a;
	var p2 = _v0.b;
	var p3 = _v0.c;
	var firstVector = A2($ianmackenzie$elm_geometry$Vector2d$from, p1, p2);
	var secondVector = A2($ianmackenzie$elm_geometry$Vector2d$from, p1, p3);
	return A2(
		$ianmackenzie$elm_units$Quantity$multiplyBy,
		0.5,
		A2($ianmackenzie$elm_geometry$Vector2d$cross, secondVector, firstVector));
};
var $ianmackenzie$elm_geometry$Geometry$Types$Triangle2d = function (a) {
	return {$: 'Triangle2d', a: a};
};
var $ianmackenzie$elm_geometry$Triangle2d$from = F3(
	function (p1, p2, p3) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Triangle2d(
			_Utils_Tuple3(p1, p2, p3));
	});
var $ianmackenzie$elm_geometry$Polygon2d$counterclockwiseArea = function (vertices_) {
	if (!vertices_.b) {
		return $ianmackenzie$elm_units$Quantity$zero;
	} else {
		if (!vertices_.b.b) {
			var single = vertices_.a;
			return $ianmackenzie$elm_units$Quantity$zero;
		} else {
			if (!vertices_.b.b.b) {
				var first = vertices_.a;
				var _v1 = vertices_.b;
				var second = _v1.a;
				return $ianmackenzie$elm_units$Quantity$zero;
			} else {
				var first = vertices_.a;
				var _v2 = vertices_.b;
				var second = _v2.a;
				var rest = _v2.b;
				var segmentArea = F2(
					function (start, end) {
						return $ianmackenzie$elm_geometry$Triangle2d$counterclockwiseArea(
							A3($ianmackenzie$elm_geometry$Triangle2d$from, first, start, end));
					});
				var segmentAreas = A3(
					$elm$core$List$map2,
					segmentArea,
					A2($elm$core$List$cons, second, rest),
					rest);
				return $ianmackenzie$elm_units$Quantity$sum(segmentAreas);
			}
		}
	}
};
var $ianmackenzie$elm_geometry$Polygon2d$makeInnerLoop = function (vertices_) {
	return A2(
		$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
		$ianmackenzie$elm_units$Quantity$zero,
		$ianmackenzie$elm_geometry$Polygon2d$counterclockwiseArea(vertices_)) ? vertices_ : $elm$core$List$reverse(vertices_);
};
var $ianmackenzie$elm_geometry$Polygon2d$makeOuterLoop = function (vertices_) {
	return A2(
		$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo,
		$ianmackenzie$elm_units$Quantity$zero,
		$ianmackenzie$elm_geometry$Polygon2d$counterclockwiseArea(vertices_)) ? vertices_ : $elm$core$List$reverse(vertices_);
};
var $ianmackenzie$elm_geometry$Polygon2d$withHoles = F2(
	function (givenInnerLoops, givenOuterLoop) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Polygon2d(
			{
				innerLoops: A2($elm$core$List$map, $ianmackenzie$elm_geometry$Polygon2d$makeInnerLoop, givenInnerLoops),
				outerLoop: $ianmackenzie$elm_geometry$Polygon2d$makeOuterLoop(givenOuterLoop)
			});
	});
var $ianmackenzie$elm_geometry$Polygon2d$singleLoop = function (givenOuterLoop) {
	return A2($ianmackenzie$elm_geometry$Polygon2d$withHoles, _List_Nil, givenOuterLoop);
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$signedArea = F3(
	function (first, second, third) {
		return $ianmackenzie$elm_geometry$Triangle2d$counterclockwiseArea(
			A3($ianmackenzie$elm_geometry$Triangle2d$from, first.position, second.position, third.position));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$addLeftChainVertex = F2(
	function (vertex, state) {
		addLeftChainVertex:
		while (true) {
			var _v0 = state.chainInterior;
			if (!_v0.b) {
				if (A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					$ianmackenzie$elm_units$Quantity$zero,
					A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$signedArea, state.chainStart, state.chainEnd, vertex))) {
					var newFace = _Utils_Tuple3(state.chainStart.index, state.chainEnd.index, vertex.index);
					return {
						chainEnd: vertex,
						chainInterior: _List_Nil,
						chainStart: state.chainStart,
						faces: A2($elm$core$List$cons, newFace, state.faces)
					};
				} else {
					return {
						chainEnd: vertex,
						chainInterior: _List_fromArray(
							[state.chainEnd]),
						chainStart: state.chainStart,
						faces: state.faces
					};
				}
			} else {
				var firstInterior = _v0.a;
				var restInterior = _v0.b;
				if (A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					$ianmackenzie$elm_units$Quantity$zero,
					A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$signedArea, firstInterior, state.chainEnd, vertex))) {
					var newFace = _Utils_Tuple3(firstInterior.index, state.chainEnd.index, vertex.index);
					var $temp$vertex = vertex,
						$temp$state = {
						chainEnd: firstInterior,
						chainInterior: restInterior,
						chainStart: state.chainStart,
						faces: A2($elm$core$List$cons, newFace, state.faces)
					};
					vertex = $temp$vertex;
					state = $temp$state;
					continue addLeftChainVertex;
				} else {
					return {
						chainEnd: vertex,
						chainInterior: A2($elm$core$List$cons, state.chainEnd, state.chainInterior),
						chainStart: state.chainStart,
						faces: state.faces
					};
				}
			}
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$addRightChainVertex = F2(
	function (vertex, state) {
		addRightChainVertex:
		while (true) {
			var _v0 = state.chainInterior;
			if (!_v0.b) {
				if (A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					$ianmackenzie$elm_units$Quantity$zero,
					A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$signedArea, vertex, state.chainEnd, state.chainStart))) {
					var newFace = _Utils_Tuple3(vertex.index, state.chainEnd.index, state.chainStart.index);
					return {
						chainEnd: vertex,
						chainInterior: _List_Nil,
						chainStart: state.chainStart,
						faces: A2($elm$core$List$cons, newFace, state.faces)
					};
				} else {
					return {
						chainEnd: vertex,
						chainInterior: _List_fromArray(
							[state.chainEnd]),
						chainStart: state.chainStart,
						faces: state.faces
					};
				}
			} else {
				var firstInterior = _v0.a;
				var restInterior = _v0.b;
				if (A2(
					$ianmackenzie$elm_units$Quantity$greaterThan,
					$ianmackenzie$elm_units$Quantity$zero,
					A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$signedArea, vertex, state.chainEnd, firstInterior))) {
					var newFace = _Utils_Tuple3(vertex.index, state.chainEnd.index, firstInterior.index);
					var $temp$vertex = vertex,
						$temp$state = {
						chainEnd: firstInterior,
						chainInterior: restInterior,
						chainStart: state.chainStart,
						faces: A2($elm$core$List$cons, newFace, state.faces)
					};
					vertex = $temp$vertex;
					state = $temp$state;
					continue addRightChainVertex;
				} else {
					return {
						chainEnd: vertex,
						chainInterior: A2($elm$core$List$cons, state.chainEnd, state.chainInterior),
						chainStart: state.chainStart,
						faces: state.faces
					};
				}
			}
		}
	});
var $ianmackenzie$elm_units$Quantity$compare = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return A2($elm$core$Basics$compare, x, y);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints = F2(
	function (p1, p2) {
		var y2 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p2);
		var y1 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p1);
		var x2 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p2);
		var x1 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p1);
		return A2($ianmackenzie$elm_units$Quantity$lessThan, y2, y1) ? $elm$core$Basics$LT : (A2($ianmackenzie$elm_units$Quantity$greaterThan, y2, y1) ? $elm$core$Basics$GT : A2($ianmackenzie$elm_units$Quantity$compare, x2, x1));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$error = function (defaultValue) {
	return defaultValue;
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$startNewLeftChain = F2(
	function (vertex, state) {
		var collectFaces = F3(
			function (firstVertex, otherVertices, accumulated) {
				collectFaces:
				while (true) {
					if (!otherVertices.b) {
						var newFace = _Utils_Tuple3(vertex.index, firstVertex.index, state.chainStart.index);
						return A2($elm$core$List$cons, newFace, accumulated);
					} else {
						var firstOther = otherVertices.a;
						var restOther = otherVertices.b;
						var newFace = _Utils_Tuple3(vertex.index, firstVertex.index, firstOther.index);
						var $temp$firstVertex = firstOther,
							$temp$otherVertices = restOther,
							$temp$accumulated = A2($elm$core$List$cons, newFace, accumulated);
						firstVertex = $temp$firstVertex;
						otherVertices = $temp$otherVertices;
						accumulated = $temp$accumulated;
						continue collectFaces;
					}
				}
			});
		return {
			chainEnd: vertex,
			chainInterior: _List_Nil,
			chainStart: state.chainEnd,
			faces: A3(collectFaces, state.chainEnd, state.chainInterior, state.faces)
		};
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$startNewRightChain = F2(
	function (vertex, state) {
		var collectFaces = F3(
			function (firstVertex, otherVertices, accumulated) {
				collectFaces:
				while (true) {
					if (!otherVertices.b) {
						var newFace = _Utils_Tuple3(firstVertex.index, vertex.index, state.chainStart.index);
						return A2($elm$core$List$cons, newFace, accumulated);
					} else {
						var firstOther = otherVertices.a;
						var restOther = otherVertices.b;
						var newFace = _Utils_Tuple3(firstVertex.index, vertex.index, firstOther.index);
						var $temp$firstVertex = firstOther,
							$temp$otherVertices = restOther,
							$temp$accumulated = A2($elm$core$List$cons, newFace, accumulated);
						firstVertex = $temp$firstVertex;
						otherVertices = $temp$otherVertices;
						accumulated = $temp$accumulated;
						continue collectFaces;
					}
				}
			});
		return {
			chainEnd: vertex,
			chainInterior: _List_Nil,
			chainStart: state.chainEnd,
			faces: A3(collectFaces, state.chainEnd, state.chainInterior, state.faces)
		};
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$faces = function (vertices) {
	var sortedVertices = A2(
		$elm$core$List$sortWith,
		F2(
			function (first, second) {
				return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints, second.position, first.position);
			}),
		vertices);
	if (!sortedVertices.b) {
		return _List_Nil;
	} else {
		if (!sortedVertices.b.b) {
			var single = sortedVertices.a;
			return _List_Nil;
		} else {
			var first = sortedVertices.a;
			var _v1 = sortedVertices.b;
			var second = _v1.a;
			var rest = _v1.b;
			var processVertex = F2(
				function (vertex, state) {
					return _Utils_eq(vertex.nextVertexIndex, state.chainStart.index) ? A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$startNewRightChain, vertex, state) : (_Utils_eq(state.chainStart.nextVertexIndex, vertex.index) ? A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$startNewLeftChain, vertex, state) : (_Utils_eq(vertex.nextVertexIndex, state.chainEnd.index) ? A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$addRightChainVertex, vertex, state) : (_Utils_eq(state.chainEnd.nextVertexIndex, vertex.index) ? A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$addLeftChainVertex, vertex, state) : $ianmackenzie$elm_geometry$Polygon2d$Monotone$error(state))));
				});
			var initialState = {chainEnd: second, chainInterior: _List_Nil, chainStart: first, faces: _List_Nil};
			return A3($elm$core$List$foldl, processVertex, initialState, rest).faces;
		}
	}
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge = F2(
	function (index, state) {
		return A2($elm$core$Array$get, index, state.edges);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$buildLoop = F5(
	function (state, points, startIndex, currentIndex, _v0) {
		buildLoop:
		while (true) {
			var processedEdgeIndices = _v0.a;
			var accumulated = _v0.b;
			var _v1 = A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge, currentIndex, state);
			if (_v1.$ === 'Just') {
				var currentEdge = _v1.a;
				var _v2 = A2($elm$core$Array$get, currentEdge.startVertexIndex, points);
				if (_v2.$ === 'Just') {
					var vertexPosition = _v2.a;
					var updatedEdgeIndices = A2($elm$core$Set$insert, currentIndex, processedEdgeIndices);
					var nextIndex = currentEdge.nextEdgeIndex;
					var newVertex = {index: currentEdge.startVertexIndex, nextVertexIndex: currentEdge.endVertexIndex, position: vertexPosition};
					var newAccumulated = A2($elm$core$List$cons, newVertex, accumulated);
					if (_Utils_eq(nextIndex, startIndex)) {
						return _Utils_Tuple2(
							updatedEdgeIndices,
							$elm$core$List$reverse(newAccumulated));
					} else {
						var $temp$state = state,
							$temp$points = points,
							$temp$startIndex = startIndex,
							$temp$currentIndex = nextIndex,
							$temp$_v0 = _Utils_Tuple2(updatedEdgeIndices, newAccumulated);
						state = $temp$state;
						points = $temp$points;
						startIndex = $temp$startIndex;
						currentIndex = $temp$currentIndex;
						_v0 = $temp$_v0;
						continue buildLoop;
					}
				} else {
					return $ianmackenzie$elm_geometry$Polygon2d$Monotone$error(
						_Utils_Tuple2(processedEdgeIndices, _List_Nil));
				}
			} else {
				return $ianmackenzie$elm_geometry$Polygon2d$Monotone$error(
					_Utils_Tuple2(processedEdgeIndices, _List_Nil));
			}
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$collectMonotoneLoops = function (state) {
	var points = A2(
		$elm$core$Array$map,
		function ($) {
			return $.position;
		},
		state.vertices);
	var processStartEdge = F2(
		function (index, accumulated) {
			var _v1 = accumulated;
			var processedEdgeIndices = _v1.a;
			var accumulatedLoops = _v1.b;
			if (A2($elm$core$Set$member, index, processedEdgeIndices)) {
				return accumulated;
			} else {
				var _v2 = A5(
					$ianmackenzie$elm_geometry$Polygon2d$Monotone$buildLoop,
					state,
					points,
					index,
					index,
					_Utils_Tuple2(processedEdgeIndices, _List_Nil));
				var updatedEdgeIndices = _v2.a;
				var loop = _v2.b;
				return _Utils_Tuple2(
					updatedEdgeIndices,
					A2($elm$core$List$cons, loop, accumulatedLoops));
			}
		});
	var allEdgeIndices = A2(
		$elm$core$List$range,
		0,
		$elm$core$Array$length(state.edges) - 1);
	var _v0 = A3(
		$elm$core$List$foldl,
		processStartEdge,
		_Utils_Tuple2($elm$core$Set$empty, _List_Nil),
		allEdgeIndices);
	var loops = _v0.b;
	return _Utils_Tuple2(points, loops);
};
var $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$EdgeSet = function (a) {
	return {$: 'EdgeSet', a: a};
};
var $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$empty = $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$EdgeSet(_List_Nil);
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo = F2(
	function (defaultValue, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var actualValue = maybeValue.a;
			return actualValue;
		} else {
			return $ianmackenzie$elm_geometry$Polygon2d$Monotone$error(defaultValue);
		}
	});
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$setNextEdge = F2(
	function (index, edge) {
		return _Utils_update(
			edge,
			{nextEdgeIndex: index});
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$setPreviousEdge = F2(
	function (index, edge) {
		return _Utils_update(
			edge,
			{previousEdgeIndex: index});
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$updateAt = F3(
	function (index, _function, array) {
		var _v0 = A2($elm$core$Array$get, index, array);
		if (_v0.$ === 'Just') {
			var item = _v0.a;
			return A3(
				$elm$core$Array$set,
				index,
				_function(item),
				array);
		} else {
			return array;
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal = F3(
	function (vertexIndex, helperVertex, state) {
		var n = $elm$core$Array$length(state.edges);
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			_Utils_Tuple2(state, -1),
			A5(
				$elm$core$Maybe$map4,
				F4(
					function (vi, vj, ei, ej) {
						return _Utils_Tuple2(
							_Utils_update(
								state,
								{
									edges: A2(
										$elm$core$Array$push,
										{endVertexIndex: vertexIndex, nextEdgeIndex: vertexIndex, previousEdgeIndex: ej.previousEdgeIndex, startVertexIndex: helperVertex.index},
										A2(
											$elm$core$Array$push,
											{endVertexIndex: helperVertex.index, nextEdgeIndex: helperVertex.outgoingEdgeIndex, previousEdgeIndex: ei.previousEdgeIndex, startVertexIndex: vertexIndex},
											A3(
												$ianmackenzie$elm_geometry$Polygon2d$Monotone$updateAt,
												ej.previousEdgeIndex,
												$ianmackenzie$elm_geometry$Polygon2d$Monotone$setNextEdge(n + 1),
												A3(
													$ianmackenzie$elm_geometry$Polygon2d$Monotone$updateAt,
													ei.previousEdgeIndex,
													$ianmackenzie$elm_geometry$Polygon2d$Monotone$setNextEdge(n),
													A3(
														$ianmackenzie$elm_geometry$Polygon2d$Monotone$updateAt,
														helperVertex.outgoingEdgeIndex,
														$ianmackenzie$elm_geometry$Polygon2d$Monotone$setPreviousEdge(n),
														A3(
															$ianmackenzie$elm_geometry$Polygon2d$Monotone$updateAt,
															vertexIndex,
															$ianmackenzie$elm_geometry$Polygon2d$Monotone$setPreviousEdge(n + 1),
															state.edges))))))
								}),
							n);
					}),
				A2($elm$core$Array$get, vertexIndex, state.vertices),
				A2($elm$core$Array$get, helperVertex.index, state.vertices),
				A2($elm$core$Array$get, vertexIndex, state.edges),
				A2($elm$core$Array$get, helperVertex.outgoingEdgeIndex, state.edges)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf = F2(
	function (edgeIndex, state) {
		return A2($elm$core$Dict$get, edgeIndex, state.helpers);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$getVertex = F2(
	function (index, state) {
		return A2($elm$core$Array$get, index, state.vertices);
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$processLeftEdge = F3(
	function (insertOrRemove, edgeIndex, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (edge) {
					return A3(
						$elm$core$Maybe$map2,
						F2(
							function (startVertex, endVertex) {
								var lineSegment = $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
									_Utils_Tuple2(startVertex.position, endVertex.position));
								return _Utils_update(
									state,
									{
										edgeSet: A2(
											insertOrRemove,
											_Utils_Tuple2(edgeIndex, lineSegment),
											state.edgeSet)
									});
							}),
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getVertex, edge.startVertexIndex, state),
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getVertex, edge.endVertexIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge, edgeIndex, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$remove = F2(
	function (edge, _v0) {
		var edges = _v0.a;
		return $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$EdgeSet(
			A2(
				$elm$core$List$filter,
				$elm$core$Basics$neq(edge),
				edges));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$removeLeftEdge = $ianmackenzie$elm_geometry$Polygon2d$Monotone$processLeftEdge($ianmackenzie$elm_geometry$Polygon2d$EdgeSet$remove);
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleEndVertex = F2(
	function (index, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (edge) {
					return A2(
						$elm$core$Maybe$map,
						function (helperVertex) {
							var diagonalAdded = helperVertex.isMerge ? A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, helperVertex, state).a : state;
							return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$removeLeftEdge, edge.previousEdgeIndex, diagonalAdded);
						},
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, edge.previousEdgeIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge, index, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex = F3(
	function (index, outgoingEdgeIndex, isMerge) {
		return {index: index, isMerge: isMerge, outgoingEdgeIndex: outgoingEdgeIndex};
	});
var $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$insert = F2(
	function (edge, _v0) {
		var edges = _v0.a;
		return $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$EdgeSet(
			A2($elm$core$List$cons, edge, edges));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$insertLeftEdge = $ianmackenzie$elm_geometry$Polygon2d$Monotone$processLeftEdge($ianmackenzie$elm_geometry$Polygon2d$EdgeSet$insert);
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf = F3(
	function (edgeIndex, helperVertex, state) {
		return _Utils_update(
			state,
			{
				helpers: A3($elm$core$Dict$insert, edgeIndex, helperVertex, state.helpers)
			});
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleLeftVertex = F2(
	function (index, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (edge) {
					return A2(
						$elm$core$Maybe$map,
						function (helperVertex) {
							var diagonalAdded = helperVertex.isMerge ? A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, helperVertex, state).a : state;
							return A3(
								$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
								index,
								A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, index, false),
								A2(
									$ianmackenzie$elm_geometry$Polygon2d$Monotone$insertLeftEdge,
									index,
									A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$removeLeftEdge, edge.previousEdgeIndex, diagonalAdded)));
						},
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, edge.previousEdgeIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge, index, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$leftOf = F2(
	function (point, _v0) {
		var edges = _v0.a;
		var y = $ianmackenzie$elm_geometry$Point2d$yCoordinate(point);
		var x = $ianmackenzie$elm_geometry$Point2d$xCoordinate(point);
		return A2(
			$elm$core$Maybe$map,
			function (_v4) {
				var dx = _v4.a;
				var _v5 = _v4.b;
				var index = _v5.a;
				var segment = _v5.b;
				return index;
			},
			A3(
				$elm$core$List$foldl,
				F2(
					function (edge, current) {
						var _v1 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(edge.b);
						var p1 = _v1.a;
						var p2 = _v1.b;
						var x1 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p1);
						var y1 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p1);
						var x2 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p2);
						var y2 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p2);
						var dx = function () {
							if (_Utils_eq(y1, y2)) {
								return A2(
									$ianmackenzie$elm_units$Quantity$minus,
									A2($ianmackenzie$elm_units$Quantity$max, x1, x2),
									x);
							} else {
								var ratio = A2(
									$ianmackenzie$elm_units$Quantity$ratio,
									A2($ianmackenzie$elm_units$Quantity$minus, y1, y),
									A2($ianmackenzie$elm_units$Quantity$minus, y1, y2));
								return A2(
									$ianmackenzie$elm_units$Quantity$minus,
									A2(
										$ianmackenzie$elm_units$Quantity$plus,
										A2(
											$ianmackenzie$elm_units$Quantity$multiplyBy,
											ratio,
											A2($ianmackenzie$elm_units$Quantity$minus, x1, x2)),
										x1),
									x);
							}
						}();
						if (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, dx)) {
							if (current.$ === 'Nothing') {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(dx, edge));
							} else {
								var _v3 = current.a;
								var currentDx = _v3.a;
								var currentEdge = _v3.b;
								return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, currentDx, dx) ? $elm$core$Maybe$Just(
									_Utils_Tuple2(dx, edge)) : current;
							}
						} else {
							return current;
						}
					}),
				$elm$core$Maybe$Nothing,
				edges));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$getLeftEdge = F2(
	function (point, state) {
		return A2($ianmackenzie$elm_geometry$Polygon2d$EdgeSet$leftOf, point, state.edgeSet);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleMergeVertex = F3(
	function (index, point, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (edge) {
					return A2(
						$elm$core$Maybe$andThen,
						function (rightHelper) {
							var rightDiagonalAdded = rightHelper.isMerge ? A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, rightHelper, state).a : state;
							var rightUpdated = A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$removeLeftEdge, edge.previousEdgeIndex, rightDiagonalAdded);
							return A2(
								$elm$core$Maybe$andThen,
								function (leftEdgeIndex) {
									return A2(
										$elm$core$Maybe$map,
										function (leftHelper) {
											var _v0 = leftHelper.isMerge ? A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, leftHelper, rightUpdated) : _Utils_Tuple2(rightUpdated, index);
											var leftDiagonalAdded = _v0.a;
											var leftOutgoing = _v0.b;
											return A3(
												$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
												leftEdgeIndex,
												A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, leftOutgoing, true),
												leftDiagonalAdded);
										},
										A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, leftEdgeIndex, state));
								},
								A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getLeftEdge, point, rightUpdated));
						},
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, edge.previousEdgeIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getEdge, index, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleRightVertex = F3(
	function (index, point, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (leftEdgeIndex) {
					return A2(
						$elm$core$Maybe$map,
						function (helperVertex) {
							var _v0 = helperVertex.isMerge ? A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, helperVertex, state) : _Utils_Tuple2(state, index);
							var diagonalAdded = _v0.a;
							var outgoingEdgeIndex = _v0.b;
							return A3(
								$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
								leftEdgeIndex,
								A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, outgoingEdgeIndex, false),
								diagonalAdded);
						},
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, leftEdgeIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getLeftEdge, point, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleSplitVertex = F3(
	function (index, point, state) {
		return A2(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$defaultTo,
			state,
			A2(
				$elm$core$Maybe$andThen,
				function (edgeIndex) {
					return A2(
						$elm$core$Maybe$map,
						function (helperVertex) {
							var _v0 = A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$addDiagonal, index, helperVertex, state);
							var updatedState = _v0.a;
							var outgoingEdgeIndex = _v0.b;
							return A3(
								$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
								index,
								A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, index, false),
								A2(
									$ianmackenzie$elm_geometry$Polygon2d$Monotone$insertLeftEdge,
									index,
									A3(
										$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
										edgeIndex,
										A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, outgoingEdgeIndex, false),
										updatedState)));
						},
						A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getHelperOf, edgeIndex, state));
				},
				A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$getLeftEdge, point, state)));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$handleStartVertex = F2(
	function (index, state) {
		return A3(
			$ianmackenzie$elm_geometry$Polygon2d$Monotone$setHelperOf,
			index,
			A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$HelperVertex, index, index, false),
			A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$insertLeftEdge, index, state));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = $elm$core$Elm$JsArray$length(toAppend);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2($elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3($elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2($elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$builderFromArray = function (_v0) {
	var len = _v0.a;
	var tree = _v0.c;
	var tail = _v0.d;
	var helper = F2(
		function (node, acc) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2($elm$core$List$cons, node, acc);
			}
		});
	return {
		nodeList: A3($elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		nodeListSize: (len / $elm$core$Array$branchFactor) | 0,
		tail: tail
	};
};
var $elm$core$Array$append = F2(
	function (a, _v0) {
		var aTail = a.d;
		var bLen = _v0.a;
		var bTree = _v0.c;
		var bTail = _v0.d;
		if (_Utils_cmp(bLen, $elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				$elm$core$Array$appendHelpTree,
				bTail,
				A3($elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				$elm$core$Array$builderToArray,
				true,
				A2(
					$elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						$elm$core$Elm$JsArray$foldl,
						foldHelper,
						$elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$accumulateDistinctPoints = F3(
	function (previousPoint, points, accumulatedPoints) {
		accumulateDistinctPoints:
		while (true) {
			if (!points.b) {
				return accumulatedPoints;
			} else {
				var point = points.a;
				var rest = points.b;
				var updatedPoints = _Utils_eq(point, previousPoint) ? accumulatedPoints : A2($elm$core$List$cons, point, accumulatedPoints);
				var $temp$previousPoint = point,
					$temp$points = rest,
					$temp$accumulatedPoints = updatedPoints;
				previousPoint = $temp$previousPoint;
				points = $temp$points;
				accumulatedPoints = $temp$accumulatedPoints;
				continue accumulateDistinctPoints;
			}
		}
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$removeDuplicates = function (points) {
	if (!points.b) {
		return _List_Nil;
	} else {
		var firstPoint = points.a;
		var rest = points.b;
		var accumulatedPoints = A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$accumulateDistinctPoints, firstPoint, rest, _List_Nil);
		if (accumulatedPoints.b) {
			var lastPoint = accumulatedPoints.a;
			var otherPoints = accumulatedPoints.b;
			return _Utils_eq(lastPoint, firstPoint) ? A2(
				$elm$core$List$cons,
				firstPoint,
				$elm$core$List$reverse(otherPoints)) : A2(
				$elm$core$List$cons,
				firstPoint,
				$elm$core$List$reverse(accumulatedPoints));
		} else {
			return _List_fromArray(
				[firstPoint]);
		}
	}
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$Merge = {$: 'Merge'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$Split = {$: 'Split'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$End = {$: 'End'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$Left = {$: 'Left'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$Right = {$: 'Right'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$Start = {$: 'Start'};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$leftTurn = F3(
	function (p1, p2, p3) {
		var y3 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p3);
		var y2 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p2);
		var y1 = $ianmackenzie$elm_geometry$Point2d$yCoordinate(p1);
		var x3 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p3);
		var x2 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p2);
		var x1 = $ianmackenzie$elm_geometry$Point2d$xCoordinate(p1);
		var secondProduct = A2(
			$ianmackenzie$elm_units$Quantity$times,
			A2($ianmackenzie$elm_units$Quantity$minus, x2, x3),
			A2($ianmackenzie$elm_units$Quantity$minus, y1, y2));
		var firstProduct = A2(
			$ianmackenzie$elm_units$Quantity$times,
			A2($ianmackenzie$elm_units$Quantity$minus, y2, y3),
			A2($ianmackenzie$elm_units$Quantity$minus, x1, x2));
		var difference = A2($ianmackenzie$elm_units$Quantity$minus, secondProduct, firstProduct);
		return A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, difference);
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$kind = F3(
	function (previous, current, next) {
		var compareToPrevious = A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints, current, previous);
		var compareToNext = A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints, current, next);
		return (_Utils_eq(compareToPrevious, $elm$core$Basics$GT) && _Utils_eq(compareToNext, $elm$core$Basics$GT)) ? (A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$leftTurn, previous, current, next) ? $ianmackenzie$elm_geometry$Polygon2d$Monotone$Start : $ianmackenzie$elm_geometry$Polygon2d$Monotone$Split) : ((_Utils_eq(compareToPrevious, $elm$core$Basics$LT) && _Utils_eq(compareToNext, $elm$core$Basics$LT)) ? (A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$leftTurn, previous, current, next) ? $ianmackenzie$elm_geometry$Polygon2d$Monotone$End : $ianmackenzie$elm_geometry$Polygon2d$Monotone$Merge) : (_Utils_eq(compareToPrevious, $elm$core$Basics$GT) ? $ianmackenzie$elm_geometry$Polygon2d$Monotone$Right : $ianmackenzie$elm_geometry$Polygon2d$Monotone$Left));
	});
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$toVertices = function (points) {
	if (!points.b) {
		return _List_Nil;
	} else {
		if (!points.b.b) {
			var singlePoint = points.a;
			return _List_Nil;
		} else {
			if (!points.b.b.b) {
				var firstPoint = points.a;
				var _v1 = points.b;
				var secondPoint = _v1.a;
				return _Utils_eq(
					A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints, firstPoint, secondPoint),
					$elm$core$Basics$GT) ? _List_fromArray(
					[
						{kind: $ianmackenzie$elm_geometry$Polygon2d$Monotone$Split, position: firstPoint},
						{kind: $ianmackenzie$elm_geometry$Polygon2d$Monotone$Merge, position: secondPoint}
					]) : _List_fromArray(
					[
						{kind: $ianmackenzie$elm_geometry$Polygon2d$Monotone$Merge, position: firstPoint},
						{kind: $ianmackenzie$elm_geometry$Polygon2d$Monotone$Split, position: secondPoint}
					]);
			} else {
				var firstPoint = points.a;
				var _v2 = points.b;
				var secondPoint = _v2.a;
				var _v3 = _v2.b;
				var thirdPoint = _v3.a;
				var rest = _v3.b;
				var lastPoint = A3($elm$core$List$foldl, $elm$core$Basics$always, thirdPoint, rest);
				var collect = F4(
					function (previousPoint, currentPoint, remainingPoints, accumulated) {
						collect:
						while (true) {
							if (!remainingPoints.b) {
								var lastVertex = {
									kind: A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$kind, previousPoint, currentPoint, firstPoint),
									position: currentPoint
								};
								return $elm$core$List$reverse(
									A2($elm$core$List$cons, lastVertex, accumulated));
							} else {
								var nextPoint = remainingPoints.a;
								var followingPoints = remainingPoints.b;
								var newVertex = {
									kind: A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$kind, previousPoint, currentPoint, nextPoint),
									position: currentPoint
								};
								var $temp$previousPoint = currentPoint,
									$temp$currentPoint = nextPoint,
									$temp$remainingPoints = followingPoints,
									$temp$accumulated = A2($elm$core$List$cons, newVertex, accumulated);
								previousPoint = $temp$previousPoint;
								currentPoint = $temp$currentPoint;
								remainingPoints = $temp$remainingPoints;
								accumulated = $temp$accumulated;
								continue collect;
							}
						}
					});
				return A4(
					collect,
					lastPoint,
					firstPoint,
					A2(
						$elm$core$List$cons,
						secondPoint,
						A2($elm$core$List$cons, thirdPoint, rest)),
					_List_Nil);
			}
		}
	}
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$init = function (_v0) {
	var innerLoops = _v0.a.innerLoops;
	var outerLoop = _v0.a.outerLoop;
	var allLoops = A2(
		$elm$core$List$map,
		function (loop) {
			return $ianmackenzie$elm_geometry$Polygon2d$Monotone$removeDuplicates(loop);
		},
		A2($elm$core$List$cons, outerLoop, innerLoops));
	var edges = A3(
		$elm$core$List$foldl,
		F2(
			function (loop, _v1) {
				var offset = _v1.a;
				var accumulated = _v1.b;
				var length = $elm$core$List$length(loop);
				var newEdges = A2(
					$elm$core$Array$initialize,
					length,
					function (index) {
						return (!index) ? {endVertexIndex: offset + 1, nextEdgeIndex: offset + 1, previousEdgeIndex: (offset + length) - 1, startVertexIndex: offset} : (_Utils_eq(index, length - 1) ? {endVertexIndex: offset, nextEdgeIndex: offset, previousEdgeIndex: (offset + index) - 1, startVertexIndex: offset + index} : {endVertexIndex: (offset + index) + 1, nextEdgeIndex: (offset + index) + 1, previousEdgeIndex: (offset + index) - 1, startVertexIndex: offset + index});
					});
				return _Utils_Tuple2(
					offset + length,
					A2($elm$core$Array$append, accumulated, newEdges));
			}),
		_Utils_Tuple2(0, $elm$core$Array$empty),
		allLoops).b;
	var vertices = $elm$core$List$concat(
		A2($elm$core$List$map, $ianmackenzie$elm_geometry$Polygon2d$Monotone$toVertices, allLoops));
	return {edges: edges, vertices: vertices};
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$monotonePolygons = function (polygon) {
	var handleVertex = F2(
		function (_v4, current) {
			var index = _v4.a;
			var vertex = _v4.b;
			var _v3 = vertex.kind;
			switch (_v3.$) {
				case 'Start':
					return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleStartVertex, index, current);
				case 'End':
					return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleEndVertex, index, current);
				case 'Right':
					return A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleRightVertex, index, vertex.position, current);
				case 'Left':
					return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleLeftVertex, index, current);
				case 'Split':
					return A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleSplitVertex, index, vertex.position, current);
				default:
					return A3($ianmackenzie$elm_geometry$Polygon2d$Monotone$handleMergeVertex, index, vertex.position, current);
			}
		});
	var _v0 = $ianmackenzie$elm_geometry$Polygon2d$Monotone$init(polygon);
	var edges = _v0.edges;
	var vertices = _v0.vertices;
	var initialState = {
		edgeSet: $ianmackenzie$elm_geometry$Polygon2d$EdgeSet$empty,
		edges: edges,
		helpers: $elm$core$Dict$empty,
		vertices: $elm$core$Array$fromList(vertices)
	};
	var priorityQueue = A2(
		$elm$core$List$sortWith,
		F2(
			function (_v1, _v2) {
				var firstVertex = _v1.b;
				var secondVertex = _v2.b;
				return A2($ianmackenzie$elm_geometry$Polygon2d$Monotone$comparePoints, secondVertex.position, firstVertex.position);
			}),
		A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, vertices));
	var finalState = A3($elm$core$List$foldl, handleVertex, initialState, priorityQueue);
	var vertexArray = $elm$core$Array$fromList(vertices);
	return $ianmackenzie$elm_geometry$Polygon2d$Monotone$collectMonotoneLoops(finalState);
};
var $ianmackenzie$elm_geometry$Polygon2d$Monotone$triangulation = function (polygon) {
	var _v0 = $ianmackenzie$elm_geometry$Polygon2d$Monotone$monotonePolygons(polygon);
	var points = _v0.a;
	var loops = _v0.b;
	return A2(
		$ianmackenzie$elm_triangular_mesh$TriangularMesh$indexed,
		points,
		$elm$core$List$concat(
			A2($elm$core$List$map, $ianmackenzie$elm_geometry$Polygon2d$Monotone$faces, loops)));
};
var $ianmackenzie$elm_geometry$Polygon2d$triangulate = function (polygon) {
	return $ianmackenzie$elm_geometry$Polygon2d$Monotone$triangulation(polygon);
};
var $ianmackenzie$elm_geometry$Point2d$coordinates = function (_v0) {
	var p = _v0.a;
	return _Utils_Tuple2(
		$ianmackenzie$elm_units$Quantity$Quantity(p.x),
		$ianmackenzie$elm_units$Quantity$Quantity(p.y));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$withDimensions = F2(
	function (_v0, givenCenterPoint) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var halfWidth = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenWidth));
		var halfHeight = $ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$abs(givenHeight));
		var _v1 = $ianmackenzie$elm_geometry$Point2d$coordinates(givenCenterPoint);
		var x0 = _v1.a;
		var y0 = _v1.b;
		return $ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
			{
				maxX: A2($ianmackenzie$elm_units$Quantity$plus, halfWidth, x0),
				maxY: A2($ianmackenzie$elm_units$Quantity$plus, halfHeight, y0),
				minX: A2($ianmackenzie$elm_units$Quantity$minus, halfWidth, x0),
				minY: A2($ianmackenzie$elm_units$Quantity$minus, halfHeight, y0)
			});
	});
var $author$project$SceneBuilder3D$makeLandUsePlanar = F4(
	function (landUse, index, track, groundPlane) {
		var drawPolygon = F2(
			function (colour, nodes) {
				var polygon = $ianmackenzie$elm_geometry$Polygon2d$singleLoop(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.at;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.space;
								},
								$ianmackenzie$elm_geometry$Point3d$projectInto($ianmackenzie$elm_geometry$SketchPlane3d$xy))),
						nodes));
				var _v11 = A2(
					$author$project$SceneBuilder3D$queryAltitudeFromIndex,
					index,
					A2(
						$elm$core$Maybe$withDefault,
						$ianmackenzie$elm_geometry$BoundingBox2d$singleton($ianmackenzie$elm_geometry$Point2d$origin),
						$ianmackenzie$elm_geometry$Polygon2d$boundingBox(polygon)));
				var minAltitude = _v11.minAltitude;
				var useAltitude = A2($ianmackenzie$elm_units$Quantity$lessThan, $ianmackenzie$elm_units$Quantity$positiveInfinity, minAltitude) ? minAltitude : $ianmackenzie$elm_geometry$Point3d$zCoordinate(
					$ianmackenzie$elm_geometry$Plane3d$originPoint(groundPlane));
				var restoreAltitude = function (point) {
					return A3(
						$ianmackenzie$elm_geometry$Point3d$xyz,
						$ianmackenzie$elm_geometry$Point2d$xCoordinate(point),
						$ianmackenzie$elm_geometry$Point2d$yCoordinate(point),
						A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_units$Length$centimeter, useAltitude));
				};
				var mesh = A2(
					$ianmackenzie$elm_triangular_mesh$TriangularMesh$mapVertices,
					restoreAltitude,
					$ianmackenzie$elm_geometry$Polygon2d$triangulate(polygon));
				return _Utils_Tuple2(
					A2(
						$ianmackenzie$elm_3d_scene$Scene3d$mesh,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color(colour),
						$ianmackenzie$elm_3d_scene$Scene3d$Mesh$indexedTriangles(mesh)),
					{
						box: A2(
							$elm$core$Maybe$withDefault,
							$ianmackenzie$elm_geometry$BoundingBox2d$singleton($ianmackenzie$elm_geometry$Point2d$origin),
							$ianmackenzie$elm_geometry$Polygon2d$boundingBox(polygon)),
						content: {altitude: useAltitude, leafIndex: -1}
					});
			});
		var drawWay = F2(
			function (way, stuff) {
				var _v6 = way.tags;
				if (_v6.$ === 'Nothing') {
					return stuff;
				} else {
					var tags = _v6.a;
					var useTag = A2(
						$elm$core$Maybe$withDefault,
						'',
						function () {
							var _v9 = _Utils_Tuple2(
								A2($elm$core$Dict$get, 'natural', tags),
								A2($elm$core$Dict$get, 'landuse', tags));
							if (_v9.b.$ === 'Just') {
								var usage = _v9.b.a;
								return $elm$core$Maybe$Just(usage);
							} else {
								if (_v9.a.$ === 'Just') {
									var natural = _v9.a.a;
									var _v10 = _v9.b;
									return $elm$core$Maybe$Just(natural);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}
						}());
					var _v7 = A2($elm$core$Dict$get, useTag, $author$project$Tools$LandUseColours$landUseColours);
					if (_v7.$ === 'Just') {
						var colour = _v7.a;
						var _v8 = A2(drawPolygon, colour, way.nodes);
						var polygon = _v8.a;
						var indexEntry = _v8.b;
						return {
							scenes: A2($elm$core$List$cons, polygon, stuff.scenes),
							unknownTags: stuff.unknownTags,
							updatedIndex: A2($author$project$SpatialIndex$add, indexEntry, stuff.updatedIndex)
						};
					} else {
						return stuff;
					}
				}
			});
		var drawCone = F2(
			function (colour, at) {
				var nearestPoint = A2(
					$author$project$DomainModel$earthPointFromIndex,
					A4(
						$author$project$DomainModel$nearestToRay,
						A2($ianmackenzie$elm_geometry$Axis3d$withDirection, $ianmackenzie$elm_geometry$Direction3d$positiveZ, at.space),
						track.trackTree,
						track.leafIndex,
						track.currentPosition),
					track.trackTree);
				var altitudeAdjusted = A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					$ianmackenzie$elm_geometry$Point3d$xCoordinate(at.space),
					$ianmackenzie$elm_geometry$Point3d$yCoordinate(at.space),
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(nearestPoint.space));
				var tip = A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2(
						$ianmackenzie$elm_geometry$Vector3d$withLength,
						$ianmackenzie$elm_units$Length$meters(10),
						$ianmackenzie$elm_geometry$Direction3d$positiveZ),
					altitudeAdjusted);
				var _v5 = A3(
					$ianmackenzie$elm_geometry$Cone3d$from,
					altitudeAdjusted,
					tip,
					$ianmackenzie$elm_units$Length$meters(4));
				if (_v5.$ === 'Just') {
					var cone = _v5.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2(
								$ianmackenzie$elm_3d_scene$Scene3d$cone,
								$ianmackenzie$elm_3d_scene$Scene3d$Material$color(colour),
								cone),
							{
								box: A2(
									$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
									_Utils_Tuple2(
										$ianmackenzie$elm_units$Length$meters(8),
										$ianmackenzie$elm_units$Length$meters(8)),
									A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, at.space)),
								content: {
									altitude: $ianmackenzie$elm_geometry$Point3d$zCoordinate(nearestPoint.space),
									leafIndex: -1
								}
							}));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
		var drawNode = F2(
			function (node, stuff) {
				var _v0 = node.tags;
				if (_v0.$ === 'Nothing') {
					return stuff;
				} else {
					var tags = _v0.a;
					var _v1 = A2($elm$core$Dict$get, 'natural', tags);
					if (_v1.$ === 'Nothing') {
						return stuff;
					} else {
						var natural = _v1.a;
						var _v2 = A2($elm$core$Dict$get, natural, $author$project$Tools$LandUseColours$landUseColours);
						if (_v2.$ === 'Just') {
							var colour = _v2.a;
							var _v3 = A2(drawCone, colour, node.at);
							if (_v3.$ === 'Just') {
								var _v4 = _v3.a;
								var gotCone = _v4.a;
								var indexEntry = _v4.b;
								return {
									scenes: A2($elm$core$List$cons, gotCone, stuff.scenes),
									unknownTags: stuff.unknownTags,
									updatedIndex: A2($author$project$SpatialIndex$add, indexEntry, stuff.updatedIndex)
								};
							} else {
								return stuff;
							}
						} else {
							return _Utils_update(
								stuff,
								{
									unknownTags: A3($elm$core$Dict$insert, 'natural', natural, stuff.unknownTags)
								});
						}
					}
				}
			});
		var nodeStuff = A3(
			$elm$core$List$foldl,
			drawNode,
			{scenes: _List_Nil, unknownTags: $elm$core$Dict$empty, updatedIndex: index},
			landUse.nodes);
		var wayStuff = A3($elm$core$List$foldl, drawWay, nodeStuff, landUse.ways);
		return _Utils_Tuple2(wayStuff.scenes, wayStuff.updatedIndex);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$nothing = $ianmackenzie$elm_3d_scene$Scene3d$Entity$empty;
var $author$project$SceneBuilder3D$makeLandUseSloped = F4(
	function (landUse, index, tree, groundPlane) {
		var drawPolygon = F2(
			function (colour, nodes) {
				var vertexIndexEntry = function (vertex) {
					return {
						box: A2(
							$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
							_Utils_Tuple2(
								$ianmackenzie$elm_units$Length$meters(10),
								$ianmackenzie$elm_units$Length$meters(10)),
							A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, vertex)),
						content: {
							altitude: $ianmackenzie$elm_geometry$Point3d$zCoordinate(vertex),
							leafIndex: -1
						}
					};
				};
				var mesh3d = function () {
					var vertices3d = $elm$core$Array$fromList(nodes);
					var polygon = $ianmackenzie$elm_geometry$Polygon2d$singleLoop(
						A2(
							$elm$core$List$map,
							$ianmackenzie$elm_geometry$Point3d$projectInto($ianmackenzie$elm_geometry$SketchPlane3d$xy),
							nodes));
					var mesh2d = $ianmackenzie$elm_geometry$Polygon2d$triangulate(polygon);
					var faceIndices = $ianmackenzie$elm_triangular_mesh$TriangularMesh$faceIndices(mesh2d);
					return A2($ianmackenzie$elm_triangular_mesh$TriangularMesh$indexed, vertices3d, faceIndices);
				}();
				return ($elm$core$List$length(nodes) < 3) ? _Utils_Tuple2($ianmackenzie$elm_3d_scene$Scene3d$nothing, _List_Nil) : _Utils_Tuple2(
					A2(
						$ianmackenzie$elm_3d_scene$Scene3d$mesh,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color(colour),
						$ianmackenzie$elm_3d_scene$Scene3d$Mesh$indexedTriangles(mesh3d)),
					A2($elm$core$List$map, vertexIndexEntry, nodes));
			});
		var drawWay = F2(
			function (way, stuff) {
				var _v6 = way.tags;
				if (_v6.$ === 'Nothing') {
					return stuff;
				} else {
					var tags = _v6.a;
					var useTag = A2(
						$elm$core$Maybe$withDefault,
						'',
						function () {
							var _v9 = _Utils_Tuple2(
								A2($elm$core$Dict$get, 'natural', tags),
								A2($elm$core$Dict$get, 'landuse', tags));
							if (_v9.b.$ === 'Just') {
								var usage = _v9.b.a;
								return $elm$core$Maybe$Just(usage);
							} else {
								if (_v9.a.$ === 'Just') {
									var natural = _v9.a.a;
									var _v10 = _v9.b;
									return $elm$core$Maybe$Just(natural);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}
						}());
					var addToIndex = F2(
						function (content, indexing) {
							return A2($author$project$SpatialIndex$add, content, indexing);
						});
					var _v7 = A2($elm$core$Dict$get, useTag, $author$project$Tools$LandUseColours$landUseColours);
					if (_v7.$ === 'Just') {
						var colour = _v7.a;
						var _v8 = A2(
							drawPolygon,
							colour,
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.at;
									},
									function ($) {
										return $.space;
									}),
								way.nodes));
						var polygon = _v8.a;
						var indexEntries = _v8.b;
						return {
							scenes: A2($elm$core$List$cons, polygon, stuff.scenes),
							unknownTags: stuff.unknownTags,
							updatedIndex: A3($elm$core$List$foldl, addToIndex, stuff.updatedIndex, indexEntries)
						};
					} else {
						return stuff;
					}
				}
			});
		var drawCone = F2(
			function (colour, at) {
				var tip = A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2(
						$ianmackenzie$elm_geometry$Vector3d$withLength,
						$ianmackenzie$elm_units$Length$meters(10),
						$ianmackenzie$elm_geometry$Direction3d$positiveZ),
					at);
				var _v5 = A3(
					$ianmackenzie$elm_geometry$Cone3d$from,
					at,
					tip,
					$ianmackenzie$elm_units$Length$meters(4));
				if (_v5.$ === 'Just') {
					var cone = _v5.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2(
								$ianmackenzie$elm_3d_scene$Scene3d$cone,
								$ianmackenzie$elm_3d_scene$Scene3d$Material$color(colour),
								cone),
							{
								box: A2(
									$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
									_Utils_Tuple2(
										$ianmackenzie$elm_units$Length$meters(8),
										$ianmackenzie$elm_units$Length$meters(8)),
									A2($ianmackenzie$elm_geometry$Point3d$projectInto, $ianmackenzie$elm_geometry$SketchPlane3d$xy, at)),
								content: {
									altitude: $ianmackenzie$elm_geometry$Point3d$zCoordinate(at),
									leafIndex: -1
								}
							}));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
		var drawNode = F2(
			function (node, stuff) {
				var _v0 = node.tags;
				if (_v0.$ === 'Nothing') {
					return stuff;
				} else {
					var tags = _v0.a;
					var _v1 = A2($elm$core$Dict$get, 'natural', tags);
					if (_v1.$ === 'Nothing') {
						return stuff;
					} else {
						var natural = _v1.a;
						var _v2 = A2($elm$core$Dict$get, natural, $author$project$Tools$LandUseColours$landUseColours);
						if (_v2.$ === 'Just') {
							var colour = _v2.a;
							var _v3 = A2(drawCone, colour, node.at.space);
							if (_v3.$ === 'Just') {
								var _v4 = _v3.a;
								var gotCone = _v4.a;
								var indexEntry = _v4.b;
								return {
									scenes: A2($elm$core$List$cons, gotCone, stuff.scenes),
									unknownTags: stuff.unknownTags,
									updatedIndex: A2($author$project$SpatialIndex$add, indexEntry, stuff.updatedIndex)
								};
							} else {
								return stuff;
							}
						} else {
							return _Utils_update(
								stuff,
								{
									unknownTags: A3($elm$core$Dict$insert, 'natural', natural, stuff.unknownTags)
								});
						}
					}
				}
			});
		var nodeStuff = A3(
			$elm$core$List$foldl,
			drawNode,
			{scenes: _List_Nil, unknownTags: $elm$core$Dict$empty, updatedIndex: index},
			landUse.nodes);
		var wayStuff = A3($elm$core$List$foldl, drawWay, nodeStuff, landUse.ways);
		return _Utils_Tuple2(wayStuff.scenes, wayStuff.updatedIndex);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$LambertianMaterial = F3(
	function (a, b, c) {
		return {$: 'LambertianMaterial', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$VerticalNormal = {$: 'VerticalNormal'};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb = function (a) {
	return {$: 'LinearRgb', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma = function (u) {
	return A3(
		$elm$core$Basics$clamp,
		0,
		1,
		(u <= 0.04045) ? (u / 12.92) : A2($elm$core$Basics$pow, (u + 0.055) / 1.055, 2.4));
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$colorToLinearRgb = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var blue = _v0.blue;
	var green = _v0.green;
	var red = _v0.red;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb(
		A3(
			$elm_explorations$linear_algebra$Math$Vector3$vec3,
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(red),
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(green),
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$inverseGamma(blue)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Material$matte = function (materialColor) {
	return A3(
		$ianmackenzie$elm_3d_scene$Scene3d$Types$LambertianMaterial,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$UseMeshUvs,
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant(
			$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$colorToLinearRgb(materialColor)),
		$ianmackenzie$elm_3d_scene$Scene3d$Types$Constant($ianmackenzie$elm_3d_scene$Scene3d$Types$VerticalNormal));
};
var $ianmackenzie$elm_geometry$Plane3d$normalDirection = function (_v0) {
	var plane = _v0.a;
	return plane.normalDirection;
};
var $ianmackenzie$elm_geometry$Plane3d$withNormalDirection = F2(
	function (givenNormalDirection, givenPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Plane3d(
			{normalDirection: givenNormalDirection, originPoint: givenPoint});
	});
var $ianmackenzie$elm_geometry$Plane3d$translateBy = F2(
	function (vector, _v0) {
		var plane = _v0.a;
		return A2(
			$ianmackenzie$elm_geometry$Plane3d$withNormalDirection,
			plane.normalDirection,
			A2($ianmackenzie$elm_geometry$Point3d$translateBy, vector, plane.originPoint));
	});
var $ianmackenzie$elm_geometry$Plane3d$translateIn = F3(
	function (direction, distance, plane) {
		return A2(
			$ianmackenzie$elm_geometry$Plane3d$translateBy,
			A2($ianmackenzie$elm_geometry$Vector3d$withLength, distance, direction),
			plane);
	});
var $ianmackenzie$elm_geometry$Plane3d$offsetBy = F2(
	function (distance, plane) {
		return A3(
			$ianmackenzie$elm_geometry$Plane3d$translateIn,
			$ianmackenzie$elm_geometry$Plane3d$normalDirection(plane),
			distance,
			plane);
	});
var $ianmackenzie$elm_geometry$LineSegment3d$projectOnto = F2(
	function (plane, lineSegment) {
		return A2(
			$ianmackenzie$elm_geometry$LineSegment3d$mapEndpoints,
			$ianmackenzie$elm_geometry$Point3d$projectOnto(plane),
			lineSegment);
	});
var $author$project$SceneBuilder3D$NE = {$: 'NE'};
var $author$project$SceneBuilder3D$NW = {$: 'NW'};
var $author$project$SceneBuilder3D$SE = {$: 'SE'};
var $author$project$SceneBuilder3D$SW = {$: 'SW'};
var $ianmackenzie$elm_geometry$BoundingBox2d$dimensions = function (boundingBox) {
	return _Utils_Tuple2(
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox2d$minX(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxX(boundingBox)),
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$BoundingBox2d$minY(boundingBox),
			$ianmackenzie$elm_geometry$BoundingBox2d$maxY(boundingBox)));
};
var $ianmackenzie$elm_geometry$BoundingBox2d$intersection = F2(
	function (firstBox, secondBox) {
		return A2($ianmackenzie$elm_geometry$BoundingBox2d$intersects, firstBox, secondBox) ? $elm$core$Maybe$Just(
			$ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
				{
					maxX: A2(
						$ianmackenzie$elm_units$Quantity$min,
						$ianmackenzie$elm_geometry$BoundingBox2d$maxX(firstBox),
						$ianmackenzie$elm_geometry$BoundingBox2d$maxX(secondBox)),
					maxY: A2(
						$ianmackenzie$elm_units$Quantity$min,
						$ianmackenzie$elm_geometry$BoundingBox2d$maxY(firstBox),
						$ianmackenzie$elm_geometry$BoundingBox2d$maxY(secondBox)),
					minX: A2(
						$ianmackenzie$elm_units$Quantity$max,
						$ianmackenzie$elm_geometry$BoundingBox2d$minX(firstBox),
						$ianmackenzie$elm_geometry$BoundingBox2d$minX(secondBox)),
					minY: A2(
						$ianmackenzie$elm_units$Quantity$max,
						$ianmackenzie$elm_geometry$BoundingBox2d$minY(firstBox),
						$ianmackenzie$elm_geometry$BoundingBox2d$minY(secondBox))
				})) : $elm$core$Maybe$Nothing;
	});
var $author$project$SceneBuilder3D$terrainColourFromHeight = function (height) {
	var lightness = A3(
		$elm$core$Basics$clamp,
		0.1,
		0.9,
		$elm$core$Basics$sqrt(
			$elm$core$Basics$sqrt(
				$elm$core$Basics$abs(height / 3000.0))));
	return A3(
		$avh4$elm_color$Color$hsl,
		(80.0 + (50.0 * $elm$core$Basics$sin(height))) / 255,
		133 / 255,
		lightness);
};
var $author$project$SceneBuilder3D$terrainFromIndex = F6(
	function (myBox, enclosingBox, orientation, options, baseElevation, index) {
		var myExtrema = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(myBox);
		var centre = $ianmackenzie$elm_geometry$BoundingBox2d$centerPoint(myBox);
		var _v0 = A2($author$project$SceneBuilder3D$queryAltitudeFromIndex, index, myBox);
		var minAltitude = _v0.minAltitude;
		var resultBox = _v0.resultBox;
		var count = _v0.count;
		var isNotTiny = function (bx) {
			var splitSize = $ianmackenzie$elm_units$Length$meters(
				100 / A3($elm$core$Basics$clamp, 1.0, 10.0, options.terrainFineness));
			var _v3 = $ianmackenzie$elm_geometry$BoundingBox2d$dimensions(bx);
			var width = _v3.a;
			var height = _v3.b;
			return A2($ianmackenzie$elm_units$Quantity$greaterThan, splitSize, width) && (A2($ianmackenzie$elm_units$Quantity$greaterThan, splitSize, height) && (count > 1));
		};
		var topBeforeAdjustment = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$positiveInfinity, minAltitude) ? baseElevation : minAltitude;
		var top = A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_units$Length$foot, topBeforeAdjustment);
		var contentBox = function () {
			if (resultBox.$ === 'Just') {
				var box = resultBox.a;
				return A2(
					$elm$core$Maybe$withDefault,
					myBox,
					A2($ianmackenzie$elm_geometry$BoundingBox2d$intersection, myBox, box));
			} else {
				return myBox;
			}
		}();
		var _v1 = {
			neChildBox: A2(
				$elm$core$Maybe$withDefault,
				contentBox,
				A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersection,
					contentBox,
					A2(
						$ianmackenzie$elm_geometry$BoundingBox2d$from,
						centre,
						A2($ianmackenzie$elm_geometry$Point2d$xy, myExtrema.maxX, myExtrema.maxY)))),
			nwChildBox: A2(
				$elm$core$Maybe$withDefault,
				contentBox,
				A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersection,
					contentBox,
					A2(
						$ianmackenzie$elm_geometry$BoundingBox2d$from,
						centre,
						A2($ianmackenzie$elm_geometry$Point2d$xy, myExtrema.minX, myExtrema.maxY)))),
			seChildBox: A2(
				$elm$core$Maybe$withDefault,
				contentBox,
				A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersection,
					contentBox,
					A2(
						$ianmackenzie$elm_geometry$BoundingBox2d$from,
						centre,
						A2($ianmackenzie$elm_geometry$Point2d$xy, myExtrema.maxX, myExtrema.minY)))),
			swChildBox: A2(
				$elm$core$Maybe$withDefault,
				contentBox,
				A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersection,
					contentBox,
					A2(
						$ianmackenzie$elm_geometry$BoundingBox2d$from,
						centre,
						A2($ianmackenzie$elm_geometry$Point2d$xy, myExtrema.minX, myExtrema.minY))))
		};
		var nwChildBox = _v1.nwChildBox;
		var neChildBox = _v1.neChildBox;
		var swChildBox = _v1.swChildBox;
		var seChildBox = _v1.seChildBox;
		var thisLevelSceneElements = function () {
			if (A2($ianmackenzie$elm_units$Quantity$greaterThan, baseElevation, top)) {
				var topColour = $author$project$SceneBuilder3D$terrainColourFromHeight(
					$ianmackenzie$elm_units$Length$inMeters(top));
				var sideColour = $author$project$SceneBuilder3D$terrainColourFromHeight(
					0.5 * ($ianmackenzie$elm_units$Length$inMeters(top) + $ianmackenzie$elm_units$Length$inMeters(baseElevation)));
				var parentExtrema = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(enclosingBox);
				var southernBottomEdge = (_Utils_eq(orientation, $author$project$SceneBuilder3D$SW) || _Utils_eq(orientation, $author$project$SceneBuilder3D$SE)) ? parentExtrema.minY : myExtrema.minY;
				var westernBottomEdge = (_Utils_eq(orientation, $author$project$SceneBuilder3D$NW) || _Utils_eq(orientation, $author$project$SceneBuilder3D$SW)) ? parentExtrema.minX : myExtrema.minX;
				var northernBottomEdge = (_Utils_eq(orientation, $author$project$SceneBuilder3D$NW) || _Utils_eq(orientation, $author$project$SceneBuilder3D$NE)) ? parentExtrema.maxY : myExtrema.maxY;
				var elevationIncrease = A2($ianmackenzie$elm_units$Quantity$minus, baseElevation, topBeforeAdjustment);
				var easternBottomEdge = (_Utils_eq(orientation, $author$project$SceneBuilder3D$NE) || _Utils_eq(orientation, $author$project$SceneBuilder3D$SE)) ? parentExtrema.maxX : myExtrema.maxX;
				var contentExtrema = $ianmackenzie$elm_geometry$BoundingBox2d$extrema(contentBox);
				var plateauExtrema = {
					maxX: A2(
						$ianmackenzie$elm_units$Quantity$max,
						contentExtrema.maxX,
						A2($ianmackenzie$elm_units$Quantity$minus, elevationIncrease, myExtrema.maxX)),
					maxY: A2(
						$ianmackenzie$elm_units$Quantity$max,
						contentExtrema.maxY,
						A2($ianmackenzie$elm_units$Quantity$minus, elevationIncrease, myExtrema.maxY)),
					minX: A2(
						$ianmackenzie$elm_units$Quantity$min,
						contentExtrema.minX,
						A2($ianmackenzie$elm_units$Quantity$plus, elevationIncrease, myExtrema.minX)),
					minY: A2(
						$ianmackenzie$elm_units$Quantity$min,
						contentExtrema.minY,
						A2($ianmackenzie$elm_units$Quantity$plus, elevationIncrease, myExtrema.minY))
				};
				var easternSlope = A5(
					$ianmackenzie$elm_3d_scene$Scene3d$quad,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte(sideColour),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.minY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.maxY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, easternBottomEdge, northernBottomEdge, baseElevation),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, easternBottomEdge, southernBottomEdge, baseElevation));
				var northernSlope = A5(
					$ianmackenzie$elm_3d_scene$Scene3d$quad,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte(sideColour),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.maxY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.maxY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, easternBottomEdge, northernBottomEdge, baseElevation),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, westernBottomEdge, northernBottomEdge, baseElevation));
				var southernSlope = A5(
					$ianmackenzie$elm_3d_scene$Scene3d$quad,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte(sideColour),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.minY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.minY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, easternBottomEdge, southernBottomEdge, baseElevation),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, westernBottomEdge, southernBottomEdge, baseElevation));
				var westernSlope = A5(
					$ianmackenzie$elm_3d_scene$Scene3d$quad,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte(sideColour),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.minY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.maxY, top),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, westernBottomEdge, northernBottomEdge, baseElevation),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, westernBottomEdge, southernBottomEdge, baseElevation));
				return _List_fromArray(
					[
						A5(
						$ianmackenzie$elm_3d_scene$Scene3d$quad,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$matte(topColour),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.maxY, top),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.maxX, plateauExtrema.minY, top),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.minY, top),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, plateauExtrema.minX, plateauExtrema.maxY, top)),
						northernSlope,
						southernSlope,
						westernSlope,
						easternSlope
					]);
			} else {
				return _List_Nil;
			}
		}();
		return _Utils_ap(
			thisLevelSceneElements,
			isNotTiny(myBox) ? $elm$core$List$concat(
				_List_fromArray(
					[
						A6($author$project$SceneBuilder3D$terrainFromIndex, nwChildBox, contentBox, $author$project$SceneBuilder3D$NW, options, top, index),
						A6($author$project$SceneBuilder3D$terrainFromIndex, neChildBox, contentBox, $author$project$SceneBuilder3D$NE, options, top, index),
						A6($author$project$SceneBuilder3D$terrainFromIndex, seChildBox, contentBox, $author$project$SceneBuilder3D$SE, options, top, index),
						A6($author$project$SceneBuilder3D$terrainFromIndex, swChildBox, contentBox, $author$project$SceneBuilder3D$SW, options, top, index)
					])) : _List_Nil);
	});
var $author$project$SceneBuilder3D$render3dView = F2(
	function (settings, track) {
		var renderPointZero = A3(
			$ianmackenzie$elm_3d_scene$Scene3d$point,
			{
				radius: $ianmackenzie$elm_units$Pixels$pixels(2)
			},
			$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$black),
			$author$project$DomainModel$getFirstLeaf(track.trackTree).startPoint.space);
		var renderCurrentMarkers = A2(
			$elm$core$List$cons,
			A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(15)
				},
				$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$lightOrange),
				A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree).space),
			function () {
				var _v3 = track.markerPosition;
				if (_v3.$ === 'Just') {
					var marker = _v3.a;
					return _List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$point,
							{
								radius: $ianmackenzie$elm_units$Pixels$pixels(12)
							},
							$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
								$avh4$elm_color$Color$fromRgba(
									$mdgriffith$elm_ui$Element$toRgb($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple))),
							A2($author$project$DomainModel$earthPointFromIndex, marker, track.trackTree).space)
						]);
				} else {
					return _List_Nil;
				}
			}());
		var nominalRenderDepth = A3(
			$elm$core$Basics$clamp,
			1,
			10,
			$elm$core$Basics$round(
				A2(
					$elm$core$Basics$logBase,
					2,
					$author$project$DomainModel$skipCount(track.trackTree))));
		var nearbySpace = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$expandBy,
			$ianmackenzie$elm_units$Length$kilometer,
			$author$project$DomainModel$boundingBox(track.trackTree));
		var spatialIndex = A2($author$project$SceneBuilder3D$indexTerrain, nearbySpace, track.trackTree);
		var groundPlane = function () {
			var _v2 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(nearbySpace);
			var minX = _v2.minX;
			var maxX = _v2.maxX;
			var minY = _v2.minY;
			var maxY = _v2.maxY;
			if (settings.groundPlane && (settings.terrainFineness === 0.0)) {
				var modelMinZ = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					$ianmackenzie$elm_units$Length$inches(6),
					$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
						$author$project$DomainModel$boundingBox(track.trackTree)));
				return _List_fromArray(
					[
						A5(
						$ianmackenzie$elm_3d_scene$Scene3d$quad,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
							$author$project$UtilsForViews$colorFromElmUiColour($smucode$elm_flat_colors$FlatColors$IndianPalette$keppel)),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, minY, modelMinZ),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, maxY, modelMinZ),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, maxY, modelMinZ),
						A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, minY, modelMinZ))
					]);
			} else {
				return _List_Nil;
			}
		}();
		var fullRenderingZone = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
			_Utils_Tuple3($author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize, $author$project$UtilsForViews$fullDepthRenderingBoxSize),
			$author$project$DomainModel$startPoint(
				A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree)).space);
		var floorPlane = A2(
			$ianmackenzie$elm_geometry$Plane3d$offsetBy,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(
				$author$project$DomainModel$boundingBox(track.trackTree)),
			$ianmackenzie$elm_geometry$Plane3d$xy);
		var gradientCurtain = function (road) {
			if (_Utils_eq(settings.curtainStyle, $author$project$Tools$DisplaySettingsOptions$NoCurtain)) {
				return _List_Nil;
			} else {
				var roadAsSegment = A2($ianmackenzie$elm_geometry$LineSegment3d$from, road.startPoint.space, road.endPoint.space);
				var gradient = road.gradientAtStart;
				var curtainHem = A2($ianmackenzie$elm_geometry$LineSegment3d$projectOnto, floorPlane, roadAsSegment);
				var colourFn = _Utils_eq(settings.curtainStyle, $author$project$Tools$DisplaySettingsOptions$PastelCurtain) ? $author$project$ColourPalette$gradientColourPastel : $elm$core$Basics$always(
					$avh4$elm_color$Color$fromRgba(
						$mdgriffith$elm_ui$Element$toRgb($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea)));
				return _List_fromArray(
					[
						A5(
						$ianmackenzie$elm_3d_scene$Scene3d$quad,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color(
							colourFn(gradient)),
						$ianmackenzie$elm_geometry$LineSegment3d$startPoint(roadAsSegment),
						$ianmackenzie$elm_geometry$LineSegment3d$endPoint(roadAsSegment),
						$ianmackenzie$elm_geometry$LineSegment3d$endPoint(curtainHem),
						$ianmackenzie$elm_geometry$LineSegment3d$startPoint(curtainHem))
					]);
			}
		};
		var makeVisibleSegment = function (road) {
			return _Utils_ap(
				settings.roadSurface ? A4(
					$author$project$SceneBuilder3D$paintSomethingBetween,
					$author$project$SceneBuilder3D$roadWidth,
					$ianmackenzie$elm_3d_scene$Scene3d$Material$matte($avh4$elm_color$Color$grey),
					road.startPoint.space,
					road.endPoint.space) : _List_fromArray(
					[
						A3(
						$ianmackenzie$elm_3d_scene$Scene3d$point,
						{
							radius: $ianmackenzie$elm_units$Pixels$pixels(2)
						},
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$black),
						road.endPoint.space),
						A2(
						$ianmackenzie$elm_3d_scene$Scene3d$lineSegment,
						$ianmackenzie$elm_3d_scene$Scene3d$Material$color($avh4$elm_color$Color$lightCharcoal),
						A2($ianmackenzie$elm_geometry$LineSegment3d$from, road.startPoint.space, road.endPoint.space))
					]),
				_Utils_ap(
					gradientCurtain(road),
					settings.centreLine ? A2($author$project$SceneBuilder3D$centreLineBetween, $author$project$ColourPalette$gradientColourPastel, road) : _List_Nil));
		};
		var foldFn = F2(
			function (road, scene) {
				return _Utils_ap(
					makeVisibleSegment(road),
					scene);
			});
		var depthFn = function (road) {
			return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderingZone, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(nominalRenderDepth);
		};
		var _v0 = function () {
			var _v1 = settings.landUse;
			switch (_v1.$) {
				case 'LandUseHidden':
					return _Utils_Tuple2(_List_Nil, spatialIndex);
				case 'LandUseSloped':
					return A4($author$project$SceneBuilder3D$makeLandUseSloped, track.landUseData, spatialIndex, track.trackTree, floorPlane);
				default:
					return A4($author$project$SceneBuilder3D$makeLandUsePlanar, track.landUseData, spatialIndex, track, floorPlane);
			}
		}();
		var landUseElements = _v0.a;
		var indexWithLandUse = _v0.b;
		var terrain = (settings.terrainFineness > 0.0) ? A6(
			$author$project$SceneBuilder3D$terrainFromIndex,
			$author$project$UtilsForViews$flatBox(nearbySpace),
			$author$project$UtilsForViews$flatBox(nearbySpace),
			$author$project$SceneBuilder3D$NoContext,
			settings,
			$ianmackenzie$elm_geometry$BoundingBox3d$minZ(nearbySpace),
			indexWithLandUse) : _List_Nil;
		return A2(
			$elm$core$List$cons,
			renderPointZero,
			_Utils_ap(
				terrain,
				_Utils_ap(
					landUseElements,
					A7(
						$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
						0,
						$author$project$DomainModel$skipCount(track.trackTree),
						depthFn,
						0,
						track.trackTree,
						foldFn,
						_Utils_ap(groundPlane, renderCurrentMarkers)))));
	});
var $author$project$SceneBuilder3D$previewAsLine = F2(
	function (color, points) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$matte(
			$avh4$elm_color$Color$fromRgba(
				$mdgriffith$elm_ui$Element$toRgb(color)));
		var preview = F2(
			function (p1, p2) {
				return A4(
					$author$project$SceneBuilder3D$paintSomethingBetween,
					$ianmackenzie$elm_units$Length$meters(0.5),
					material,
					p1.space,
					p2.space);
			});
		return $elm$core$List$concat(
			A3(
				$elm$core$List$map2,
				preview,
				points,
				A2($elm$core$List$drop, 1, points)));
	});
var $author$project$SceneBuilder3D$previewAsPoints = F2(
	function (color, points) {
		var material = $ianmackenzie$elm_3d_scene$Scene3d$Material$color(
			$avh4$elm_color$Color$fromRgba(
				$mdgriffith$elm_ui$Element$toRgb(color)));
		var highlightPoint = function (p) {
			return A3(
				$ianmackenzie$elm_3d_scene$Scene3d$point,
				{
					radius: $ianmackenzie$elm_units$Pixels$pixels(7)
				},
				material,
				p.space);
		};
		return A2($elm$core$List$map, highlightPoint, points);
	});
var $author$project$SceneBuilder3D$renderPreviews = function (previews) {
	var onePreview = function (_v1) {
		var tag = _v1.tag;
		var shape = _v1.shape;
		var colour = _v1.colour;
		var points = _v1.points;
		switch (shape.$) {
			case 'PreviewCircle':
				return A2(
					$author$project$SceneBuilder3D$previewAsPoints,
					colour,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.earthPoint;
						},
						points));
			case 'PreviewLine':
				return A2(
					$author$project$SceneBuilder3D$previewAsLine,
					colour,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.earthPoint;
						},
						points));
			case 'PreviewToolSupplied':
				var callback = shape.a;
				return callback;
			default:
				return _List_Nil;
		}
	};
	return A2(
		$elm$core$List$concatMap,
		onePreview,
		$elm$core$Dict$values(previews));
};
var $author$project$PaneLayoutManager$render = F5(
	function (toolSettings, options, width, track, previews) {
		return _Utils_update(
			options,
			{
				scene3d: _Utils_ap(
					$author$project$SceneBuilder3D$renderPreviews(previews),
					A2($author$project$SceneBuilder3D$render3dView, toolSettings.displaySettings, track))
			});
	});
var $author$project$Main$render = function (model) {
	var _v0 = _Utils_Tuple2(model.track, model.needsRendering);
	if ((_v0.a.$ === 'Just') && _v0.b) {
		var track = _v0.a.a;
		var paneLayout = A5($author$project$PaneLayoutManager$render, model.toolOptions, model.paneLayoutOptions, model.contentArea.a, track, model.previews);
		return _Utils_update(
			model,
			{needsRendering: false, paneLayoutOptions: paneLayout});
	} else {
		return model;
	}
};
var $author$project$Tools$I18N$Dictionary = function (a) {
	return {$: 'Dictionary', a: a};
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{body: $elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $author$project$Tools$I18N$locationDecoder = $elm$json$Json$Decode$dict(
	$elm$json$Json$Decode$dict($elm$json$Json$Decode$string));
var $author$project$Tools$I18N$requestDictionary = F2(
	function (wrapper, countryCode) {
		return $elm$http$Http$get(
			{
				expect: A2(
					$elm$http$Http$expectJson,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$Dictionary),
					$author$project$Tools$I18N$locationDecoder),
				url: 'languages/' + (countryCode + '.JSON')
			});
	});
var $author$project$MyIP$apiRoot = 'http://ip-api.com';
var $author$project$GeoCodeDecoders$IpInfo = F7(
	function (ip, country, region, city, zip, latitude, longitude) {
		return {city: city, country: country, ip: ip, latitude: latitude, longitude: longitude, region: region, zip: zip};
	});
var $elm$json$Json$Decode$map7 = _Json_map7;
var $author$project$GeoCodeDecoders$ipInfoDecoder = A8(
	$elm$json$Json$Decode$map7,
	$author$project$GeoCodeDecoders$IpInfo,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['query']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['country']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['region']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['city']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['zip']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['lat']),
		$elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['lon']),
		$elm$json$Json$Decode$float));
var $author$project$MyIP$requestIpInformation = function (msg) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$emptyBody,
			expect: A2($elm$http$Http$expectJson, msg, $author$project$GeoCodeDecoders$ipInfoDecoder),
			headers: _List_Nil,
			method: 'GET',
			timeout: $elm$core$Maybe$Nothing,
			tracker: $elm$core$Maybe$Nothing,
			url: A3(
				$elm$url$Url$Builder$crossOrigin,
				$author$project$MyIP$apiRoot,
				_List_fromArray(
					['json']),
				_List_Nil)
		});
};
var $author$project$LandUseDataOSM$apiRoot = 'https://overpass.kumi.systems';
var $author$project$LandUseDataTypes$OSMLandUseData = function (elements) {
	return {elements: elements};
};
var $author$project$LandUseDataTypes$OSMNode = function (a) {
	return {$: 'OSMNode', a: a};
};
var $author$project$LandUseDataTypes$OSMWay = function (a) {
	return {$: 'OSMWay', a: a};
};
var $author$project$LandUseDataTypes$OSMLandUseNode = F5(
	function (type_, id, lat, lon, tags) {
		return {id: id, lat: lat, lon: lon, tags: tags, type_: type_};
	});
var $author$project$LandUseDataOSM$landUseTagsDecoder = $elm$json$Json$Decode$dict($elm$json$Json$Decode$string);
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$LandUseDataOSM$landUseNodeDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$LandUseDataTypes$OSMLandUseNode,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'lat', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'lon', $elm$json$Json$Decode$float),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'tags', $author$project$LandUseDataOSM$landUseTagsDecoder)));
var $author$project$LandUseDataTypes$OSMLandUseWay = F4(
	function (type_, id, nodes, tags) {
		return {id: id, nodes: nodes, tags: tags, type_: type_};
	});
var $author$project$LandUseDataOSM$landUseWayDecoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$LandUseDataTypes$OSMLandUseWay,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$field,
		'nodes',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'tags', $author$project$LandUseDataOSM$landUseTagsDecoder)));
var $author$project$LandUseDataOSM$landUseElementDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm$json$Json$Decode$map, $author$project$LandUseDataTypes$OSMNode, $author$project$LandUseDataOSM$landUseNodeDecoder),
			A2($elm$json$Json$Decode$map, $author$project$LandUseDataTypes$OSMWay, $author$project$LandUseDataOSM$landUseWayDecoder)
		]));
var $author$project$LandUseDataOSM$landUseDecoder = A2(
	$elm$json$Json$Decode$map,
	$author$project$LandUseDataTypes$OSMLandUseData,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['elements']),
		$elm$json$Json$Decode$list($author$project$LandUseDataOSM$landUseElementDecoder)));
var $author$project$LandUseDataOSM$queryFromBoundingBox = function (track) {
	var _v0 = $ianmackenzie$elm_geometry$BoundingBox3d$extrema(
		$author$project$DomainModel$boundingBox(track.trackTree));
	var minX = _v0.minX;
	var maxX = _v0.maxX;
	var minY = _v0.minY;
	var maxY = _v0.maxY;
	var minZ = _v0.minZ;
	var maxZ = _v0.maxZ;
	var _v1 = _Utils_Tuple2(
		$author$project$DomainModel$withoutTime(
			A3($ianmackenzie$elm_geometry$Point3d$xyz, minX, minY, minZ)),
		$author$project$DomainModel$withoutTime(
			A3($ianmackenzie$elm_geometry$Point3d$xyz, maxX, maxY, maxZ)));
	var sw = _v1.a;
	var ne = _v1.b;
	var _v2 = _Utils_Tuple2(
		$ianmackenzie$elm_geometry$Direction2d$toAngle(
			A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, sw).longitude),
		$ianmackenzie$elm_geometry$Direction2d$toAngle(
			A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, ne).longitude));
	var minLon = _v2.a;
	var maxLon = _v2.b;
	var _v3 = _Utils_Tuple2(
		A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, sw).latitude,
		A2($author$project$DomainModel$gpxFromPointWithReference, track.referenceLonLat, ne).latitude);
	var minLat = _v3.a;
	var maxLat = _v3.b;
	return A2(
		$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
		'[out:json][timeout:30];\n(\nnode["natural"]({0},{1},{2},{3});\nway["natural"]({0},{1},{2},{3}) (if:length()>500);\nnode["landuse"]({0},{1},{2},{3});\nway["landuse"]({0},{1},{2},{3}) (if:length()>500);\n);\nout body;\n>;\nout skel qt;',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(minLat)),
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(minLon)),
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(maxLat)),
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(maxLon))
			]));
};
var $elm$http$Http$stringBody = _Http_pair;
var $author$project$LandUseDataOSM$requestLandUseData = F2(
	function (msg, track) {
		return $elm$http$Http$request(
			{
				body: A2(
					$elm$http$Http$stringBody,
					'text/plain',
					$author$project$LandUseDataOSM$queryFromBoundingBox(track)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$LandUseDataOSM$landUseDecoder),
				headers: _List_Nil,
				method: 'POST',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: A3(
					$elm$url$Url$Builder$crossOrigin,
					$author$project$LandUseDataOSM$apiRoot,
					_List_fromArray(
						['api', 'interpreter']),
					_List_Nil)
			});
	});
var $author$project$ToolsController$restoreDockSettings = F2(
	function (options, values) {
		var updateDock = F3(
			function (k, v, dict) {
				return A3(
					$elm$core$Dict$update,
					k,
					function (dock) {
						if (dock.$ === 'Just') {
							var isDock = dock.a;
							return $elm$core$Maybe$Just(
								_Utils_update(
									isDock,
									{dockLabel: v}));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					},
					dict);
			});
		var useStoredSettings = function (settings) {
			return A3($elm$core$Dict$foldl, updateDock, options.docks, settings);
		};
		var storedSettings = A2(
			$elm$json$Json$Decode$decodeValue,
			$elm$json$Json$Decode$dict($elm$json$Json$Decode$string),
			values);
		if (storedSettings.$ === 'Ok') {
			var stored = storedSettings.a;
			return _Utils_update(
				options,
				{
					docks: useStoredSettings(stored)
				});
		} else {
			return options;
		}
	});
var $author$project$ToolsController$restoreMeasure = F2(
	function (options, value) {
		var decoded = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, value);
		if (decoded.$ === 'Ok') {
			var setting = decoded.a;
			return _Utils_update(
				options,
				{imperial: setting});
		} else {
			return options;
		}
	});
var $author$project$Tools$DisplaySettingsOptions$PlainCurtain = {$: 'PlainCurtain'};
var $author$project$Tools$DisplaySettingsOptions$decodeCurtain = function (value) {
	switch (value) {
		case 'NoCurtain':
			return $author$project$Tools$DisplaySettingsOptions$NoCurtain;
		case 'PlainCurtain':
			return $author$project$Tools$DisplaySettingsOptions$PlainCurtain;
		default:
			return $author$project$Tools$DisplaySettingsOptions$PastelCurtain;
	}
};
var $author$project$Tools$DisplaySettingsOptions$StoredOptions = F4(
	function (roadSurface, groundPlane, centreLine, curtainStyle) {
		return {centreLine: centreLine, curtainStyle: curtainStyle, groundPlane: groundPlane, roadSurface: roadSurface};
	});
var $author$project$Tools$DisplaySettingsOptions$decoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Tools$DisplaySettingsOptions$StoredOptions,
	A2($elm$json$Json$Decode$field, 'surface', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ground', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'centre', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'curtain', $elm$json$Json$Decode$string));
var $author$project$Tools$DisplaySettingsOptions$decode = F2(
	function (json, current) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Tools$DisplaySettingsOptions$decoder, json);
		if (_v0.$ === 'Ok') {
			var decoded = _v0.a;
			return {
				centreLine: decoded.centreLine,
				curtainStyle: $author$project$Tools$DisplaySettingsOptions$decodeCurtain(decoded.curtainStyle),
				groundPlane: decoded.groundPlane,
				landUse: $author$project$LandUseDataTypes$LandUseHidden,
				placeNames: false,
				roadSurface: decoded.roadSurface,
				showConstraintsAtLevel: $elm$core$Maybe$Nothing,
				terrainFineness: 0.0
			};
		} else {
			return current;
		}
	});
var $author$project$Tools$DisplaySettings$restoreSettings = F2(
	function (json, current) {
		return A2($author$project$Tools$DisplaySettingsOptions$decode, json, current);
	});
var $author$project$PaneLayoutManager$paneIdHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$PaneContext$Pane1, 'pane1'),
		_Utils_Tuple2($author$project$PaneContext$Pane2, 'pane2'),
		_Utils_Tuple2($author$project$PaneContext$Pane3, 'pane3'),
		_Utils_Tuple2($author$project$PaneContext$Pane4, 'pane4')
	]);
var $author$project$PaneLayoutManager$decodePaneId = function (paneId) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneContext$Pane1, 'pane1'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, paneId);
			},
			$author$project$PaneLayoutManager$paneIdHelper)).a;
};
var $author$project$ViewMode$ViewFirst = {$: 'ViewFirst'};
var $author$project$ViewMode$ViewMap = {$: 'ViewMap'};
var $author$project$ViewMode$ViewPlan = {$: 'ViewPlan'};
var $author$project$ViewMode$ViewProfileWebGL = {$: 'ViewProfileWebGL'};
var $author$project$PaneLayoutManager$viewHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$ViewMode$ViewInfo, 'info'),
		_Utils_Tuple2($author$project$ViewMode$ViewThird, 'third'),
		_Utils_Tuple2($author$project$ViewMode$ViewFirst, 'first'),
		_Utils_Tuple2($author$project$ViewMode$ViewPlan, 'plan'),
		_Utils_Tuple2($author$project$ViewMode$ViewProfileCanvas, 'profile'),
		_Utils_Tuple2($author$project$ViewMode$ViewProfileWebGL, 'profNew'),
		_Utils_Tuple2($author$project$ViewMode$ViewMap, 'map'),
		_Utils_Tuple2($author$project$ViewMode$ViewGraph, 'route')
	]);
var $author$project$PaneLayoutManager$decodeView = function (view) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$ViewMode$ViewInfo, 'info'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, view);
			},
			$author$project$PaneLayoutManager$viewHelper)).a;
};
var $author$project$PaneLayoutManager$applyStoredPaneDetails = function (stored) {
	return _Utils_update(
		$author$project$PaneLayoutManager$defaultPaneContext,
		{
			activeView: $author$project$PaneLayoutManager$decodeView(stored.activeView),
			paneId: $author$project$PaneLayoutManager$decodePaneId(stored.paneId)
		});
};
var $author$project$PaneContext$PanesGrid = {$: 'PanesGrid'};
var $author$project$PaneContext$PanesLeftRight = {$: 'PanesLeftRight'};
var $author$project$PaneContext$PanesOnePlusTwo = {$: 'PanesOnePlusTwo'};
var $author$project$PaneContext$PanesUpperLower = {$: 'PanesUpperLower'};
var $author$project$PaneLayoutManager$paneLayoutHelper = _List_fromArray(
	[
		_Utils_Tuple2($author$project$PaneContext$PanesOne, 'One'),
		_Utils_Tuple2($author$project$PaneContext$PanesLeftRight, 'LR'),
		_Utils_Tuple2($author$project$PaneContext$PanesUpperLower, 'UL'),
		_Utils_Tuple2($author$project$PaneContext$PanesOnePlusTwo, 'OneUpTwoDown'),
		_Utils_Tuple2($author$project$PaneContext$PanesGrid, 'Grid')
	]);
var $author$project$PaneLayoutManager$decodePanesLayout = function (layout) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneContext$PanesOne, 'One'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.b, layout);
			},
			$author$project$PaneLayoutManager$paneLayoutHelper)).a;
};
var $author$project$PaneLayoutManager$RestoredOptions = F5(
	function (layoutName, pane1, pane2, pane3, pane4) {
		return {layoutName: layoutName, pane1: pane1, pane2: pane2, pane3: pane3, pane4: pane4};
	});
var $author$project$PaneLayoutManager$StoredPane = F2(
	function (activeView, paneId) {
		return {activeView: activeView, paneId: paneId};
	});
var $author$project$PaneLayoutManager$paneDecoder = A3(
	$elm$json$Json$Decode$map2,
	$author$project$PaneLayoutManager$StoredPane,
	A2($elm$json$Json$Decode$field, 'activeView', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'paneid', $elm$json$Json$Decode$string));
var $author$project$PaneLayoutManager$paneStateDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$PaneLayoutManager$RestoredOptions,
	A2($elm$json$Json$Decode$field, 'layout', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'pane1', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane2', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane3', $author$project$PaneLayoutManager$paneDecoder),
	A2($elm$json$Json$Decode$field, 'pane4', $author$project$PaneLayoutManager$paneDecoder));
var $author$project$PaneLayoutManager$restoreStoredValues = F2(
	function (options, values) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$PaneLayoutManager$paneStateDecoder, values);
		if (_v0.$ === 'Ok') {
			var fromStorage = _v0.a;
			return _Utils_update(
				$author$project$PaneLayoutManager$defaultOptions,
				{
					pane1: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane1),
					pane2: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane2),
					pane3: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane3),
					pane4: $author$project$PaneLayoutManager$applyStoredPaneDetails(fromStorage.pane4),
					paneLayout: $author$project$PaneLayoutManager$decodePanesLayout(fromStorage.layoutName),
					popupVisible: false
				});
		} else {
			return options;
		}
	});
var $author$project$ToolsController$DockBottom = {$: 'DockBottom'};
var $author$project$ToolsController$DockLowerLeft = {$: 'DockLowerLeft'};
var $author$project$ToolsController$DockLowerRight = {$: 'DockLowerRight'};
var $author$project$ToolsController$DockNone = {$: 'DockNone'};
var $author$project$ToolsController$DockUpperLeft = {$: 'DockUpperLeft'};
var $author$project$ToolsController$decodeDock = function (dock) {
	switch (dock) {
		case 'upperleft':
			return $author$project$ToolsController$DockUpperLeft;
		case 'lowerleft':
			return $author$project$ToolsController$DockLowerLeft;
		case 'upperright':
			return $author$project$ToolsController$DockUpperRight;
		case 'lowerright':
			return $author$project$ToolsController$DockLowerRight;
		case 'bottom':
			return $author$project$ToolsController$DockBottom;
		case 'none':
			return $author$project$ToolsController$DockNone;
		default:
			return $author$project$ToolsController$DockUpperRight;
	}
};
var $author$project$ToolsController$Disabled = {$: 'Disabled'};
var $author$project$ToolsController$SettingsOpen = {$: 'SettingsOpen'};
var $author$project$ToolsController$decodeState = function (state) {
	switch (state) {
		case 'expanded':
			return $author$project$ToolsController$Expanded;
		case 'contracted':
			return $author$project$ToolsController$Contracted;
		case 'disabled':
			return $author$project$ToolsController$Disabled;
		case 'always':
			return $author$project$ToolsController$AlwaysOpen;
		case 'closed':
			return $author$project$ToolsController$SettingsClosed;
		case 'open':
			return $author$project$ToolsController$SettingsOpen;
		default:
			return $author$project$ToolsController$Contracted;
	}
};
var $author$project$ToolsController$StoredTool = F5(
	function (toolType, state, dock, tab, text) {
		return {dock: dock, state: state, tab: tab, text: text, toolType: toolType};
	});
var $author$project$ToolsController$toolDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$ToolsController$StoredTool,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'state', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'dock', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'tab', $author$project$ToolsController$colourDecoder),
	A2($elm$json$Json$Decode$field, 'text', $author$project$ToolsController$colourDecoder));
var $author$project$ToolsController$restoreStoredValues = F2(
	function (options, values) {
		var useStoredSettings = F2(
			function (stored, tool) {
				var _v1 = A2(
					$elm_community$list_extra$List$Extra$find,
					function (fromStore) {
						return _Utils_eq(
							fromStore.toolType,
							$author$project$ToolsController$encodeType(tool.toolType));
					},
					stored);
				if (_v1.$ === 'Just') {
					var found = _v1.a;
					return _Utils_update(
						tool,
						{
							dock: $author$project$ToolsController$decodeDock(found.dock),
							state: $author$project$ToolsController$decodeState(found.state),
							tabColour: $author$project$ToolsController$decodeColour(found.tab),
							textColour: $author$project$ToolsController$decodeColour(found.text)
						});
				} else {
					return tool;
				}
			});
		var toolsAsStored = A2(
			$elm$json$Json$Decode$decodeValue,
			$elm$json$Json$Decode$list($author$project$ToolsController$toolDecoder),
			values);
		if (toolsAsStored.$ === 'Ok') {
			var stored = toolsAsStored.a;
			return _Utils_update(
				options,
				{
					tools: A2(
						$elm$core$List$map,
						useStoredSettings(stored),
						options.tools)
				});
		} else {
			return options;
		}
	});
var $author$project$Tools$StravaTools$segmentName = function (options) {
	var _v0 = options.externalSegment;
	switch (_v0.$) {
		case 'SegmentOk':
			var segment = _v0.a;
			return $elm$core$Maybe$Just(segment.name);
		case 'SegmentPreviewed':
			var segment = _v0.a;
			return $elm$core$Maybe$Just(segment.name);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$LocalStorage$sessionClear = $author$project$LocalStorage$storageCommands(
	$elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Cmd',
				$elm$json$Json$Encode$string('session.clear'))
			])));
var $author$project$ToolsController$setToolState = F3(
	function (toolType, state, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{state: state}) : tool;
	});
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$Tools$BendSmoother$softenMultiplePoints = F3(
	function (options, indices, track) {
		var helper = F2(
			function (index, previousTree) {
				var _v0 = A3(
					$author$project$Tools$BendSmoother$softenSinglePoint,
					options.segments,
					index,
					_Utils_update(
						track,
						{trackTree: previousTree}));
				if (_v0.$ === 'Just') {
					var newTree = _v0.a;
					return newTree;
				} else {
					return track.trackTree;
				}
			});
		var finalTree = A3(
			$elm$core$List$foldl,
			helper,
			track.trackTree,
			$elm$core$List$reverse(
				$elm$core$List$sort(indices)));
		return $elm$core$Maybe$Just(finalTree);
	});
var $elm$core$String$toUpper = _String_toUpper;
var $elm$core$List$map3 = _List_map3;
var $author$project$Tools$StravaTools$trackFromActivity = F2(
	function (header, streams) {
		var baseTimeMillis = $elm$time$Time$posixToMillis(
			A2(
				$elm$core$Maybe$withDefault,
				$elm$time$Time$millisToPosix(0),
				$elm$core$Result$toMaybe(
					$rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(header.activityStart))));
		var pointTime = function (t) {
			return $elm$time$Time$millisToPosix(baseTimeMillis + (1000 * t));
		};
		var makePoint = F3(
			function (latLng, alt, time) {
				return A4(
					$author$project$DomainModel$GPXSource,
					$ianmackenzie$elm_geometry$Direction2d$fromAngle(
						$ianmackenzie$elm_units$Angle$degrees(latLng.lng)),
					$ianmackenzie$elm_units$Angle$degrees(latLng.lat),
					$ianmackenzie$elm_units$Length$meters(alt),
					$elm$core$Maybe$Just(
						pointTime(time)));
			});
		var gpx = A4($elm$core$List$map3, makePoint, streams.latLngs, streams.altitude, streams.time);
		return A2($author$project$TrackLoaded$trackFromPoints, header.activityName, gpx);
	});
var $author$project$TrackLoaded$trackFromSegments = F2(
	function (trackName, _v0) {
		var allPoints = _v0.a;
		var segments = _v0.b;
		var convertSegment = F2(
			function (track, _v4) {
				var name = _v4.a;
				var offset = _v4.b;
				var nextOffset = _v4.c;
				return {
					createMode: $author$project$Tools$NamedSegmentOptions$ManualSegment,
					endDistance: A2($author$project$DomainModel$distanceFromIndex, nextOffset, track.trackTree),
					endOk: true,
					name: name,
					startDistance: A2($author$project$DomainModel$distanceFromIndex, offset, track.trackTree),
					startOk: true
				};
			});
		var combineContiguousSameNameSegments = function (segs) {
			combineContiguousSameNameSegments:
			while (true) {
				if (segs.b && segs.b.b) {
					var seg1 = segs.a;
					var _v2 = segs.b;
					var seg2 = _v2.a;
					var more = _v2.b;
					if (_Utils_eq(seg1.endDistance, seg2.startDistance) && _Utils_eq(seg1.name, seg2.name)) {
						var combined = {createMode: $author$project$Tools$NamedSegmentOptions$ManualSegment, endDistance: seg2.endDistance, endOk: seg2.endOk, name: seg1.name, startDistance: seg1.startDistance, startOk: seg1.startOk};
						var $temp$segs = A2($elm$core$List$cons, combined, more);
						segs = $temp$segs;
						continue combineContiguousSameNameSegments;
					} else {
						return A2(
							$elm$core$List$cons,
							seg1,
							combineContiguousSameNameSegments(
								A2($elm$core$List$drop, 1, segs)));
					}
				} else {
					return segs;
				}
			}
		};
		var baseTrack = A2($author$project$TrackLoaded$trackFromPoints, trackName, allPoints);
		if (baseTrack.$ === 'Just') {
			var track = baseTrack.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					track,
					combineContiguousSameNameSegments(
						A2(
							$elm$core$List$map,
							convertSegment(track),
							segments))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Point3d$mirrorAcross = F2(
	function (_v0, _v1) {
		var plane = _v0.a;
		var p = _v1.a;
		var _v2 = plane.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = plane.normalDirection;
		var n = _v3.a;
		var a00 = 1 - ((2 * n.x) * n.x);
		var a01 = ((-2) * n.x) * n.y;
		var a02 = ((-2) * n.x) * n.z;
		var a11 = 1 - ((2 * n.y) * n.y);
		var a12 = ((-2) * n.y) * n.z;
		var a22 = 1 - ((2 * n.z) * n.z);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((p0.x + (a00 * deltaX)) + (a01 * deltaY)) + (a02 * deltaZ), y: ((p0.y + (a01 * deltaX)) + (a11 * deltaY)) + (a12 * deltaZ), z: ((p0.z + (a02 * deltaX)) + (a12 * deltaY)) + (a22 * deltaZ)});
	});
var $ianmackenzie$elm_geometry$Plane3d$zx = A2($ianmackenzie$elm_geometry$Plane3d$through, $ianmackenzie$elm_geometry$Point3d$origin, $ianmackenzie$elm_geometry$Direction3d$y);
var $author$project$SvgPathExtractor$flipY = $ianmackenzie$elm_geometry$Point3d$mirrorAcross($ianmackenzie$elm_geometry$Plane3d$zx);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute = {$: 'Absolute'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo = F2(
	function (a, b) {
		return {$: 'LineTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Relative = {$: 'Relative'};
var $ianmackenzie$elm_geometry$Point3d$meters = F3(
	function (x, y, z) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: x, y: y, z: z});
	});
var $author$project$SvgPathExtractor$drawCommand = F2(
	function (command, state) {
		drawCommand:
		while (true) {
			switch (command.$) {
				case 'LineTo':
					if (command.a.$ === 'Absolute') {
						var _v1 = command.a;
						var points = command.b;
						var initialState = _Utils_Tuple2(state.currentPoint, _List_Nil);
						var absoluteLine = F2(
							function (_v2, _v3) {
								var x = _v2.a;
								var y = _v2.b;
								var lastPoint = _v3.a;
								var outputs = _v3.b;
								var nextPoint = A3($ianmackenzie$elm_geometry$Point3d$meters, x, y, 0.0);
								return _Utils_Tuple2(
									nextPoint,
									A2($elm$core$List$cons, nextPoint, outputs));
							});
						var finalState = A3($elm$core$List$foldl, absoluteLine, initialState, points);
						return _Utils_update(
							state,
							{
								currentPoint: finalState.a,
								outputs: _Utils_ap(finalState.b, state.outputs)
							});
					} else {
						var _v4 = command.a;
						var points = command.b;
						var relativeLine = F2(
							function (_v5, _v6) {
								var dx = _v5.a;
								var dy = _v5.b;
								var lastPoint = _v6.a;
								var outputs = _v6.b;
								var nextPoint = A2(
									$ianmackenzie$elm_geometry$Point3d$translateBy,
									A3($ianmackenzie$elm_geometry$Vector3d$meters, dx, dy, 0.0),
									lastPoint);
								return _Utils_Tuple2(
									nextPoint,
									A2($elm$core$List$cons, nextPoint, outputs));
							});
						var initialState = _Utils_Tuple2(state.currentPoint, _List_Nil);
						var finalState = A3($elm$core$List$foldl, relativeLine, initialState, points);
						return _Utils_update(
							state,
							{
								currentPoint: finalState.a,
								outputs: _Utils_ap(finalState.b, state.outputs)
							});
					}
				case 'Horizontal':
					if (command.a.$ === 'Absolute') {
						var _v7 = command.a;
						var xs = command.b;
						var pairs = A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(x, 0);
							},
							xs);
						var $temp$command = A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, pairs),
							$temp$state = state;
						command = $temp$command;
						state = $temp$state;
						continue drawCommand;
					} else {
						var _v8 = command.a;
						var dxs = command.b;
						var pairs = A2(
							$elm$core$List$map,
							function (dx) {
								return _Utils_Tuple2(dx, 0);
							},
							dxs);
						var $temp$command = A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Relative, pairs),
							$temp$state = state;
						command = $temp$command;
						state = $temp$state;
						continue drawCommand;
					}
				case 'Vertical':
					if (command.a.$ === 'Absolute') {
						var _v9 = command.a;
						var ys = command.b;
						var pairs = A2(
							$elm$core$List$map,
							function (y) {
								return _Utils_Tuple2(0, y);
							},
							ys);
						var $temp$command = A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute, pairs),
							$temp$state = state;
						command = $temp$command;
						state = $temp$state;
						continue drawCommand;
					} else {
						var _v10 = command.a;
						var dys = command.b;
						var pairs = A2(
							$elm$core$List$map,
							function (dy) {
								return _Utils_Tuple2(0, dy);
							},
							dys);
						var $temp$command = A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, $folkertdev$svg_path_lowlevel$Path$LowLevel$Relative, pairs),
							$temp$state = state;
						command = $temp$command;
						state = $temp$state;
						continue drawCommand;
					}
				case 'CurveTo':
					if (command.a.$ === 'Relative') {
						var _v11 = command.a;
						var triples = command.b;
						var curveRelativeInitialState = _Utils_Tuple2(state.currentPoint, _List_Nil);
						var curveRelative = F2(
							function (_v13, _v17) {
								var _v14 = _v13.a;
								var dx1 = _v14.a;
								var dy1 = _v14.b;
								var _v15 = _v13.b;
								var dx2 = _v15.a;
								var dy2 = _v15.b;
								var _v16 = _v13.c;
								var dxN = _v16.a;
								var dyN = _v16.b;
								var lastPoint = _v17.a;
								var outputs = _v17.b;
								var _v12 = _Utils_Tuple3(
									A2(
										$ianmackenzie$elm_geometry$Point3d$translateBy,
										A3($ianmackenzie$elm_geometry$Vector3d$meters, dx1, dy1, 0.0),
										lastPoint),
									A2(
										$ianmackenzie$elm_geometry$Point3d$translateBy,
										A3($ianmackenzie$elm_geometry$Vector3d$meters, dx2, dy2, 0.0),
										lastPoint),
									A2(
										$ianmackenzie$elm_geometry$Point3d$translateBy,
										A3($ianmackenzie$elm_geometry$Vector3d$meters, dxN, dyN, 0.0),
										lastPoint));
								var c1 = _v12.a;
								var c2 = _v12.b;
								var cN = _v12.c;
								var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, lastPoint, c1, c2, cN);
								var splinePoints = $elm$core$List$reverse(
									A2(
										$elm$core$List$map,
										$ianmackenzie$elm_geometry$LineSegment3d$endPoint,
										$ianmackenzie$elm_geometry$Polyline3d$segments(
											A2(
												$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
												$ianmackenzie$elm_units$Quantity$Quantity(1.0),
												spline))));
								return _Utils_Tuple2(
									cN,
									_Utils_ap(splinePoints, outputs));
							});
						var curveRelativeFinalState = A3($elm$core$List$foldl, curveRelative, curveRelativeInitialState, triples);
						return _Utils_update(
							state,
							{
								currentPoint: curveRelativeFinalState.a,
								outputs: _Utils_ap(curveRelativeFinalState.b, state.outputs)
							});
					} else {
						var _v18 = command.a;
						var triples = command.b;
						var curveAbsoluteInitialState = _Utils_Tuple2(state.currentPoint, _List_Nil);
						var curveAbsolute = F2(
							function (_v20, _v24) {
								var _v21 = _v20.a;
								var dx1 = _v21.a;
								var dy1 = _v21.b;
								var _v22 = _v20.b;
								var dx2 = _v22.a;
								var dy2 = _v22.b;
								var _v23 = _v20.c;
								var dxN = _v23.a;
								var dyN = _v23.b;
								var lastPoint = _v24.a;
								var outputs = _v24.b;
								var _v19 = _Utils_Tuple3(
									A3($ianmackenzie$elm_geometry$Point3d$meters, dx1, dy1, 0.0),
									A3($ianmackenzie$elm_geometry$Point3d$meters, dx2, dy2, 0.0),
									A3($ianmackenzie$elm_geometry$Point3d$meters, dxN, dyN, 0.0));
								var c1 = _v19.a;
								var c2 = _v19.b;
								var cN = _v19.c;
								var spline = A4($ianmackenzie$elm_geometry$CubicSpline3d$fromControlPoints, lastPoint, c1, c2, cN);
								var splinePoints = $elm$core$List$reverse(
									A2(
										$elm$core$List$map,
										$ianmackenzie$elm_geometry$LineSegment3d$endPoint,
										$ianmackenzie$elm_geometry$Polyline3d$segments(
											A2(
												$ianmackenzie$elm_geometry$CubicSpline3d$approximate,
												$ianmackenzie$elm_units$Quantity$Quantity(1.0),
												spline))));
								return _Utils_Tuple2(
									cN,
									_Utils_ap(splinePoints, outputs));
							});
						var curveAbsoluteFinalState = A3($elm$core$List$foldl, curveAbsolute, curveAbsoluteInitialState, triples);
						return _Utils_update(
							state,
							{
								currentPoint: curveAbsoluteFinalState.a,
								outputs: _Utils_ap(curveAbsoluteFinalState.b, state.outputs)
							});
					}
				case 'ClosePath':
					return _Utils_update(
						state,
						{
							currentPoint: state.startPoint,
							outputs: A2($elm$core$List$cons, state.startPoint, state.outputs)
						});
				default:
					return state;
			}
		}
	});
var $author$project$SvgPathExtractor$followSubPath = F2(
	function (sub, state) {
		var newPoint = function () {
			var _v0 = sub.moveto;
			if (_v0.a.$ === 'Absolute') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				var x = _v2.a;
				var y = _v2.b;
				return A3($ianmackenzie$elm_geometry$Point3d$meters, x, y, 0.0);
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				var dx = _v4.a;
				var dy = _v4.b;
				return A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A3($ianmackenzie$elm_geometry$Vector3d$meters, dx, dy, 0.0),
					state.currentPoint);
			}
		}();
		var subPathState = _Utils_update(
			state,
			{
				currentPoint: newPoint,
				outputs: _List_fromArray(
					[newPoint]),
				startPoint: newPoint
			});
		var endSubPathState = A3($elm$core$List$foldl, $author$project$SvgPathExtractor$drawCommand, subPathState, sub.drawtos);
		return _Utils_update(
			state,
			{
				currentPoint: endSubPathState.currentPoint,
				outputs: _Utils_ap(
					state.outputs,
					$elm$core$List$reverse(endSubPathState.outputs))
			});
	});
var $justgook$alt_linear_algebra$AltMath$Vector3$fromRecord = $elm$core$Basics$identity;
var $ianmackenzie$elm_geometry$Point3d$fromRecord = F2(
	function (toQuantity, _v0) {
		var z = _v0.z;
		var y = _v0.y;
		var x = _v0.x;
		return A3(
			$ianmackenzie$elm_geometry$Point3d$xyz,
			toQuantity(x),
			toQuantity(y),
			toQuantity(z));
	});
var $justgook$alt_linear_algebra$AltMath$Vector3$toRecord = $elm$core$Basics$identity;
var $justgook$alt_linear_algebra$AltMath$Matrix4$transform = F2(
	function (m, _v0) {
		var z = _v0.z;
		var y = _v0.y;
		var x = _v0.x;
		var w = (((x * m.m41) + (y * m.m42)) + (z * m.m43)) + m.m44;
		return {x: ((((m.m11 * x) + (m.m12 * y)) + (m.m13 * z)) + m.m14) / w, y: ((((m.m21 * x) + (m.m22 * y)) + (m.m23 * z)) + m.m24) / w, z: ((((m.m31 * x) + (m.m32 * y)) + (m.m33 * z)) + m.m34) / w};
	});
var $author$project$SvgPathExtractor$convertToPoints = F2(
	function (pathAndTransform, pathState) {
		var localPathState = _Utils_update(
			pathState,
			{outputs: _List_Nil});
		var newLocalPathState = A3($elm$core$List$foldl, $author$project$SvgPathExtractor$followSubPath, localPathState, pathAndTransform.subpaths);
		var applyTransform = function (before) {
			return A2(
				$ianmackenzie$elm_geometry$Point3d$fromRecord,
				$ianmackenzie$elm_units$Length$meters,
				$justgook$alt_linear_algebra$AltMath$Vector3$toRecord(
					A2(
						$justgook$alt_linear_algebra$AltMath$Matrix4$transform,
						pathAndTransform.transform,
						$justgook$alt_linear_algebra$AltMath$Vector3$fromRecord(
							A2($ianmackenzie$elm_geometry$Point3d$toRecord, $ianmackenzie$elm_units$Length$inMeters, before)))));
		};
		var pointsFromThisPath = A2(
			$elm$core$List$map,
			$author$project$SvgPathExtractor$flipY,
			A2($elm$core$List$map, applyTransform, newLocalPathState.outputs));
		return _Utils_update(
			pathState,
			{
				outputs: _Utils_ap(pathState.outputs, pointsFromThisPath)
			});
	});
var $author$project$SvgPathExtractor$getAllXmlTags = function (node) {
	if (node.$ === 'Element') {
		var tag = node.a;
		var children = node.c;
		return A2(
			$elm$core$List$cons,
			_Utils_Tuple2(tag, node),
			A2($elm$core$List$concatMap, $author$project$SvgPathExtractor$getAllXmlTags, children));
	} else {
		return _List_Nil;
	}
};
var $author$project$SvgPathExtractor$getAttribute = F2(
	function (attribute, node) {
		if (node.$ === 'Element') {
			var attributes = node.b;
			return A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2(
					$elm_community$list_extra$List$Extra$find,
					function (_v1) {
						var name = _v1.name;
						return _Utils_eq(name, attribute);
					},
					attributes));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $jinjor$elm_xml_parser$XmlParser$Xml = F3(
	function (processingInstructions, docType, root) {
		return {docType: docType, processingInstructions: processingInstructions, root: root};
	});
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $jinjor$elm_xml_parser$XmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $jinjor$elm_xml_parser$XmlParser$comment = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			$elm$parser$Parser$Advanced$token(
				$jinjor$elm_xml_parser$XmlParser$toToken('<!--'))),
		$elm$parser$Parser$Advanced$chompUntil(
			$jinjor$elm_xml_parser$XmlParser$toToken('-->'))),
	$elm$parser$Parser$Advanced$token(
		$jinjor$elm_xml_parser$XmlParser$toToken('-->')));
var $jinjor$elm_xml_parser$XmlParser$DocType = F2(
	function (rootElementName, definition) {
		return {definition: definition, rootElementName: rootElementName};
	});
var $jinjor$elm_xml_parser$XmlParser$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $jinjor$elm_xml_parser$XmlParser$Public = F3(
	function (a, b, c) {
		return {$: 'Public', a: a, b: b, c: c};
	});
var $jinjor$elm_xml_parser$XmlParser$System = F2(
	function (a, b) {
		return {$: 'System', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $elm$parser$Parser$BadRepeat = {$: 'BadRepeat'};
var $jinjor$elm_xml_parser$XmlParser$keep = F2(
	function (count, predicate) {
		var n = count.a;
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (str) {
				return (_Utils_cmp(
					n,
					$elm$core$String$length(str)) < 1) ? $elm$parser$Parser$Advanced$succeed(str) : $elm$parser$Parser$Advanced$problem($elm$parser$Parser$BadRepeat);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
					$elm$parser$Parser$Advanced$chompWhile(predicate))));
	});
var $jinjor$elm_xml_parser$XmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $jinjor$elm_xml_parser$XmlParser$AtLeast = function (a) {
	return {$: 'AtLeast', a: a};
};
var $jinjor$elm_xml_parser$XmlParser$zeroOrMore = $jinjor$elm_xml_parser$XmlParser$AtLeast(0);
var $jinjor$elm_xml_parser$XmlParser$docTypeExternalSubset = A2(
	$elm$parser$Parser$Advanced$inContext,
	'docTypeExternalSubset',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$jinjor$elm_xml_parser$XmlParser$symbol('\"')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$jinjor$elm_xml_parser$XmlParser$keep,
				$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
				function (c) {
					return !_Utils_eq(
						c,
						_Utils_chr('\"'));
				}),
			$jinjor$elm_xml_parser$XmlParser$symbol('\"'))));
var $jinjor$elm_xml_parser$XmlParser$docTypeInternalSubset = A2(
	$elm$parser$Parser$Advanced$inContext,
	'docTypeInternalSubset',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$jinjor$elm_xml_parser$XmlParser$symbol('[')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$jinjor$elm_xml_parser$XmlParser$keep,
				$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
				function (c) {
					return !_Utils_eq(
						c,
						_Utils_chr(']'));
				}),
			$jinjor$elm_xml_parser$XmlParser$symbol(']'))));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $jinjor$elm_xml_parser$XmlParser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $jinjor$elm_xml_parser$XmlParser$maybe = function (parser) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $elm$core$Maybe$Just, parser),
				$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
			]));
};
var $jinjor$elm_xml_parser$XmlParser$publicIdentifier = A2(
	$elm$parser$Parser$Advanced$inContext,
	'publicIdentifier',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$jinjor$elm_xml_parser$XmlParser$symbol('\"')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$jinjor$elm_xml_parser$XmlParser$keep,
				$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
				function (c) {
					return !_Utils_eq(
						c,
						_Utils_chr('\"'));
				}),
			$jinjor$elm_xml_parser$XmlParser$symbol('\"'))));
var $jinjor$elm_xml_parser$XmlParser$ignore = F2(
	function (count, predicate) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			A2($jinjor$elm_xml_parser$XmlParser$keep, count, predicate));
	});
var $jinjor$elm_xml_parser$XmlParser$isWhitespace = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || (_Utils_eq(
		c,
		_Utils_chr('\u000D')) || (_Utils_eq(
		c,
		_Utils_chr('\n')) || _Utils_eq(
		c,
		_Utils_chr('\t'))));
};
var $jinjor$elm_xml_parser$XmlParser$whiteSpace = A2($jinjor$elm_xml_parser$XmlParser$ignore, $jinjor$elm_xml_parser$XmlParser$zeroOrMore, $jinjor$elm_xml_parser$XmlParser$isWhitespace);
var $jinjor$elm_xml_parser$XmlParser$docTypeDefinition = A2(
	$elm$parser$Parser$Advanced$inContext,
	'docTypeDefinition',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$Public),
								$jinjor$elm_xml_parser$XmlParser$keyword('PUBLIC')),
							$jinjor$elm_xml_parser$XmlParser$whiteSpace),
						A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$publicIdentifier, $jinjor$elm_xml_parser$XmlParser$whiteSpace)),
					A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$docTypeExternalSubset, $jinjor$elm_xml_parser$XmlParser$whiteSpace)),
				$jinjor$elm_xml_parser$XmlParser$maybe($jinjor$elm_xml_parser$XmlParser$docTypeInternalSubset)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$System),
							$jinjor$elm_xml_parser$XmlParser$keyword('SYSTEM')),
						$jinjor$elm_xml_parser$XmlParser$whiteSpace),
					A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$docTypeExternalSubset, $jinjor$elm_xml_parser$XmlParser$whiteSpace)),
				$jinjor$elm_xml_parser$XmlParser$maybe($jinjor$elm_xml_parser$XmlParser$docTypeInternalSubset)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$Custom),
				$jinjor$elm_xml_parser$XmlParser$docTypeInternalSubset)
			])));
var $jinjor$elm_xml_parser$XmlParser$oneOrMore = $jinjor$elm_xml_parser$XmlParser$AtLeast(1);
var $jinjor$elm_xml_parser$XmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$inContext,
	'tagName',
	A2(
		$jinjor$elm_xml_parser$XmlParser$keep,
		$jinjor$elm_xml_parser$XmlParser$oneOrMore,
		function (c) {
			return (!$jinjor$elm_xml_parser$XmlParser$isWhitespace(c)) && ((!_Utils_eq(
				c,
				_Utils_chr('/'))) && ((!_Utils_eq(
				c,
				_Utils_chr('<'))) && ((!_Utils_eq(
				c,
				_Utils_chr('>'))) && ((!_Utils_eq(
				c,
				_Utils_chr('\"'))) && ((!_Utils_eq(
				c,
				_Utils_chr('\''))) && (!_Utils_eq(
				c,
				_Utils_chr('='))))))));
		}));
var $jinjor$elm_xml_parser$XmlParser$docType = A2(
	$elm$parser$Parser$Advanced$inContext,
	'docType',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$DocType),
					$jinjor$elm_xml_parser$XmlParser$symbol('<!DOCTYPE')),
				$jinjor$elm_xml_parser$XmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$tagName, $jinjor$elm_xml_parser$XmlParser$whiteSpace)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$docTypeDefinition, $jinjor$elm_xml_parser$XmlParser$whiteSpace),
			$jinjor$elm_xml_parser$XmlParser$symbol('>'))));
var $jinjor$elm_xml_parser$XmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $jinjor$elm_xml_parser$XmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $jinjor$elm_xml_parser$XmlParser$Attribute = F2(
	function (name, value) {
		return {name: name, value: value};
	});
var $jinjor$elm_xml_parser$XmlParser$attributeName = A2(
	$elm$parser$Parser$Advanced$inContext,
	'attributeName',
	A2(
		$jinjor$elm_xml_parser$XmlParser$keep,
		$jinjor$elm_xml_parser$XmlParser$oneOrMore,
		function (c) {
			return (!$jinjor$elm_xml_parser$XmlParser$isWhitespace(c)) && ((!_Utils_eq(
				c,
				_Utils_chr('/'))) && ((!_Utils_eq(
				c,
				_Utils_chr('<'))) && ((!_Utils_eq(
				c,
				_Utils_chr('>'))) && ((!_Utils_eq(
				c,
				_Utils_chr('\"'))) && ((!_Utils_eq(
				c,
				_Utils_chr('\''))) && (!_Utils_eq(
				c,
				_Utils_chr('='))))))));
		}));
var $jinjor$elm_xml_parser$XmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $jinjor$elm_xml_parser$XmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped charactor: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $jinjor$elm_xml_parser$XmlParser$entities)));
};
var $jinjor$elm_xml_parser$XmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $jinjor$elm_xml_parser$XmlParser$escapedChar = function (end_) {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'escapedChar',
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (s) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$andThen,
							function (_v0) {
								var _v1 = $jinjor$elm_xml_parser$XmlParser$decodeEscape(s);
								if (_v1.$ === 'Ok') {
									var c = _v1.a;
									return $elm$parser$Parser$Advanced$succeed(c);
								} else {
									var e = _v1.a;
									return $elm$parser$Parser$Advanced$problem(e);
								}
							},
							$jinjor$elm_xml_parser$XmlParser$symbol(';')),
							$jinjor$elm_xml_parser$XmlParser$fail('Entities must end_ with \";\": &' + s)
						]));
			},
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$jinjor$elm_xml_parser$XmlParser$symbol('&')),
				A2(
					$jinjor$elm_xml_parser$XmlParser$keep,
					$jinjor$elm_xml_parser$XmlParser$oneOrMore,
					function (c) {
						return (!_Utils_eq(c, end_)) && (!_Utils_eq(
							c,
							_Utils_chr(';')));
					}))));
};
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $jinjor$elm_xml_parser$XmlParser$textString = function (end_) {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'textString',
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (s) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed($elm$core$String$cons),
								$jinjor$elm_xml_parser$XmlParser$escapedChar(end_)),
							$elm$parser$Parser$Advanced$lazy(
								function (_v0) {
									return $jinjor$elm_xml_parser$XmlParser$textString(end_);
								})),
							$elm$parser$Parser$Advanced$succeed(s)
						]));
			},
			A2(
				$jinjor$elm_xml_parser$XmlParser$keep,
				$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
				function (c) {
					return (!_Utils_eq(c, end_)) && (!_Utils_eq(
						c,
						_Utils_chr('&')));
				})));
};
var $jinjor$elm_xml_parser$XmlParser$attributeValue = A2(
	$elm$parser$Parser$Advanced$inContext,
	'attributeValue',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$jinjor$elm_xml_parser$XmlParser$symbol('\"')),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$jinjor$elm_xml_parser$XmlParser$textString(
						_Utils_chr('\"')),
					$jinjor$elm_xml_parser$XmlParser$symbol('\"'))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$jinjor$elm_xml_parser$XmlParser$symbol('\'')),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$jinjor$elm_xml_parser$XmlParser$textString(
						_Utils_chr('\'')),
					$jinjor$elm_xml_parser$XmlParser$symbol('\'')))
			])));
var $jinjor$elm_xml_parser$XmlParser$attribute = A2(
	$elm$parser$Parser$Advanced$inContext,
	'attribute',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$Attribute),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$attributeName, $jinjor$elm_xml_parser$XmlParser$whiteSpace),
					$jinjor$elm_xml_parser$XmlParser$symbol('=')),
				$jinjor$elm_xml_parser$XmlParser$whiteSpace)),
		$jinjor$elm_xml_parser$XmlParser$attributeValue));
var $jinjor$elm_xml_parser$XmlParser$attributes = function (keys) {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'attributes',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$andThen,
					function (attr) {
						return A2($elm$core$Set$member, attr.name, keys) ? $jinjor$elm_xml_parser$XmlParser$fail('attribute ' + (attr.name + ' is duplicated')) : A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(
									$elm$core$List$cons(attr)),
								$jinjor$elm_xml_parser$XmlParser$whiteSpace),
							$jinjor$elm_xml_parser$XmlParser$attributes(
								A2($elm$core$Set$insert, attr.name, keys)));
					},
					$jinjor$elm_xml_parser$XmlParser$attribute),
					$elm$parser$Parser$Advanced$succeed(_List_Nil)
				])));
};
var $jinjor$elm_xml_parser$XmlParser$closingTag = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'closingTag',
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
							$jinjor$elm_xml_parser$XmlParser$symbol('</')),
						$jinjor$elm_xml_parser$XmlParser$whiteSpace),
					A2(
						$elm$parser$Parser$Advanced$andThen,
						function (endTagName) {
							return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $jinjor$elm_xml_parser$XmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
						},
						$jinjor$elm_xml_parser$XmlParser$tagName)),
				$jinjor$elm_xml_parser$XmlParser$whiteSpace),
			$jinjor$elm_xml_parser$XmlParser$symbol('>')));
};
function $jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'cdataContent',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(''),
					$jinjor$elm_xml_parser$XmlParser$symbol(']]>')),
					A2(
					$elm$parser$Parser$Advanced$andThen,
					function (_v0) {
						return A2(
							$elm$parser$Parser$Advanced$map,
							function (tail) {
								return ']]' + tail;
							},
							$jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent());
					},
					$jinjor$elm_xml_parser$XmlParser$symbol(']]')),
					A2(
					$elm$parser$Parser$Advanced$andThen,
					function (_v1) {
						return A2(
							$elm$parser$Parser$Advanced$map,
							function (tail) {
								return ']' + tail;
							},
							$jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent());
					},
					$jinjor$elm_xml_parser$XmlParser$symbol(']')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$append),
						A2(
							$jinjor$elm_xml_parser$XmlParser$keep,
							$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
							function (c) {
								return !_Utils_eq(
									c,
									_Utils_chr(']'));
							})),
					$elm$parser$Parser$Advanced$lazy(
						function (_v2) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent();
						}))
				])));
}
try {
	var $jinjor$elm_xml_parser$XmlParser$cdataContent = $jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent();
	$jinjor$elm_xml_parser$XmlParser$cyclic$cdataContent = function () {
		return $jinjor$elm_xml_parser$XmlParser$cdataContent;
	};
} catch ($) {
	throw 'Some top-level definitions from `XmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    cdataContent\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $jinjor$elm_xml_parser$XmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$inContext,
	'cdata',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$jinjor$elm_xml_parser$XmlParser$symbol('<![CDATA[')),
		$jinjor$elm_xml_parser$XmlParser$cdataContent));
function $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'textNodeString',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F2(
								function (s, maybeString) {
									return $elm$core$Maybe$Just(
										_Utils_ap(
											s,
											A2($elm$core$Maybe$withDefault, '', maybeString)));
								})),
						A2(
							$jinjor$elm_xml_parser$XmlParser$keep,
							$jinjor$elm_xml_parser$XmlParser$oneOrMore,
							function (c) {
								return (!_Utils_eq(
									c,
									_Utils_chr('<'))) && (!_Utils_eq(
									c,
									_Utils_chr('&')));
							})),
					$elm$parser$Parser$Advanced$lazy(
						function (_v0) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString();
						})),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F2(
								function (c, maybeString) {
									return $elm$core$Maybe$Just(
										A2(
											$elm$core$String$cons,
											c,
											A2($elm$core$Maybe$withDefault, '', maybeString)));
								})),
						$jinjor$elm_xml_parser$XmlParser$escapedChar(
							_Utils_chr('<'))),
					$elm$parser$Parser$Advanced$lazy(
						function (_v1) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString();
						})),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F2(
								function (s, maybeString) {
									var str = _Utils_ap(
										s,
										A2($elm$core$Maybe$withDefault, '', maybeString));
									return (str !== '') ? $elm$core$Maybe$Just(str) : $elm$core$Maybe$Nothing;
								})),
						$jinjor$elm_xml_parser$XmlParser$cdata),
					$elm$parser$Parser$Advanced$lazy(
						function (_v2) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString();
						})),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (maybeString) {
								var str = A2($elm$core$Maybe$withDefault, '', maybeString);
								return (str !== '') ? $elm$core$Maybe$Just(str) : $elm$core$Maybe$Nothing;
							}),
						$jinjor$elm_xml_parser$XmlParser$comment),
					$elm$parser$Parser$Advanced$lazy(
						function (_v3) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString();
						})),
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
				])));
}
try {
	var $jinjor$elm_xml_parser$XmlParser$textNodeString = $jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString();
	$jinjor$elm_xml_parser$XmlParser$cyclic$textNodeString = function () {
		return $jinjor$elm_xml_parser$XmlParser$textNodeString;
	};
} catch ($) {
	throw 'Some top-level definitions from `XmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    textNodeString\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $jinjor$elm_xml_parser$XmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'children',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(_List_Nil),
					$jinjor$elm_xml_parser$XmlParser$closingTag(startTagName)),
					A2(
					$elm$parser$Parser$Advanced$andThen,
					function (maybeString) {
						if (maybeString.$ === 'Just') {
							var s = maybeString.a;
							return A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed(
									function (rest) {
										return A2(
											$elm$core$List$cons,
											$jinjor$elm_xml_parser$XmlParser$Text(s),
											rest);
									}),
								$jinjor$elm_xml_parser$XmlParser$children(startTagName));
						} else {
							return A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(_List_Nil),
								$jinjor$elm_xml_parser$XmlParser$closingTag(startTagName));
						}
					},
					$jinjor$elm_xml_parser$XmlParser$textNodeString),
					$elm$parser$Parser$Advanced$lazy(
					function (_v2) {
						return A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed($elm$core$List$cons),
								$jinjor$elm_xml_parser$XmlParser$cyclic$element()),
							$jinjor$elm_xml_parser$XmlParser$children(startTagName));
					})
				])));
};
function $jinjor$elm_xml_parser$XmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'element',
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$jinjor$elm_xml_parser$XmlParser$symbol('<')),
			A2(
				$elm$parser$Parser$Advanced$andThen,
				function (startTagName) {
					return A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(
									$jinjor$elm_xml_parser$XmlParser$Element(startTagName)),
								$jinjor$elm_xml_parser$XmlParser$whiteSpace),
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$jinjor$elm_xml_parser$XmlParser$attributes($elm$core$Set$empty),
								$jinjor$elm_xml_parser$XmlParser$whiteSpace)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_List_Nil),
									$jinjor$elm_xml_parser$XmlParser$symbol('/>')),
									A2(
									$elm$parser$Parser$Advanced$keeper,
									A2(
										$elm$parser$Parser$Advanced$ignorer,
										$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
										$jinjor$elm_xml_parser$XmlParser$symbol('>')),
									$elm$parser$Parser$Advanced$lazy(
										function (_v0) {
											return $jinjor$elm_xml_parser$XmlParser$children(startTagName);
										}))
								])));
				},
				$jinjor$elm_xml_parser$XmlParser$tagName)));
}
try {
	var $jinjor$elm_xml_parser$XmlParser$element = $jinjor$elm_xml_parser$XmlParser$cyclic$element();
	$jinjor$elm_xml_parser$XmlParser$cyclic$element = function () {
		return $jinjor$elm_xml_parser$XmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `XmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    element\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $jinjor$elm_xml_parser$XmlParser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $jinjor$elm_xml_parser$XmlParser$ProcessingInstruction = F2(
	function (name, value) {
		return {name: name, value: value};
	});
var $jinjor$elm_xml_parser$XmlParser$processingInstructionName = A2(
	$elm$parser$Parser$Advanced$inContext,
	'processingInstructionName',
	A2(
		$jinjor$elm_xml_parser$XmlParser$keep,
		$jinjor$elm_xml_parser$XmlParser$oneOrMore,
		function (c) {
			return !_Utils_eq(
				c,
				_Utils_chr(' '));
		}));
function $jinjor$elm_xml_parser$XmlParser$cyclic$processingInstructionValue() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'processingInstructionValue',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(''),
					$jinjor$elm_xml_parser$XmlParser$symbol('?>')),
					A2(
					$elm$parser$Parser$Advanced$andThen,
					function (_v0) {
						return A2(
							$elm$parser$Parser$Advanced$map,
							function (tail) {
								return '?' + tail;
							},
							$jinjor$elm_xml_parser$XmlParser$cyclic$processingInstructionValue());
					},
					$jinjor$elm_xml_parser$XmlParser$symbol('?')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$append),
						A2(
							$jinjor$elm_xml_parser$XmlParser$keep,
							$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
							function (c) {
								return !_Utils_eq(
									c,
									_Utils_chr('?'));
							})),
					$elm$parser$Parser$Advanced$lazy(
						function (_v1) {
							return $jinjor$elm_xml_parser$XmlParser$cyclic$processingInstructionValue();
						}))
				])));
}
try {
	var $jinjor$elm_xml_parser$XmlParser$processingInstructionValue = $jinjor$elm_xml_parser$XmlParser$cyclic$processingInstructionValue();
	$jinjor$elm_xml_parser$XmlParser$cyclic$processingInstructionValue = function () {
		return $jinjor$elm_xml_parser$XmlParser$processingInstructionValue;
	};
} catch ($) {
	throw 'Some top-level definitions from `XmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    processingInstructionValue\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $jinjor$elm_xml_parser$XmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$inContext,
	'processingInstruction',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$ProcessingInstruction),
				$jinjor$elm_xml_parser$XmlParser$symbol('<?')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$jinjor$elm_xml_parser$XmlParser$processingInstructionName,
				$jinjor$elm_xml_parser$XmlParser$symbol(' '))),
		$jinjor$elm_xml_parser$XmlParser$processingInstructionValue));
var $jinjor$elm_xml_parser$XmlParser$repeat = F2(
	function (count, parser) {
		var n = count.a;
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (results) {
				return (_Utils_cmp(
					n,
					$elm$core$List$length(results)) < 1) ? $elm$parser$Parser$Advanced$succeed(results) : $elm$parser$Parser$Advanced$problem($elm$parser$Parser$BadRepeat);
			},
			A2(
				$elm$parser$Parser$Advanced$loop,
				_List_Nil,
				function (state) {
					return $elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$Advanced$map,
								function (r) {
									return $elm$parser$Parser$Advanced$Loop(
										A2(
											$elm$core$List$append,
											state,
											_List_fromArray(
												[r])));
								},
								parser),
								A2(
								$elm$parser$Parser$Advanced$map,
								$elm$core$Basics$always(
									$elm$parser$Parser$Advanced$Done(state)),
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0))
							]));
				}));
	});
var $jinjor$elm_xml_parser$XmlParser$whiteSpace1 = A2($jinjor$elm_xml_parser$XmlParser$ignore, $jinjor$elm_xml_parser$XmlParser$oneOrMore, $jinjor$elm_xml_parser$XmlParser$isWhitespace);
var $jinjor$elm_xml_parser$XmlParser$xml = A2(
	$elm$parser$Parser$Advanced$inContext,
	'xml',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($jinjor$elm_xml_parser$XmlParser$Xml),
					$jinjor$elm_xml_parser$XmlParser$whiteSpace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$jinjor$elm_xml_parser$XmlParser$repeat,
						$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
						A2(
							$elm$parser$Parser$Advanced$keeper,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							A2($elm$parser$Parser$Advanced$ignorer, $jinjor$elm_xml_parser$XmlParser$processingInstruction, $jinjor$elm_xml_parser$XmlParser$whiteSpace))),
					A2(
						$jinjor$elm_xml_parser$XmlParser$repeat,
						$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[$jinjor$elm_xml_parser$XmlParser$whiteSpace1, $jinjor$elm_xml_parser$XmlParser$comment]))))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$jinjor$elm_xml_parser$XmlParser$maybe($jinjor$elm_xml_parser$XmlParser$docType),
				A2(
					$jinjor$elm_xml_parser$XmlParser$repeat,
					$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[$jinjor$elm_xml_parser$XmlParser$whiteSpace1, $jinjor$elm_xml_parser$XmlParser$comment]))))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$jinjor$elm_xml_parser$XmlParser$element,
				A2(
					$jinjor$elm_xml_parser$XmlParser$repeat,
					$jinjor$elm_xml_parser$XmlParser$zeroOrMore,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[$jinjor$elm_xml_parser$XmlParser$whiteSpace1, $jinjor$elm_xml_parser$XmlParser$comment])))),
			$jinjor$elm_xml_parser$XmlParser$end)));
var $jinjor$elm_xml_parser$XmlParser$parse = function (source) {
	return A2($elm$parser$Parser$Advanced$run, $jinjor$elm_xml_parser$XmlParser$xml, source);
};
var $justgook$alt_linear_algebra$AltMath$Matrix4$identity = {m11: 1, m12: 0, m13: 0, m14: 0, m21: 0, m22: 1, m23: 0, m24: 0, m31: 0, m32: 0, m33: 1, m34: 0, m41: 0, m42: 0, m43: 0, m44: 1};
var $author$project$SvgPathExtractor$identityTransform = $justgook$alt_linear_algebra$AltMath$Matrix4$identity;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$SubPath = F2(
	function (moveto, drawtos) {
		return {drawtos: drawtos, moveto: moveto};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$endOfInput = $elm$parser$Parser$Advanced$end('end of input');
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		case '\n':
			return true;
		default:
			return false;
	}
};
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimitedEndForbidden = F3(
	function (parseItem, delimiter, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (_new) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, _new, revItems));
							}),
						$elm$parser$Parser$Advanced$backtrackable(delimiter)),
					parseItem),
					$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(revItems)))
				]));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited = function (_v0) {
	var item = _v0.item;
	var delimiter = _v0.delimiter;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$andThen,
				function (first) {
					return A2(
						$elm$parser$Parser$Advanced$loop,
						_List_fromArray(
							[first]),
						A2($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimitedEndForbidden, item, delimiter));
				},
				item),
				$elm$parser$Parser$Advanced$succeed(_List_Nil)
			]));
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ClosePath = {$: 'ClosePath'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$closepath = A2(
	$elm$parser$Parser$Advanced$inContext,
	'closepath',
	A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $folkertdev$svg_path_lowlevel$Path$LowLevel$ClosePath;
		},
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			function (c) {
				switch (c.valueOf()) {
					case 'z':
						return true;
					case 'Z':
						return true;
					default:
						return false;
				}
			},
			'close path')));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$CurveTo = F2(
	function (a, b) {
		return {$: 'CurveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$exponent = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('e')) || _Utils_eq(
							c,
							_Utils_chr('E'));
					},
					'exponent')),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$chompIf,
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('+')) || _Utils_eq(
								c,
								_Utils_chr('-'));
						},
						'sign'),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isDigit, 'digit')),
	$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$parseFloat = function (string) {
	var _v0 = $elm$core$String$toFloat(string);
	if (_v0.$ === 'Nothing') {
		return $elm$parser$Parser$Advanced$problem('invalid floating point');
	} else {
		var v = _v0.a;
		return $elm$parser$Parser$Advanced$succeed(v);
	}
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol = function (x) {
	return $elm$parser$Parser$Advanced$token(
		A2($elm$parser$Parser$Advanced$Token, x, 'invalid symbol'));
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number = function () {
	var zeroOrMoreDigits = $elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit);
	var oneOrMoreDigits = A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isDigit, 'digit'),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit));
	var parser = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							function (c) {
								return _Utils_eq(
									c,
									_Utils_chr('+')) || _Utils_eq(
									c,
									_Utils_chr('-'));
							},
							''),
						zeroOrMoreDigits),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$Advanced$ignorer,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('.'),
								zeroOrMoreDigits),
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$exponent,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					oneOrMoreDigits,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$Advanced$ignorer,
								$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('.'),
								zeroOrMoreDigits),
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$exponent,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])))
			]));
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$parseFloat,
		$elm$parser$Parser$Advanced$getChompedString(parser));
}();
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$comma = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol(',');
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$comma,
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		$elm$parser$Parser$Advanced$succeed($elm$core$Tuple$pair),
		A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curvetoArgument = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F3(
					function (pair1, pair2, pair3) {
						return _Utils_Tuple3(pair1, pair2, pair3);
					})),
			A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
		A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curvetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curvetoArgument});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curveto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'curveto',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$CurveTo($folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute)),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, 'C', 'C'))),
					$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
				$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curvetoArgumentSequence),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$folkertdev$svg_path_lowlevel$Path$LowLevel$CurveTo($folkertdev$svg_path_lowlevel$Path$LowLevel$Relative)),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, 'c', 'c'))),
					$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
				$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curvetoArgumentSequence)
			])));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$EllipticalArc = F2(
	function (a, b) {
		return {$: 'EllipticalArc', a: a, b: b};
	});
var $elm$core$Char$toLower = _Char_toLower;
var $elm$core$Char$toUpper = _Char_toUpper;
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command = function (_v0) {
	var _arguments = _v0._arguments;
	var character = _v0.character;
	var constructor = _v0.constructor;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							constructor($folkertdev$svg_path_lowlevel$Path$LowLevel$Absolute)),
						$elm$parser$Parser$Advanced$symbol(
							A2(
								$elm$parser$Parser$Advanced$Token,
								$elm$core$String$fromChar(
									$elm$core$Char$toUpper(character)),
								$elm$core$String$fromChar(
									$elm$core$Char$toUpper(character))))),
					$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
				_arguments),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							constructor($folkertdev$svg_path_lowlevel$Path$LowLevel$Relative)),
						$elm$parser$Parser$Advanced$symbol(
							A2(
								$elm$parser$Parser$Advanced$Token,
								$elm$core$String$fromChar(
									$elm$core$Char$toLower(character)),
								$elm$core$String$fromChar(
									$elm$core$Char$toLower(character))))),
					$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
				_arguments)
			]));
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Clockwise = {$: 'Clockwise'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$CounterClockwise = {$: 'CounterClockwise'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$LargestArc = {$: 'LargestArc'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$SmallestArc = {$: 'SmallestArc'};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$decodeFlags = function (_v0) {
	var arcFlag = _v0.a;
	var sweepFlag = _v0.b;
	var _v1 = _Utils_Tuple2(arcFlag, sweepFlag);
	_v1$4:
	while (true) {
		switch (_v1.a) {
			case 1:
				switch (_v1.b) {
					case 0:
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($folkertdev$svg_path_lowlevel$Path$LowLevel$LargestArc, $folkertdev$svg_path_lowlevel$Path$LowLevel$Clockwise));
					case 1:
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($folkertdev$svg_path_lowlevel$Path$LowLevel$LargestArc, $folkertdev$svg_path_lowlevel$Path$LowLevel$CounterClockwise));
					default:
						break _v1$4;
				}
			case 0:
				switch (_v1.b) {
					case 0:
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($folkertdev$svg_path_lowlevel$Path$LowLevel$SmallestArc, $folkertdev$svg_path_lowlevel$Path$LowLevel$Clockwise));
					case 1:
						return $elm$core$Maybe$Just(
							_Utils_Tuple2($folkertdev$svg_path_lowlevel$Path$LowLevel$SmallestArc, $folkertdev$svg_path_lowlevel$Path$LowLevel$CounterClockwise));
					default:
						break _v1$4;
				}
			default:
				break _v1$4;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$flag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return 1;
			},
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('1')),
			A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return 0;
			},
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('0'))
		]));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$floatingPointConstant = A2(
	$elm$parser$Parser$Advanced$andThen,
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$parseFloat,
	$elm$parser$Parser$Advanced$getChompedString(
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isDigit, 'digit')),
					$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit)),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
								$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('.')),
							$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit)),
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$exponent,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$withDefault = F2(
	function (_default, parser) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					parser,
					$elm$parser$Parser$Advanced$succeed(_default)
				]));
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$nonNegativeNumber = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		A2(
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$withDefault,
			_Utils_Tuple0,
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$symbol('+'))),
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$floatingPointConstant);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArcArgument = function () {
	var helper = F6(
		function (rx, ry, xAxisRotate, arc, sweep, target) {
			var _v0 = $folkertdev$svg_path_lowlevel$Path$LowLevel$decodeFlags(
				_Utils_Tuple2(arc, sweep));
			if (_v0.$ === 'Just') {
				var _v1 = _v0.a;
				var arcFlag = _v1.a;
				var direction = _v1.b;
				return $elm$parser$Parser$Advanced$succeed(
					{
						arcFlag: arcFlag,
						direction: direction,
						radii: _Utils_Tuple2(rx, ry),
						target: target,
						xAxisRotate: xAxisRotate
					});
			} else {
				return $elm$parser$Parser$Advanced$problem('could not parse the arc and sweep flags');
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$elm$core$Basics$identity,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed(helper),
								A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$nonNegativeNumber, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
							A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$nonNegativeNumber, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
						A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
					A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$flag, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
				A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$flag, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair));
}();
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArcArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArcArgument});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArc = A2(
	$elm$parser$Parser$Advanced$inContext,
	'elliptical arc',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArcArgumentSequence,
			character: _Utils_chr('a'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$EllipticalArc
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Horizontal = F2(
	function (a, b) {
		return {$: 'Horizontal', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$horizontalLinetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$horizontalLineto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'horizontal lineto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$horizontalLinetoArgumentSequence,
			character: _Utils_chr('h'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$Horizontal
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$linetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$lineto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'lineto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$linetoArgumentSequence,
			character: _Utils_chr('l'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$QuadraticBezierCurveTo = F2(
	function (a, b) {
		return {$: 'QuadraticBezierCurveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurvetoArgument = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		$elm$parser$Parser$Advanced$succeed($elm$core$Tuple$pair),
		A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurvetoArgumentSequence = A2(
	$elm$parser$Parser$Advanced$inContext,
	'quadratic bezier curveto argument sequence',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
		{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurvetoArgument}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurveto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'quadratic bezier curveto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurvetoArgumentSequence,
			character: _Utils_chr('q'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$QuadraticBezierCurveTo
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$SmoothCurveTo = F2(
	function (a, b) {
		return {$: 'SmoothCurveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurvetoArgument = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		$elm$parser$Parser$Advanced$succeed($elm$core$Tuple$pair),
		A2($elm$parser$Parser$Advanced$ignorer, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp)),
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurvetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurvetoArgument});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurveto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'smooth curveto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurvetoArgumentSequence,
			character: _Utils_chr('s'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$SmoothCurveTo
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$SmoothQuadraticBezierCurveTo = F2(
	function (a, b) {
		return {$: 'SmoothQuadraticBezierCurveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothQuadraticBezierCurvetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothQuadraticBezierCurveto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'smooth quadratic bezier curveto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothQuadraticBezierCurvetoArgumentSequence,
			character: _Utils_chr('t'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$SmoothQuadraticBezierCurveTo
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Vertical = F2(
	function (a, b) {
		return {$: 'Vertical', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$verticalLinetoArgumentSequence = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$number});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$verticalLineto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'vertical lineto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$verticalLinetoArgumentSequence,
			character: _Utils_chr('v'),
			constructor: $folkertdev$svg_path_lowlevel$Path$LowLevel$Vertical
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawToCommandOptions = _List_fromArray(
	[$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$closepath, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$lineto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$horizontalLineto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$verticalLineto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$curveto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothCurveto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$quadraticBezierCurveto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$smoothQuadraticBezierCurveto, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$ellipticalArc]);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawtoCommand = $elm$parser$Parser$Advanced$oneOf($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawToCommandOptions);
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawtoCommands = A2(
	$elm$parser$Parser$Advanced$inContext,
	'drawto commands',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
		{
			delimiter: $elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace),
			item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawtoCommand
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$MoveTo = F2(
	function (a, b) {
		return {$: 'MoveTo', a: a, b: b};
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$movetoArgumentSequence = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (coordinatesList) {
		if (!coordinatesList.b) {
			return $elm$parser$Parser$Advanced$problem('moveto argument sequence needs at least one coordinate, got none');
		} else {
			var x = coordinatesList.a;
			var xs = coordinatesList.b;
			return $elm$parser$Parser$Advanced$succeed(
				_Utils_Tuple2(x, xs));
		}
	},
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
		{delimiter: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$optionalCommaWsp, item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$coordinatePair}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveto = A2(
	$elm$parser$Parser$Advanced$inContext,
	'moveto',
	$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$command(
		{
			_arguments: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$movetoArgumentSequence,
			character: _Utils_chr('m'),
			constructor: F2(
				function (mode, coordinates) {
					if (!coordinates.b.b) {
						var c = coordinates.a;
						return _Utils_Tuple2(
							A2($folkertdev$svg_path_lowlevel$Path$LowLevel$MoveTo, mode, c),
							$elm$core$Maybe$Nothing);
					} else {
						var c = coordinates.a;
						var cs = coordinates.b;
						return _Utils_Tuple2(
							A2($folkertdev$svg_path_lowlevel$Path$LowLevel$MoveTo, mode, c),
							$elm$core$Maybe$Just(
								A2($folkertdev$svg_path_lowlevel$Path$LowLevel$LineTo, mode, cs)));
					}
				})
		}));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveToDrawToCommandGroup = A2(
	$elm$parser$Parser$Advanced$inContext,
	'moveto drawto command group',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (_v0, drawtos) {
						var move = _v0.a;
						var linetos = _v0.b;
						if (linetos.$ === 'Nothing') {
							return _Utils_Tuple2(move, drawtos);
						} else {
							var lt = linetos.a;
							return _Utils_Tuple2(
								move,
								A2($elm$core$List$cons, lt, drawtos));
						}
					})),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveto,
				$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace))),
		$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$drawtoCommands));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveToDrawToCommandGroups = $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$delimited(
	{
		delimiter: $elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace),
		item: $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveToDrawToCommandGroup
	});
var $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$svgMixedPath = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$moveToDrawToCommandGroups,
			$elm$parser$Parser$Advanced$chompWhile($folkertdev$svg_path_lowlevel$Path$LowLevel$ParserHelpers$isWhitespace)),
		$folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$endOfInput));
var $folkertdev$svg_path_lowlevel$Path$LowLevel$Parser$parse = function (input) {
	return A2(
		$elm$core$Result$map,
		$elm$core$List$map(
			function (_v0) {
				var moveto = _v0.a;
				var drawtos = _v0.b;
				return A2($folkertdev$svg_path_lowlevel$Path$LowLevel$SubPath, moveto, drawtos);
			}),
		A2($elm$parser$Parser$Advanced$run, $folkertdev$svg_path_lowlevel$Path$LowLevel$ParserInternal$svgMixedPath, input));
};
var $justgook$alt_linear_algebra$AltMath$Matrix4$mul = F2(
	function (a, b) {
		return {m11: (((a.m11 * b.m11) + (a.m12 * b.m21)) + (a.m13 * b.m31)) + (a.m14 * b.m41), m12: (((a.m11 * b.m12) + (a.m12 * b.m22)) + (a.m13 * b.m32)) + (a.m14 * b.m42), m13: (((a.m11 * b.m13) + (a.m12 * b.m23)) + (a.m13 * b.m33)) + (a.m14 * b.m43), m14: (((a.m11 * b.m14) + (a.m12 * b.m24)) + (a.m13 * b.m34)) + (a.m14 * b.m44), m21: (((a.m21 * b.m11) + (a.m22 * b.m21)) + (a.m23 * b.m31)) + (a.m24 * b.m41), m22: (((a.m21 * b.m12) + (a.m22 * b.m22)) + (a.m23 * b.m32)) + (a.m24 * b.m42), m23: (((a.m21 * b.m13) + (a.m22 * b.m23)) + (a.m23 * b.m33)) + (a.m24 * b.m43), m24: (((a.m21 * b.m14) + (a.m22 * b.m24)) + (a.m23 * b.m34)) + (a.m24 * b.m44), m31: (((a.m31 * b.m11) + (a.m32 * b.m21)) + (a.m33 * b.m31)) + (a.m34 * b.m41), m32: (((a.m31 * b.m12) + (a.m32 * b.m22)) + (a.m33 * b.m32)) + (a.m34 * b.m42), m33: (((a.m31 * b.m13) + (a.m32 * b.m23)) + (a.m33 * b.m33)) + (a.m34 * b.m43), m34: (((a.m31 * b.m14) + (a.m32 * b.m24)) + (a.m33 * b.m34)) + (a.m34 * b.m44), m41: (((a.m41 * b.m11) + (a.m42 * b.m21)) + (a.m43 * b.m31)) + (a.m44 * b.m41), m42: (((a.m41 * b.m12) + (a.m42 * b.m22)) + (a.m43 * b.m32)) + (a.m44 * b.m42), m43: (((a.m41 * b.m13) + (a.m42 * b.m23)) + (a.m43 * b.m33)) + (a.m44 * b.m43), m44: (((a.m41 * b.m14) + (a.m42 * b.m24)) + (a.m43 * b.m34)) + (a.m44 * b.m44)};
	});
var $justgook$alt_linear_algebra$AltMath$Matrix4$scale3 = F4(
	function (x, y, z, m) {
		return {m11: m.m11 * x, m12: m.m12 * y, m13: m.m13 * z, m14: m.m14, m21: m.m21 * x, m22: m.m22 * y, m23: m.m23 * z, m24: m.m24, m31: m.m31 * x, m32: m.m32 * y, m33: m.m33 * z, m34: m.m34, m41: m.m41 * x, m42: m.m42 * y, m43: m.m43 * z, m44: m.m44};
	});
var $author$project$SvgPathExtractor$parseTransform = function (text) {
	var value = function (x) {
		if (x.$ === 'Just') {
			var val = x.a;
			return $elm$core$String$toFloat(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var hasScale = $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			value,
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.submatches;
				},
				A2(
					$elm$regex$Regex$find,
					$author$project$GpxParser$asRegex('scale\\((-?\\d*\\.?\\d*)\\)'),
					text))));
	var hasMatrix = A2(
		$elm$core$List$filterMap,
		value,
		A2(
			$elm$core$List$concatMap,
			function ($) {
				return $.submatches;
			},
			A2(
				$elm$regex$Regex$find,
				$author$project$GpxParser$asRegex('matrix\\((-?\\d*\\.?\\d*),(-?\\d*\\.?\\d*),(-?\\d*\\.?\\d*),(-?\\d*\\.?\\d*),(-?\\d*\\.?\\d*),(-?\\d*\\.?\\d*)\\)'),
				text)));
	var applyScale = function (baseMatrix) {
		if (hasScale.$ === 'Just') {
			var scale = hasScale.a;
			return A4($justgook$alt_linear_algebra$AltMath$Matrix4$scale3, scale, scale, 1.0, baseMatrix);
		} else {
			return baseMatrix;
		}
	};
	var applyMatrix = function (baseMatrix) {
		if ((((((hasMatrix.b && hasMatrix.b.b) && hasMatrix.b.b.b) && hasMatrix.b.b.b.b) && hasMatrix.b.b.b.b.b) && hasMatrix.b.b.b.b.b.b) && (!hasMatrix.b.b.b.b.b.b.b)) {
			var a = hasMatrix.a;
			var _v1 = hasMatrix.b;
			var b = _v1.a;
			var _v2 = _v1.b;
			var c = _v2.a;
			var _v3 = _v2.b;
			var d = _v3.a;
			var _v4 = _v3.b;
			var e = _v4.a;
			var _v5 = _v4.b;
			var f = _v5.a;
			var matrix = _Utils_update(
				$author$project$SvgPathExtractor$identityTransform,
				{m11: a, m12: c, m14: e, m21: b, m22: d, m24: f});
			return A2($justgook$alt_linear_algebra$AltMath$Matrix4$mul, matrix, baseMatrix);
		} else {
			return baseMatrix;
		}
	};
	return applyScale(
		applyMatrix($author$project$SvgPathExtractor$identityTransform));
};
var $author$project$SvgPathExtractor$parsePathInfo = function (_v0) {
	var d = _v0.d;
	var transform = _v0.transform;
	var parsedTransform = A2(
		$elm$core$Maybe$withDefault,
		$author$project$SvgPathExtractor$identityTransform,
		A2($elm$core$Maybe$map, $author$project$SvgPathExtractor$parseTransform, transform));
	var parsedPath = function () {
		var _v1 = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Err(_List_Nil),
			A2($elm$core$Maybe$map, $folkertdev$svg_path_lowlevel$Path$LowLevel$Parser$parse, d));
		if (_v1.$ === 'Ok') {
			var subpaths = _v1.a;
			return subpaths;
		} else {
			return _List_Nil;
		}
	}();
	return {subpaths: parsedPath, transform: parsedTransform};
};
var $author$project$SvgPathExtractor$processXML = F2(
	function (options, content) {
		var xmlParse = $jinjor$elm_xml_parser$XmlParser$parse(content);
		var _v0 = function () {
			var _v1 = options.ipInfo;
			if (_v1.$ === 'Just') {
				var ipInfo = _v1.a;
				return _Utils_Tuple2(ipInfo.longitude, ipInfo.latitude);
			} else {
				return _Utils_Tuple2(0, 52);
			}
		}();
		var lon = _v0.a;
		var lat = _v0.b;
		if (xmlParse.$ === 'Ok') {
			var root = xmlParse.a.root;
			if (root.$ === 'Element') {
				var pointZero = {
					altitude: $ianmackenzie$elm_units$Length$meters(0),
					latitude: $ianmackenzie$elm_units$Angle$degrees(lat),
					longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
						$ianmackenzie$elm_units$Angle$degrees(lon)),
					timestamp: $elm$core$Maybe$Nothing
				};
				var pathState = {currentPoint: $ianmackenzie$elm_geometry$Point3d$origin, outputs: _List_Nil, startPoint: $ianmackenzie$elm_geometry$Point3d$origin};
				var pathNodes = A2(
					$elm$core$List$filter,
					function (_v5) {
						var t = _v5.a;
						return t === 'path';
					},
					$elm$core$List$reverse(
						$author$project$SvgPathExtractor$getAllXmlTags(root)));
				var pathInfos = A2(
					$elm$core$List$map,
					function (_v4) {
						var node = _v4.b;
						return {
							d: A2($author$project$SvgPathExtractor$getAttribute, 'd', node),
							transform: A2($author$project$SvgPathExtractor$getAttribute, 'transform', node)
						};
					},
					pathNodes);
				var untransformedPaths = A2($elm$core$List$map, $author$project$SvgPathExtractor$parsePathInfo, pathInfos);
				var finalPathState = A3($elm$core$List$foldl, $author$project$SvgPathExtractor$convertToPoints, pathState, untransformedPaths);
				var gpxPoints = A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$DomainModel$withoutTime,
						$author$project$DomainModel$gpxFromPointWithReference(pointZero)),
					finalPathState.outputs);
				return A2($author$project$TrackLoaded$trackFromPoints, options.svgFilename, gpxPoints);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$SvgPathExtractor$trackFromSvg = F2(
	function (options, content) {
		return A2($author$project$SvgPathExtractor$processXML, options, content);
	});
var $author$project$TrackLoaded$undoLastAction = function (track) {
	var _v0 = track.undos;
	if (_v0.b) {
		var undo = _v0.a;
		var moreUndos = _v0.b;
		var newTree = A5($author$project$DomainModel$replaceRange, undo.fromStart, undo.fromEnd, track.referenceLonLat, undo.originalPoints, track.trackTree);
		if (newTree.$ === 'Just') {
			var isTree = newTree.a;
			return _Utils_update(
				track,
				{
					currentPosition: undo.currentPosition,
					leafIndex: $author$project$TrackLoaded$indexLeaves(isTree),
					markerPosition: undo.markerPosition,
					redos: A2($elm$core$List$cons, undo, track.redos),
					trackTree: isTree,
					undos: moreUndos
				});
		} else {
			return track;
		}
	} else {
		return track;
	}
};
var $author$project$Tools$Graph$undoWalkRoute = function (options) {
	var _v0 = options.undoGraph;
	if (_v0.$ === 'Just') {
		var undoGraph = _v0.a;
		return _Utils_update(
			options,
			{analyzed: true, editingTrack: 0, graph: undoGraph, originalTrack: options.undoOriginalTrack, selectedTraversal: 0, undoGraph: $elm$core$Maybe$Nothing});
	} else {
		return options;
	}
};
var $author$project$PaneLayoutManager$GraphViewMessage = F2(
	function (a, b) {
		return {$: 'GraphViewMessage', a: a, b: b};
	});
var $author$project$Actions$MapCenterOnCurrent = {$: 'MapCenterOnCurrent'};
var $author$project$PaneLayoutManager$MapViewMessage = function (a) {
	return {$: 'MapViewMessage', a: a};
};
var $author$project$PaneLayoutManager$PlanViewMessage = F2(
	function (a, b) {
		return {$: 'PlanViewMessage', a: a, b: b};
	});
var $author$project$Actions$PointerChange = {$: 'PointerChange'};
var $author$project$PaneLayoutManager$ProfileViewMessage = F2(
	function (a, b) {
		return {$: 'ProfileViewMessage', a: a, b: b};
	});
var $author$project$PaneContext$SliderMoved = {$: 'SliderMoved'};
var $author$project$PaneLayoutManager$ThirdPersonViewMessage = F2(
	function (a, b) {
		return {$: 'ThirdPersonViewMessage', a: a, b: b};
	});
var $ianmackenzie$elm_units$Quantity$toFloatQuantity = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $ianmackenzie$elm_units$Quantity$truncate = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value | 0);
};
var $author$project$PaneLayoutManager$takeHalf = function (qty) {
	return $ianmackenzie$elm_units$Quantity$truncate(
		$ianmackenzie$elm_units$Quantity$half(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(qty)));
};
var $author$project$PaneLayoutManager$dimensionsWithLayout = F2(
	function (layout, _v0) {
		var w = _v0.a;
		var h = _v0.b;
		switch (layout.$) {
			case 'PanesOne':
				return _Utils_Tuple2(w, h);
			case 'PanesLeftRight':
				return _Utils_Tuple2(
					$author$project$PaneLayoutManager$takeHalf(w),
					h);
			case 'PanesUpperLower':
				return _Utils_Tuple2(
					w,
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						$ianmackenzie$elm_units$Pixels$pixels(20),
						$author$project$PaneLayoutManager$takeHalf(h)));
			case 'PanesOnePlusTwo':
				return _Utils_Tuple2(w, h);
			default:
				return _Utils_Tuple2(
					$author$project$PaneLayoutManager$takeHalf(w),
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						$ianmackenzie$elm_units$Pixels$pixels(20),
						$author$project$PaneLayoutManager$takeHalf(h)));
		}
	});
var $author$project$PaneLayoutManager$encodePaneId = function (paneId) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneContext$Pane1, 'pane1'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, paneId);
			},
			$author$project$PaneLayoutManager$paneIdHelper)).b;
};
var $author$project$PaneLayoutManager$encodeView = function (view) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$ViewMode$ViewInfo, 'info'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, view);
			},
			$author$project$PaneLayoutManager$viewHelper)).b;
};
var $author$project$PaneLayoutManager$encodeOnePane = function (pane) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'paneid',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodePaneId(pane.paneId))),
				_Utils_Tuple2(
				'activeView',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodeView(pane.activeView)))
			]));
};
var $author$project$PaneLayoutManager$encodePanesLayout = function (layout) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2($author$project$PaneContext$PanesOne, 'One'),
		A2(
			$elm_community$list_extra$List$Extra$find,
			function (entry) {
				return _Utils_eq(entry.a, layout);
			},
			$author$project$PaneLayoutManager$paneLayoutHelper)).b;
};
var $author$project$PaneLayoutManager$encodePaneState = function (options) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'layout',
				$elm$json$Json$Encode$string(
					$author$project$PaneLayoutManager$encodePanesLayout(options.paneLayout))),
				_Utils_Tuple2(
				'pane1',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane1)),
				_Utils_Tuple2(
				'pane2',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane2)),
				_Utils_Tuple2(
				'pane3',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane3)),
				_Utils_Tuple2(
				'pane4',
				$author$project$PaneLayoutManager$encodeOnePane(options.pane4))
			]));
};
var $author$project$Actions$ApplyLandUseAltitudes = function (a) {
	return {$: 'ApplyLandUseAltitudes', a: a};
};
var $author$project$Actions$ApplyMapElevations = function (a) {
	return {$: 'ApplyMapElevations', a: a};
};
var $author$project$Actions$ProfileClick = F2(
	function (a, b) {
		return {$: 'ProfileClick', a: a, b: b};
	});
var $author$project$Actions$SaveLastMapClick = F2(
	function (a, b) {
		return {$: 'SaveLastMapClick', a: a, b: b};
	});
var $author$project$Actions$SetCurrentFromMapClick = function (a) {
	return {$: 'SetCurrentFromMapClick', a: a};
};
var $author$project$Actions$TryRemoteLoadIfGiven = {$: 'TryRemoteLoadIfGiven'};
var $author$project$Actions$PointMovedOnMap = F4(
	function (a, b, c, d) {
		return {$: 'PointMovedOnMap', a: a, b: b, c: c, d: d};
	});
var $author$project$MapPortController$draggedOnMap = F2(
	function (json, track) {
		var lon2 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['end', 'lng']),
				$elm$json$Json$Decode$float),
			json);
		var lon1 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['start', 'lng']),
				$elm$json$Json$Decode$float),
			json);
		var lat2 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['end', 'lat']),
				$elm$json$Json$Decode$float),
			json);
		var lat1 = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['start', 'lat']),
				$elm$json$Json$Decode$float),
			json);
		if (_Utils_eq(lon1, lon2) && _Utils_eq(lat1, lat2)) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(
				_Utils_Tuple2(lon1, lat1),
				_Utils_Tuple2(lon2, lat2));
			if ((((_v0.a.a.$ === 'Ok') && (_v0.a.b.$ === 'Ok')) && (_v0.b.a.$ === 'Ok')) && (_v0.b.b.$ === 'Ok')) {
				var _v1 = _v0.a;
				var startLon = _v1.a.a;
				var startLat = _v1.b.a;
				var _v2 = _v0.b;
				var endLon = _v2.a.a;
				var endLat = _v2.b.a;
				return _List_fromArray(
					[
						A4($author$project$Actions$PointMovedOnMap, startLon, startLat, endLon, endLat),
						$author$project$Actions$TrackHasChanged
					]);
			} else {
				return _List_Nil;
			}
		}
	});
var $author$project$MapPortController$msgDecoder = A2($elm$json$Json$Decode$field, 'msg', $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$MapPortController$processMapPortMessage = F3(
	function (lastState, track, json) {
		var jsonMsg = A2($elm$json$Json$Decode$decodeValue, $author$project$MapPortController$msgDecoder, json);
		var elevations = A2(
			$elm$json$Json$Decode$decodeValue,
			A2(
				$elm$json$Json$Decode$field,
				'elevations',
				$elm$json$Json$Decode$list(
					$elm$json$Json$Decode$nullable($elm$json$Json$Decode$float))),
			json);
		var _v0 = _Utils_Tuple2(
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'lat', $elm$json$Json$Decode$float),
				json),
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'lon', $elm$json$Json$Decode$float),
				json));
		var lat = _v0.a;
		var lon = _v0.b;
		var _v1 = _Utils_Tuple2(
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'container', $elm$json$Json$Decode$string),
				json),
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'x', $elm$json$Json$Decode$float),
				json));
		var container = _v1.a;
		var distance = _v1.b;
		_v2$6:
		while (true) {
			if (jsonMsg.$ === 'Ok') {
				switch (jsonMsg.a) {
					case 'map ready':
						return _Utils_Tuple2(
							lastState,
							_List_fromArray(
								[$author$project$Actions$TryRemoteLoadIfGiven]));
					case 'click':
						var _v3 = _Utils_Tuple2(lat, lon);
						if ((_v3.a.$ === 'Ok') && (_v3.b.$ === 'Ok')) {
							var lat1 = _v3.a.a;
							var lon1 = _v3.b.a;
							if (_Utils_eq(lat1, lastState.lastClickLat) && _Utils_eq(lon1, lastState.lastClickLon)) {
								return _Utils_Tuple2(lastState, _List_Nil);
							} else {
								var gpxPoint = {
									altitude: $ianmackenzie$elm_units$Length$meters(0.0),
									latitude: $ianmackenzie$elm_units$Angle$degrees(lat1),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(lon1)),
									timestamp: $elm$core$Maybe$Nothing
								};
								var index = A5($author$project$DomainModel$nearestToLonLat, gpxPoint, track.currentPosition, track.trackTree, track.referenceLonLat, track.leafIndex);
								return _Utils_Tuple2(
									_Utils_update(
										lastState,
										{lastClickLat: lat1, lastClickLon: lon1}),
									_List_fromArray(
										[
											$author$project$Actions$SetCurrentFromMapClick(index),
											A2($author$project$Actions$SaveLastMapClick, lon1, lat1),
											$author$project$Actions$PointerChange
										]));
							}
						} else {
							return _Utils_Tuple2(lastState, _List_Nil);
						}
					case 'profileClick':
						var _v4 = _Utils_Tuple2(container, distance);
						if ((_v4.a.$ === 'Ok') && (_v4.b.$ === 'Ok')) {
							var container1 = _v4.a.a;
							var distance1 = _v4.b.a;
							return _Utils_Tuple2(
								lastState,
								_List_fromArray(
									[
										A2($author$project$Actions$ProfileClick, container1, distance1),
										$author$project$Actions$PointerChange
									]));
						} else {
							return _Utils_Tuple2(lastState, _List_Nil);
						}
					case 'drag':
						return _Utils_Tuple2(
							lastState,
							A2($author$project$MapPortController$draggedOnMap, json, track));
					case 'elevations':
						if (elevations.$ === 'Ok') {
							var mapElevations = elevations.a;
							return _Utils_Tuple2(
								lastState,
								_List_fromArray(
									[
										$author$project$Actions$ApplyMapElevations(mapElevations)
									]));
						} else {
							return _Utils_Tuple2(lastState, _List_Nil);
						}
					case 'landuse':
						if (elevations.$ === 'Ok') {
							var mapElevations = elevations.a;
							return _Utils_Tuple2(
								lastState,
								_List_fromArray(
									[
										$author$project$Actions$ApplyLandUseAltitudes(mapElevations)
									]));
						} else {
							return _Utils_Tuple2(lastState, _List_Nil);
						}
					default:
						break _v2$6;
				}
			} else {
				break _v2$6;
			}
		}
		return _Utils_Tuple2(lastState, _List_Nil);
	});
var $author$project$MapPortController$update = F3(
	function (mapMsg, track, lastState) {
		var value = mapMsg.a;
		return A3($author$project$MapPortController$processMapPortMessage, lastState, track, value);
	});
var $author$project$Actions$AddSelfLoop = function (a) {
	return {$: 'AddSelfLoop', a: a};
};
var $author$project$Actions$AddTraversal = function (a) {
	return {$: 'AddTraversal', a: a};
};
var $author$project$Actions$ChangeActiveTrack = function (a) {
	return {$: 'ChangeActiveTrack', a: a};
};
var $author$project$ViewGraph$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$Actions$DelayMessage = F2(
	function (a, b) {
		return {$: 'DelayMessage', a: a, b: b};
	});
var $author$project$Actions$DeleteEdge = function (a) {
	return {$: 'DeleteEdge', a: a};
};
var $author$project$Actions$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$ViewGraphContext$DragPan = {$: 'DragPan'};
var $author$project$ViewGraphContext$EdgeArc = {$: 'EdgeArc'};
var $author$project$Tools$GraphOptions$ClickEdge = function (a) {
	return {$: 'ClickEdge', a: a};
};
var $author$project$Tools$GraphOptions$ClickNode = function (a) {
	return {$: 'ClickNode', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d = function (a) {
	return {$: 'Viewpoint3d', a: a};
};
var $ianmackenzie$elm_geometry$Vector3d$dot = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((v1.x * v2.x) + (v1.y * v2.y)) + (v1.z * v2.z));
	});
var $ianmackenzie$elm_geometry$Vector3d$reverse = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
		{x: -v.x, y: -v.y, z: -v.z});
};
var $ianmackenzie$elm_geometry$Direction3d$orthonormalize = F3(
	function (xVector, xyVector, xyzVector) {
		return A2(
			$elm$core$Maybe$andThen,
			function (xDirection) {
				var yVector = A2(
					$ianmackenzie$elm_geometry$Vector3d$minus,
					A2($ianmackenzie$elm_geometry$Vector3d$projectionIn, xDirection, xyVector),
					xyVector);
				return A2(
					$elm$core$Maybe$andThen,
					function (yDirection) {
						var rightHandedZVector = A2($ianmackenzie$elm_geometry$Vector3d$cross, xyVector, xVector);
						var tripleProduct = A2($ianmackenzie$elm_geometry$Vector3d$dot, xyzVector, rightHandedZVector);
						var zVector = A2($ianmackenzie$elm_units$Quantity$greaterThan, $ianmackenzie$elm_units$Quantity$zero, tripleProduct) ? rightHandedZVector : (A2($ianmackenzie$elm_units$Quantity$lessThan, $ianmackenzie$elm_units$Quantity$zero, tripleProduct) ? $ianmackenzie$elm_geometry$Vector3d$reverse(rightHandedZVector) : $ianmackenzie$elm_geometry$Vector3d$zero);
						return A2(
							$elm$core$Maybe$map,
							function (zDirection) {
								return _Utils_Tuple3(xDirection, yDirection, zDirection);
							},
							$ianmackenzie$elm_geometry$Vector3d$direction(zVector));
					},
					$ianmackenzie$elm_geometry$Vector3d$direction(yVector));
			},
			$ianmackenzie$elm_geometry$Vector3d$direction(xVector));
	});
var $ianmackenzie$elm_geometry$Frame3d$withZDirection = F2(
	function (givenZDirection, givenOrigin) {
		var _v0 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(givenZDirection);
		var computedXDirection = _v0.a;
		var computedYDirection = _v0.b;
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{originPoint: givenOrigin, xDirection: computedXDirection, yDirection: computedYDirection, zDirection: givenZDirection});
	});
var $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt = function (_arguments) {
	var zVector = A2($ianmackenzie$elm_geometry$Vector3d$from, _arguments.focalPoint, _arguments.eyePoint);
	var yVector = $ianmackenzie$elm_geometry$Direction3d$toVector(_arguments.upDirection);
	var xVector = A2($ianmackenzie$elm_geometry$Vector3d$cross, zVector, yVector);
	var _v0 = A3($ianmackenzie$elm_geometry$Direction3d$orthonormalize, zVector, yVector, xVector);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var normalizedZDirection = _v1.a;
		var normalizedYDirection = _v1.b;
		var normalizedXDirection = _v1.c;
		return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
			$ianmackenzie$elm_geometry$Frame3d$unsafe(
				{originPoint: _arguments.eyePoint, xDirection: normalizedXDirection, yDirection: normalizedYDirection, zDirection: normalizedZDirection}));
	} else {
		var _v2 = $ianmackenzie$elm_geometry$Vector3d$direction(zVector);
		if (_v2.$ === 'Just') {
			var zDirection = _v2.a;
			return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
				A2($ianmackenzie$elm_geometry$Frame3d$withZDirection, zDirection, _arguments.eyePoint));
		} else {
			var _v3 = $ianmackenzie$elm_geometry$Direction3d$perpendicularBasis(_arguments.upDirection);
			var arbitraryZDirection = _v3.a;
			var arbitraryXDirection = _v3.b;
			return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(
				$ianmackenzie$elm_geometry$Frame3d$unsafe(
					{originPoint: _arguments.eyePoint, xDirection: arbitraryXDirection, yDirection: _arguments.upDirection, zDirection: arbitraryZDirection}));
		}
	}
};
var $author$project$Spherical$metresPerPixelAtEquatorZoomZero = 78271.484;
var $author$project$Spherical$metresPerPixel = F2(
	function (zoomLevel, latitude) {
		return ($ianmackenzie$elm_units$Angle$cos(latitude) * $author$project$Spherical$metresPerPixelAtEquatorZoomZero) / A2($elm$core$Basics$pow, 2.0, zoomLevel);
	});
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d = function (a) {
	return {$: 'Camera3d', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Orthographic = function (a) {
	return {$: 'Orthographic', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$orthographic = function (_arguments) {
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d(
		{
			projection: $ianmackenzie$elm_3d_camera$Camera3d$Types$Orthographic(
				$ianmackenzie$elm_units$Quantity$abs(_arguments.viewportHeight)),
			viewpoint: _arguments.viewpoint
		});
};
var $author$project$ViewGraph$deriveCamera = function (context) {
	var lookingAt = context.focalPoint;
	var latitude = $ianmackenzie$elm_units$Angle$degrees(45);
	var eyePoint = A2(
		$ianmackenzie$elm_geometry$Point3d$translateBy,
		A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 5000.0),
		lookingAt.space);
	var viewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
		{eyePoint: eyePoint, focalPoint: lookingAt.space, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveY});
	return $ianmackenzie$elm_3d_camera$Camera3d$orthographic(
		{
			viewpoint: viewpoint,
			viewportHeight: $ianmackenzie$elm_units$Length$meters(
				1200.0 * A2($author$project$Spherical$metresPerPixel, context.zoomLevel, latitude))
		});
};
var $ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d = function (a) {
	return {$: 'Rectangle2d', a: a};
};
var $ianmackenzie$elm_units$Quantity$midpoint = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x + (0.5 * (y - x)));
	});
var $ianmackenzie$elm_geometry$Direction2d$negativeX = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: -1, y: 0});
var $ianmackenzie$elm_geometry$Direction2d$positiveY = $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
	{x: 0, y: 1});
var $ianmackenzie$elm_geometry$Geometry$Types$Frame2d = function (a) {
	return {$: 'Frame2d', a: a};
};
var $ianmackenzie$elm_geometry$Frame2d$unsafe = function (properties) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(properties);
};
var $ianmackenzie$elm_geometry$Rectangle2d$axisAligned = F4(
	function (x1, y1, x2, y2) {
		var computedYDirection = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, y1, y2) ? $ianmackenzie$elm_geometry$Direction2d$positiveY : $ianmackenzie$elm_geometry$Direction2d$negativeY;
		var computedXDirection = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, x1, x2) ? $ianmackenzie$elm_geometry$Direction2d$positiveX : $ianmackenzie$elm_geometry$Direction2d$negativeX;
		var computedDimensions = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_units$Quantity$minus, x1, x2)),
			$ianmackenzie$elm_units$Quantity$abs(
				A2($ianmackenzie$elm_units$Quantity$minus, y1, y2)));
		var computedCenterPoint = A2(
			$ianmackenzie$elm_geometry$Point2d$xy,
			A2($ianmackenzie$elm_units$Quantity$midpoint, x1, x2),
			A2($ianmackenzie$elm_units$Quantity$midpoint, y1, y2));
		var computedAxes = $ianmackenzie$elm_geometry$Frame2d$unsafe(
			{originPoint: computedCenterPoint, xDirection: computedXDirection, yDirection: computedYDirection});
		return $ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d(
			{axes: computedAxes, dimensions: computedDimensions});
	});
var $ianmackenzie$elm_geometry$Rectangle2d$from = F2(
	function (p1, p2) {
		return A4(
			$ianmackenzie$elm_geometry$Rectangle2d$axisAligned,
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(p1),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(p1),
			$ianmackenzie$elm_geometry$Point2d$xCoordinate(p2),
			$ianmackenzie$elm_geometry$Point2d$yCoordinate(p2));
	});
var $ianmackenzie$elm_units$Pixels$inPixels = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $ianmackenzie$elm_geometry$Point2d$pixels = F2(
	function (x, y) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_units$Quantity$at = F2(
	function (_v0, _v1) {
		var rateOfChange = _v0.a;
		var independentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(rateOfChange * independentValue);
	});
var $ianmackenzie$elm_geometry$Frame2d$copy = function (_v0) {
	var properties = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(properties);
};
var $ianmackenzie$elm_geometry$Rectangle2d$axes = function (_v0) {
	var rectangle = _v0.a;
	return $ianmackenzie$elm_geometry$Frame2d$copy(rectangle.axes);
};
var $ianmackenzie$elm_geometry$Rectangle2d$dimensions = function (_v0) {
	var rectangle = _v0.a;
	return rectangle.dimensions;
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$originPoint(frame);
};
var $ianmackenzie$elm_units$Quantity$per = F2(
	function (_v0, _v1) {
		var independentValue = _v0.a;
		var dependentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(dependentValue / independentValue);
	});
var $ianmackenzie$elm_geometry$Direction3d$placeIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var d = _v1.a;
		var _v2 = frame.zDirection;
		var k = _v2.a;
		var _v3 = frame.yDirection;
		var j = _v3.a;
		var _v4 = frame.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((i.x * d.x) + (j.x * d.y)) + (k.x * d.z), y: ((i.y * d.x) + (j.y * d.y)) + (k.y * d.z), z: ((i.z * d.x) + (j.z * d.y)) + (k.z * d.z)});
	});
var $ianmackenzie$elm_geometry$Direction3d$reverse = function (_v0) {
	var d = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
		{x: -d.x, y: -d.y, z: -d.z});
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Direction3d$reverse(
		$ianmackenzie$elm_geometry$Frame3d$zDirection(frame));
};
var $ianmackenzie$elm_geometry$Point2d$xCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.xDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_geometry$Point3d$xyzIn = F4(
	function (_v0, _v1, _v2, _v3) {
		var frame = _v0.a;
		var x = _v1.a;
		var y = _v2.a;
		var z = _v3.a;
		var _v4 = frame.originPoint;
		var p0 = _v4.a;
		var _v5 = frame.zDirection;
		var k = _v5.a;
		var _v6 = frame.yDirection;
		var j = _v6.a;
		var _v7 = frame.xDirection;
		var i = _v7.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((p0.x + (x * i.x)) + (y * j.x)) + (z * k.x), y: ((p0.y + (x * i.y)) + (y * j.y)) + (z * k.y), z: ((p0.z + (x * i.z)) + (y * j.z)) + (z * k.z)});
	});
var $ianmackenzie$elm_geometry$Point2d$yCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.yDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y));
	});
var $ianmackenzie$elm_3d_camera$Camera3d$ray = F3(
	function (_v0, screen, point) {
		var camera = _v0.a;
		var screenY = A2(
			$ianmackenzie$elm_geometry$Point2d$yCoordinateIn,
			$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
			point);
		var screenX = A2(
			$ianmackenzie$elm_geometry$Point2d$xCoordinateIn,
			$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
			point);
		var _v1 = camera.viewpoint;
		var viewpointFrame = _v1.a;
		var _v2 = $ianmackenzie$elm_geometry$Rectangle2d$dimensions(screen);
		var screenWidth = _v2.a;
		var screenHeight = _v2.b;
		var _v3 = camera.projection;
		if (_v3.$ === 'Perspective') {
			var frustumSlope = _v3.a;
			var screenZ = $ianmackenzie$elm_units$Quantity$negate(
				A2(
					$ianmackenzie$elm_units$Quantity$divideBy,
					frustumSlope,
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, 0.5, screenHeight)));
			var direction = A2(
				$ianmackenzie$elm_geometry$Direction3d$placeIn,
				viewpointFrame,
				A2(
					$elm$core$Maybe$withDefault,
					$ianmackenzie$elm_geometry$Direction3d$negativeZ,
					$ianmackenzie$elm_geometry$Vector3d$direction(
						A3($ianmackenzie$elm_geometry$Vector3d$xyz, screenX, screenY, screenZ))));
			return A2(
				$ianmackenzie$elm_geometry$Axis3d$through,
				$ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(camera.viewpoint),
				direction);
		} else {
			var viewpointHeight = _v3.a;
			var resolution = A2($ianmackenzie$elm_units$Quantity$per, screenHeight, viewpointHeight);
			var origin = A4(
				$ianmackenzie$elm_geometry$Point3d$xyzIn,
				viewpointFrame,
				A2($ianmackenzie$elm_units$Quantity$at, resolution, screenX),
				A2($ianmackenzie$elm_units$Quantity$at, resolution, screenY),
				$ianmackenzie$elm_units$Quantity$zero);
			return A2(
				$ianmackenzie$elm_geometry$Axis3d$through,
				origin,
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(camera.viewpoint));
		}
	});
var $ianmackenzie$elm_geometry$Point3d$xCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.xDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z));
	});
var $ianmackenzie$elm_geometry$Point2d$xyIn = F3(
	function (_v0, _v1, _v2) {
		var frame = _v0.a;
		var x = _v1.a;
		var y = _v2.a;
		var _v3 = frame.originPoint;
		var p0 = _v3.a;
		var _v4 = frame.yDirection;
		var j = _v4.a;
		var _v5 = frame.xDirection;
		var i = _v5.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: (p0.x + (x * i.x)) + (y * j.x), y: (p0.y + (x * i.y)) + (y * j.y)});
	});
var $ianmackenzie$elm_geometry$Point3d$yCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.yDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z));
	});
var $ianmackenzie$elm_geometry$Point3d$zCoordinateIn = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var _v3 = frame.zDirection;
		var d = _v3.a;
		return $ianmackenzie$elm_units$Quantity$Quantity((((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y)) + ((p.z - p0.z) * d.z));
	});
var $ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace = F3(
	function (_v0, screen, point) {
		var camera = _v0.a;
		var _v1 = camera.viewpoint;
		var viewpointFrame = _v1.a;
		var viewX = A2($ianmackenzie$elm_geometry$Point3d$xCoordinateIn, viewpointFrame, point);
		var viewY = A2($ianmackenzie$elm_geometry$Point3d$yCoordinateIn, viewpointFrame, point);
		var viewZ = A2($ianmackenzie$elm_geometry$Point3d$zCoordinateIn, viewpointFrame, point);
		var pointDepth = $ianmackenzie$elm_units$Quantity$negate(viewZ);
		var _v2 = $ianmackenzie$elm_geometry$Rectangle2d$dimensions(screen);
		var screenWidth = _v2.a;
		var screenHeight = _v2.b;
		var aspectRatio = A2($ianmackenzie$elm_units$Quantity$ratio, screenWidth, screenHeight);
		var _v3 = camera.projection;
		if (_v3.$ === 'Perspective') {
			var frustumSlope = _v3.a;
			var ndcY = A2($ianmackenzie$elm_units$Quantity$ratio, viewY, pointDepth) / frustumSlope;
			var ndcX = A2($ianmackenzie$elm_units$Quantity$ratio, viewX, pointDepth) / (aspectRatio * frustumSlope);
			return A3(
				$ianmackenzie$elm_geometry$Point2d$xyIn,
				$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, ndcX / 2, screenWidth),
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, ndcY / 2, screenHeight));
		} else {
			var viewportHeight = _v3.a;
			var halfNdcY = A2($ianmackenzie$elm_units$Quantity$ratio, viewY, viewportHeight);
			var halfNdcX = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				viewX,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, aspectRatio, viewportHeight));
			return A3(
				$ianmackenzie$elm_geometry$Point2d$xyIn,
				$ianmackenzie$elm_geometry$Rectangle2d$axes(screen),
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, halfNdcX, screenWidth),
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, halfNdcY, screenHeight));
		}
	});
var $author$project$ViewGraph$detectHit = F4(
	function (event, graph, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var returnStartNode = function (edgeIndex) {
			var _v10 = A2($elm$core$Dict$get, edgeIndex, graph.edges);
			if (_v10.$ === 'Nothing') {
				return $author$project$Tools$GraphOptions$ClickNone;
			} else {
				var edgeInfo = _v10.a;
				return $author$project$Tools$GraphOptions$ClickNode(edgeInfo.lowNode);
			}
		};
		var returnEndNode = function (edgeIndex) {
			var _v9 = A2($elm$core$Dict$get, edgeIndex, graph.edges);
			if (_v9.$ === 'Nothing') {
				return $author$project$Tools$GraphOptions$ClickNone;
			} else {
				var edgeInfo = _v9.a;
				return $author$project$Tools$GraphOptions$ClickNode(edgeInfo.highNode);
			}
		};
		var camera = $author$project$ViewGraph$deriveCamera(context);
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		var candidates = A2(
			$elm$core$List$map,
			function (_v8) {
				var edgeIndex = _v8.a;
				var edgeInfo = _v8.b;
				var thisEdgeNearestIndex = A4($author$project$DomainModel$nearestToRay, ray, edgeInfo.track.trackTree, edgeInfo.track.leafIndex, edgeInfo.track.currentPosition);
				var thisEdgeNearestPoint = A3(
					$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
					camera,
					screenRectangle,
					A2($author$project$DomainModel$earthPointFromIndex, thisEdgeNearestIndex, edgeInfo.track.trackTree).space);
				return _Utils_Tuple2(
					edgeIndex,
					_Utils_Tuple3(
						thisEdgeNearestIndex,
						_Utils_eq(
							thisEdgeNearestIndex,
							$author$project$DomainModel$skipCount(edgeInfo.track.trackTree)),
						A2($ianmackenzie$elm_geometry$Point2d$distanceFrom, screenPoint, thisEdgeNearestPoint)));
			},
			$elm$core$Dict$toList(graph.edges));
		var bestCandidate = A2(
			$elm_community$list_extra$List$Extra$minimumBy,
			function (_v6) {
				var _v7 = _v6.b;
				var dist = _v7.c;
				return $ianmackenzie$elm_units$Pixels$inPixels(dist);
			},
			candidates);
		if (bestCandidate.$ === 'Nothing') {
			return $author$project$Tools$GraphOptions$ClickNone;
		} else {
			var _v4 = bestCandidate.a;
			var edgeIndex = _v4.a;
			var _v5 = _v4.b;
			var pointIndex = _v5.a;
			var isEnd = _v5.b;
			return (!pointIndex) ? returnStartNode(edgeIndex) : (isEnd ? returnEndNode(edgeIndex) : $author$project$Tools$GraphOptions$ClickEdge(edgeIndex));
		}
	});
var $ianmackenzie$elm_geometry$Vector2d$xy = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: x, y: y});
	});
var $ianmackenzie$elm_geometry$Vector2d$fromTuple = F2(
	function (toQuantity, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return A2(
			$ianmackenzie$elm_geometry$Vector2d$xy,
			toQuantity(x),
			toQuantity(y));
	});
var $ianmackenzie$elm_geometry$Point2d$midpoint = F2(
	function (_v0, _v1) {
		var p1 = _v0.a;
		var p2 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p1.x + (0.5 * (p2.x - p1.x)), y: p1.y + (0.5 * (p2.y - p1.y))});
	});
var $ianmackenzie$elm_geometry$Vector2d$minus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: v1.x - v2.x, y: v1.y - v2.y});
	});
var $ianmackenzie$elm_geometry$Vector2d$mirrorAcross = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var v = _v1.a;
		var _v2 = axis.direction;
		var d = _v2.a;
		var a = 1 - ((2 * d.y) * d.y);
		var b = (2 * d.x) * d.y;
		var c = 1 - ((2 * d.x) * d.x);
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: (a * v.x) + (b * v.y), y: (b * v.x) + (c * v.y)});
	});
var $ianmackenzie$elm_geometry$Vector3d$on = F2(
	function (_v0, _v1) {
		var sketchPlane = _v0.a;
		var v = _v1.a;
		var _v2 = sketchPlane.yDirection;
		var j = _v2.a;
		var _v3 = sketchPlane.xDirection;
		var i = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector3d(
			{x: (v.x * i.x) + (v.y * j.x), y: (v.x * i.y) + (v.y * j.y), z: (v.x * i.z) + (v.y * j.z)});
	});
var $ianmackenzie$elm_geometry$Vector2d$scaleBy = F2(
	function (k, _v0) {
		var v = _v0.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: k * v.x, y: k * v.y});
	});
var $ianmackenzie$elm_geometry$Vector2d$toTuple = F2(
	function (fromQuantity, vector) {
		return _Utils_Tuple2(
			fromQuantity(
				$ianmackenzie$elm_geometry$Vector2d$xComponent(vector)),
			fromQuantity(
				$ianmackenzie$elm_geometry$Vector2d$yComponent(vector)));
	});
var $ianmackenzie$elm_geometry$Axis2d$x = A2($ianmackenzie$elm_geometry$Axis2d$through, $ianmackenzie$elm_geometry$Point2d$origin, $ianmackenzie$elm_geometry$Direction2d$x);
var $author$project$ViewGraph$update = F5(
	function (msg, msgWrapper, graph, area, context) {
		switch (msg.$) {
			case 'ImageGrab':
				var event = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							dragAction: $author$project$ViewGraphContext$DragPan,
							orbiting: $elm$core$Maybe$Just(event.offsetPos),
							waitingForClickDelay: true
						}),
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewGraph$ClickDelayExpired))
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageDrag':
				var event = msg.a;
				var _v1 = event.offsetPos;
				var dx = _v1.a;
				var dy = _v1.b;
				var _v2 = _Utils_Tuple2(context.dragAction, context.orbiting);
				if ((_v2.a.$ === 'DragPan') && (_v2.b.$ === 'Just')) {
					var _v3 = _v2.a;
					var _v4 = _v2.b.a;
					var startX = _v4.a;
					var startY = _v4.b;
					var shiftVector = A2(
						$ianmackenzie$elm_geometry$Vector3d$scaleBy,
						A2(
							$author$project$Spherical$metresPerPixel,
							context.zoomLevel,
							$ianmackenzie$elm_units$Angle$degrees(30)),
						A3($ianmackenzie$elm_geometry$Vector3d$meters, startX - dx, dy - startY, 0.0));
					return _Utils_Tuple2(
						_Utils_update(
							context,
							{
								focalPoint: $author$project$DomainModel$withoutTime(
									A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint.space)),
								orbiting: $elm$core$Maybe$Just(
									_Utils_Tuple2(dx, dy))
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							context,
							{
								mouseHere: A2($ianmackenzie$elm_geometry$Point2d$fromTuple, $ianmackenzie$elm_units$Pixels$pixels, event.offsetPos)
							}),
						_List_Nil);
				}
			case 'ImageRelease':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{dragAction: $author$project$ViewGraphContext$DragNone, orbiting: $elm$core$Maybe$Nothing}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				var newZoom = A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + increment);
				var _v5 = area;
				var width = _v5.a;
				var height = _v5.b;
				var screenCentre = A2(
					$ianmackenzie$elm_geometry$Point2d$midpoint,
					$ianmackenzie$elm_geometry$Point2d$origin,
					A2(
						$ianmackenzie$elm_geometry$Point2d$xy,
						$ianmackenzie$elm_units$Quantity$toFloatQuantity(width),
						$ianmackenzie$elm_units$Quantity$toFloatQuantity(height)));
				var shiftVectorAfter = A2(
					$ianmackenzie$elm_geometry$Vector2d$scaleBy,
					A2(
						$author$project$Spherical$metresPerPixel,
						newZoom,
						$ianmackenzie$elm_units$Angle$degrees(30)),
					A2($ianmackenzie$elm_geometry$Vector2d$from, context.mouseHere, screenCentre));
				var shiftVectorBefore = A2(
					$ianmackenzie$elm_geometry$Vector2d$scaleBy,
					A2(
						$author$project$Spherical$metresPerPixel,
						context.zoomLevel,
						$ianmackenzie$elm_units$Angle$degrees(30)),
					A2($ianmackenzie$elm_geometry$Vector2d$from, context.mouseHere, screenCentre));
				var shift = A2(
					$ianmackenzie$elm_geometry$Vector2d$mirrorAcross,
					$ianmackenzie$elm_geometry$Axis2d$x,
					A2(
						$ianmackenzie$elm_geometry$Vector2d$fromTuple,
						$ianmackenzie$elm_units$Length$meters,
						A2(
							$ianmackenzie$elm_geometry$Vector2d$toTuple,
							$ianmackenzie$elm_units$Pixels$inPixels,
							A2($ianmackenzie$elm_geometry$Vector2d$minus, shiftVectorBefore, shiftVectorAfter))));
				var newFocalPoint = A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2($ianmackenzie$elm_geometry$Vector3d$on, $ianmackenzie$elm_geometry$SketchPlane3d$xy, shift),
					context.focalPoint.space);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: $author$project$DomainModel$withoutTime(newFocalPoint),
							zoomLevel: newZoom
						}),
					_List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return context.waitingForClickDelay ? _Utils_Tuple2(
					_Utils_update(
						context,
						{
							clickFeature: A4($author$project$ViewGraph$detectHit, event, graph, area, context),
							clickPoint: $elm$core$Maybe$Just(event.offsetPos)
						}),
					_List_Nil) : _Utils_Tuple2(context, _List_Nil);
			case 'ImageZoomIn':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + 0.5)
						}),
					_List_Nil);
			case 'ImageZoomOut':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel - 0.5)
						}),
					_List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{zoomLevel: context.defaultZoomLevel}),
					_List_Nil);
			case 'PopupHide':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{clickFeature: $author$project$Tools$GraphOptions$ClickNone, clickPoint: $elm$core$Maybe$Nothing}),
					_List_Nil);
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ToggleEdgeMode':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							edgeMode: function () {
								var _v6 = context.edgeMode;
								if (_v6.$ === 'EdgeSketch') {
									return $author$project$ViewGraphContext$EdgeArc;
								} else {
									return $author$project$ViewGraphContext$EdgeSketch;
								}
							}()
						}),
					_List_Nil);
			case 'AddTraversal':
				var edge = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{clickFeature: $author$project$Tools$GraphOptions$ClickNone, clickPoint: $elm$core$Maybe$Nothing}),
					_List_fromArray(
						[
							$author$project$Actions$AddTraversal(edge)
						]));
			case 'AddSelfLoop':
				var node = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{clickFeature: $author$project$Tools$GraphOptions$ClickNone, clickPoint: $elm$core$Maybe$Nothing}),
					_List_fromArray(
						[
							$author$project$Actions$AddSelfLoop(node)
						]));
			case 'EditRoad':
				var edge = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{clickFeature: $author$project$Tools$GraphOptions$ClickNone, clickPoint: $elm$core$Maybe$Nothing, haveDisplayedEditingReminder: true}),
					_List_fromArray(
						[
							$author$project$Actions$ChangeActiveTrack(edge),
							$author$project$Actions$TrackHasChanged,
							A2(
							$author$project$Actions$StoreLocally,
							'editmessagedisplayed',
							$elm$json$Json$Encode$bool(true)),
							context.haveDisplayedEditingReminder ? $author$project$Actions$NoAction : A2($author$project$Actions$DisplayInfo, 'graph', 'edit')
						]));
			default:
				var edge = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{clickFeature: $author$project$Tools$GraphOptions$ClickNone, clickPoint: $elm$core$Maybe$Nothing}),
					_List_fromArray(
						[
							$author$project$Actions$DeleteEdge(edge)
						]));
		}
	});
var $author$project$Actions$MakeMapPointsDraggable = function (a) {
	return {$: 'MakeMapPointsDraggable', a: a};
};
var $author$project$Actions$SetMapStyle = function (a) {
	return {$: 'SetMapStyle', a: a};
};
var $author$project$ViewMap$update = F5(
	function (msg, msgWrapper, track, area, context) {
		switch (msg.$) {
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{followOrange: !context.followOrange}),
					_List_Nil);
			case 'ToggleMapStyleMenu':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{mapStyleMenuOpen: !context.mapStyleMenuOpen}),
					_List_Nil);
			case 'ChooseMapStyle':
				var style = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{mapStyle: style}),
					_List_fromArray(
						[
							$author$project$Actions$SetMapStyle(
							$author$project$ViewMap$mapUrl(style))
						]));
			default:
				var newOptions = _Utils_update(
					context,
					{draggable: !context.draggable});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$MakeMapPointsDraggable(newOptions.draggable),
							$author$project$Actions$TrackHasChanged
						]));
		}
	});
var $author$project$ViewPlan$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$ViewPlanContext$DragPan = {$: 'DragPan'};
var $author$project$DomainModel$sourceData = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).sourceData;
};
var $author$project$DomainModel$effectiveLatitude = function (treeNode) {
	return $author$project$DomainModel$sourceData(treeNode).a.latitude;
};
var $author$project$ViewPlan$deriveCamera = F3(
	function (treeNode, context, currentPosition) {
		var lookingAt = context.followSelectedPoint ? $author$project$DomainModel$startPoint(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode)) : context.focalPoint;
		var latitude = $author$project$DomainModel$effectiveLatitude(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode));
		var eyePoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 5000.0),
			lookingAt.space);
		var viewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
			{eyePoint: eyePoint, focalPoint: lookingAt.space, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveY});
		return $ianmackenzie$elm_3d_camera$Camera3d$orthographic(
			{
				viewpoint: viewpoint,
				viewportHeight: $ianmackenzie$elm_units$Length$meters(
					1200.0 * A2($author$project$Spherical$metresPerPixel, context.zoomLevel, latitude))
			});
	});
var $author$project$ViewPlan$detectHit = F4(
	function (event, track, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var camera = A3($author$project$ViewPlan$deriveCamera, track.trackTree, context, track.currentPosition);
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		return A4($author$project$DomainModel$nearestToRay, ray, track.trackTree, track.leafIndex, track.currentPosition);
	});
var $author$project$ViewPlan$update = F5(
	function (msg, msgWrapper, track, area, context) {
		switch (msg.$) {
			case 'ImageGrab':
				var event = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							dragAction: $author$project$ViewPlanContext$DragPan,
							orbiting: $elm$core$Maybe$Just(event.offsetPos),
							waitingForClickDelay: true
						}),
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewPlan$ClickDelayExpired))
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageDrag':
				var event = msg.a;
				var _v1 = event.offsetPos;
				var dx = _v1.a;
				var dy = _v1.b;
				var _v2 = _Utils_Tuple2(context.dragAction, context.orbiting);
				if ((_v2.a.$ === 'DragPan') && (_v2.b.$ === 'Just')) {
					var _v3 = _v2.a;
					var _v4 = _v2.b.a;
					var startX = _v4.a;
					var startY = _v4.b;
					var shiftVector = A2(
						$ianmackenzie$elm_geometry$Vector3d$scaleBy,
						A2(
							$author$project$Spherical$metresPerPixel,
							context.zoomLevel,
							$ianmackenzie$elm_units$Angle$degrees(30)),
						A3($ianmackenzie$elm_geometry$Vector3d$meters, startX - dx, dy - startY, 0.0));
					return _Utils_Tuple2(
						_Utils_update(
							context,
							{
								focalPoint: $author$project$DomainModel$withoutTime(
									A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint.space)),
								orbiting: $elm$core$Maybe$Just(
									_Utils_Tuple2(dx, dy))
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(context, _List_Nil);
				}
			case 'ImageRelease':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{dragAction: $author$project$ViewPlanContext$DragNone, orbiting: $elm$core$Maybe$Nothing}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + increment)
						}),
					_List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return context.waitingForClickDelay ? _Utils_Tuple2(
					context,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(
							A4($author$project$ViewPlan$detectHit, event, track, area, context)),
							$author$project$Actions$TrackHasChanged
						])) : _Utils_Tuple2(context, _List_Nil);
			case 'ImageDoubleClick':
				var event = msg.a;
				var nearestPoint = A4($author$project$ViewPlan$detectHit, event, track, area, context);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, nearestPoint, track.trackTree)
						}),
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(nearestPoint),
							$author$project$Actions$TrackHasChanged
						]));
			case 'ImageZoomIn':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + 0.5)
						}),
					_List_Nil);
			case 'ImageZoomOut':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel - 0.5)
						}),
					_List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{zoomLevel: context.defaultZoomLevel}),
					_List_Nil);
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree),
							followSelectedPoint: !context.followSelectedPoint
						}),
					_List_Nil);
			default:
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$ViewProfileChartContext$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$ViewProfileChartContext$DragPan = function (a) {
	return {$: 'DragPan', a: a};
};
var $author$project$Actions$RenderProfile = function (a) {
	return {$: 'RenderProfile', a: a};
};
var $author$project$ViewProfileChartsCanvas$update = F6(
	function (msg, msgWrapper, track, _v0, previews, context) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var halfOfView = $ianmackenzie$elm_units$Quantity$half(
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				A2($elm$core$Basics$pow, 0.5, context.zoomLevel),
				$author$project$DomainModel$trueLength(track.trackTree)));
		var _v1 = _Utils_Tuple2(
			halfOfView,
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				halfOfView,
				$author$project$DomainModel$trueLength(track.trackTree)));
		var leftmostCentreDistance = _v1.a;
		var rightmostCentreDistance = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2($ianmackenzie$elm_units$Quantity$minus, halfOfView, context.focalPoint),
			A2($ianmackenzie$elm_units$Quantity$plus, halfOfView, context.focalPoint));
		var startDistance = _v2.a;
		var endDistance = _v2.b;
		switch (msg.$) {
			case 'ImageZoomIn':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel + 0.5)
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							$author$project$Actions$RenderProfile(newContext)
						]));
			case 'ImageZoomOut':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel - 0.5)
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							$author$project$Actions$RenderProfile(newContext)
						]));
			case 'ImageReset':
				var newContext = _Utils_update(
					context,
					{zoomLevel: 0});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							$author$project$Actions$RenderProfile(newContext)
						]));
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return _Utils_Tuple2(context, _List_Nil);
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel - (deltaY * 0.001))
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							$author$project$Actions$RenderProfile(newContext)
						]));
			case 'ImageGrab':
				var event = msg.a;
				var newContext = _Utils_update(
					context,
					{
						dragAction: $author$project$ViewProfileChartContext$DragPan(event.offsetPos.a),
						waitingForClickDelay: true
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewProfileChartContext$ClickDelayExpired))
						]));
			case 'ImageDrag':
				var event = msg.a;
				var _v4 = event.offsetPos;
				var dx = _v4.a;
				var dy = _v4.b;
				var _v5 = context.dragAction;
				if (_v5.$ === 'DragPan') {
					var startX = _v5.a;
					var shiftVector = A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						A2($elm$core$Basics$pow, 0.5, context.zoomLevel + 2.5),
						$ianmackenzie$elm_units$Length$kilometers(startX - dx));
					var newContext = _Utils_update(
						context,
						{
							dragAction: $author$project$ViewProfileChartContext$DragPan(dx),
							focalPoint: A3(
								$ianmackenzie$elm_units$Quantity$clamp,
								leftmostCentreDistance,
								rightmostCentreDistance,
								A2($ianmackenzie$elm_units$Quantity$plus, shiftVector, context.focalPoint))
						});
					return _Utils_Tuple2(
						newContext,
						_List_fromArray(
							[
								$author$project$Actions$RenderProfile(newContext)
							]));
				} else {
					return _Utils_Tuple2(context, _List_Nil);
				}
			case 'ImageRelease':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{dragAction: $author$project$ViewProfileChartContext$DragNone}),
					_List_Nil);
			case 'ToggleFollowOrange':
				var currentDistance = A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree);
				var contextWithNewSetting = _Utils_update(
					context,
					{followSelectedPoint: !context.followSelectedPoint});
				var contextWithNewFocus = _Utils_update(
					contextWithNewSetting,
					{
						focalPoint: contextWithNewSetting.followSelectedPoint ? A3($ianmackenzie$elm_units$Quantity$clamp, leftmostCentreDistance, rightmostCentreDistance, currentDistance) : contextWithNewSetting.focalPoint
					});
				return _Utils_Tuple2(contextWithNewFocus, _List_Nil);
			case 'ImageDoubleClick':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ToggleColours':
				var newContext = _Utils_update(
					context,
					{colouredChart: !context.colouredChart});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							$author$project$Actions$RenderProfile(newContext)
						]));
			case 'SetEmphasis':
				return _Utils_Tuple2(context, _List_Nil);
			default:
				var event = msg.a;
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$ViewProfileChartsWebGL$deriveAltitudeCamera = F4(
	function (treeNode, context, currentPosition, _v0) {
		var width = _v0.a;
		var height = _v0.b;
		var trackLengthInView = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			A2($elm$core$Basics$pow, 0.5, context.zoomLevel),
			$author$project$DomainModel$trueLength(treeNode));
		var metresPerPixel = $ianmackenzie$elm_units$Length$inMeters(trackLengthInView) / $ianmackenzie$elm_units$Pixels$inPixels(width);
		var viewportHeight = $ianmackenzie$elm_units$Length$meters(
			metresPerPixel * $ianmackenzie$elm_units$Pixels$inPixels(height));
		var lookingAt = $author$project$DomainModel$withoutTime(
			A3(
				$ianmackenzie$elm_geometry$Point3d$xyz,
				A2($author$project$DomainModel$distanceFromIndex, currentPosition, treeNode),
				$ianmackenzie$elm_units$Quantity$zero,
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					context.emphasis,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(
						A2($author$project$DomainModel$earthPointFromIndex, currentPosition, treeNode).space))));
		var eyePoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, -50000.0, 0.0),
			lookingAt.space);
		var viewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
			{eyePoint: eyePoint, focalPoint: lookingAt.space, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ});
		return $ianmackenzie$elm_3d_camera$Camera3d$orthographic(
			{viewpoint: viewpoint, viewportHeight: viewportHeight});
	});
var $author$project$ViewProfileChartsWebGL$detectHit = F4(
	function (event, track, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var camera = A4(
			$author$project$ViewProfileChartsWebGL$deriveAltitudeCamera,
			track.trackTree,
			context,
			track.currentPosition,
			_Utils_Tuple2(w, h));
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		var modelPoint = A2($ianmackenzie$elm_geometry$Axis3d$intersectionWithPlane, $ianmackenzie$elm_geometry$Plane3d$zx, ray);
		if (modelPoint.$ === 'Just') {
			var found = modelPoint.a;
			return A2(
				$author$project$DomainModel$indexFromDistance,
				$ianmackenzie$elm_geometry$Point3d$xCoordinate(found),
				track.trackTree);
		} else {
			return track.currentPosition;
		}
	});
var $author$project$ViewProfileChartsWebGL$initialiseView = F3(
	function (current, treeNode, currentProfileContext) {
		var currentPoint = A2($author$project$DomainModel$earthPointFromIndex, current, treeNode);
		var currentDistance = A2($author$project$DomainModel$distanceFromIndex, current, treeNode);
		if (currentProfileContext.$ === 'Just') {
			var context = currentProfileContext.a;
			return _Utils_update(
				context,
				{
					defaultZoomLevel: 0.0,
					dragAction: $author$project$ViewProfileChartContext$DragNone,
					focalPoint3d: A3(
						$ianmackenzie$elm_geometry$Point3d$xyz,
						currentDistance,
						$ianmackenzie$elm_units$Quantity$zero,
						A2(
							$ianmackenzie$elm_units$Quantity$multiplyBy,
							context.emphasis,
							$ianmackenzie$elm_geometry$Point3d$zCoordinate(currentPoint.space))),
					followSelectedPoint: true,
					metresPerPixel: 10.0,
					orbiting: $elm$core$Maybe$Nothing,
					waitingForClickDelay: false,
					zoomLevel: 0.0
				});
		} else {
			return {
				colouredChart: false,
				contextSuffix: '',
				defaultZoomLevel: 0.0,
				dragAction: $author$project$ViewProfileChartContext$DragNone,
				emphasis: 1.0,
				focalPoint: $ianmackenzie$elm_units$Quantity$zero,
				focalPoint3d: A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					currentDistance,
					$ianmackenzie$elm_units$Quantity$zero,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(currentPoint.space)),
				followSelectedPoint: true,
				metresPerPixel: 10.0,
				mouseEvent: $elm$core$Maybe$Nothing,
				orbiting: $elm$core$Maybe$Nothing,
				waitingForClickDelay: false,
				zoomLevel: 0.0
			};
		}
	});
var $author$project$ViewProfileChartsWebGL$update = F6(
	function (msg, msgWrapper, track, _v0, previews, context) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		switch (msg.$) {
			case 'SetEmphasis':
				var emphasis = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{emphasis: emphasis}),
					_List_Nil);
			case 'ImageZoomIn':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel + 0.5)
						}),
					_List_Nil);
			case 'ImageZoomOut':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							zoomLevel: A3($elm$core$Basics$clamp, 0, 10, context.zoomLevel - 0.5)
						}),
					_List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					A3(
						$author$project$ViewProfileChartsWebGL$initialiseView,
						track.currentPosition,
						track.trackTree,
						$elm$core$Maybe$Just(context)),
					_List_Nil);
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return _Utils_Tuple2(
					context,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(
							A4(
								$author$project$ViewProfileChartsWebGL$detectHit,
								event,
								track,
								_Utils_Tuple2(givenWidth, givenHeight),
								context)),
							$author$project$Actions$TrackHasChanged
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var maxZoom = A2(
					$elm$core$Basics$logBase,
					2,
					$author$project$DomainModel$skipCount(track.trackTree)) - 2;
				var increment = (-0.001) * deltaY;
				var zoomLevel = A3($elm$core$Basics$clamp, 0, maxZoom, context.zoomLevel + increment);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{zoomLevel: zoomLevel}),
					_List_Nil);
			case 'ImageGrab':
				var event = msg.a;
				var newProfileContext = _Utils_update(
					context,
					{
						orbiting: $elm$core$Maybe$Just(event.offsetPos),
						waitingForClickDelay: true
					});
				return _Utils_Tuple2(
					newProfileContext,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$ViewProfileChartContext$ClickDelayExpired))
						]));
			case 'ImageDrag':
				var event = msg.a;
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageRelease':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{orbiting: $elm$core$Maybe$Nothing, waitingForClickDelay: false}),
					_List_Nil);
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageDoubleClick':
				return _Utils_Tuple2(context, _List_Nil);
			case 'MouseMove':
				var event = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							mouseEvent: $elm$core$Maybe$Just(event)
						}),
					_List_Nil);
			default:
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$View3dCommonElements$ClickDelayExpired = {$: 'ClickDelayExpired'};
var $author$project$View3dCommonElements$DragPan = {$: 'DragPan'};
var $author$project$View3dCommonElements$DragRotate = {$: 'DragRotate'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton = {$: 'SecondButton'};
var $ianmackenzie$elm_geometry$SketchPlane3d$normalDirection = function (sketchPlane) {
	return A2(
		$ianmackenzie$elm_geometry$Unsafe$Direction3d$unsafeCrossProduct,
		$ianmackenzie$elm_geometry$SketchPlane3d$xDirection(sketchPlane),
		$ianmackenzie$elm_geometry$SketchPlane3d$yDirection(sketchPlane));
};
var $ianmackenzie$elm_geometry$Direction3d$rotateAround = F3(
	function (_v0, _v1, _v2) {
		var axis = _v0.a;
		var angle = _v1.a;
		var d = _v2.a;
		var halfAngle = 0.5 * angle;
		var qw = $elm$core$Basics$cos(halfAngle);
		var sinHalfAngle = $elm$core$Basics$sin(halfAngle);
		var _v3 = axis.direction;
		var a = _v3.a;
		var qx = a.x * sinHalfAngle;
		var qwx = qw * qx;
		var qxx = qx * qx;
		var qy = a.y * sinHalfAngle;
		var qwy = qw * qy;
		var qxy = qx * qy;
		var qyy = qy * qy;
		var a22 = 1 - (2 * (qxx + qyy));
		var qz = a.z * sinHalfAngle;
		var qwz = qw * qz;
		var a01 = 2 * (qxy - qwz);
		var a10 = 2 * (qxy + qwz);
		var qxz = qx * qz;
		var a02 = 2 * (qxz + qwy);
		var a20 = 2 * (qxz - qwy);
		var qyz = qy * qz;
		var a12 = 2 * (qyz - qwx);
		var a21 = 2 * (qyz + qwx);
		var qzz = qz * qz;
		var a00 = 1 - (2 * (qyy + qzz));
		var a11 = 1 - (2 * (qxx + qzz));
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((a00 * d.x) + (a01 * d.y)) + (a02 * d.z), y: ((a10 * d.x) + (a11 * d.y)) + (a12 * d.z), z: ((a20 * d.x) + (a21 * d.y)) + (a22 * d.z)});
	});
var $ianmackenzie$elm_geometry$Frame3d$rotateAround = F3(
	function (axis, angle, frame) {
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{
				originPoint: A3(
					$ianmackenzie$elm_geometry$Point3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$xDirection(frame)),
				yDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$yDirection(frame)),
				zDirection: A3(
					$ianmackenzie$elm_geometry$Direction3d$rotateAround,
					axis,
					angle,
					$ianmackenzie$elm_geometry$Frame3d$zDirection(frame))
			});
	});
var $ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn = F3(
	function (axis, angle, frame) {
		return A3(
			$ianmackenzie$elm_geometry$Frame3d$rotateAround,
			axis(frame),
			angle,
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$translateBy = F2(
	function (vector, frame) {
		return $ianmackenzie$elm_geometry$Frame3d$unsafe(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					vector,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: $ianmackenzie$elm_geometry$Frame3d$xDirection(frame),
				yDirection: $ianmackenzie$elm_geometry$Frame3d$yDirection(frame),
				zDirection: $ianmackenzie$elm_geometry$Frame3d$zDirection(frame)
			});
	});
var $ianmackenzie$elm_geometry$Frame3d$translateIn = F3(
	function (direction, distance, frame) {
		return A2(
			$ianmackenzie$elm_geometry$Frame3d$translateBy,
			A2($ianmackenzie$elm_geometry$Vector3d$withLength, distance, direction),
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$translateAlongOwn = F3(
	function (axis, distance, frame) {
		return A3(
			$ianmackenzie$elm_geometry$Frame3d$translateIn,
			$ianmackenzie$elm_geometry$Axis3d$direction(
				axis(frame)),
			distance,
			frame);
	});
var $ianmackenzie$elm_geometry$Frame3d$xAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.xDirection);
};
var $ianmackenzie$elm_geometry$Frame3d$yAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.yDirection);
};
var $ianmackenzie$elm_geometry$Frame3d$zAxis = function (_v0) {
	var frame = _v0.a;
	return A2($ianmackenzie$elm_geometry$Axis3d$through, frame.originPoint, frame.zDirection);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$orbit = function (_arguments) {
	var initialFrame = $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: _arguments.focalPoint,
			xDirection: $ianmackenzie$elm_geometry$SketchPlane3d$yDirection(_arguments.groundPlane),
			yDirection: $ianmackenzie$elm_geometry$SketchPlane3d$normalDirection(_arguments.groundPlane),
			zDirection: $ianmackenzie$elm_geometry$SketchPlane3d$xDirection(_arguments.groundPlane)
		});
	var finalFrame = A3(
		$ianmackenzie$elm_geometry$Frame3d$translateAlongOwn,
		$ianmackenzie$elm_geometry$Frame3d$zAxis,
		_arguments.distance,
		A3(
			$ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn,
			$ianmackenzie$elm_geometry$Frame3d$xAxis,
			$ianmackenzie$elm_units$Quantity$negate(_arguments.elevation),
			A3($ianmackenzie$elm_geometry$Frame3d$rotateAroundOwn, $ianmackenzie$elm_geometry$Frame3d$yAxis, _arguments.azimuth, initialFrame)));
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Viewpoint3d(finalFrame);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$orbitZ = function (_v0) {
	var distance = _v0.distance;
	var elevation = _v0.elevation;
	var azimuth = _v0.azimuth;
	var focalPoint = _v0.focalPoint;
	return $ianmackenzie$elm_3d_camera$Viewpoint3d$orbit(
		{azimuth: azimuth, distance: distance, elevation: elevation, focalPoint: focalPoint, groundPlane: $ianmackenzie$elm_geometry$SketchPlane3d$xy});
};
var $ianmackenzie$elm_3d_camera$Camera3d$Types$Perspective = function (a) {
	return {$: 'Perspective', a: a};
};
var $ianmackenzie$elm_3d_camera$Camera3d$perspective = function (_arguments) {
	var halfFieldOfView = $ianmackenzie$elm_units$Quantity$half(
		$ianmackenzie$elm_units$Quantity$abs(_arguments.verticalFieldOfView));
	var frustumSlope = $ianmackenzie$elm_units$Angle$tan(halfFieldOfView);
	return $ianmackenzie$elm_3d_camera$Camera3d$Types$Camera3d(
		{
			projection: $ianmackenzie$elm_3d_camera$Camera3d$Types$Perspective(frustumSlope),
			viewpoint: _arguments.viewpoint
		});
};
var $author$project$ViewThirdPerson$deriveCamera = F3(
	function (treeNode, context, currentPosition) {
		var lookingAt = context.followSelectedPoint ? $author$project$DomainModel$startPoint(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode)) : context.focalPoint;
		var latitude = $author$project$DomainModel$effectiveLatitude(
			A2($author$project$DomainModel$leafFromIndex, currentPosition, treeNode));
		var cameraViewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$orbitZ(
			{
				azimuth: $ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth),
				distance: $ianmackenzie$elm_units$Length$meters(
					100.0 * A2($author$project$Spherical$metresPerPixel, context.zoomLevel, latitude)),
				elevation: context.cameraElevation,
				focalPoint: lookingAt.space
			});
		return $ianmackenzie$elm_3d_camera$Camera3d$perspective(
			{verticalFieldOfView: context.fieldOfView, viewpoint: cameraViewpoint});
	});
var $author$project$ViewThirdPerson$detectHit = F4(
	function (event, track, _v0, context) {
		var w = _v0.a;
		var h = _v0.b;
		var camera = A3($author$project$ViewThirdPerson$deriveCamera, track.trackTree, context, track.currentPosition);
		var _v1 = event.offsetPos;
		var x = _v1.a;
		var y = _v1.b;
		var screenPoint = A2($ianmackenzie$elm_geometry$Point2d$pixels, x, y);
		var _v2 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(w),
			$ianmackenzie$elm_units$Quantity$toFloatQuantity(h));
		var wFloat = _v2.a;
		var hFloat = _v2.b;
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			A2($ianmackenzie$elm_geometry$Point2d$xy, $ianmackenzie$elm_units$Quantity$zero, hFloat),
			A2($ianmackenzie$elm_geometry$Point2d$xy, wFloat, $ianmackenzie$elm_units$Quantity$zero));
		var ray = A3($ianmackenzie$elm_3d_camera$Camera3d$ray, camera, screenRectangle, screenPoint);
		return A4($author$project$DomainModel$nearestToRay, ray, track.trackTree, track.leafIndex, track.currentPosition);
	});
var $author$project$ViewThirdPerson$update = F5(
	function (msg, msgWrapper, track, area, context) {
		switch (msg.$) {
			case 'ImageZoomIn':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + 0.5)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageZoomOut':
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel - 0.5)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageReset':
				return _Utils_Tuple2(
					A3(
						$author$project$ViewThirdPerson$initialiseView,
						track.currentPosition,
						track.trackTree,
						$elm$core$Maybe$Just(context)),
					_List_Nil);
			case 'ImageNoOp':
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageClick':
				var event = msg.a;
				return context.waitingForClickDelay ? _Utils_Tuple2(
					context,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(
							A4($author$project$ViewThirdPerson$detectHit, event, track, area, context)),
							$author$project$Actions$TrackHasChanged
						])) : _Utils_Tuple2(context, _List_Nil);
			case 'ImageDoubleClick':
				var event = msg.a;
				var nearestPoint = A4($author$project$ViewThirdPerson$detectHit, event, track, area, context);
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, nearestPoint, track.trackTree)
						}),
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(nearestPoint),
							$author$project$Actions$TrackHasChanged
						]));
			case 'ClickDelayExpired':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{waitingForClickDelay: false}),
					_List_Nil);
			case 'ImageMouseWheel':
				var deltaY = msg.a;
				var increment = (-0.001) * deltaY;
				var newContext = _Utils_update(
					context,
					{
						zoomLevel: A3($elm$core$Basics$clamp, 0.0, 22.0, context.zoomLevel + increment)
					});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ImageGrab':
				var event = msg.a;
				var alternate = event.keys.ctrl || _Utils_eq(event.button, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton);
				var newContext = _Utils_update(
					context,
					{
						dragAction: alternate ? $author$project$View3dCommonElements$DragRotate : $author$project$View3dCommonElements$DragPan,
						orbiting: $elm$core$Maybe$Just(event.offsetPos),
						waitingForClickDelay: true
					});
				return _Utils_Tuple2(
					newContext,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$DelayMessage,
							250,
							msgWrapper($author$project$View3dCommonElements$ClickDelayExpired))
						]));
			case 'ImageDrag':
				var event = msg.a;
				var _v1 = event.offsetPos;
				var dx = _v1.a;
				var dy = _v1.b;
				var _v2 = _Utils_Tuple2(context.dragAction, context.orbiting);
				_v2$2:
				while (true) {
					if (_v2.b.$ === 'Just') {
						switch (_v2.a.$) {
							case 'DragRotate':
								var _v3 = _v2.a;
								var _v4 = _v2.b.a;
								var startX = _v4.a;
								var startY = _v4.b;
								var newElevation = $ianmackenzie$elm_units$Angle$degrees(
									$ianmackenzie$elm_units$Angle$inDegrees(context.cameraElevation) + (dy - startY));
								var newAzimuth = $ianmackenzie$elm_units$Angle$degrees(
									$ianmackenzie$elm_units$Angle$inDegrees(
										$ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth)) - (dx - startX));
								var newContext = _Utils_update(
									context,
									{
										cameraAzimuth: $ianmackenzie$elm_geometry$Direction2d$fromAngle(newAzimuth),
										cameraElevation: newElevation,
										orbiting: $elm$core$Maybe$Just(
											_Utils_Tuple2(dx, dy))
									});
								return _Utils_Tuple2(newContext, _List_Nil);
							case 'DragPan':
								var _v5 = _v2.a;
								var _v6 = _v2.b.a;
								var startX = _v6.a;
								var startY = _v6.b;
								var shiftVector = A2(
									$ianmackenzie$elm_geometry$Vector3d$scaleBy,
									0.1 * A2(
										$author$project$Spherical$metresPerPixel,
										context.zoomLevel,
										$ianmackenzie$elm_units$Angle$degrees(30)),
									A3(
										$ianmackenzie$elm_geometry$Vector3d$rotateAround,
										$ianmackenzie$elm_geometry$Axis3d$z,
										$ianmackenzie$elm_geometry$Direction2d$toAngle(context.cameraAzimuth),
										A3(
											$ianmackenzie$elm_geometry$Vector3d$meters,
											(startY - dy) * $ianmackenzie$elm_units$Angle$sin(context.cameraElevation),
											startX - dx,
											(dy - startY) * $ianmackenzie$elm_units$Angle$cos(context.cameraElevation))));
								var newContext = _Utils_update(
									context,
									{
										focalPoint: $author$project$DomainModel$withoutTime(
											A2($ianmackenzie$elm_geometry$Point3d$translateBy, shiftVector, context.focalPoint.space)),
										orbiting: $elm$core$Maybe$Just(
											_Utils_Tuple2(dx, dy))
									});
								return _Utils_Tuple2(newContext, _List_Nil);
							default:
								break _v2$2;
						}
					} else {
						break _v2$2;
					}
				}
				return _Utils_Tuple2(context, _List_Nil);
			case 'ImageRelease':
				var newContext = _Utils_update(
					context,
					{dragAction: $author$project$View3dCommonElements$DragNone, orbiting: $elm$core$Maybe$Nothing});
				return _Utils_Tuple2(newContext, _List_Nil);
			case 'ToggleFollowOrange':
				return _Utils_Tuple2(
					_Utils_update(
						context,
						{
							focalPoint: A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree),
							followSelectedPoint: !context.followSelectedPoint
						}),
					_List_Nil);
			case 'SetEmphasis':
				return _Utils_Tuple2(context, _List_Nil);
			default:
				return _Utils_Tuple2(context, _List_Nil);
		}
	});
var $author$project$PaneLayoutManager$update = F7(
	function (paneMsg, msgWrapper, mTrack, graph, contentArea, options, previews) {
		var currentPane = function (id) {
			switch (id.$) {
				case 'Pane1':
					return options.pane1;
				case 'Pane2':
					return options.pane2;
				case 'Pane3':
					return options.pane3;
				default:
					return options.pane4;
			}
		};
		var updatePaneWith = F2(
			function (id, updateFn) {
				var _v22 = updateFn(
					currentPane(id));
				var updatedPane = _v22.a;
				var actions = _v22.b;
				var updatedOptions = function () {
					switch (id.$) {
						case 'Pane1':
							return _Utils_update(
								options,
								{pane1: updatedPane});
						case 'Pane2':
							return _Utils_update(
								options,
								{pane2: updatedPane});
						case 'Pane3':
							return _Utils_update(
								options,
								{pane3: updatedPane});
						default:
							return _Utils_update(
								options,
								{pane4: updatedPane});
					}
				}();
				return _Utils_Tuple2(updatedOptions, actions);
			});
		switch (paneMsg.$) {
			case 'PaneNoOp':
				return _Utils_Tuple2(options, _List_Nil);
			case 'SetPaneLayout':
				var paneLayout = paneMsg.a;
				var newOptions = _Utils_update(
					options,
					{paneLayout: paneLayout});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$MapRefresh,
							A2(
							$author$project$Actions$StoreLocally,
							'panes',
							$author$project$PaneLayoutManager$encodePaneState(newOptions))
						]));
			case 'TogglePopup':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{popupVisible: !options.popupVisible}),
					_List_Nil);
			case 'SetViewMode':
				var paneId = paneMsg.a;
				var viewMode = paneMsg.b;
				var _v1 = A2(
					updatePaneWith,
					paneId,
					function (pane) {
						return _Utils_Tuple2(
							_Utils_update(
								pane,
								{activeView: viewMode}),
							_List_Nil);
					});
				var newOptions = _v1.a;
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$MapRefresh,
							A2(
							$author$project$Actions$StoreLocally,
							'panes',
							$author$project$PaneLayoutManager$encodePaneState(newOptions))
						]));
			case 'ThirdPersonViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneUpdateFunction = function (paneInfo) {
					var effectiveContext = function () {
						var _v6 = paneInfo.activeView;
						switch (_v6.$) {
							case 'ViewFirst':
								return paneInfo.firstPersonContext;
							case 'ViewThird':
								return paneInfo.thirdPersonContext;
							default:
								return $elm$core$Maybe$Nothing;
						}
					}();
					var _v2 = function () {
						var _v3 = _Utils_Tuple2(mTrack, effectiveContext);
						if ((_v3.a.$ === 'Just') && (_v3.b.$ === 'Just')) {
							var track = _v3.a.a;
							var context = _v3.b.a;
							var _v4 = A5(
								$author$project$ViewThirdPerson$update,
								imageMsg,
								A2(
									$elm$core$Basics$composeL,
									msgWrapper,
									$author$project$PaneLayoutManager$ThirdPersonViewMessage($author$project$PaneContext$Pane1)),
								track,
								A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
								context);
							var _new = _v4.a;
							var act = _v4.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(_new),
								act);
						} else {
							return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
						}
					}();
					var newContext = _v2.a;
					var actions = _v2.b;
					var newPane = function () {
						var _v5 = paneInfo.activeView;
						switch (_v5.$) {
							case 'ViewFirst':
								return _Utils_update(
									paneInfo,
									{firstPersonContext: newContext});
							case 'ViewThird':
								return _Utils_update(
									paneInfo,
									{thirdPersonContext: newContext});
							default:
								return paneInfo;
						}
					}();
					return _Utils_Tuple2(newPane, actions);
				};
				return A2(updatePaneWith, paneId, paneUpdateFunction);
			case 'PlanViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneUpdateFunction = function (paneInfo) {
					var _v7 = function () {
						var _v8 = _Utils_Tuple2(mTrack, paneInfo.planContext);
						if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
							var track = _v8.a.a;
							var planContext = _v8.b.a;
							var _v9 = A5(
								$author$project$ViewPlan$update,
								imageMsg,
								A2(
									$elm$core$Basics$composeL,
									msgWrapper,
									$author$project$PaneLayoutManager$PlanViewMessage($author$project$PaneContext$Pane1)),
								track,
								A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
								planContext);
							var _new = _v9.a;
							var act = _v9.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(_new),
								act);
						} else {
							return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
						}
					}();
					var newContext = _v7.a;
					var actions = _v7.b;
					var newPane = _Utils_update(
						paneInfo,
						{planContext: newContext});
					return _Utils_Tuple2(newPane, actions);
				};
				return A2(updatePaneWith, paneId, paneUpdateFunction);
			case 'GraphViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneUpdateFunction = function (paneInfo) {
					var _v10 = function () {
						var _v11 = paneInfo.graphContext;
						if (_v11.$ === 'Just') {
							var graphContext = _v11.a;
							var _v12 = A5(
								$author$project$ViewGraph$update,
								imageMsg,
								A2(
									$elm$core$Basics$composeL,
									msgWrapper,
									$author$project$PaneLayoutManager$GraphViewMessage($author$project$PaneContext$Pane1)),
								graph,
								A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
								graphContext);
							var _new = _v12.a;
							var act = _v12.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(_new),
								act);
						} else {
							return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
						}
					}();
					var newContext = _v10.a;
					var actions = _v10.b;
					var newPane = _Utils_update(
						paneInfo,
						{graphContext: newContext});
					return _Utils_Tuple2(newPane, actions);
				};
				return A2(updatePaneWith, paneId, paneUpdateFunction);
			case 'ProfileViewMessage':
				var paneId = paneMsg.a;
				var imageMsg = paneMsg.b;
				var paneUpdateFunction = function (paneInfo) {
					var _v13 = function () {
						var _v14 = _Utils_Tuple2(mTrack, paneInfo.profileContext);
						if ((_v14.a.$ === 'Just') && (_v14.b.$ === 'Just')) {
							var track = _v14.a.a;
							var profile = _v14.b.a;
							var _v15 = _Utils_eq(
								currentPane(paneId).activeView,
								$author$project$ViewMode$ViewProfileCanvas) ? A6(
								$author$project$ViewProfileChartsCanvas$update,
								imageMsg,
								A2(
									$elm$core$Basics$composeL,
									msgWrapper,
									$author$project$PaneLayoutManager$ProfileViewMessage($author$project$PaneContext$Pane1)),
								track,
								A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
								previews,
								profile) : A6(
								$author$project$ViewProfileChartsWebGL$update,
								imageMsg,
								A2(
									$elm$core$Basics$composeL,
									msgWrapper,
									$author$project$PaneLayoutManager$ProfileViewMessage($author$project$PaneContext$Pane1)),
								track,
								A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
								previews,
								profile);
							var _new = _v15.a;
							var act = _v15.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(_new),
								act);
						} else {
							return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
						}
					}();
					var newContext = _v13.a;
					var actions = _v13.b;
					var newPane = _Utils_update(
						paneInfo,
						{profileContext: newContext});
					return _Utils_Tuple2(newPane, actions);
				};
				return A2(updatePaneWith, paneId, paneUpdateFunction);
			case 'MapViewMessage':
				var mapViewMsg = paneMsg.a;
				var paneInfo = options.pane1;
				var _v16 = function () {
					var _v17 = _Utils_Tuple2(mTrack, paneInfo.mapContext);
					if ((_v17.a.$ === 'Just') && (_v17.b.$ === 'Just')) {
						var track = _v17.a.a;
						var mapContext = _v17.b.a;
						var _v18 = A5(
							$author$project$ViewMap$update,
							mapViewMsg,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$MapViewMessage),
							track,
							A2($author$project$PaneLayoutManager$dimensionsWithLayout, options.paneLayout, contentArea),
							mapContext);
						var _new = _v18.a;
						var act = _v18.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(_new),
							act);
					} else {
						return _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
					}
				}();
				var newContext = _v16.a;
				var actions = _v16.b;
				var newPane = _Utils_update(
					paneInfo,
					{mapContext: newContext});
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pane1: newPane}),
					actions);
			case 'MapPortsMessage':
				var mapMsg = paneMsg.a;
				if (mTrack.$ === 'Just') {
					var track = mTrack.a;
					var _v20 = A3($author$project$MapPortController$update, mapMsg, track, options.mapState);
					var newState = _v20.a;
					var actions = _v20.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{mapState: newState}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			default:
				var pos = paneMsg.a;
				var newOptions = _Utils_update(
					options,
					{sliderState: $author$project$PaneContext$SliderMoved});
				var mapFollowsOrange = function () {
					var _v21 = options.pane1.mapContext;
					if (_v21.$ === 'Just') {
						var mapContext = _v21.a;
						return mapContext.followOrange;
					} else {
						return false;
					}
				}();
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(pos),
							$author$project$Actions$PointerChange,
							mapFollowsOrange ? $author$project$Actions$MapCenterOnCurrent : $author$project$Actions$NoAction
						]));
		}
	});
var $author$project$SplitPane$SplitPane$UpdateConfig = function (a) {
	return {$: 'UpdateConfig', a: a};
};
var $author$project$SplitPane$SplitPane$createUpdateConfig = function (config) {
	return $author$project$SplitPane$SplitPane$UpdateConfig(config);
};
var $author$project$SplitPane$Bound$updateValue = F2(
	function (f, _v0) {
		var value = _v0.a;
		var bound = _v0.b;
		return _Utils_Tuple2(
			A2(
				$author$project$SplitPane$Bound$boundTo,
				bound,
				f(value)),
			bound);
	});
var $author$project$SplitPane$SplitPane$resize = F5(
	function (ori, splitterPosition, step, paneWidth, paneHeight) {
		if (splitterPosition.$ === 'Px') {
			var p = splitterPosition.a;
			return $author$project$SplitPane$SplitPane$Px(
				A2(
					$author$project$SplitPane$Bound$updateValue,
					function (v) {
						return v + step.x;
					},
					p));
		} else {
			var p = splitterPosition.a;
			return $author$project$SplitPane$SplitPane$Percentage(
				A2(
					$author$project$SplitPane$Bound$updateValue,
					function (v) {
						return v + (step.x / paneWidth);
					},
					p));
		}
	});
var $author$project$SplitPane$SplitPane$customUpdate = F3(
	function (_v0, msg, _v1) {
		var updateConfig = _v0.a;
		var state = _v1.a;
		var _v2 = _Utils_Tuple2(state.dragState, msg);
		_v2$3:
		while (true) {
			if (_v2.a.a.$ === 'Nothing') {
				if (_v2.b.$ === 'SplitterClick') {
					var _v3 = _v2.a.a;
					var pos = _v2.b.a;
					return _Utils_Tuple2(
						$author$project$SplitPane$SplitPane$State(
							_Utils_update(
								state,
								{
									dragState: $author$project$SplitPane$SplitPane$Draggable(
										$elm$core$Maybe$Just(
											{
												anchor: {
													x: A2($elm$core$Maybe$withDefault, 0, pos.x),
													y: A2($elm$core$Maybe$withDefault, 0, pos.y)
												},
												paneInfo: {height: pos.parentHeight, width: pos.parentWidth}
											}))
								})),
						updateConfig.onResizeStarted);
				} else {
					break _v2$3;
				}
			} else {
				switch (_v2.b.$) {
					case 'SplitterLeftAlone':
						return _Utils_Tuple2(
							$author$project$SplitPane$SplitPane$State(
								_Utils_update(
									state,
									{
										dragState: $author$project$SplitPane$SplitPane$Draggable($elm$core$Maybe$Nothing)
									})),
							updateConfig.onResizeEnded);
					case 'SplitterMove':
						var paneInfo = _v2.a.a.a.paneInfo;
						var anchor = _v2.a.a.a.anchor;
						var newRequestedPosition = _v2.b.a;
						var step = {x: newRequestedPosition.x - anchor.x, y: newRequestedPosition.y - anchor.y};
						var newSplitterPosition = A5($author$project$SplitPane$SplitPane$resize, state.orientation, state.splitterPosition, step, paneInfo.width, paneInfo.height);
						return _Utils_Tuple2(
							$author$project$SplitPane$SplitPane$State(
								_Utils_update(
									state,
									{
										dragState: $author$project$SplitPane$SplitPane$Draggable(
											$elm$core$Maybe$Just(
												{
													anchor: {x: newRequestedPosition.x, y: newRequestedPosition.y},
													paneInfo: {height: paneInfo.height, width: paneInfo.width}
												})),
										splitterPosition: newSplitterPosition
									})),
							updateConfig.onResize(newSplitterPosition));
					default:
						break _v2$3;
				}
			}
		}
		return _Utils_Tuple2(
			$author$project$SplitPane$SplitPane$State(state),
			$elm$core$Maybe$Nothing);
	});
var $author$project$SplitPane$SplitPane$update = F2(
	function (msg, model) {
		var _v0 = A3(
			$author$project$SplitPane$SplitPane$customUpdate,
			$author$project$SplitPane$SplitPane$createUpdateConfig(
				{
					onResize: function (_v1) {
						return $elm$core$Maybe$Nothing;
					},
					onResizeEnded: $elm$core$Maybe$Nothing,
					onResizeStarted: $elm$core$Maybe$Nothing
				}),
			msg,
			model);
		var updatedModel = _v0.a;
		return updatedModel;
	});
var $author$project$SvgPathExtractor$FileLoaded = function (a) {
	return {$: 'FileLoaded', a: a};
};
var $author$project$SvgPathExtractor$FileSelected = function (a) {
	return {$: 'FileSelected', a: a};
};
var $author$project$Actions$LoadSvgFile = F2(
	function (a, b) {
		return {$: 'LoadSvgFile', a: a, b: b};
	});
var $author$project$Actions$SelectSvgFile = function (a) {
	return {$: 'SelectSvgFile', a: a};
};
var $author$project$Actions$TrackFromSvg = function (a) {
	return {$: 'TrackFromSvg', a: a};
};
var $author$project$SvgPathExtractor$update = F3(
	function (msg, options, wrap) {
		switch (msg.$) {
			case 'ReadFile':
				var ipInfo = msg.a;
				var newOptions = _Utils_update(
					options,
					{ipInfo: ipInfo});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SelectSvgFile(
							A2($elm$core$Basics$composeL, wrap, $author$project$SvgPathExtractor$FileSelected))
						]));
			case 'FileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$LoadSvgFile,
							A2($elm$core$Basics$composeL, wrap, $author$project$SvgPathExtractor$FileLoaded),
							file)
						]));
			default:
				var content = msg.a;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$TrackFromSvg(content),
							$author$project$Actions$TrackHasChanged
						]));
		}
	});
var $author$project$Tools$I18N$FileChosen = function (a) {
	return {$: 'FileChosen', a: a};
};
var $author$project$Tools$I18N$FileLoaded = function (a) {
	return {$: 'FileLoaded', a: a};
};
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var $author$project$Tools$I18N$locationToJson = function (location) {
	return A3(
		$elm$json$Json$Encode$dict,
		$elm$core$Basics$identity,
		A2($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string),
		location.textDictionary);
};
var $author$project$Tools$I18N$update = F3(
	function (msg, wrapper, _v0) {
		var location = _v0.a;
		var options = _v0.b;
		switch (msg.$) {
			case 'ChooseOuter':
				var key = msg.a;
				return _Utils_Tuple3(
					location,
					_Utils_update(
						options,
						{
							editorOuter: $elm$core$Maybe$Just(key)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChooseInner':
				var key = msg.a;
				return _Utils_Tuple3(
					location,
					_Utils_update(
						options,
						{
							editorInner: $elm$core$Maybe$Just(key),
							editorValue: function () {
								var _v2 = options.editorOuter;
								if (_v2.$ === 'Just') {
									var outer = _v2.a;
									var _v3 = A2($elm$core$Dict$get, outer, location.textDictionary);
									if (_v3.$ === 'Just') {
										var innerDict = _v3.a;
										return A2($elm$core$Dict$get, key, innerDict);
									} else {
										return $elm$core$Maybe$Nothing;
									}
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}()
						}),
					$elm$core$Platform$Cmd$none);
			case 'ContentChange':
				var content = msg.a;
				return _Utils_Tuple3(
					location,
					_Utils_update(
						options,
						{
							editorValue: $elm$core$Maybe$Just(content)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Update':
				var innerDict = function () {
					var _v6 = options.editorOuter;
					if (_v6.$ === 'Just') {
						var outer = _v6.a;
						return A2($elm$core$Dict$get, outer, location.textDictionary);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				var newInnerDict = function () {
					var _v5 = _Utils_Tuple3(options.editorInner, innerDict, options.editorValue);
					if (((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) && (_v5.c.$ === 'Just')) {
						var innerKey = _v5.a.a;
						var isInnerDict = _v5.b.a;
						var value = _v5.c.a;
						return $elm$core$Maybe$Just(
							A3($elm$core$Dict$insert, innerKey, value, isInnerDict));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				var newOuterDict = function () {
					var _v4 = _Utils_Tuple2(options.editorOuter, newInnerDict);
					if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
						var outerKey = _v4.a.a;
						var newInner = _v4.b.a;
						return A3($elm$core$Dict$insert, outerKey, newInner, location.textDictionary);
					} else {
						return location.textDictionary;
					}
				}();
				return _Utils_Tuple3(
					_Utils_update(
						location,
						{textDictionary: newOuterDict}),
					options,
					$elm$core$Platform$Cmd$none);
			case 'Download':
				return _Utils_Tuple3(
					location,
					options,
					A3(
						$elm$file$File$Download$string,
						'LOCATION.JSON',
						'text/json',
						A2(
							$elm$json$Json$Encode$encode,
							4,
							$author$project$Tools$I18N$locationToJson(location))));
			case 'Upload':
				return _Utils_Tuple3(
					location,
					options,
					A2(
						$elm$file$File$Select$file,
						_List_fromArray(
							['text/json']),
						A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$FileChosen)));
			case 'FileChosen':
				var file = msg.a;
				return _Utils_Tuple3(
					location,
					options,
					A2(
						$elm$core$Task$perform,
						A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$FileLoaded),
						$elm$file$File$toString(file)));
			case 'FileLoaded':
				var content = msg.a;
				var _v7 = A2($elm$json$Json$Decode$decodeString, $author$project$Tools$I18N$locationDecoder, content);
				if (_v7.$ === 'Ok') {
					var newDictionary = _v7.a;
					return _Utils_Tuple3(
						_Utils_update(
							location,
							{textDictionary: newDictionary}),
						options,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(location, options, $elm$core$Platform$Cmd$none);
				}
			default:
				var result = msg.a;
				if (result.$ === 'Ok') {
					var remoteDict = result.a;
					return _Utils_Tuple3(
						_Utils_update(
							location,
							{textDictionary: remoteDict}),
						options,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(location, options, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Actions$OneClickQuickFix = {$: 'OneClickQuickFix'};
var $author$project$TrackLoaded$undoInfoWholeTrack = F2(
	function (action, track) {
		var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
		return {action: action, currentPosition: track.currentPosition, fromEnd: 0, fromStart: 0, markerPosition: track.markerPosition, originalPoints: oldPoints};
	});
var $author$project$Tools$OneClickQuickFix$update = F2(
	function (msg, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			var track = _v0.a.a;
			var _v1 = _v0.b;
			var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, $author$project$Actions$OneClickQuickFix, track);
			var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
			return _List_fromArray(
				[
					$author$project$Actions$WithUndo(undoInfo),
					undoInfo.action,
					$author$project$Actions$TrackHasChanged
				]);
		} else {
			return _List_Nil;
		}
	});
var $author$project$Tools$RGTOptions$update = F2(
	function (msg, options) {
		switch (msg.$) {
			case 'SetDisableElevationFixes':
				var newSetting = msg.a;
				return _Utils_update(
					options,
					{disableElevationFixes: newSetting});
			case 'SetDisableAdvancedSmoothing':
				var newSetting = msg.a;
				return _Utils_update(
					options,
					{disableAdvancedSmoothing: newSetting});
			default:
				var newSetting = msg.a;
				return _Utils_update(
					options,
					{maxSlope: newSetting});
		}
	});
var $author$project$ToolsController$ToolGraphMsg = function (a) {
	return {$: 'ToolGraphMsg', a: a};
};
var $author$project$ToolsController$ToolIntersectionMsg = function (a) {
	return {$: 'ToolIntersectionMsg', a: a};
};
var $author$project$ToolsController$ToolLandUseMsg = function (a) {
	return {$: 'ToolLandUseMsg', a: a};
};
var $author$project$ToolsController$ToolMoveAndStretchMsg = function (a) {
	return {$: 'ToolMoveAndStretchMsg', a: a};
};
var $author$project$ToolsController$ToolNamedSegmentMsg = function (a) {
	return {$: 'ToolNamedSegmentMsg', a: a};
};
var $author$project$ToolsController$ToolSplitJoinMsg = function (a) {
	return {$: 'ToolSplitJoinMsg', a: a};
};
var $author$project$ToolsController$ToolStravaMsg = function (a) {
	return {$: 'ToolStravaMsg', a: a};
};
var $author$project$ToolsController$isToolOpen = F2(
	function (toolType, entries) {
		return !_Utils_eq(
			A2(
				$elm_community$list_extra$List$Extra$find,
				function (tab) {
					return _Utils_eq(tab.toolType, toolType) && _Utils_eq(tab.state, $author$project$ToolsController$Expanded);
				},
				entries),
			$elm$core$Maybe$Nothing);
	});
var $author$project$ToolsController$setColour = F3(
	function (toolType, colour, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{
				tabColour: colour,
				textColour: $author$project$ViewPureStyles$contrastingColour(colour)
			}) : tool;
	});
var $author$project$ToolsController$setDock = F3(
	function (toolType, dock, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{dock: dock, isPopupOpen: false}) : tool;
	});
var $author$project$ToolsController$toggleToolPopup = F2(
	function (toolType, tool) {
		return _Utils_eq(tool.toolType, toolType) ? _Utils_update(
			tool,
			{isPopupOpen: !tool.isPopupOpen}) : _Utils_update(
			tool,
			{isPopupOpen: false});
	});
var $author$project$Actions$BendSmootherApplyWithOptions = function (a) {
	return {$: 'BendSmootherApplyWithOptions', a: a};
};
var $author$project$Tools$BendSmoother$undoEntryFrom = F2(
	function (options, track) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var oldPoints = A3($author$project$DomainModel$extractPointsInRange, fromStart + 1, fromEnd + 1, track.trackTree);
		return {
			action: $author$project$Actions$BendSmootherApplyWithOptions(options),
			currentPosition: track.currentPosition,
			fromEnd: fromEnd,
			fromStart: fromStart,
			markerPosition: track.markerPosition,
			originalPoints: A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints)
		};
	});
var $author$project$Tools$BendSmoother$update = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'SetBendTrackPointSpacing':
				var spacing = msg.a;
				var newOptions = A2(
					$author$project$Tools$BendSmoother$tryBendSmoother,
					track,
					_Utils_update(
						options,
						{bendTrackPointSpacing: spacing}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$BendSmoother$previewActions, newOptions, previewColour, track));
			case 'ApplySmoothBend':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$BendSmootherApplyWithOptions(options),
							$author$project$Actions$WithUndo(
							A2($author$project$Tools$BendSmoother$undoEntryFrom, options, track)),
							$author$project$Actions$TrackHasChanged
						]));
			case 'SetMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{mode: mode});
				return _Utils_Tuple2(newOptions, _List_Nil);
			default:
				var segments = msg.a;
				var newOptions = _Utils_update(
					options,
					{segments: segments});
				return _Utils_Tuple2(newOptions, _List_Nil);
		}
	});
var $author$project$Actions$BezierApplyWithOptions = function (a) {
	return {$: 'BezierApplyWithOptions', a: a};
};
var $author$project$TrackLoaded$undoInfoWithSinglePointDefault = F2(
	function (action, track) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var oldPoints = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree));
		return {action: action, currentPosition: track.currentPosition, fromEnd: fromEnd, fromStart: fromStart, markerPosition: track.markerPosition, originalPoints: oldPoints};
	});
var $author$project$Tools$BezierSplines$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetBezierTension':
					var track = _v0.a.a;
					var tension = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{bezierTension: tension});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
				case 'SetBezierTolerance':
					var track = _v0.a.a;
					var tolerance = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{bezierTolerance: tolerance});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
				case 'BezierApplyWithOptions':
					var track = _v0.a.a;
					var _v1 = _v0.b;
					var undoInfo = (!_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing)) ? A2(
						$author$project$TrackLoaded$undoInfoWithSinglePointDefault,
						$author$project$Actions$BezierApplyWithOptions(options),
						track) : {
						action: $author$project$Actions$BezierApplyWithOptions(options),
						currentPosition: track.currentPosition,
						fromEnd: 0,
						fromStart: 0,
						markerPosition: track.markerPosition,
						originalPoints: $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree)
					};
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$BezierApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged,
								$author$project$Actions$WithUndo(undoInfo)
							]));
				default:
					var track = _v0.a.a;
					var style = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{bezierStyle: style});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$BezierSplines$actions, newOptions, previewColour, track));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$CentroidAverageApplyWithOptions = function (a) {
	return {$: 'CentroidAverageApplyWithOptions', a: a};
};
var $author$project$TrackLoaded$undoInfoWithWholeTrackDefault = F2(
	function (action, track) {
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var oldPoints = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree));
		return {action: action, currentPosition: track.currentPosition, fromEnd: fromEnd, fromStart: fromStart, markerPosition: track.markerPosition, originalPoints: oldPoints};
	});
var $author$project$Tools$CentroidAverage$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetWeighting':
					var track = _v0.a.a;
					var weight = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{weighting: weight});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				case 'ToggleAltitude':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{applyToAltitude: !options.applyToAltitude});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				case 'TogglePosition':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{applyToPosition: !options.applyToPosition});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CentroidAverage$actions, newOptions, previewColour, track));
				default:
					var track = _v0.a.a;
					var _v1 = _v0.b;
					var undoInfo = A2(
						$author$project$TrackLoaded$undoInfoWithWholeTrackDefault,
						$author$project$Actions$CentroidAverageApplyWithOptions(options),
						track);
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$CentroidAverageApplyWithOptions(options),
								$author$project$Actions$TrackHasChanged,
								$author$project$Actions$WithUndo(undoInfo)
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$CurveFormerApplyWithOptions = function (a) {
	return {$: 'CurveFormerApplyWithOptions', a: a};
};
var $author$project$Tools$CurveFormer$EntryMode = {$: 'EntryMode'};
var $author$project$Tools$CurveFormer$ExitMode = {$: 'ExitMode'};
var $ianmackenzie$elm_geometry$Point2d$along = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var distance = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y)});
	});
var $elm_community$list_extra$List$Extra$allDifferentBy = F2(
	function (f, list) {
		return _Utils_eq(
			$elm$core$List$length(list),
			$elm$core$List$length(
				A2($elm_community$list_extra$List$Extra$uniqueBy, f, list)));
	});
var $elm_community$list_extra$List$Extra$allDifferent = function (list) {
	return A2($elm_community$list_extra$List$Extra$allDifferentBy, $elm$core$Basics$identity, list);
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tools$CurveFormer$areContiguous = function (roads) {
	var indices = $elm$core$Dict$keys(roads);
	return (!$elm$core$List$length(indices)) || function () {
		var _v0 = _Utils_Tuple2(
			$elm$core$List$maximum(indices),
			$elm$core$List$minimum(indices));
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var isMax = _v0.a.a;
			var isMin = _v0.b.a;
			return _Utils_eq(
				isMax - isMin,
				$elm$core$List$length(indices) - 1) && $elm_community$list_extra$List$Extra$allDifferent(indices);
		} else {
			return false;
		}
	}();
};
var $ianmackenzie$elm_geometry$Direction2d$from = F2(
	function (firstPoint, secondPoint) {
		return $ianmackenzie$elm_geometry$Vector2d$direction(
			A2($ianmackenzie$elm_geometry$Vector2d$from, firstPoint, secondPoint));
	});
var $ianmackenzie$elm_interval$Interval$Interval = function (a) {
	return {$: 'Interval', a: a};
};
var $ianmackenzie$elm_interval$Interval$from = F2(
	function (firstValue, secondValue) {
		return (_Utils_cmp(firstValue, secondValue) < 1) ? $ianmackenzie$elm_interval$Interval$Interval(
			_Utils_Tuple2(firstValue, secondValue)) : $ianmackenzie$elm_interval$Interval$Interval(
			_Utils_Tuple2(secondValue, firstValue));
	});
var $ianmackenzie$elm_interval$Interval$endpoints = function (_v0) {
	var intervalEndpoints = _v0.a;
	return intervalEndpoints;
};
var $ianmackenzie$elm_interval$Interval$intersects = F2(
	function (firstInterval, secondInterval) {
		var _v0 = $ianmackenzie$elm_interval$Interval$endpoints(secondInterval);
		var min2 = _v0.a;
		var max2 = _v0.b;
		var _v1 = $ianmackenzie$elm_interval$Interval$endpoints(firstInterval);
		var min1 = _v1.a;
		var max1 = _v1.b;
		return (_Utils_cmp(min1, max2) < 1) && (_Utils_cmp(max1, min2) > -1);
	});
var $ianmackenzie$elm_geometry$Geometry$Types$LargeNegative = {$: 'LargeNegative'};
var $ianmackenzie$elm_geometry$SweptAngle$largeNegative = $ianmackenzie$elm_geometry$Geometry$Types$LargeNegative;
var $ianmackenzie$elm_geometry$Geometry$Types$LargePositive = {$: 'LargePositive'};
var $ianmackenzie$elm_geometry$SweptAngle$largePositive = $ianmackenzie$elm_geometry$Geometry$Types$LargePositive;
var $author$project$Geometry101$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $author$project$Geometry101$solveQuadratic = F3(
	function (a, b, c) {
		var disc = (b * b) - ((4 * a) * c);
		return (!disc) ? _List_fromArray(
			[-(b / (a + a))]) : ((disc > 0) ? _List_fromArray(
			[
				((-b) - $elm$core$Basics$sqrt(disc)) / (a + a),
				((-b) + $elm$core$Basics$sqrt(disc)) / (a + a)
			]) : _List_Nil);
	});
var $author$project$Geometry101$lineCircleIntersections = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		var centre = _v1.centre;
		var radius = _v1.radius;
		var shiftedLine = {a: a, b: b, c: c + ((a * centre.x) + (b * centre.y))};
		var xSolutionsShifted = A3($author$project$Geometry101$solveQuadratic, (shiftedLine.a * shiftedLine.a) + (shiftedLine.b * shiftedLine.b), (2.0 * shiftedLine.a) * shiftedLine.c, (shiftedLine.c * shiftedLine.c) - (((shiftedLine.b * shiftedLine.b) * radius) * radius));
		var xSolutions = A2(
			$elm$core$List$map,
			$elm$core$Basics$add(centre.x),
			xSolutionsShifted);
		var ySolutions = A2(
			$elm$core$List$map,
			function (x) {
				return -(((a * x) + c) / b);
			},
			xSolutions);
		return A3($elm$core$List$map2, $author$project$Geometry101$Point, xSolutions, ySolutions);
	});
var $elm_community$list_extra$List$Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _v1) {
				var y = _v1.a;
				var fy = _v1.b;
				var fx = f(x);
				return (_Utils_cmp(fx, fy) > 0) ? _Utils_Tuple2(x, fx) : _Utils_Tuple2(y, fy);
			});
		if (ls.b) {
			if (!ls.b.b) {
				var l_ = ls.a;
				return $elm$core$Maybe$Just(l_);
			} else {
				var l_ = ls.a;
				var ls_ = ls.b;
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$List$foldl,
						maxBy,
						_Utils_Tuple2(
							l_,
							f(l_)),
						ls_).a);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $ianmackenzie$elm_geometry$Vector2d$rotateCounterclockwise = function (_v0) {
	var v = _v0.a;
	return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
		{x: -v.y, y: v.x});
};
var $ianmackenzie$elm_geometry$Vector2d$perpendicularTo = function (givenVector) {
	return $ianmackenzie$elm_geometry$Vector2d$rotateCounterclockwise(givenVector);
};
var $ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection = function (givenSegment) {
	return $ianmackenzie$elm_geometry$Vector2d$direction(
		$ianmackenzie$elm_geometry$Vector2d$perpendicularTo(
			$ianmackenzie$elm_geometry$LineSegment2d$vector(givenSegment)));
};
var $author$project$DomainModel$queryRoadsUsingFilter = F4(
	function (filterFn, treeNode, foldFn, accum) {
		var helper = F4(
			function (starting, ending, someNode, myAccumulator) {
				if (A3(
					filterFn,
					starting,
					ending,
					$author$project$DomainModel$asRecord(treeNode))) {
					if (someNode.$ === 'Leaf') {
						var leaf = someNode.a;
						return A3(foldFn, starting, leaf, myAccumulator);
					} else {
						var node = someNode.a;
						return A4(
							helper,
							starting + $author$project$DomainModel$skipCount(node.left),
							ending,
							node.right,
							A4(
								helper,
								starting,
								ending - $author$project$DomainModel$skipCount(node.right),
								node.left,
								myAccumulator));
					}
				} else {
					return myAccumulator;
				}
			});
		return A4(
			helper,
			0,
			$author$project$DomainModel$skipCount(treeNode),
			treeNode,
			accum);
	});
var $elm_community$list_extra$List$Extra$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				if (accAcc.b) {
					var acc = accAcc.a;
					return A2(
						$elm$core$List$cons,
						A2(f, x, acc),
						accAcc);
				} else {
					return _List_Nil;
				}
			});
		return $elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				scan1,
				_List_fromArray(
					[b]),
				xs));
	});
var $ianmackenzie$elm_geometry$Geometry$Types$SmallNegative = {$: 'SmallNegative'};
var $ianmackenzie$elm_geometry$SweptAngle$smallNegative = $ianmackenzie$elm_geometry$Geometry$Types$SmallNegative;
var $ianmackenzie$elm_geometry$Geometry$Types$SmallPositive = {$: 'SmallPositive'};
var $ianmackenzie$elm_geometry$SweptAngle$smallPositive = $ianmackenzie$elm_geometry$Geometry$Types$SmallPositive;
var $elm_community$list_extra$List$Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			$elm$core$Maybe$map,
			function (i) {
				return A2($elm_community$list_extra$List$Extra$splitAt, i, list);
			},
			A2($elm_community$list_extra$List$Extra$findIndex, predicate, list));
	});
var $ianmackenzie$elm_geometry$Axis2d$throughPoints = F2(
	function (firstPoint, secondPoint) {
		var _v0 = A2($ianmackenzie$elm_geometry$Direction2d$from, firstPoint, secondPoint);
		if (_v0.$ === 'Just') {
			var axisDirection = _v0.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$Axis2d$through, firstPoint, axisDirection));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$toList = function (m) {
	if (m.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var x = m.a;
		return _List_fromArray(
			[x]);
	}
};
var $ianmackenzie$elm_geometry$LineSegment2d$mapEndpoints = F2(
	function (_function, lineSegment) {
		var _v0 = $ianmackenzie$elm_geometry$LineSegment2d$endpoints(lineSegment);
		var p1 = _v0.a;
		var p2 = _v0.b;
		return $ianmackenzie$elm_geometry$LineSegment2d$fromEndpoints(
			_Utils_Tuple2(
				_function(p1),
				_function(p2)));
	});
var $ianmackenzie$elm_geometry$LineSegment2d$translateBy = function (displacementVector) {
	return $ianmackenzie$elm_geometry$LineSegment2d$mapEndpoints(
		$ianmackenzie$elm_geometry$Point2d$translateBy(displacementVector));
};
var $elm$core$Basics$asin = _Basics_asin;
var $ianmackenzie$elm_units$Angle$asin = function (x) {
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$asin(x));
};
var $ianmackenzie$elm_geometry$LineSegment2d$midpoint = function (lineSegment) {
	return A2($ianmackenzie$elm_geometry$LineSegment2d$interpolate, lineSegment, 0.5);
};
var $ianmackenzie$elm_units$Quantity$sqrt = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$sqrt(value));
};
var $ianmackenzie$elm_units$Quantity$squared = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(value * value);
};
var $ianmackenzie$elm_geometry$Point2d$translateIn = F3(
	function (_v0, _v1, _v2) {
		var d = _v0.a;
		var distance = _v1.a;
		var p = _v2.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p.x + (distance * d.x), y: p.y + (distance * d.y)});
	});
var $ianmackenzie$elm_geometry$Arc2d$withRadius = F4(
	function (givenRadius, givenSweptAngle, givenStartPoint, givenEndPoint) {
		var squaredRadius = $ianmackenzie$elm_units$Quantity$squared(givenRadius);
		var chord = A2($ianmackenzie$elm_geometry$LineSegment2d$from, givenStartPoint, givenEndPoint);
		var squaredHalfLength = $ianmackenzie$elm_units$Quantity$squared(
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				0.5,
				$ianmackenzie$elm_geometry$LineSegment2d$length(chord)));
		return A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, squaredHalfLength, squaredRadius) ? A2(
			$elm$core$Maybe$map,
			function (offsetDirection) {
				var offsetMagnitude = $ianmackenzie$elm_units$Quantity$sqrt(
					A2($ianmackenzie$elm_units$Quantity$minus, squaredHalfLength, squaredRadius));
				var offsetDistance = function () {
					switch (givenSweptAngle.$) {
						case 'SmallPositive':
							return offsetMagnitude;
						case 'SmallNegative':
							return $ianmackenzie$elm_units$Quantity$negate(offsetMagnitude);
						case 'LargeNegative':
							return offsetMagnitude;
						default:
							return $ianmackenzie$elm_units$Quantity$negate(offsetMagnitude);
					}
				}();
				var halfLength = $ianmackenzie$elm_units$Quantity$sqrt(squaredHalfLength);
				var shortAngle = A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					2,
					$ianmackenzie$elm_units$Angle$asin(
						A2($ianmackenzie$elm_units$Quantity$ratio, halfLength, givenRadius)));
				var sweptAngleInRadians = function () {
					switch (givenSweptAngle.$) {
						case 'SmallPositive':
							return shortAngle;
						case 'SmallNegative':
							return $ianmackenzie$elm_units$Quantity$negate(shortAngle);
						case 'LargePositive':
							return A2($ianmackenzie$elm_units$Quantity$minus, shortAngle, $ianmackenzie$elm_geometry$Arc2d$twoPi);
						default:
							return A2($ianmackenzie$elm_units$Quantity$minus, $ianmackenzie$elm_geometry$Arc2d$twoPi, shortAngle);
					}
				}();
				var computedCenterPoint = A3(
					$ianmackenzie$elm_geometry$Point2d$translateIn,
					offsetDirection,
					offsetDistance,
					$ianmackenzie$elm_geometry$LineSegment2d$midpoint(chord));
				return A3($ianmackenzie$elm_geometry$Arc2d$sweptAround, computedCenterPoint, sweptAngleInRadians, givenStartPoint);
			},
			$ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection(chord)) : $elm$core$Maybe$Nothing;
	});
var $author$project$Tools$CurveFormer$makeCurveIfPossible = F2(
	function (track, options) {
		var routeLength = $author$project$DomainModel$skipCount(track.trackTree);
		var circle = A2($author$project$Tools$CurveFormer$getCircle, options, track);
		var arcToSegments = function (arc) {
			var arcLength = $elm$core$Basics$abs(
				$ianmackenzie$elm_units$Length$inMeters(
					$ianmackenzie$elm_geometry$Arc2d$radius(arc)) * $ianmackenzie$elm_units$Angle$inRadians(
					$ianmackenzie$elm_geometry$Arc2d$sweptAngle(arc)));
			var entryArcNumSegments = A2(
				$elm$core$Basics$max,
				1,
				$elm$core$Basics$ceiling(
					arcLength / $ianmackenzie$elm_units$Length$inMeters(options.spacing)));
			return $ianmackenzie$elm_geometry$Polyline2d$segments(
				A2($ianmackenzie$elm_geometry$Arc2d$segments, entryArcNumSegments, arc));
		};
		var _v0 = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(0, 0) : $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var _v1 = _Utils_Tuple2(
			fromStart,
			$author$project$DomainModel$skipCount(track.trackTree) - fromEnd);
		var startRange = _v1.a;
		var endRange = _v1.b;
		var searchInterval = A2($ianmackenzie$elm_interval$Interval$from, startRange, endRange);
		var _v2 = _Utils_Tuple3(
			$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle),
			$ianmackenzie$elm_geometry$Circle3d$axis(circle),
			A2(
				$ianmackenzie$elm_geometry$SketchPlane3d$translateBy,
				A2(
					$ianmackenzie$elm_geometry$Vector3d$withLength,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(
						$ianmackenzie$elm_geometry$Circle3d$centerPoint(circle)),
					$ianmackenzie$elm_geometry$Direction3d$positiveZ),
				$ianmackenzie$elm_geometry$SketchPlane3d$xy));
		var centre = _v2.a;
		var axis = _v2.b;
		var drawingPlane = _v2.c;
		var isWithinPullRadius = function (pt) {
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				options.pullRadius,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, axis, pt));
		};
		var isWithinPushRadius = function (pt) {
			return A2(
				$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
				options.pushRadius,
				A2($ianmackenzie$elm_geometry$Point3d$distanceFromAxis, axis, pt));
		};
		var isWithinDisc = function (pt) {
			return isWithinPullRadius(pt) && (!isWithinPushRadius(pt));
		};
		var centreOnPlane = A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, centre);
		var innerBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$twice(options.pushRadius),
				$ianmackenzie$elm_units$Quantity$twice(options.pushRadius)),
			centreOnPlane);
		var overlapsCircleAndRange = F3(
			function (start, end, road) {
				return A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersects,
					innerBox,
					$author$project$UtilsForViews$flatBox(road.boundingBox)) && A2(
					$ianmackenzie$elm_interval$Interval$intersects,
					searchInterval,
					A2($ianmackenzie$elm_interval$Interval$from, start, end));
			});
		var pointsWithinCircle = function () {
			var collector = F3(
				function (index, road, dict) {
					return isWithinPushRadius(road.startPoint.space) ? A3($elm$core$Dict$insert, index, road, dict) : dict;
				});
			return A4($author$project$DomainModel$queryRoadsUsingFilter, overlapsCircleAndRange, track.trackTree, collector, $elm$core$Dict$empty);
		}();
		var outerBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox2d$withDimensions,
			_Utils_Tuple2(
				$ianmackenzie$elm_units$Quantity$twice(options.pullRadius),
				$ianmackenzie$elm_units$Quantity$twice(options.pullRadius)),
			centreOnPlane);
		var overlapsDiscAndRange = F3(
			function (start, end, road) {
				return A2(
					$ianmackenzie$elm_geometry$BoundingBox2d$intersects,
					outerBox,
					$author$project$UtilsForViews$flatBox(road.boundingBox)) && A2(
					$ianmackenzie$elm_interval$Interval$intersects,
					searchInterval,
					A2($ianmackenzie$elm_interval$Interval$from, start, end));
			});
		var pointsWithinDisc = function () {
			var collector = F3(
				function (index, road, dict) {
					return isWithinDisc(road.startPoint.space) ? A3($elm$core$Dict$insert, index, road, dict) : dict;
				});
			return A4($author$project$DomainModel$queryRoadsUsingFilter, overlapsDiscAndRange, track.trackTree, collector, $elm$core$Dict$empty);
		}();
		var capturedRoadSections = A2($elm$core$Dict$union, pointsWithinCircle, pointsWithinDisc);
		var isLeftHandBend = function () {
			var runningAverageDirectionChange = F3(
				function (idx, road, change) {
					if (change.a.$ === 'Nothing') {
						var _v40 = change.a;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(road.directionAtStart),
							0.0);
					} else {
						var previousDirection = change.a.a;
						var prevTotal = change.b;
						return _Utils_Tuple2(
							$elm$core$Maybe$Just(road.directionAtStart),
							prevTotal + $ianmackenzie$elm_units$Angle$inDegrees(
								A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, previousDirection, road.directionAtStart)));
					}
				});
			var _v38 = A3(
				$elm$core$Dict$foldl,
				runningAverageDirectionChange,
				_Utils_Tuple2($elm$core$Maybe$Nothing, 0.0),
				capturedRoadSections);
			var changeInDirection = _v38.b;
			return changeInDirection > 0.0;
		}();
		var findAcceptableTransition = F3(
			function (mode, idx1, idx2) {
				var _v31 = _Utils_Tuple2(
					A2($author$project$DomainModel$earthPointFromIndex, idx1, track.trackTree),
					A2($author$project$DomainModel$earthPointFromIndex, idx2, track.trackTree));
				var tp1 = _v31.a;
				var tp2 = _v31.b;
				var entryLineSegment = A2(
					$ianmackenzie$elm_geometry$LineSegment2d$from,
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, tp1.space),
					A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, tp2.space));
				var entryLineAxis = A2(
					$ianmackenzie$elm_geometry$Axis2d$throughPoints,
					$ianmackenzie$elm_geometry$LineSegment2d$startPoint(entryLineSegment),
					$ianmackenzie$elm_geometry$LineSegment2d$endPoint(entryLineSegment));
				var entryLineShiftVector = function () {
					var shiftAmount = isLeftHandBend ? $ianmackenzie$elm_units$Quantity$negate(options.transitionRadius) : options.transitionRadius;
					return A2(
						$elm$core$Maybe$map,
						$ianmackenzie$elm_geometry$Vector2d$withLength(shiftAmount),
						$ianmackenzie$elm_geometry$LineSegment2d$perpendicularDirection(entryLineSegment));
				}();
				var shiftedEntryLine = function () {
					if (entryLineShiftVector.$ === 'Just') {
						var theVector = entryLineShiftVector.a;
						return $elm$core$Maybe$Just(
							A2($ianmackenzie$elm_geometry$LineSegment2d$translateBy, theVector, entryLineSegment));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				var outerCircleIntersections = function () {
					if (shiftedEntryLine.$ === 'Just') {
						var line = shiftedEntryLine.a;
						var outerCircle = {
							centre: A2($ianmackenzie$elm_geometry$Point2d$toRecord, $ianmackenzie$elm_units$Length$inMeters, centreOnPlane),
							radius: $ianmackenzie$elm_units$Length$inMeters(
								A2($ianmackenzie$elm_units$Quantity$plus, options.pushRadius, options.transitionRadius))
						};
						var lineEqn = A2(
							$author$project$Geometry101$lineEquationFromTwoPoints,
							A2(
								$ianmackenzie$elm_geometry$Point2d$toRecord,
								$ianmackenzie$elm_units$Length$inMeters,
								$ianmackenzie$elm_geometry$LineSegment2d$startPoint(line)),
							A2(
								$ianmackenzie$elm_geometry$Point2d$toRecord,
								$ianmackenzie$elm_units$Length$inMeters,
								$ianmackenzie$elm_geometry$LineSegment2d$endPoint(line)));
						return A2(
							$elm$core$List$map,
							$ianmackenzie$elm_geometry$Point2d$fromRecord($ianmackenzie$elm_units$Length$meters),
							A2($author$project$Geometry101$lineCircleIntersections, lineEqn, outerCircle));
					} else {
						return _List_Nil;
					}
				}();
				var validCounterBendCentresAndTangentPoints = function () {
					if (entryLineAxis.$ === 'Just') {
						var sameOldAxis = entryLineAxis.a;
						var selectionFunction = function () {
							if (mode.$ === 'EntryMode') {
								return $elm_community$list_extra$List$Extra$minimumBy(
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.distanceAlong;
										},
										$ianmackenzie$elm_units$Length$inMeters));
							} else {
								return $elm_community$list_extra$List$Extra$maximumBy(
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.distanceAlong;
										},
										$ianmackenzie$elm_units$Length$inMeters));
							}
						}();
						var elaborateIntersectionPoint = function (i) {
							var distanceAlong = A2($ianmackenzie$elm_geometry$Point2d$signedDistanceAlong, sameOldAxis, i);
							var tangentPoint2d = A2($ianmackenzie$elm_geometry$Point2d$along, sameOldAxis, distanceAlong);
							var bendJoinPoint = A3(
								$ianmackenzie$elm_geometry$Point2d$interpolateFrom,
								centreOnPlane,
								i,
								A2(
									$ianmackenzie$elm_units$Quantity$ratio,
									options.pushRadius,
									A2($ianmackenzie$elm_units$Quantity$plus, options.pushRadius, options.transitionRadius)));
							return {
								distanceAlong: distanceAlong,
								index: function () {
									if (mode.$ === 'EntryMode') {
										return idx1;
									} else {
										return idx2;
									}
								}(),
								intersection: i,
								joinsBendAt: bendJoinPoint,
								originalTrackPoint: function () {
									if (mode.$ === 'EntryMode') {
										return tp1;
									} else {
										return tp2;
									}
								}(),
								tangentPoint: tangentPoint2d
							};
						};
						return A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.distanceAlong;
								},
								$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo(
									$ianmackenzie$elm_geometry$LineSegment2d$length(entryLineSegment))),
							A2(
								$elm$core$List$filter,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.distanceAlong;
									},
									$ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo($ianmackenzie$elm_units$Quantity$zero)),
								$elm_community$maybe_extra$Maybe$Extra$toList(
									selectionFunction(
										A2($elm$core$List$map, elaborateIntersectionPoint, outerCircleIntersections)))));
					} else {
						return _List_Nil;
					}
				}();
				return $elm$core$List$head(validCounterBendCentresAndTangentPoints);
			});
		var entryCurveSeeker = F2(
			function (limit, index) {
				entryCurveSeeker:
				while (true) {
					var _v3 = A3(findAcceptableTransition, $author$project$Tools$CurveFormer$EntryMode, index - 1, index);
					if (_v3.$ === 'Just') {
						var transition = _v3.a;
						return $elm$core$Maybe$Just(transition);
					} else {
						if ((index > 1) && (limit > 0)) {
							var $temp$limit = limit - 1,
								$temp$index = index - 1;
							limit = $temp$limit;
							index = $temp$index;
							continue entryCurveSeeker;
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			});
		var exitCurveSeeker = F2(
			function (limit, index) {
				exitCurveSeeker:
				while (true) {
					var _v4 = A3(findAcceptableTransition, $author$project$Tools$CurveFormer$ExitMode, index, index + 1);
					if (_v4.$ === 'Just') {
						var transition = _v4.a;
						return $elm$core$Maybe$Just(transition);
					} else {
						if ((_Utils_cmp(index, routeLength - 2) < 0) && (limit > 0)) {
							var $temp$limit = limit - 1,
								$temp$index = index + 1;
							limit = $temp$limit;
							index = $temp$index;
							continue exitCurveSeeker;
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			});
		var _v5 = _Utils_Tuple2(
			A2(
				$elm$core$Maybe$andThen,
				entryCurveSeeker(100),
				$elm$core$List$head(
					$elm$core$Dict$keys(capturedRoadSections))),
			A2(
				$elm$core$Maybe$andThen,
				exitCurveSeeker(100),
				$elm_community$list_extra$List$Extra$last(
					$elm$core$Dict$keys(capturedRoadSections))));
		var entryInformation = _v5.a;
		var exitInformation = _v5.b;
		var entryCurve = function () {
			if (entryInformation.$ === 'Just') {
				var tangentPoint = entryInformation.a.tangentPoint;
				var joinsBendAt = entryInformation.a.joinsBendAt;
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						arcToSegments,
						A4(
							$ianmackenzie$elm_geometry$Arc2d$withRadius,
							options.transitionRadius,
							isLeftHandBend ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$smallPositive,
							tangentPoint,
							joinsBendAt)));
			} else {
				return _List_Nil;
			}
		}();
		var attachmentPoints = function () {
			var _v29 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v29.a.$ === 'Just') && (_v29.b.$ === 'Just')) {
				var entry = _v29.a.a;
				var exit = _v29.b.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(entry.index, exit.index));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var prepareOriginalAltitudesForInterpolation = function () {
			if (attachmentPoints.$ === 'Just') {
				var _v28 = attachmentPoints.a;
				var start = _v28.a;
				var end = _v28.b;
				var startDistance = A2($author$project$DomainModel$distanceFromIndex, start, track.trackTree);
				var endDistance = A2($author$project$DomainModel$distanceFromIndex, end, track.trackTree);
				var length = A2($ianmackenzie$elm_units$Quantity$minus, startDistance, endDistance);
				return A2(
					$elm$core$List$map,
					function (idx) {
						var thisPointDistanceFromStart = A2($author$project$DomainModel$distanceFromIndex, idx, track.trackTree);
						return _Utils_Tuple2(
							A2(
								$ianmackenzie$elm_units$Quantity$ratio,
								A2($ianmackenzie$elm_units$Quantity$minus, startDistance, thisPointDistanceFromStart),
								length),
							$ianmackenzie$elm_geometry$Point3d$zCoordinate(
								A2($author$project$DomainModel$earthPointFromIndex, idx, track.trackTree).space));
					},
					A2($elm$core$List$range, start, end));
			} else {
				return _List_Nil;
			}
		}();
		var interpolateOriginalAltitudesByDistance = function (fraction) {
			var twoSides = A2(
				$elm_community$list_extra$List$Extra$splitWhen,
				function (_v26) {
					var k = _v26.a;
					return _Utils_cmp(k, fraction) > -1;
				},
				prepareOriginalAltitudesForInterpolation);
			if (twoSides.$ === 'Just') {
				var _v14 = twoSides.a;
				var beforePairs = _v14.a;
				var afterPairs = _v14.b;
				var _v15 = _Utils_Tuple2(
					$elm_community$list_extra$List$Extra$last(beforePairs),
					$elm$core$List$head(afterPairs));
				var lastBefore = _v15.a;
				var firstAfter = _v15.b;
				var _v16 = _Utils_Tuple2(lastBefore, firstAfter);
				if (_v16.a.$ === 'Just') {
					if (_v16.b.$ === 'Just') {
						var _v17 = _v16.a.a;
						var priorFraction = _v17.a;
						var priorAltitude = _v17.b;
						var _v18 = _v16.b.a;
						var nextFraction = _v18.a;
						var nextAltitude = _v18.b;
						var _v19 = _Utils_Tuple2((nextFraction - fraction) / (nextFraction - priorFraction), (fraction - priorFraction) / (nextFraction - priorFraction));
						var beforeContribution = _v19.a;
						var afterContribution = _v19.b;
						return A2(
							$ianmackenzie$elm_units$Quantity$plus,
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, beforeContribution, priorAltitude),
							A2($ianmackenzie$elm_units$Quantity$multiplyBy, afterContribution, nextAltitude));
					} else {
						var _v20 = _v16.a.a;
						var priorAltitude = _v20.b;
						var _v21 = _v16.b;
						return priorAltitude;
					}
				} else {
					if (_v16.b.$ === 'Just') {
						var _v22 = _v16.a;
						var _v23 = _v16.b.a;
						var nextAltitude = _v23.b;
						return nextAltitude;
					} else {
						var _v24 = _v16.a;
						var _v25 = _v16.b;
						return $ianmackenzie$elm_units$Quantity$zero;
					}
				}
			} else {
				return $ianmackenzie$elm_units$Quantity$zero;
			}
		};
		var exitCurve = function () {
			if (exitInformation.$ === 'Just') {
				var tangentPoint = exitInformation.a.tangentPoint;
				var joinsBendAt = exitInformation.a.joinsBendAt;
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						arcToSegments,
						A4(
							$ianmackenzie$elm_geometry$Arc2d$withRadius,
							options.transitionRadius,
							isLeftHandBend ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$smallPositive,
							joinsBendAt,
							tangentPoint)));
			} else {
				return _List_Nil;
			}
		}();
		var theArcItself = function () {
			var _v9 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v9.a.$ === 'Just') && (_v9.b.$ === 'Just')) {
				var entry = _v9.a.a;
				var exit = _v9.b.a;
				var _v10 = _Utils_Tuple2(
					A2($ianmackenzie$elm_geometry$Direction2d$from, centreOnPlane, entry.joinsBendAt),
					A2($ianmackenzie$elm_geometry$Direction2d$from, centreOnPlane, exit.joinsBendAt));
				var entryDirection = _v10.a;
				var exitDirection = _v10.b;
				var turn = A3($elm$core$Maybe$map2, $ianmackenzie$elm_geometry$Direction2d$angleFrom, entryDirection, exitDirection);
				if (turn.$ === 'Just') {
					var turnAngle = turn.a;
					return A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							arcToSegments,
							A4(
								$ianmackenzie$elm_geometry$Arc2d$withRadius,
								options.pushRadius,
								isLeftHandBend ? (A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, turnAngle) ? $ianmackenzie$elm_geometry$SweptAngle$smallPositive : $ianmackenzie$elm_geometry$SweptAngle$largePositive) : (A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, turnAngle) ? $ianmackenzie$elm_geometry$SweptAngle$smallNegative : $ianmackenzie$elm_geometry$SweptAngle$largeNegative),
								entry.joinsBendAt,
								exit.joinsBendAt)));
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var newBendEntirely = function () {
			var _v7 = _Utils_Tuple2(entryInformation, exitInformation);
			if ((_v7.a.$ === 'Just') && (_v7.b.$ === 'Just')) {
				var entry = _v7.a.a;
				var exit = _v7.b.a;
				var completeSegments = _Utils_ap(
					entryCurve,
					_Utils_ap(
						theArcItself,
						_Utils_ap(
							exitCurve,
							_List_fromArray(
								[
									A2(
									$ianmackenzie$elm_geometry$LineSegment2d$from,
									exit.tangentPoint,
									A2($ianmackenzie$elm_geometry$Point3d$projectInto, drawingPlane, exit.originalTrackPoint.space))
								]))));
				var cumulativeDistances = A3(
					$elm_community$list_extra$List$Extra$scanl,
					F2(
						function (seg, run) {
							return A2(
								$ianmackenzie$elm_units$Quantity$plus,
								run,
								$ianmackenzie$elm_geometry$LineSegment2d$length(seg));
						}),
					$ianmackenzie$elm_units$Quantity$zero,
					completeSegments);
				var times = A2(
					$elm$core$List$cons,
					entry.originalTrackPoint.time,
					_Utils_ap(
						A3(
							$author$project$Utils$equalIntervals,
							$elm$core$List$length(completeSegments),
							entry.originalTrackPoint.time,
							exit.originalTrackPoint.time),
						_List_fromArray(
							[exit.originalTrackPoint.time])));
				var altitudeChange = A2(
					$ianmackenzie$elm_units$Quantity$minus,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(entry.originalTrackPoint.space),
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(exit.originalTrackPoint.space));
				var actualNewLength = $ianmackenzie$elm_units$Quantity$sum(
					A2($elm$core$List$map, $ianmackenzie$elm_geometry$LineSegment2d$length, completeSegments));
				return A4(
					$elm$core$List$map3,
					F3(
						function (seg, dist, time) {
							var proportionalDistance = A2($ianmackenzie$elm_units$Quantity$ratio, dist, actualNewLength);
							var originalSegmentStart = $ianmackenzie$elm_geometry$LineSegment2d$startPoint(seg);
							var newAltitude = function () {
								var _v8 = options.smoothGradient;
								if (_v8.$ === 'Holistic') {
									var adjustment = A2($ianmackenzie$elm_units$Quantity$multiplyBy, proportionalDistance, altitudeChange);
									return A2(
										$ianmackenzie$elm_units$Quantity$plus,
										adjustment,
										$ianmackenzie$elm_geometry$Point3d$zCoordinate(entry.originalTrackPoint.space));
								} else {
									return interpolateOriginalAltitudesByDistance(proportionalDistance);
								}
							}();
							return {
								space: A3(
									$ianmackenzie$elm_geometry$Point3d$xyz,
									$ianmackenzie$elm_geometry$Point2d$xCoordinate(originalSegmentStart),
									$ianmackenzie$elm_geometry$Point2d$yCoordinate(originalSegmentStart),
									newAltitude),
								time: time
							};
						}),
					completeSegments,
					cumulativeDistances,
					times);
			} else {
				return _List_Nil;
			}
		}();
		var previewPoints = function () {
			if (entryInformation.$ === 'Just') {
				var entry = entryInformation.a;
				return A3(
					$author$project$TrackLoaded$asPreviewPoints,
					track,
					A2($author$project$DomainModel$distanceFromIndex, entry.index, track.trackTree),
					newBendEntirely);
			} else {
				return _List_Nil;
			}
		}();
		return _Utils_update(
			options,
			{
				fixedAttachmentPoints: attachmentPoints,
				newTrackPoints: previewPoints,
				pointsAreContiguous: $author$project$Tools$CurveFormer$areContiguous(capturedRoadSections),
				pointsWithinCircle: pointsWithinCircle,
				pointsWithinDisc: pointsWithinDisc
			});
	});
var $ianmackenzie$elm_geometry$Vector2d$plus = F2(
	function (_v0, _v1) {
		var v2 = _v0.a;
		var v1 = _v1.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Vector2d(
			{x: v1.x + v2.x, y: v1.y + v2.y});
	});
var $author$project$Tools$CurveFormer$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			switch (_v0.b.$) {
				case 'SetPushRadius':
					var track = _v0.a.a;
					var radius = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								pushRadius: $ianmackenzie$elm_units$Length$meters(radius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetDiscWidth':
					var track = _v0.a.a;
					var width = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								pullRadius: A2(
									$ianmackenzie$elm_units$Quantity$plus,
									$ianmackenzie$elm_units$Length$meters(width),
									options.pushRadius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetTransitionRadius':
					var track = _v0.a.a;
					var radius = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								transitionRadius: $ianmackenzie$elm_units$Length$meters(radius)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetSpacing':
					var track = _v0.a.a;
					var spacing = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{
								spacing: $ianmackenzie$elm_units$Length$meters(spacing)
							}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'ToggleUsePullRadius':
					var track = _v0.a.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{usePullRadius: !options.usePullRadius}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'SetGradientSmoothingMode':
					var track = _v0.a.a;
					var mode = _v0.b.a;
					var newOptions = A2(
						$author$project$Tools$CurveFormer$makeCurveIfPossible,
						track,
						_Utils_update(
							options,
							{smoothGradient: mode}));
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerGrab':
					var track = _v0.a.a;
					var offset = _v0.b.a;
					var newOptions = _Utils_update(
						options,
						{
							dragging: $elm$core$Maybe$Just(offset)
						});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerMove':
					var track = _v0.a.a;
					var offset = _v0.b.a;
					var _v1 = options.dragging;
					if (_v1.$ === 'Nothing') {
						return _Utils_Tuple2(options, _List_Nil);
					} else {
						var dragStart = _v1.a;
						var newVector = A2(
							$ianmackenzie$elm_geometry$Vector2d$plus,
							A2($ianmackenzie$elm_geometry$Vector2d$from, dragStart, offset),
							options.lastVector);
						var newOptions = A2(
							$author$project$Tools$CurveFormer$makeCurveIfPossible,
							track,
							_Utils_update(
								options,
								{
									referencePoint: _Utils_eq(options.referencePoint, $elm$core$Maybe$Nothing) ? $elm$core$Maybe$Just(
										A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree)) : options.referencePoint,
									vector: newVector
								}));
						return _Utils_Tuple2(
							newOptions,
							A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
					}
				case 'DraggerRelease':
					var track = _v0.a.a;
					var newOptions = _Utils_update(
						options,
						{dragging: $elm$core$Maybe$Nothing, lastVector: options.vector});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				case 'DraggerReset':
					var track = _v0.a.a;
					var _v2 = _v0.b;
					var newOptions = _Utils_update(
						options,
						{dragging: $elm$core$Maybe$Nothing, lastVector: $ianmackenzie$elm_geometry$Vector2d$zero, referencePoint: $elm$core$Maybe$Nothing, vector: $ianmackenzie$elm_geometry$Vector2d$zero});
					return _Utils_Tuple2(
						newOptions,
						A3($author$project$Tools$CurveFormer$previewActions, newOptions, previewColour, track));
				default:
					var track = _v0.a.a;
					var _v3 = _v0.b;
					var undoInfo = A2(
						$author$project$TrackLoaded$undoInfoWithWholeTrackDefault,
						$author$project$Actions$CurveFormerApplyWithOptions(options),
						track);
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								undoInfo.action,
								$author$project$Actions$TrackHasChanged,
								$author$project$Actions$WithUndo(undoInfo)
							]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$DeletePointOrPoints = F2(
	function (a, b) {
		return {$: 'DeletePointOrPoints', a: a, b: b};
	});
var $author$project$Tools$DeletePoints$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			var track = _v0.a.a;
			var _v1 = _v0.b;
			var _v2 = $author$project$TrackLoaded$getRangeFromMarkers(track);
			var fromStart = _v2.a;
			var fromEnd = _v2.b;
			var undoInfo = A2(
				$author$project$TrackLoaded$undoInfoWithSinglePointDefault,
				A2($author$project$Actions$DeletePointOrPoints, fromStart, fromEnd),
				track);
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$WithUndo(undoInfo),
						undoInfo.action,
						$author$project$Actions$TrackHasChanged
					]));
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$Autofix = function (a) {
	return {$: 'Autofix', a: a};
};
var $author$project$Actions$WidenBend = F2(
	function (a, b) {
		return {$: 'WidenBend', a: a, b: b};
	});
var $ianmackenzie$elm_units$Quantity$greaterThanOrEqualToZero = function (_v0) {
	var x = _v0.a;
	return x >= 0;
};
var $author$project$Tools$DirectionChanges$update = F4(
	function (msg, options, previewColour, track) {
		var undoInfo = function (action) {
			return A2($author$project$TrackLoaded$undoInfoWholeTrack, action, track);
		};
		switch (msg.$) {
			case 'SetMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{bendBreaches: _List_Nil, mode: mode, singlePointBreaches: _List_Nil});
				var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
				return _Utils_Tuple2(
					populatedOptions,
					A3($author$project$Tools$DirectionChanges$actions, populatedOptions, previewColour, track));
			case 'SetResultMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{resultMode: mode});
				return _Utils_Tuple2(newOptions, _List_Nil);
			case 'ViewNext':
				var _v1 = options.mode;
				if (_v1.$ === 'DirectionChangeAbrupt') {
					var breachIndex = A2(
						$elm$core$Basics$min,
						$elm$core$List$length(options.singlePointBreaches) - 1,
						options.currentPointBreach + 1);
					var newOptions = _Utils_update(
						options,
						{currentPointBreach: breachIndex});
					var _v2 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							0,
							$ianmackenzie$elm_units$Angle$degrees(0)),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.singlePointBreaches));
					var position = _v2.a;
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$MapCenterOnCurrent
							]));
				} else {
					var breachIndex = A2(
						$elm$core$Basics$min,
						$elm$core$List$length(options.bendBreaches) - 1,
						options.currentBendBreach + 1);
					var newOptions = _Utils_update(
						options,
						{currentBendBreach: breachIndex});
					var _v3 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							_List_fromArray(
								[0]),
							$ianmackenzie$elm_units$Quantity$zero),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.bendBreaches));
					var points = _v3.a;
					if (!points.b) {
						return _Utils_Tuple2(newOptions, _List_Nil);
					} else {
						var position = points.a;
						return _Utils_Tuple2(
							newOptions,
							_List_fromArray(
								[
									$author$project$Actions$SetCurrent(position),
									$author$project$Actions$MapCenterOnCurrent
								]));
					}
				}
			case 'ViewPrevious':
				var _v5 = options.mode;
				if (_v5.$ === 'DirectionChangeAbrupt') {
					var breachIndex = A2($elm$core$Basics$max, 0, options.currentPointBreach - 1);
					var newOptions = _Utils_update(
						options,
						{currentPointBreach: breachIndex});
					var _v6 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							0,
							$ianmackenzie$elm_units$Angle$degrees(0)),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.singlePointBreaches));
					var position = _v6.a;
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$MapCenterOnCurrent
							]));
				} else {
					var breachIndex = A2($elm$core$Basics$max, 0, options.currentBendBreach - 1);
					var newOptions = _Utils_update(
						options,
						{currentBendBreach: breachIndex});
					var _v7 = A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							_List_fromArray(
								[0]),
							$ianmackenzie$elm_units$Quantity$zero),
						A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.bendBreaches));
					var points = _v7.a;
					if (!points.b) {
						return _Utils_Tuple2(newOptions, _List_Nil);
					} else {
						var position = points.a;
						return _Utils_Tuple2(
							newOptions,
							_List_fromArray(
								[
									$author$project$Actions$SetCurrent(position),
									$author$project$Actions$MapCenterOnCurrent
								]));
					}
				}
			case 'SetCurrentPosition':
				var position = msg.a;
				var _v9 = options.mode;
				if (_v9.$ === 'DirectionChangeAbrupt') {
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$MapCenterOnCurrent
							]));
				} else {
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$MapCenterOnCurrent
							]));
				}
			case 'SetThreshold':
				var angle = msg.a;
				var newOptions = _Utils_update(
					options,
					{threshold: angle});
				var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
				return _Utils_Tuple2(
					populatedOptions,
					A3($author$project$Tools$DirectionChanges$actions, options, previewColour, track));
			case 'SetRadius':
				var radius = msg.a;
				var newOptions = _Utils_update(
					options,
					{radius: radius});
				var populatedOptions = A2($author$project$Tools$DirectionChanges$findDirectionChanges, newOptions, track.trackTree);
				return _Utils_Tuple2(
					populatedOptions,
					A3($author$project$Tools$DirectionChanges$actions, options, previewColour, track));
			case 'Autofix':
				var action = $author$project$Actions$Autofix(
					A2($elm$core$List$map, $elm$core$Tuple$first, options.singlePointBreaches));
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(
							undoInfo(action)),
							action,
							$author$project$Actions$TrackHasChanged
						]));
			case 'NudgeOne':
				var _v10 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(_List_Nil, $ianmackenzie$elm_units$Quantity$zero),
					A2($elm_community$list_extra$List$Extra$getAt, options.currentBendBreach, options.bendBreaches));
				var points = _v10.a;
				var estimatedRadius = _v10.b;
				var desired = $ianmackenzie$elm_units$Quantity$greaterThanOrEqualToZero(estimatedRadius) ? options.radius : $ianmackenzie$elm_units$Quantity$negate(options.radius);
				var action = A2(
					$author$project$Actions$WidenBend,
					points,
					A2($ianmackenzie$elm_units$Quantity$minus, desired, estimatedRadius));
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(
							undoInfo(action)),
							action,
							$author$project$Actions$TrackHasChanged
						]));
			default:
				var id = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, id, tag)
						]));
		}
	});
var $author$project$Actions$ReRender = {$: 'ReRender'};
var $author$project$Tools$DisplaySettingsOptions$encodeCurtain = function (style) {
	return $elm$json$Json$Encode$string(
		function () {
			switch (style.$) {
				case 'NoCurtain':
					return 'NoCurtain';
				case 'PlainCurtain':
					return 'PlainCurtain';
				default:
					return 'PastelCurtain';
			}
		}());
};
var $author$project$Tools$DisplaySettingsOptions$encode = function (options) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'surface',
				$elm$json$Json$Encode$bool(options.roadSurface)),
				_Utils_Tuple2(
				'ground',
				$elm$json$Json$Encode$bool(options.groundPlane)),
				_Utils_Tuple2(
				'centre',
				$elm$json$Json$Encode$bool(options.centreLine)),
				_Utils_Tuple2(
				'curtain',
				$author$project$Tools$DisplaySettingsOptions$encodeCurtain(options.curtainStyle))
			]));
};
var $author$project$Tools$DisplaySettings$update = F2(
	function (msg, options) {
		var actions = function (newOptions) {
			return _List_fromArray(
				[
					A2(
					$author$project$Actions$StoreLocally,
					'visuals',
					$author$project$Tools$DisplaySettingsOptions$encode(newOptions)),
					$author$project$Actions$ReRender
				]);
		};
		switch (msg.$) {
			case 'SetCentreLine':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{centreLine: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetPlaceNames':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{placeNames: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetLandUse':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{landUse: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetGroundPlane':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{groundPlane: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetRoadSurface':
				var state = msg.a;
				var newOptions = _Utils_update(
					options,
					{roadSurface: state});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetCurtainStyle':
				var curtainStyle = msg.a;
				var newOptions = _Utils_update(
					options,
					{curtainStyle: curtainStyle});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			case 'SetTerrainFineness':
				var terrain = msg.a;
				var newOptions = _Utils_update(
					options,
					{terrainFineness: terrain});
				return _Utils_Tuple2(
					newOptions,
					actions(newOptions));
			default:
				var tool = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, tool, tag)
						]));
		}
	});
var $author$project$Actions$RedoUndoneAction = {$: 'RedoUndoneAction'};
var $author$project$Actions$SetMarker = function (a) {
	return {$: 'SetMarker', a: a};
};
var $author$project$Actions$UndoLastAction = {$: 'UndoLastAction'};
var $author$project$Tools$Essentials$update = F4(
	function (msg, options, previewColour, hasTrack) {
		if (hasTrack.$ === 'Nothing') {
			return _Utils_Tuple2(options, _List_Nil);
		} else {
			var track = hasTrack.a;
			var restrictToTrack = F2(
				function (value, increment) {
					return A3(
						$elm$core$Basics$clamp,
						0,
						$author$project$DomainModel$skipCount(track.trackTree),
						value + increment);
				});
			var orange = track.currentPosition;
			switch (msg.$) {
				case 'PointerForwardOne':
					var position = A2(restrictToTrack, orange, 1);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$PointerChange
							]));
				case 'PointerBackwardOne':
					var position = A2(restrictToTrack, orange, -1);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$PointerChange
							]));
				case 'PointerFastForward':
					var position = A2(
						restrictToTrack,
						orange,
						($author$project$DomainModel$skipCount(track.trackTree) / 20) | 0);
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$PointerChange
							]));
				case 'PointerRewind':
					var position = A2(
						restrictToTrack,
						orange,
						-(($author$project$DomainModel$skipCount(track.trackTree) / 20) | 0));
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{orange: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(position),
								$author$project$Actions$PointerChange
							]));
				case 'DropMarker':
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								purple: $elm$core$Maybe$Just(orange)
							}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(
								$elm$core$Maybe$Just(orange)),
								$author$project$Actions$PointerChange
							]));
				case 'LiftMarker':
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: $elm$core$Maybe$Nothing}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker($elm$core$Maybe$Nothing),
								$author$project$Actions$PointerChange
							]));
				case 'MarkerForwardOne':
					var position = function () {
						var _v2 = options.purple;
						if (_v2.$ === 'Just') {
							var something = _v2.a;
							return $elm$core$Maybe$Just(
								A2(restrictToTrack, something, 1));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(position),
								$author$project$Actions$PointerChange
							]));
				case 'MarkerBackwardOne':
					var position = function () {
						var _v3 = options.purple;
						if (_v3.$ === 'Just') {
							var something = _v3.a;
							return $elm$core$Maybe$Just(
								A2(restrictToTrack, something, -1));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{purple: position}),
						_List_fromArray(
							[
								$author$project$Actions$SetMarker(position),
								$author$project$Actions$PointerChange
							]));
				case 'Undo':
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[$author$project$Actions$UndoLastAction, $author$project$Actions$TrackHasChanged]));
				default:
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[$author$project$Actions$RedoUndoneAction, $author$project$Actions$TrackHasChanged]));
			}
		}
	});
var $author$project$Tools$Flythrough$AwaitingFirstTick = {$: 'AwaitingFirstTick'};
var $author$project$Tools$Flythrough$Paused = {$: 'Paused'};
var $author$project$Actions$StartFlythoughTicks = {$: 'StartFlythoughTicks'};
var $author$project$Tools$Flythrough$prepareFlythrough = F2(
	function (track, options) {
		var currentRoad = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree));
		var eyePoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, $author$project$Tools$Flythrough$eyeHeight),
			currentRoad.startPoint.space);
		var focusPoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, $author$project$Tools$Flythrough$eyeHeight),
			currentRoad.endPoint.space);
		return $elm$core$Maybe$Just(
			{
				cameraPosition: eyePoint,
				focusPoint: focusPoint,
				gradient: currentRoad.gradientAtStart,
				lastUpdated: $elm$time$Time$millisToPosix(0),
				metresFromRouteStart: A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
				running: $author$project$Tools$Flythrough$AwaitingFirstTick
			});
	});
var $author$project$Tools$Flythrough$startFlythrough = F2(
	function (track, options) {
		var _v0 = A2($author$project$Tools$Flythrough$prepareFlythrough, track, options);
		if (_v0.$ === 'Just') {
			var flying = _v0.a;
			return _Utils_update(
				options,
				{
					flythrough: $elm$core$Maybe$Just(flying),
					savedCurrentPosition: track.currentPosition
				});
		} else {
			return options;
		}
	});
var $author$project$Tools$Flythrough$update = F3(
	function (options, msg, track) {
		switch (msg.$) {
			case 'SetFlythroughSpeed':
				var speed = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{flythroughSpeed: speed}),
					_List_Nil);
			case 'StartFlythrough':
				return _Utils_Tuple2(
					A2($author$project$Tools$Flythrough$startFlythrough, track, options),
					_List_fromArray(
						[$author$project$Actions$StartFlythoughTicks]));
			case 'PauseFlythrough':
				var _v1 = options.flythrough;
				if (_v1.$ === 'Just') {
					var flythrough = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								flythrough: $elm$core$Maybe$Just(
									_Utils_update(
										flythrough,
										{running: $author$project$Tools$Flythrough$Paused}))
							}),
						_List_fromArray(
							[$author$project$Actions$StopFlythroughTicks]));
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ResumeFlythrough':
				var _v2 = options.flythrough;
				if (_v2.$ === 'Just') {
					var flythrough = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								flythrough: $elm$core$Maybe$Just(
									_Utils_update(
										flythrough,
										{running: $author$project$Tools$Flythrough$AwaitingFirstTick}))
							}),
						_List_fromArray(
							[$author$project$Actions$StartFlythoughTicks]));
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			default:
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{flythrough: $elm$core$Maybe$Nothing}),
					_List_fromArray(
						[
							$author$project$Actions$StopFlythroughTicks,
							$author$project$Actions$SetCurrent(options.savedCurrentPosition)
						]));
		}
	});
var $author$project$Tools$GradientProblems$findSteepClimbs = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v1) {
				var index = _v1.a;
				var outputs = _v1.b;
				return (_Utils_cmp(road.gradientAtStart, options.threshold) > 0) ? _Utils_Tuple2(
					index + 1,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(index, road.gradientAtStart),
						outputs)) : _Utils_Tuple2(index + 1, outputs);
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple2(0, _List_Nil));
		var breaches = _v0.b;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$findSteepDescents = F2(
	function (options, tree) {
		var foldFn = F2(
			function (road, _v1) {
				var index = _v1.a;
				var outputs = _v1.b;
				return (_Utils_cmp(-road.gradientAtStart, options.threshold) > 0) ? _Utils_Tuple2(
					index + 1,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(index, road.gradientAtStart),
						outputs)) : _Utils_Tuple2(index + 1, outputs);
			});
		var _v0 = A7(
			$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
			0,
			$author$project$DomainModel$skipCount(tree),
			$elm$core$Basics$always($elm$core$Maybe$Nothing),
			0,
			tree,
			foldFn,
			_Utils_Tuple2(0, _List_Nil));
		var breaches = _v0.b;
		return _Utils_update(
			options,
			{
				breaches: $elm$core$List$reverse(breaches),
				currentBreach: 0
			});
	});
var $author$project$Tools$GradientProblems$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var populateOptions = F2(
			function (opts, track) {
				var _v6 = opts.mode;
				switch (_v6.$) {
					case 'AbruptChange':
						return A2($author$project$Tools$GradientProblems$findAbruptDirectionChanges, opts, track.trackTree);
					case 'SteepClimb':
						return A2($author$project$Tools$GradientProblems$findSteepClimbs, opts, track.trackTree);
					default:
						return A2($author$project$Tools$GradientProblems$findSteepDescents, opts, track.trackTree);
				}
			});
		var actions = F2(
			function (opts, track) {
				return _List_fromArray(
					[
						$author$project$Actions$ShowPreview(
						{
							colour: previewColour,
							points: A2(
								$author$project$TrackLoaded$buildPreview,
								A2($elm$core$List$map, $elm$core$Tuple$first, opts.breaches),
								track.trackTree),
							shape: $author$project$PreviewData$PreviewCircle,
							tag: 'ridge'
						})
					]);
			});
		switch (msg.$) {
			case 'ViewNext':
				var breachIndex = A2(
					$elm$core$Basics$min,
					$elm$core$List$length(options.breaches) - 1,
					options.currentBreach + 1);
				var newOptions = _Utils_update(
					options,
					{currentBreach: breachIndex});
				var _v1 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
				var position = _v1.a;
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position),
							$author$project$Actions$MapCenterOnCurrent
						]));
			case 'ViewPrevious':
				var breachIndex = A2($elm$core$Basics$max, 0, options.currentBreach - 1);
				var newOptions = _Utils_update(
					options,
					{currentBreach: breachIndex});
				var _v2 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2($elm_community$list_extra$List$Extra$getAt, breachIndex, newOptions.breaches));
				var position = _v2.a;
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position),
							$author$project$Actions$MapCenterOnCurrent
						]));
			case 'SetCurrentPosition':
				var position = msg.a;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position),
							$author$project$Actions$MapCenterOnCurrent
						]));
			case 'SetThreshold':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{breaches: _List_Nil, threshold: value});
				if (hasTrack.$ === 'Just') {
					var track = hasTrack.a;
					var populatedOptions = A2(populateOptions, newOptions, track);
					return _Utils_Tuple2(
						populatedOptions,
						A2(actions, populatedOptions, track));
				} else {
					return _Utils_Tuple2(newOptions, _List_Nil);
				}
			case 'SetResultMode':
				var mode = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{resultMode: mode}),
					_List_Nil);
			case 'SetMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{breaches: _List_Nil, mode: mode});
				if (hasTrack.$ === 'Just') {
					var track = hasTrack.a;
					var populatedOptions = A2(populateOptions, newOptions, track);
					return _Utils_Tuple2(
						populatedOptions,
						A2(actions, populatedOptions, track));
				} else {
					return _Utils_Tuple2(newOptions, _List_Nil);
				}
			case 'Autofix':
				if (hasTrack.$ === 'Just') {
					var track = hasTrack.a;
					var undoInfo = A2(
						$author$project$TrackLoaded$undoInfoWholeTrack,
						$author$project$Actions$Autofix(
							A2($elm$core$List$map, $elm$core$Tuple$first, options.breaches)),
						track);
					return _Utils_Tuple2(
						options,
						_List_fromArray(
							[
								$author$project$Actions$WithUndo(undoInfo),
								undoInfo.action,
								$author$project$Actions$TrackHasChanged
							]));
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			default:
				var id = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, id, tag)
						]));
		}
	});
var $author$project$Actions$CombineNearbyPoints = {$: 'CombineNearbyPoints'};
var $author$project$Actions$ExitRoutePlanning = {$: 'ExitRoutePlanning'};
var $author$project$Actions$StartRoutePlanning = {$: 'StartRoutePlanning'};
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			var head = A2($elm$core$List$take, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					head,
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $author$project$Tools$Graph$update = F4(
	function (msg, options, track, wrapper) {
		var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, $author$project$Actions$CombineNearbyPoints, track);
		switch (msg.$) {
			case 'AdoptNewTrack':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							$author$project$Actions$CombineNearbyPoints,
							$author$project$Actions$TrackHasChanged
						]));
			case 'GraphAnalyse':
				return _Utils_Tuple2(
					options,
					$ianmackenzie$elm_units$Quantity$greaterThanZero(options.matchingTolerance) ? _List_fromArray(
						[
							$author$project$Actions$CombineNearbyPoints,
							$author$project$Actions$StartRoutePlanning,
							$author$project$Actions$HidePreview('graph')
						]) : _List_fromArray(
						[
							$author$project$Actions$StartRoutePlanning,
							$author$project$Actions$HidePreview('graph')
						]));
			case 'RevertToTrack':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							analyzed: false,
							editingTrack: 0,
							graph: function () {
								var _v1 = options.originalTrack;
								if (_v1.$ === 'Just') {
									var original = _v1.a;
									return $author$project$Tools$Graph$trivialGraph(original);
								} else {
									return options.graph;
								}
							}(),
							originalTrack: $elm$core$Maybe$Nothing,
							selectedTraversal: 0
						}),
					_List_fromArray(
						[
							$author$project$Actions$ChangeActiveTrack(0),
							$author$project$Actions$TrackHasChanged
						]));
			case 'HighlightTraversal':
				var traversal = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{selectedTraversal: traversal}),
					_List_Nil);
			case 'RemoveLastTraversal':
				var graph = options.graph;
				var newGraph = _Utils_update(
					graph,
					{
						userRoute: A2(
							$elm$core$List$take,
							$elm$core$List$length(graph.userRoute) - 1,
							graph.userRoute)
					});
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							graph: newGraph,
							selectedTraversal: $elm$core$List$length(newGraph.userRoute) - 1
						}),
					_List_Nil);
			case 'FlipDirection':
				var i = msg.a;
				var graph = options.graph;
				var newGraph = _Utils_update(
					graph,
					{
						userRoute: A3(
							$elm_community$list_extra$List$Extra$updateAt,
							i,
							function (t) {
								return _Utils_update(
									t,
									{
										direction: function () {
											var _v2 = t.direction;
											if (_v2.$ === 'Natural') {
												return $author$project$Tools$GraphOptions$Reverse;
											} else {
												return $author$project$Tools$GraphOptions$Natural;
											}
										}()
									});
							},
							graph.userRoute)
					});
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							graph: newGraph,
							selectedTraversal: A2(
								$elm$core$Basics$min,
								options.selectedTraversal,
								$elm$core$List$length(newGraph.userRoute) - 1)
						}),
					_List_Nil);
			case 'SetTolerance':
				var tolerance = msg.a;
				return A3($author$project$Tools$Graph$lookForClusters, options, tolerance, track);
			case 'CentreLineOffset':
				var _float = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{centreLineOffset: _float}),
					_List_Nil);
			case 'MinimumRadius':
				var _float = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{minimumRadiusAtPlaces: _float}),
					_List_Nil);
			case 'ConvertFromGraph':
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$MakeRouteFromGraph,
							$author$project$Actions$TrackHasChanged,
							$author$project$Actions$ExitRoutePlanning,
							$author$project$Actions$HidePreview('graph')
						]));
			case 'DisplayInfo':
				var tool = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, tool, tag)
						]));
			case 'ClearRoute':
				var graph = options.graph;
				var newGraph = _Utils_update(
					graph,
					{userRoute: _List_Nil});
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{graph: newGraph, selectedTraversal: -1}),
					_List_Nil);
			default:
				var _v3 = options.graphUndos;
				if (_v3.b) {
					var lastVersion = _v3.a;
					var olderVersions = _v3.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{graph: lastVersion, graphUndos: olderVersions}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
		}
	});
var $author$project$Actions$ApplyInterpolateWithOptions = function (a) {
	return {$: 'ApplyInterpolateWithOptions', a: a};
};
var $author$project$Tools$Interpolate$update = F4(
	function (msg, options, previewColour, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'SetSpacing') {
				var track = _v0.a.a;
				var spacing = _v0.b.a;
				var newOptions = _Utils_update(
					options,
					{
						minimumSpacing: $ianmackenzie$elm_units$Length$meters(spacing)
					});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Interpolate$actions, newOptions, previewColour, track));
			} else {
				var track = _v0.a.a;
				var _v1 = _v0.b;
				var ensureCorrectExtent = _Utils_update(
					options,
					{
						extent: function () {
							var _v2 = track.markerPosition;
							if (_v2.$ === 'Just') {
								return $author$project$Tools$InterpolateOptions$ExtentIsRange;
							} else {
								return $author$project$Tools$InterpolateOptions$ExtentIsTrack;
							}
						}()
					});
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWithWholeTrackDefault,
					$author$project$Actions$ApplyInterpolateWithOptions(ensureCorrectExtent),
					track);
				return _Utils_Tuple2(
					ensureCorrectExtent,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Tools$Intersections$update = F3(
	function (msg, options, wrap) {
		switch (msg.$) {
			case 'SetResultMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{resultMode: mode});
				return _Utils_Tuple2(newOptions, _List_Nil);
			case 'ViewNext':
				var index = A2(
					$elm$core$Basics$min,
					$elm$core$List$length(options.features) - 1,
					options.current + 1);
				var newOptions = _Utils_update(
					options,
					{current: index});
				var position = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.thisSegment;
						},
						A2($elm_community$list_extra$List$Extra$getAt, index, options.features)));
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			case 'ViewPrevious':
				var index = A2($elm$core$Basics$max, 0, options.current + 1);
				var newOptions = _Utils_update(
					options,
					{current: index});
				var position = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.thisSegment;
						},
						A2($elm_community$list_extra$List$Extra$getAt, index, options.features)));
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			case 'SetCurrentPosition':
				var position = msg.a;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$SetCurrent(position)
						]));
			default:
				var tool = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, tool, tag)
						]));
		}
	});
var $author$project$Tools$LandUse$update = F3(
	function (msg, wrapper, options) {
		var mode = msg.a;
		return _Utils_Tuple2(
			_Utils_update(
				options,
				{mode: mode}),
			_List_Nil);
	});
var $author$project$Actions$MoveAndStretchWithOptions = function (a) {
	return {$: 'MoveAndStretchWithOptions', a: a};
};
var $author$project$Tools$MoveAndStretchOptions$Stretch = function (a) {
	return {$: 'Stretch', a: a};
};
var $ianmackenzie$elm_geometry$Vector2d$components = function (_v0) {
	var v = _v0.a;
	return _Utils_Tuple2(
		$ianmackenzie$elm_units$Quantity$Quantity(v.x),
		$ianmackenzie$elm_units$Quantity$Quantity(v.y));
};
var $author$project$Tools$MoveAndStretch$movePoints = F2(
	function (options, region) {
		var zShift = options.heightSliderSetting;
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$components(options.vector);
		var xShift = _v0.a;
		var yShift = _v0.b;
		var translation = function (pt) {
			return {
				space: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A3(
						$ianmackenzie$elm_geometry$Vector3d$xyz,
						xShift,
						$ianmackenzie$elm_units$Quantity$negate(yShift),
						zShift),
					pt.space),
				time: pt.time
			};
		};
		return A2($elm$core$List$map, translation, region);
	});
var $author$project$Tools$MoveAndStretch$stretchPoints = F3(
	function (options, drag, track) {
		var zShiftMax = A3($ianmackenzie$elm_geometry$Vector3d$xyz, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, options.heightSliderSetting);
		var stretcher = A2($author$project$DomainModel$earthPointFromIndex, drag, track.trackTree).space;
		var distanceAlong = F2(
			function (maybeAxis, p) {
				if (maybeAxis.$ === 'Just') {
					var axis = maybeAxis.a;
					return A2($ianmackenzie$elm_geometry$Point3d$signedDistanceAlong, axis, p);
				} else {
					return $ianmackenzie$elm_units$Quantity$zero;
				}
			});
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$components(options.vector);
		var xShift = _v0.a;
		var yShift = _v0.b;
		var horizontalTranslation = A3(
			$ianmackenzie$elm_geometry$Vector3d$xyz,
			xShift,
			$ianmackenzie$elm_units$Quantity$negate(yShift),
			$ianmackenzie$elm_units$Length$meters(0));
		var _v1 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v1.a;
		var fromEnd = _v1.b;
		var farEnd = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var _v2 = _Utils_Tuple2(
			A2($elm$core$List$range, fromStart, drag - 1),
			A2($elm$core$List$range, drag, farEnd));
		var firstPart = _v2.a;
		var secondPart = _v2.b;
		var _v3 = _Utils_Tuple3(
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, drag, track.trackTree),
			A2($author$project$DomainModel$distanceFromIndex, farEnd, track.trackTree));
		var trackDistanceToNearAnchor = _v3.a;
		var trackDistanceToStretcher = _v3.b;
		var trackDistanceToFarAnchor = _v3.c;
		var _v4 = _Utils_Tuple2(
			A2($ianmackenzie$elm_units$Quantity$minus, trackDistanceToNearAnchor, trackDistanceToStretcher),
			A2($ianmackenzie$elm_units$Quantity$minus, trackDistanceToStretcher, trackDistanceToFarAnchor));
		var firstPartTrackDistance = _v4.a;
		var secondPartTrackDistance = _v4.b;
		var _v5 = _Utils_Tuple2(
			A2($author$project$DomainModel$earthPointFromIndex, fromStart, track.trackTree),
			A2($author$project$DomainModel$earthPointFromIndex, farEnd, track.trackTree));
		var startAnchor = _v5.a;
		var endAnchor = _v5.b;
		var _v6 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, startAnchor.space, stretcher),
			A2($ianmackenzie$elm_geometry$Axis3d$throughPoints, endAnchor.space, stretcher));
		var firstPartAxis = _v6.a;
		var secondPartAxis = _v6.b;
		var _v7 = _Utils_Tuple2(
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, startAnchor.space, stretcher),
			A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, endAnchor.space, stretcher));
		var firstPartDistance = _v7.a;
		var secondPartDistance = _v7.b;
		var adjustRelativeToStart = function (ptIndex) {
			var trackDistance = A2($author$project$DomainModel$distanceFromIndex, ptIndex, track.trackTree);
			var pt = A2($author$project$DomainModel$earthPointFromIndex, ptIndex, track.trackTree);
			var proportionalDistance = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				A2($ianmackenzie$elm_units$Quantity$minus, trackDistanceToNearAnchor, trackDistance),
				firstPartTrackDistance);
			var proportion = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				A2(distanceAlong, firstPartAxis, pt.space),
				firstPartDistance);
			return {
				space: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, proportionalDistance, zShiftMax),
					A2(
						$ianmackenzie$elm_geometry$Point3d$translateBy,
						A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, proportion, horizontalTranslation),
						pt.space)),
				time: pt.time
			};
		};
		var adjustRelativeToEnd = function (ptIndex) {
			var trackDistance = A2($author$project$DomainModel$distanceFromIndex, ptIndex, track.trackTree);
			var pt = A2($author$project$DomainModel$earthPointFromIndex, ptIndex, track.trackTree);
			var proportionalDistance = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				A2($ianmackenzie$elm_units$Quantity$minus, trackDistance, trackDistanceToFarAnchor),
				secondPartTrackDistance);
			var proportion = A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				A2(distanceAlong, secondPartAxis, pt.space),
				secondPartDistance);
			return {
				space: A2(
					$ianmackenzie$elm_geometry$Point3d$translateBy,
					A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, proportionalDistance, zShiftMax),
					A2(
						$ianmackenzie$elm_geometry$Point3d$translateBy,
						A2($ianmackenzie$elm_geometry$Vector3d$scaleBy, proportion, horizontalTranslation),
						pt.space)),
				time: pt.time
			};
		};
		var _v8 = _Utils_Tuple2(
			A2($elm$core$List$map, adjustRelativeToStart, firstPart),
			A2($elm$core$List$map, adjustRelativeToEnd, secondPart));
		var adjustedFirstPoints = _v8.a;
		var adjustedSecondPoints = _v8.b;
		return _Utils_ap(adjustedFirstPoints, adjustedSecondPoints);
	});
var $author$project$Tools$MoveAndStretch$computeNewPoints = F2(
	function (options, track) {
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var newPoints = function () {
			var _v1 = options.mode;
			if (_v1.$ === 'Translate') {
				var currentPoints = A2(
					$elm$core$List$map,
					$elm$core$Tuple$first,
					A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree));
				return A2($author$project$Tools$MoveAndStretch$movePoints, options, currentPoints);
			} else {
				var drag = _v1.a;
				return A3($author$project$Tools$MoveAndStretch$stretchPoints, options, drag, track);
			}
		}();
		return A3(
			$author$project$TrackLoaded$asPreviewPoints,
			track,
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			newPoints);
	});
var $ianmackenzie$elm_units$Length$millimeters = function (numMillimeters) {
	return $ianmackenzie$elm_units$Length$meters(0.001 * numMillimeters);
};
var $ianmackenzie$elm_units$Length$millimeter = $ianmackenzie$elm_units$Length$millimeters(1);
var $author$project$Tools$MoveAndStretch$update = F5(
	function (message, options, wrapper, previewColour, track) {
		switch (message.$) {
			case 'DraggerGrab':
				var offset = message.a;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{
							dragging: $elm$core$Maybe$Just(offset)
						}),
					_List_Nil);
			case 'DraggerMove':
				var offset = message.a;
				var _v1 = options.dragging;
				if (_v1.$ === 'Nothing') {
					return _Utils_Tuple2(options, _List_Nil);
				} else {
					var dragStart = _v1.a;
					var newVector = A2(
						$ianmackenzie$elm_geometry$Vector2d$plus,
						A2($ianmackenzie$elm_geometry$Vector2d$from, dragStart, offset),
						options.lastVector);
					var newOptions = _Utils_update(
						options,
						{vector: newVector});
					var preview = A2($author$project$Tools$MoveAndStretch$computeNewPoints, newOptions, track);
					var optionsWithPreview = _Utils_update(
						newOptions,
						{preview: preview});
					return _Utils_Tuple2(
						optionsWithPreview,
						A3($author$project$Tools$MoveAndStretch$previewActions, optionsWithPreview, previewColour, track));
				}
			case 'DraggerRelease':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{dragging: $elm$core$Maybe$Nothing, lastVector: options.vector}),
					_List_Nil);
			case 'DraggerModeToggle':
				var newOptions = _Utils_update(
					options,
					{
						mode: function () {
							var _v2 = options.mode;
							if (_v2.$ === 'Translate') {
								var _v3 = $author$project$TrackLoaded$getRangeFromMarkers(track);
								var fromStart = _v3.a;
								return $author$project$Tools$MoveAndStretchOptions$Stretch(fromStart + 1);
							} else {
								return $author$project$Tools$MoveAndStretchOptions$Translate;
							}
						}()
					});
				var preview = A2($author$project$Tools$MoveAndStretch$computeNewPoints, newOptions, track);
				var optionsWithPreview = _Utils_update(
					newOptions,
					{preview: preview});
				return _Utils_Tuple2(
					optionsWithPreview,
					A3($author$project$Tools$MoveAndStretch$previewActions, optionsWithPreview, previewColour, track));
			case 'DraggerReset':
				var newOptions = _Utils_update(
					options,
					{dragging: $elm$core$Maybe$Nothing, heightSliderSetting: $ianmackenzie$elm_units$Quantity$zero, preview: _List_Nil, vector: $ianmackenzie$elm_geometry$Vector2d$zero});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Actions$HidePreview('stretch'),
							$author$project$Actions$HidePreview('stretchMark')
						]));
			case 'DraggerMarker':
				var idx = message.a;
				var newOptions = _Utils_update(
					options,
					{
						mode: $author$project$Tools$MoveAndStretchOptions$Stretch(idx)
					});
				var preview = A2($author$project$Tools$MoveAndStretch$computeNewPoints, newOptions, track);
				var optionsWithPreview = _Utils_update(
					newOptions,
					{preview: preview});
				return _Utils_Tuple2(
					optionsWithPreview,
					A3($author$project$Tools$MoveAndStretch$previewActions, optionsWithPreview, previewColour, track));
			case 'DraggerApply':
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWithSinglePointDefault,
					$author$project$Actions$MoveAndStretchWithOptions(options),
					track);
				var _v4 = $author$project$TrackLoaded$getRangeFromMarkers(track);
				var fromStart = _v4.a;
				var fromEnd = _v4.b;
				var oldPoints = A2(
					$elm$core$List$map,
					$elm$core$Tuple$second,
					A3($author$project$DomainModel$extractPointsInRange, fromStart, fromEnd, track.trackTree));
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged,
							$author$project$Actions$HidePreview('stretch'),
							$author$project$Actions$HidePreview('stretchMark')
						]));
			case 'StretchHeight':
				var x = message.a;
				var newOptions = _Utils_update(
					options,
					{
						heightSliderSetting: $ianmackenzie$elm_units$Length$meters(x)
					});
				var preview = A2($author$project$Tools$MoveAndStretch$computeNewPoints, newOptions, track);
				var optionsWithPreview = _Utils_update(
					newOptions,
					{preview: preview});
				return _Utils_Tuple2(
					optionsWithPreview,
					A3($author$project$Tools$MoveAndStretch$previewActions, optionsWithPreview, previewColour, track));
			default:
				var value = message.a;
				var newOptions = A3($ianmackenzie$elm_units$Quantity$equalWithin, $ianmackenzie$elm_units$Length$millimeter, $ianmackenzie$elm_units$Quantity$zero, value) ? _Utils_update(
					options,
					{heightSliderSetting: $ianmackenzie$elm_units$Quantity$zero}) : _Utils_update(
					options,
					{
						heightSliderSetting: A2($ianmackenzie$elm_units$Quantity$plus, value, options.heightSliderSetting)
					});
				var preview = A2($author$project$Tools$MoveAndStretch$computeNewPoints, newOptions, track);
				var optionsWithPreview = _Utils_update(
					newOptions,
					{preview: preview});
				return _Utils_Tuple2(
					optionsWithPreview,
					A3($author$project$Tools$MoveAndStretch$previewActions, optionsWithPreview, previewColour, track));
		}
	});
var $author$project$Actions$AddFullTrackToMapForElevations = {$: 'AddFullTrackToMapForElevations'};
var $author$project$Actions$ApplyRecentre = function (a) {
	return {$: 'ApplyRecentre', a: a};
};
var $author$project$Actions$ApplyRotateAndScale = function (a) {
	return {$: 'ApplyRotateAndScale', a: a};
};
var $author$project$Tools$MoveScaleRotate$update = F4(
	function (msg, settings, previewColour, hasTrack) {
		var makeActions = F2(
			function (actionCode, track) {
				var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, actionCode, track);
				return _List_fromArray(
					[
						$author$project$Actions$WithUndo(undoInfo),
						undoInfo.action,
						$author$project$Actions$TrackHasChanged
					]);
			});
		var _v0 = _Utils_Tuple2(msg, hasTrack);
		if (_v0.b.$ === 'Just') {
			switch (_v0.a.$) {
				case 'SetRotateAngle':
					var theta = _v0.a.a;
					var track = _v0.b.a;
					var newSettings = _Utils_update(
						settings,
						{rotateAngle: theta});
					return _Utils_Tuple2(
						newSettings,
						A3($author$project$Tools$MoveScaleRotate$actions, newSettings, previewColour, track));
				case 'SetTrackLength':
					var scale = _v0.a.a;
					var track = _v0.b.a;
					var newSettings = _Utils_update(
						settings,
						{
							desiredTrackLength: $ianmackenzie$elm_units$Length$kilometers(scale)
						});
					return _Utils_Tuple2(
						newSettings,
						A3($author$project$Tools$MoveScaleRotate$actions, newSettings, previewColour, track));
				case 'RotateAndScale':
					var _v1 = _v0.a;
					var track = _v0.b.a;
					return _Utils_Tuple2(
						settings,
						A2(
							makeActions,
							$author$project$Actions$ApplyRotateAndScale(settings),
							track));
				case 'Recentre':
					var _v2 = _v0.a;
					var track = _v0.b.a;
					return _Utils_Tuple2(
						settings,
						_Utils_ap(
							A2(
								makeActions,
								$author$project$Actions$ApplyRecentre(track.lastMapClick),
								track),
							_List_fromArray(
								[
									$author$project$Actions$HidePreview('affine')
								])));
				case 'Zero':
					var _v3 = _v0.a;
					var track = _v0.b.a;
					var newSettings = _Utils_update(
						$author$project$Tools$MoveScaleRotate$defaultOptions,
						{
							desiredTrackLength: $author$project$DomainModel$trueLength(track.trackTree)
						});
					return _Utils_Tuple2(
						newSettings,
						A3($author$project$Tools$MoveScaleRotate$actions, newSettings, previewColour, track));
				default:
					var _v4 = _v0.a;
					var track = _v0.b.a;
					return _Utils_Tuple2(
						settings,
						A2(makeActions, $author$project$Actions$AddFullTrackToMapForElevations, track));
			}
		} else {
			return _Utils_Tuple2(settings, _List_Nil);
		}
	});
var $elm_community$list_extra$List$Extra$removeAt = F2(
	function (index, l) {
		if (index < 0) {
			return l;
		} else {
			var _v0 = A2($elm$core$List$drop, index, l);
			if (!_v0.b) {
				return l;
			} else {
				var rest = _v0.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, l),
					rest);
			}
		}
	});
var $author$project$Tools$NamedSegmentOptions$AutoSegment = {$: 'AutoSegment'};
var $ianmackenzie$elm_units_interval$Quantity$Interval$fromEndpoints = function (givenEndpoints) {
	var _v0 = givenEndpoints;
	var a = _v0.a.a;
	var b = _v0.b.a;
	return (_Utils_cmp(a, b) < 1) ? $ianmackenzie$elm_units_interval$Quantity$Interval$Interval(givenEndpoints) : $ianmackenzie$elm_units_interval$Quantity$Interval$Interval(
		_Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$Quantity(b),
			$ianmackenzie$elm_units$Quantity$Quantity(a)));
};
var $ianmackenzie$elm_units_interval$Quantity$Interval$maxValue = function (_v0) {
	var _v1 = _v0.a;
	var b = _v1.b;
	return b;
};
var $ianmackenzie$elm_units_interval$Quantity$Interval$minValue = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	return a;
};
var $author$project$Tools$NamedSegment$segmentsFromPlaces = F2(
	function (track, options) {
		var withinThreshold = F2(
			function (threshold, candidate) {
				return A2($ianmackenzie$elm_units$Quantity$lessThanOrEqualTo, threshold, candidate.distanceAway);
			});
		var retainedSegments = A2(
			$elm$core$List$filter,
			function (seg) {
				return _Utils_eq(seg.createMode, $author$project$Tools$NamedSegmentOptions$ManualSegment);
			},
			options.namedSegments);
		var padInterval = F2(
			function (padding, interval) {
				return A2(
					$ianmackenzie$elm_units_interval$Quantity$Interval$from,
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						padding,
						$ianmackenzie$elm_units_interval$Quantity$Interval$minValue(interval)),
					A2(
						$ianmackenzie$elm_units$Quantity$plus,
						padding,
						$ianmackenzie$elm_units_interval$Quantity$Interval$maxValue(interval)));
			});
		var makeCandidate = function (_v2) {
			var name = _v2.a;
			var place = _v2.b;
			var nearestTrackPointIndex = A4($author$project$DomainModel$nearestToEarthPoint, place, track.currentPosition, track.trackTree, track.leafIndex);
			var nearestTrackPoint = A2($author$project$DomainModel$earthPointFromIndex, nearestTrackPointIndex, track.trackTree);
			return {
				distanceAway: A2($ianmackenzie$elm_geometry$Point3d$distanceFrom, place.space, nearestTrackPoint.space),
				name: name,
				nearestTrackPointIndex: nearestTrackPointIndex,
				place: place
			};
		};
		var orderedCandidates = function () {
			var _v1 = options.landUseProximity;
			if (_v1.$ === 'Just') {
				var threshold = _v1.a;
				var sortMethod = options.landUsePreferCloser ? A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.distanceAway;
					},
					$ianmackenzie$elm_units$Length$inMeters) : A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.distanceAway;
					},
					A2($elm$core$Basics$composeR, $ianmackenzie$elm_units$Quantity$negate, $ianmackenzie$elm_units$Length$inMeters));
				return A2(
					$elm$core$List$sortBy,
					sortMethod,
					A2(
						$elm$core$List$filter,
						withinThreshold(threshold),
						A2(
							$elm$core$List$map,
							makeCandidate,
							$elm$core$Dict$toList(track.landUseData.places))));
			} else {
				return _List_Nil;
			}
		}();
		var addSegmentIfNoConflict = F2(
			function (candidate, outputs) {
				var startBuffer = $ianmackenzie$elm_units_interval$Quantity$Interval$fromEndpoints(
					_Utils_Tuple2(
						$ianmackenzie$elm_units$Length$meters(0),
						$ianmackenzie$elm_units$Length$meters(120)));
				var newSegmentHalfLength = A2(
					$ianmackenzie$elm_units$Quantity$max,
					$ianmackenzie$elm_units$Length$meters(50),
					$ianmackenzie$elm_units$Quantity$half(candidate.distanceAway));
				var newSegmentCentre = A2($author$project$DomainModel$distanceFromIndex, candidate.nearestTrackPointIndex, track.trackTree);
				var intervalFrom = function (segment) {
					return A2(
						padInterval,
						$ianmackenzie$elm_units$Length$meters(50),
						A2($ianmackenzie$elm_units_interval$Quantity$Interval$from, segment.startDistance, segment.endDistance));
				};
				var endBuffer = A2(
					$ianmackenzie$elm_units_interval$Quantity$Interval$from,
					A2(
						$ianmackenzie$elm_units$Quantity$minus,
						$ianmackenzie$elm_units$Length$meters(200),
						$author$project$DomainModel$trueLength(track.trackTree)),
					$author$project$DomainModel$trueLength(track.trackTree));
				var _v0 = _Utils_Tuple2(
					A2($ianmackenzie$elm_units$Quantity$minus, newSegmentHalfLength, newSegmentCentre),
					A2($ianmackenzie$elm_units$Quantity$plus, newSegmentHalfLength, newSegmentCentre));
				var idealStart = _v0.a;
				var idealEnd = _v0.b;
				var actualEnd = A2(
					$author$project$DomainModel$distanceFromIndex,
					A2($author$project$DomainModel$indexFromDistanceRoundedUp, idealEnd, track.trackTree),
					track.trackTree);
				var actualStart = A2(
					$author$project$DomainModel$distanceFromIndex,
					A2($author$project$DomainModel$indexFromDistanceRoundedDown, idealStart, track.trackTree),
					track.trackTree);
				var newSegmentInterval = $ianmackenzie$elm_units_interval$Quantity$Interval$fromEndpoints(
					_Utils_Tuple2(actualStart, actualEnd));
				var hasIntersectionWith = function (existing) {
					return A2(
						$ianmackenzie$elm_units_interval$Quantity$Interval$intersects,
						intervalFrom(existing),
						newSegmentInterval);
				};
				return (A2($elm$core$List$any, hasIntersectionWith, outputs) || (A2($ianmackenzie$elm_units_interval$Quantity$Interval$intersects, newSegmentInterval, startBuffer) || A2($ianmackenzie$elm_units_interval$Quantity$Interval$intersects, newSegmentInterval, endBuffer))) ? outputs : A2(
					$elm$core$List$cons,
					{createMode: $author$project$Tools$NamedSegmentOptions$AutoSegment, endDistance: actualEnd, endOk: true, name: candidate.name, startDistance: actualStart, startOk: true},
					outputs);
			});
		return _Utils_update(
			options,
			{
				namedSegments: A2(
					$elm$core$List$sortBy,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.startDistance;
						},
						$ianmackenzie$elm_units$Length$inMeters),
					A3($elm$core$List$foldl, addSegmentIfNoConflict, retainedSegments, orderedCandidates))
			});
	});
var $author$project$Tools$NamedSegment$update = F5(
	function (msg, options, track, previewColour, wrapper) {
		switch (msg.$) {
			case 'DisplayInfo':
				var tool = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, tool, tag)
						]));
			case 'SelectSegment':
				var seg = msg.a;
				var _v1 = A2($elm_community$list_extra$List$Extra$getAt, seg, options.namedSegments);
				if (_v1.$ === 'Just') {
					var segment = _v1.a;
					var _v2 = _Utils_Tuple2(
						A2($author$project$DomainModel$indexFromDistance, segment.startDistance, track.trackTree),
						A2($author$project$DomainModel$indexFromDistance, segment.endDistance, track.trackTree));
					var startIndex = _v2.a;
					var endIndex = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								selectedSegment: $elm$core$Maybe$Just(seg)
							}),
						_List_fromArray(
							[
								$author$project$Actions$SetCurrent(startIndex),
								$author$project$Actions$SetMarker(
								$elm$core$Maybe$Just(endIndex)),
								$author$project$Actions$PointerChange
							]));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{selectedSegment: $elm$core$Maybe$Nothing}),
						_List_Nil);
				}
			case 'UpdateSegment':
				var _v3 = options.selectedSegment;
				if (_v3.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{selectedSegment: $elm$core$Maybe$Nothing}),
						_List_Nil);
				} else {
					var index = _v3.a;
					var _v4 = A2($elm_community$list_extra$List$Extra$getAt, index, options.namedSegments);
					if (_v4.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								options,
								{selectedSegment: $elm$core$Maybe$Nothing}),
							_List_Nil);
					} else {
						var segment = _v4.a;
						var _v5 = $author$project$TrackLoaded$getRangeFromMarkers(track);
						var fromStart = _v5.a;
						var fromEnd = _v5.b;
						var endIndex = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
						var updated = _Utils_update(
							segment,
							{
								createMode: $author$project$Tools$NamedSegmentOptions$ManualSegment,
								endDistance: A2($author$project$DomainModel$distanceFromIndex, endIndex, track.trackTree),
								startDistance: A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree)
							});
						var newOptions = _Utils_update(
							options,
							{
								namedSegments: A2(
									$elm$core$List$sortBy,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.startDistance;
										},
										$ianmackenzie$elm_units$Length$inMeters),
									A3(
										$elm_community$list_extra$List$Extra$updateAt,
										index,
										$elm$core$Basics$always(updated),
										options.namedSegments))
							});
						return _Utils_Tuple2(
							newOptions,
							_List_fromArray(
								[
									$author$project$Tools$NamedSegment$exclusionZones(track),
									A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
								]));
					}
				}
			case 'DeleteSegment':
				var _v6 = options.selectedSegment;
				if (_v6.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{selectedSegment: $elm$core$Maybe$Nothing}),
						_List_Nil);
				} else {
					var index = _v6.a;
					var _v7 = A2($elm_community$list_extra$List$Extra$getAt, index, options.namedSegments);
					if (_v7.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								options,
								{selectedSegment: $elm$core$Maybe$Nothing}),
							_List_Nil);
					} else {
						var newOptions = _Utils_update(
							options,
							{
								namedSegments: A2($elm_community$list_extra$List$Extra$removeAt, index, options.namedSegments),
								selectedSegment: $elm$core$Maybe$Nothing
							});
						return _Utils_Tuple2(
							newOptions,
							_List_fromArray(
								[
									$author$project$Tools$NamedSegment$exclusionZones(track),
									A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
								]));
					}
				}
			case 'ChangeName':
				var index = msg.a;
				var newName = msg.b;
				var _v8 = A2($elm_community$list_extra$List$Extra$getAt, index, options.namedSegments);
				if (_v8.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{selectedSegment: $elm$core$Maybe$Nothing}),
						_List_Nil);
				} else {
					var segment = _v8.a;
					var updated = _Utils_update(
						segment,
						{name: newName});
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{
								namedSegments: A3(
									$elm_community$list_extra$List$Extra$updateAt,
									index,
									$elm$core$Basics$always(updated),
									options.namedSegments)
							}),
						_List_Nil);
				}
			case 'CreateSegment':
				var _v9 = $author$project$TrackLoaded$getRangeFromMarkers(track);
				var fromStart = _v9.a;
				var fromEnd = _v9.b;
				var newSegment = {
					createMode: $author$project$Tools$NamedSegmentOptions$ManualSegment,
					endDistance: A2(
						$author$project$DomainModel$distanceFromIndex,
						$author$project$DomainModel$skipCount(track.trackTree) - fromEnd,
						track.trackTree),
					endOk: true,
					name: 'ENTER NAME HERE',
					startDistance: A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
					startOk: true
				};
				var newOptions = A2($author$project$Tools$NamedSegment$addSegment, newSegment, options);
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Tools$NamedSegment$exclusionZones(track),
							A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
						]));
			case 'LandUseProximity':
				var distance = msg.a;
				var newOptions = A2(
					$author$project$Tools$NamedSegment$segmentsFromPlaces,
					track,
					_Utils_update(
						options,
						{
							landUseProximity: $elm$core$Maybe$Just(distance)
						}));
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Tools$NamedSegment$exclusionZones(track),
							A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
						]));
			case 'EnableAutoSuggest':
				var enabled = msg.a;
				if (enabled) {
					var newOptions = A2(
						$author$project$Tools$NamedSegment$segmentsFromPlaces,
						track,
						_Utils_update(
							options,
							{
								landUseProximity: $elm$core$Maybe$Just(
									$ianmackenzie$elm_units$Length$meters(50))
							}));
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Tools$NamedSegment$exclusionZones(track),
								A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
							]));
				} else {
					var newOptions = _Utils_update(
						options,
						{
							landUseProximity: $elm$core$Maybe$Nothing,
							namedSegments: A2(
								$elm$core$List$filter,
								function (seg) {
									return _Utils_eq(seg.createMode, $author$project$Tools$NamedSegmentOptions$ManualSegment);
								},
								options.namedSegments)
						});
					return _Utils_Tuple2(
						newOptions,
						_List_fromArray(
							[
								$author$project$Tools$NamedSegment$exclusionZones(track),
								A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
							]));
				}
			default:
				var bool = msg.a;
				var newOptions = A2(
					$author$project$Tools$NamedSegment$segmentsFromPlaces,
					track,
					_Utils_update(
						options,
						{landUsePreferCloser: bool}));
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							$author$project$Tools$NamedSegment$exclusionZones(track),
							A3($author$project$Tools$NamedSegment$makePreview, previewColour, newOptions, track)
						]));
		}
	});
var $author$project$Actions$NudgeApplyWithOptions = function (a) {
	return {$: 'NudgeApplyWithOptions', a: a};
};
var $author$project$Tools$Nudge$update = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'SetHorizontalNudgeFactor':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{horizontal: value});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
			case 'SetEasingSpacing':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{easingSpacing: value});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
			case 'SetVerticalNudgeFactor':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{vertical: value});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
			case 'NudgeButton':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{
						vertical: A2($ianmackenzie$elm_units$Quantity$plus, value, options.vertical)
					});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
			case 'SetFadeExtent':
				var value = msg.a;
				var newOptions = _Utils_update(
					options,
					{fadeExtent: value});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
			case 'ZeroNudgeFactors':
				return _Utils_Tuple2(
					$author$project$Tools$Nudge$defaultOptions,
					_List_fromArray(
						[
							$author$project$Actions$HidePreview('nudge')
						]));
			case 'ApplyWithOptions':
				var _v1 = A2($author$project$Tools$Nudge$computeNudgedPoints, options, track);
				var _v2 = _v1.a;
				var actualStart = _v2.a;
				var actualEnd = _v2.b;
				var oldPoints = A3(
					$author$project$DomainModel$extractPointsInRange,
					actualStart,
					$author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
					track.trackTree);
				var undoInfo = {
					action: $author$project$Actions$NudgeApplyWithOptions(options),
					currentPosition: track.currentPosition,
					fromEnd: $author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
					fromStart: actualStart,
					markerPosition: track.markerPosition,
					originalPoints: A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints)
				};
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			default:
				var bool = msg.a;
				var newOptions = _Utils_update(
					options,
					{cosineEasing: bool});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Nudge$previewActions, newOptions, previewColour, track));
		}
	});
var $author$project$Actions$OutAndBackApplyWithOptions = function (a) {
	return {$: 'OutAndBackApplyWithOptions', a: a};
};
var $author$project$Tools$OutAndBack$update = F3(
	function (msg, options, hasTrack) {
		var _v0 = _Utils_Tuple2(hasTrack, msg);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'SetOffset') {
				var offset = _v0.b.a;
				var newOptions = _Utils_update(
					options,
					{offset: offset});
				return _Utils_Tuple2(newOptions, _List_Nil);
			} else {
				var track = _v0.a.a;
				var _v1 = _v0.b;
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWholeTrack,
					$author$project$Actions$OutAndBackApplyWithOptions(options),
					track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							undoInfo.action,
							$author$project$Actions$TrackHasChanged,
							$author$project$Actions$WithUndo(undoInfo)
						]));
			}
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Actions$ApplySmoothProfile = function (a) {
	return {$: 'ApplySmoothProfile', a: a};
};
var $author$project$Tools$ProfileSmooth$update = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'SetMaximumAscent':
				var up = msg.a;
				var newOptions = A2(
					$author$project$Tools$ProfileSmooth$previewWithNewOptions,
					track,
					_Utils_update(
						options,
						{maximumAscent: up}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, previewColour, track));
			case 'SetMaximumDescent':
				var down = msg.a;
				var newOptions = A2(
					$author$project$Tools$ProfileSmooth$previewWithNewOptions,
					track,
					_Utils_update(
						options,
						{maximumDescent: down}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, previewColour, track));
			case 'SetBumpiness':
				var bumpiness = msg.a;
				var newOptions = A2(
					$author$project$Tools$ProfileSmooth$previewWithNewOptions,
					track,
					_Utils_update(
						options,
						{bumpiness: bumpiness}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, previewColour, track));
			case 'ApplyPreview':
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWithWholeTrackDefault,
					$author$project$Actions$ApplySmoothProfile(options),
					track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			case 'SetWindowSize':
				var size = msg.a;
				var newOptions = A2(
					$author$project$Tools$ProfileSmooth$previewWithNewOptions,
					track,
					_Utils_update(
						options,
						{windowSize: size}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, previewColour, track));
			default:
				var smoothMethod = msg.a;
				var newOptions = A2(
					$author$project$Tools$ProfileSmooth$previewWithNewOptions,
					track,
					_Utils_update(
						options,
						{smoothMethod: smoothMethod}));
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$ProfileSmooth$previewActions, newOptions, previewColour, track));
		}
	});
var $author$project$Actions$ApplySimplify = {$: 'ApplySimplify'};
var $author$project$Actions$FlushUndo = {$: 'FlushUndo'};
var $author$project$Tools$Simplify$update = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'Seek':
				var newOptions = A2($author$project$Tools$Simplify$findSimplifications, options, track.trackTree);
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Simplify$actions, previewColour, newOptions, track));
			case 'Apply':
				var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, $author$project$Actions$ApplySimplify, track);
				var oldPoints = $author$project$DomainModel$getAllGPXPointsInNaturalOrder(track.trackTree);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			default:
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[$author$project$Actions$FlushUndo]));
		}
	});
var $author$project$Actions$SmartSmootherApplyWithOptions = function (a) {
	return {$: 'SmartSmootherApplyWithOptions', a: a};
};
var $author$project$Tools$SmartSmoother$update = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'Apply':
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWithWholeTrackDefault,
					$author$project$Actions$SmartSmootherApplyWithOptions(options),
					track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							undoInfo.action,
							$author$project$Actions$TrackHasChanged,
							$author$project$Actions$WithUndo(undoInfo)
						]));
			case 'DisplayInfo':
				var tool = msg.a;
				var tag = msg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, tool, tag)
						]));
			case 'SetMinRadius':
				var radius = msg.a;
				var newOptions = _Utils_update(
					options,
					{minRadius: radius});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$SmartSmoother$previewActions, newOptions, previewColour, track));
			case 'SetMinTransition':
				var transition = msg.a;
				var newOptions = _Utils_update(
					options,
					{minTransition: transition});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$SmartSmoother$previewActions, newOptions, previewColour, track));
			case 'SetMaxGradient':
				var gradient = msg.a;
				var newOptions = _Utils_update(
					options,
					{maxGradient: gradient});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$SmartSmoother$previewActions, newOptions, previewColour, track));
			default:
				var blend = msg.a;
				var newOptions = _Utils_update(
					options,
					{blend: blend});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$SmartSmoother$previewActions, newOptions, previewColour, track));
		}
	});
var $author$project$Tools$SplitAndJoin$FileLoaded = function (a) {
	return {$: 'FileLoaded', a: a};
};
var $author$project$Tools$SplitAndJoin$FileSelected = function (a) {
	return {$: 'FileSelected', a: a};
};
var $author$project$Actions$LoadGpxFile = F2(
	function (a, b) {
		return {$: 'LoadGpxFile', a: a, b: b};
	});
var $author$project$Actions$ParseAndAppend = function (a) {
	return {$: 'ParseAndAppend', a: a};
};
var $author$project$Actions$SelectGpxFile = function (a) {
	return {$: 'SelectGpxFile', a: a};
};
var $author$project$Tools$SplitAndJoin$WriteSection = function (a) {
	return {$: 'WriteSection', a: a};
};
var $author$project$Actions$WriteTrackSections = function (a) {
	return {$: 'WriteTrackSections', a: a};
};
var $author$project$Tools$SplitAndJoin$calculateSections = F2(
	function (length, options) {
		var effectiveLength = options.addBuffers ? A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_units$Length$meters(200.0),
			options.splitLimit) : options.splitLimit;
		var splitCount = $elm$core$Basics$ceiling(
			A2($ianmackenzie$elm_units$Quantity$ratio, length, effectiveLength));
		var splitLength = A2($ianmackenzie$elm_units$Quantity$divideBy, splitCount, length);
		var splitPoints = A2(
			$elm$core$List$map,
			function (n) {
				return $ianmackenzie$elm_units$Length$inMeters(
					A2($ianmackenzie$elm_units$Quantity$multiplyBy, n, splitLength));
			},
			A2($elm$core$List$range, 0, splitCount));
		return A4(
			$elm$core$List$map3,
			F3(
				function (a, b, c) {
					return _Utils_Tuple3(a, b, c);
				}),
			A2($elm$core$List$range, 1, splitCount),
			splitPoints,
			A2($elm$core$List$drop, 1, splitPoints));
	});
var $author$project$Tools$SplitAndJoin$update = F4(
	function (msg, settings, mTrack, wrap) {
		switch (msg.$) {
			case 'SetSplitLimit':
				var n = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						settings,
						{splitLimit: n}),
					_List_Nil);
			case 'ToggleBuffers':
				return _Utils_Tuple2(
					_Utils_update(
						settings,
						{addBuffers: !settings.addBuffers}),
					_List_Nil);
			case 'ToggleAutofix':
				return _Utils_Tuple2(
					_Utils_update(
						settings,
						{applyAutofix: !settings.applyAutofix}),
					_List_Nil);
			case 'AppendFile':
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[
							$author$project$Actions$SelectGpxFile(
							A2($elm$core$Basics$composeL, wrap, $author$project$Tools$SplitAndJoin$FileSelected))
						]));
			case 'FileSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$LoadGpxFile,
							A2($elm$core$Basics$composeL, wrap, $author$project$Tools$SplitAndJoin$FileLoaded),
							file)
						]));
			case 'FileLoaded':
				var content = msg.a;
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWholeTrack,
					$author$project$Actions$ParseAndAppend(content),
					mTrack);
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							$author$project$Actions$ParseAndAppend(content),
							$author$project$Actions$TrackHasChanged
						]));
			case 'SplitTrack':
				var trackSplits = A2(
					$author$project$Tools$SplitAndJoin$calculateSections,
					$author$project$DomainModel$trueLength(mTrack.trackTree),
					settings);
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[
							$author$project$Actions$WriteTrackSections(trackSplits),
							A2(
							$author$project$Actions$DelayMessage,
							2000,
							wrap(
								$author$project$Tools$SplitAndJoin$WriteSection(
									A2($elm$core$List$drop, 1, trackSplits))))
						]));
			case 'SplitAtMarkers':
				var orangeDistance = $ianmackenzie$elm_units$Length$inMeters(
					A2($author$project$DomainModel$distanceFromIndex, mTrack.currentPosition, mTrack.trackTree));
				var trackSplits = function () {
					var _v1 = mTrack.markerPosition;
					if (_v1.$ === 'Just') {
						var purple = _v1.a;
						var purpleDistance = $ianmackenzie$elm_units$Length$inMeters(
							A2($author$project$DomainModel$distanceFromIndex, purple, mTrack.trackTree));
						var _v2 = _Utils_Tuple2(
							A2($elm$core$Basics$min, orangeDistance, purpleDistance),
							A2($elm$core$Basics$max, orangeDistance, purpleDistance));
						var near = _v2.a;
						var far = _v2.b;
						return _List_fromArray(
							[
								_Utils_Tuple3(1, near, far)
							]);
					} else {
						return _List_fromArray(
							[
								_Utils_Tuple3(1, 0, orangeDistance),
								_Utils_Tuple3(
								2,
								orangeDistance,
								$ianmackenzie$elm_units$Length$inMeters(
									$author$project$DomainModel$trueLength(mTrack.trackTree)))
							]);
					}
				}();
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[
							$author$project$Actions$WriteTrackSections(trackSplits),
							A2(
							$author$project$Actions$DelayMessage,
							2000,
							wrap(
								$author$project$Tools$SplitAndJoin$WriteSection(
									A2($elm$core$List$drop, 1, trackSplits))))
						]));
			default:
				var moreSections = msg.a;
				if (moreSections.b) {
					var evenMoreSections = moreSections.b;
					return _Utils_Tuple2(
						settings,
						_List_fromArray(
							[
								$author$project$Actions$WriteTrackSections(moreSections),
								A2(
								$author$project$Actions$DelayMessage,
								2000,
								wrap(
									$author$project$Tools$SplitAndJoin$WriteSection(evenMoreSections)))
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
		}
	});
var $author$project$Actions$AddRiderPens = {$: 'AddRiderPens'};
var $author$project$Actions$CloseLoopWithOptions = function (a) {
	return {$: 'CloseLoopWithOptions', a: a};
};
var $author$project$Actions$MoveStartPoint = function (a) {
	return {$: 'MoveStartPoint', a: a};
};
var $author$project$Actions$ReverseTrack = {$: 'ReverseTrack'};
var $author$project$Tools$StartFinish$update = F3(
	function (msg, options, track) {
		var makeActions = function (actionCode) {
			var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, actionCode, track);
			return _List_fromArray(
				[
					$author$project$Actions$WithUndo(undoInfo),
					undoInfo.action,
					$author$project$Actions$TrackHasChanged
				]);
		};
		switch (msg.$) {
			case 'CloseTheLoop':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{loopiness: $author$project$Tools$StartFinishTypes$IsALoop, pointsToClose: _List_Nil}),
					makeActions(
						$author$project$Actions$CloseLoopWithOptions(options)));
			case 'ReverseTrack':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pointsToClose: _List_Nil}),
					makeActions($author$project$Actions$ReverseTrack));
			case 'ChangeLoopStart':
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pointsToClose: _List_Nil}),
					makeActions(
						$author$project$Actions$MoveStartPoint(track.currentPosition)));
			default:
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{pointsToClose: _List_Nil}),
					makeActions($author$project$Actions$AddRiderPens));
		}
	});
var $author$project$Actions$Straighten = {$: 'Straighten'};
var $author$project$Tools$Straightener$update = F3(
	function (msg, options, track) {
		if (msg.$ === 'StraightenStraight') {
			var undoInfo = A2($author$project$TrackLoaded$undoInfoWithSinglePointDefault, $author$project$Actions$Straighten, track);
			return _Utils_Tuple2(
				options,
				_List_fromArray(
					[
						$author$project$Actions$WithUndo(undoInfo),
						undoInfo.action,
						$author$project$Actions$TrackHasChanged
					]));
		} else {
			var bool = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					options,
					{preserveAltitude: bool}),
				_List_Nil);
		}
	});
var $author$project$Tools$StravaTools$ActivityDownloaded = function (a) {
	return {$: 'ActivityDownloaded', a: a};
};
var $author$project$Tools$StravaTools$ActivityStreamsDownloaded = function (a) {
	return {$: 'ActivityStreamsDownloaded', a: a};
};
var $author$project$Actions$ClearStravaSegmentData = {$: 'ClearStravaSegmentData'};
var $author$project$Tools$StravaTools$GpxDownloaded = function (a) {
	return {$: 'GpxDownloaded', a: a};
};
var $author$project$Tools$StravaTools$HandleRouteData = function (a) {
	return {$: 'HandleRouteData', a: a};
};
var $author$project$Tools$StravaTools$HandleSegmentData = function (a) {
	return {$: 'HandleSegmentData', a: a};
};
var $author$project$Tools$StravaTools$HandleSegmentStreams = function (a) {
	return {$: 'HandleSegmentStreams', a: a};
};
var $author$project$Actions$LoadGpxFromStrava = function (a) {
	return {$: 'LoadGpxFromStrava', a: a};
};
var $author$project$Actions$PasteStravaSegment = function (a) {
	return {$: 'PasteStravaSegment', a: a};
};
var $author$project$Actions$RequestStravaActivity = F3(
	function (a, b, c) {
		return {$: 'RequestStravaActivity', a: a, b: b, c: c};
	});
var $author$project$Actions$RequestStravaActivityStreams = F3(
	function (a, b, c) {
		return {$: 'RequestStravaActivityStreams', a: a, b: b, c: c};
	});
var $author$project$Actions$RequestStravaAuth = {$: 'RequestStravaAuth'};
var $author$project$Actions$RequestStravaRoute = F3(
	function (a, b, c) {
		return {$: 'RequestStravaRoute', a: a, b: b, c: c};
	});
var $author$project$Actions$RequestStravaRouteHeader = F3(
	function (a, b, c) {
		return {$: 'RequestStravaRouteHeader', a: a, b: b, c: c};
	});
var $author$project$Actions$RequestStravaSegment = F3(
	function (a, b, c) {
		return {$: 'RequestStravaSegment', a: a, b: b, c: c};
	});
var $author$project$Actions$RequestStravaSegmentStreams = F3(
	function (a, b, c) {
		return {$: 'RequestStravaSegmentStreams', a: a, b: b, c: c};
	});
var $author$project$Tools$StravaTypes$SegmentPreviewed = function (a) {
	return {$: 'SegmentPreviewed', a: a};
};
var $author$project$Tools$StravaTypes$SegmentRequested = {$: 'SegmentRequested'};
var $author$project$Tools$StravaTypes$StravaActivityError = function (a) {
	return {$: 'StravaActivityError', a: a};
};
var $author$project$Tools$StravaTypes$StravaActivityGotHeader = function (a) {
	return {$: 'StravaActivityGotHeader', a: a};
};
var $author$project$Tools$StravaTypes$StravaRouteRequested = {$: 'StravaRouteRequested'};
var $author$project$Actions$TrackFromStravaActivity = F2(
	function (a, b) {
		return {$: 'TrackFromStravaActivity', a: a, b: b};
	});
var $author$project$Tools$StravaTools$pointsFromStreams = F4(
	function (track, options, segment, streams) {
		var startGpx = $author$project$Tools$StravaTools$extractFromLngLat(segment.start_latlng);
		var fromStart = A5($author$project$DomainModel$nearestToLonLat, startGpx, track.currentPosition, track.trackTree, track.referenceLonLat, track.leafIndex);
		var altitudeAdjustment = function () {
			if (options.adjustSegmentAltitude) {
				var altitudeInRoute = $ianmackenzie$elm_units$Length$inMeters(
					A2($author$project$DomainModel$gpxPointFromIndex, fromStart, track.trackTree).altitude);
				var segmentAltitude = A2(
					$elm$core$Maybe$withDefault,
					altitudeInRoute,
					$elm$core$List$head(streams.altitude.data));
				return altitudeInRoute - segmentAltitude;
			} else {
				return 0;
			}
		}();
		var asGpx = A3(
			$elm$core$List$map2,
			F2(
				function (latLon, alt) {
					return A4(
						$author$project$DomainModel$GPXSource,
						$ianmackenzie$elm_geometry$Direction2d$fromAngle(
							$ianmackenzie$elm_units$Angle$degrees(latLon.lng)),
						$ianmackenzie$elm_units$Angle$degrees(latLon.lat),
						$ianmackenzie$elm_units$Length$meters(alt + altitudeAdjustment),
						$elm$core$Maybe$Nothing);
				}),
			streams.latLngs.data,
			streams.altitude.data);
		var asEarthPoints = A2(
			$elm$core$List$map,
			$author$project$DomainModel$pointFromGpxWithReference(track.referenceLonLat),
			asGpx);
		return A3(
			$author$project$TrackLoaded$asPreviewPoints,
			track,
			A2($author$project$DomainModel$distanceFromIndex, fromStart, track.trackTree),
			asEarthPoints);
	});
var $author$project$Tools$StravaTools$previewActions = F3(
	function (options, colour, track) {
		return _List_fromArray(
			[
				$author$project$Actions$ShowPreview(
				{colour: colour, points: options.preview, shape: $author$project$PreviewData$PreviewCircle, tag: 'strava'})
			]);
	});
var $author$project$Tools$StravaTypes$StravaRouteError = function (a) {
	return {$: 'StravaRouteError', a: a};
};
var $author$project$Tools$StravaTypes$StravaRouteOk = function (a) {
	return {$: 'StravaRouteOk', a: a};
};
var $author$project$UtilsForViews$httpErrorString = function (error) {
	switch (error.$) {
		case 'BadBody':
			var message = error.a;
			return 'Unable to handle response: ' + message;
		case 'BadStatus':
			var statusCode = error.a;
			return 'Server error: ' + $elm$core$String$fromInt(statusCode);
		case 'BadUrl':
			var url = error.a;
			return 'Invalid URL: ' + url;
		case 'NetworkError':
			return 'Network error';
		default:
			return 'Request timeout';
	}
};
var $author$project$Tools$StravaDataLoad$stravaProcessRoute = function (response) {
	if (response.$ === 'Ok') {
		var route = response.a;
		return $author$project$Tools$StravaTypes$StravaRouteOk(route);
	} else {
		var err = response.a;
		return $author$project$Tools$StravaTypes$StravaRouteError(
			$author$project$UtilsForViews$httpErrorString(err));
	}
};
var $author$project$Tools$StravaTypes$SegmentError = function (a) {
	return {$: 'SegmentError', a: a};
};
var $author$project$Tools$StravaTypes$SegmentNotInRoute = function (a) {
	return {$: 'SegmentNotInRoute', a: a};
};
var $author$project$Tools$StravaTypes$SegmentOk = function (a) {
	return {$: 'SegmentOk', a: a};
};
var $author$project$Tools$StravaDataLoad$stravaProcessSegment = F2(
	function (response, track) {
		var isNearTheTrack = function (segment) {
			var _v1 = _Utils_Tuple2(segment.start_latlng, segment.end_latlng);
			if (((((_v1.a.b && _v1.a.b.b) && (!_v1.a.b.b.b)) && _v1.b.b) && _v1.b.b.b) && (!_v1.b.b.b.b)) {
				var _v2 = _v1.a;
				var start_latitude = _v2.a;
				var _v3 = _v2.b;
				var start_longitude = _v3.a;
				var _v4 = _v1.b;
				var _v5 = _v4.b;
				var gpxPoint = {
					altitude: $ianmackenzie$elm_units$Length$meters(0.0),
					latitude: $ianmackenzie$elm_units$Angle$degrees(start_latitude),
					longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
						$ianmackenzie$elm_units$Angle$degrees(start_longitude)),
					timestamp: $elm$core$Maybe$Nothing
				};
				var index = A5($author$project$DomainModel$nearestToLonLat, gpxPoint, track.currentPosition, track.trackTree, track.referenceLonLat, track.leafIndex);
				var nearestGps = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
				return A2(
					$author$project$Spherical$range,
					_Utils_Tuple2(
						$ianmackenzie$elm_units$Angle$degrees(start_longitude),
						$ianmackenzie$elm_units$Angle$degrees(start_latitude)),
					_Utils_Tuple2(
						$ianmackenzie$elm_geometry$Direction2d$toAngle(nearestGps.longitude),
						nearestGps.latitude)) < 100;
			} else {
				return false;
			}
		};
		if (response.$ === 'Ok') {
			var segment = response.a;
			return isNearTheTrack(segment) ? $author$project$Tools$StravaTypes$SegmentOk(segment) : $author$project$Tools$StravaTypes$SegmentNotInRoute(segment);
		} else {
			var err = response.a;
			return $author$project$Tools$StravaTypes$SegmentError(
				$author$project$UtilsForViews$httpErrorString(err));
		}
	});
var $author$project$Tools$StravaTools$update = F4(
	function (msg, settings, wrap, track) {
		switch (msg.$) {
			case 'SignInRequested':
				return _Utils_Tuple2(
					settings,
					_List_fromArray(
						[$author$project$Actions$RequestStravaAuth]));
			case 'ConnectionInfo':
				var token = msg.a;
				return _Utils_Tuple2(settings, _List_Nil);
			case 'UserChangedRouteId':
				var url = msg.a;
				var routeId = A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm_community$list_extra$List$Extra$last(
						A2($elm$core$String$split, '/', url)));
				return _Utils_Tuple2(
					_Utils_update(
						settings,
						{externalRouteId: routeId}),
					_List_Nil);
			case 'UserChangedSegmentId':
				var url = msg.a;
				var segmentId = A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm_community$list_extra$List$Extra$last(
						A2($elm$core$String$split, '/', url)));
				return _Utils_Tuple2(
					_Utils_update(
						settings,
						{externalSegment: $author$project$Tools$StravaTypes$SegmentNone, externalSegmentId: segmentId}),
					_List_Nil);
			case 'SetAltitudeMatch':
				var match = msg.a;
				var _v1 = _Utils_Tuple3(track, settings.stravaStreams, settings.externalSegment);
				if (((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) && (_v1.c.$ === 'SegmentOk')) {
					var isTrack = _v1.a.a;
					var streams = _v1.b.a;
					var segment = _v1.c.a;
					var newSettings = _Utils_update(
						settings,
						{adjustSegmentAltitude: match});
					var withNewPreview = _Utils_update(
						newSettings,
						{
							preview: A4($author$project$Tools$StravaTools$pointsFromStreams, isTrack, settings, segment, streams)
						});
					return _Utils_Tuple2(
						withNewPreview,
						A3($author$project$Tools$StravaTools$previewActions, withNewPreview, $author$project$ColourPalette$stravaOrange, isTrack));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{adjustSegmentAltitude: match}),
						_List_Nil);
				}
			case 'LoadExternalRoute':
				var _v2 = settings.stravaStatus;
				if (_v2.$ === 'StravaConnected') {
					var token = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{stravaRoute: $author$project$Tools$StravaTypes$StravaRouteRequested}),
						_List_fromArray(
							[
								A3(
								$author$project$Actions$RequestStravaRouteHeader,
								A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$HandleRouteData),
								settings.externalRouteId,
								token)
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'LoadActivity':
				var _v3 = settings.stravaStatus;
				if (_v3.$ === 'StravaConnected') {
					var token = _v3.a;
					return _Utils_Tuple2(
						settings,
						_List_fromArray(
							[
								A3(
								$author$project$Actions$RequestStravaActivity,
								A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$ActivityDownloaded),
								settings.externalRouteId,
								token)
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'HandleRouteData':
				var response = msg.a;
				var _v4 = settings.stravaStatus;
				if (_v4.$ === 'StravaConnected') {
					var token = _v4.a;
					var result = $author$project$Tools$StravaDataLoad$stravaProcessRoute(response);
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{stravaRoute: result}),
						function () {
							if (result.$ === 'StravaRouteOk') {
								return _List_fromArray(
									[
										A3(
										$author$project$Actions$RequestStravaRoute,
										A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$GpxDownloaded),
										settings.externalRouteId,
										token)
									]);
							} else {
								return _List_Nil;
							}
						}());
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'GpxDownloaded':
				var response = msg.a;
				if (response.$ === 'Ok') {
					var content = response.a;
					return _Utils_Tuple2(
						settings,
						_List_fromArray(
							[
								$author$project$Actions$LoadGpxFromStrava(content)
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'LoadExternalSegment':
				var _v7 = settings.stravaStatus;
				if (_v7.$ === 'StravaConnected') {
					var token = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{externalSegment: $author$project$Tools$StravaTypes$SegmentRequested}),
						_List_fromArray(
							[
								A3(
								$author$project$Actions$RequestStravaSegment,
								A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$HandleSegmentData),
								settings.externalSegmentId,
								token)
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'HandleSegmentData':
				var response = msg.a;
				if (track.$ === 'Just') {
					var isTrack = track.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{
								externalSegment: A2($author$project$Tools$StravaDataLoad$stravaProcessSegment, response, isTrack)
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'LoadSegmentStreams':
				var _v9 = settings.stravaStatus;
				if (_v9.$ === 'StravaConnected') {
					var token = _v9.a;
					return _Utils_Tuple2(
						settings,
						_List_fromArray(
							[
								A3(
								$author$project$Actions$RequestStravaSegmentStreams,
								A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$HandleSegmentStreams),
								settings.externalSegmentId,
								token)
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			case 'HandleSegmentStreams':
				var response = msg.a;
				var _v10 = _Utils_Tuple3(track, response, settings.externalSegment);
				if (_v10.b.$ === 'Ok') {
					if ((_v10.a.$ === 'Just') && (_v10.c.$ === 'SegmentOk')) {
						var isTrack = _v10.a.a;
						var streams = _v10.b.a;
						var segment = _v10.c.a;
						var newSettings = _Utils_update(
							settings,
							{
								externalSegment: $author$project$Tools$StravaTypes$SegmentPreviewed(segment),
								preview: A4($author$project$Tools$StravaTools$pointsFromStreams, isTrack, settings, segment, streams),
								stravaStreams: $elm$core$Maybe$Just(streams)
							});
						return _Utils_Tuple2(
							newSettings,
							A3($author$project$Tools$StravaTools$previewActions, newSettings, $author$project$ColourPalette$stravaOrange, isTrack));
					} else {
						return _Utils_Tuple2(settings, _List_Nil);
					}
				} else {
					var err = _v10.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{
								lastHttpError: $elm$core$Maybe$Just(err)
							}),
						_List_Nil);
				}
			case 'ActivityDownloaded':
				var response = msg.a;
				var _v11 = _Utils_Tuple2(settings.stravaStatus, response);
				if (_v11.b.$ === 'Ok') {
					if (_v11.a.$ === 'StravaConnected') {
						var token = _v11.a.a;
						var header = _v11.b.a;
						var newSettings = _Utils_update(
							settings,
							{
								activity: $author$project$Tools$StravaTypes$StravaActivityGotHeader(header)
							});
						return _Utils_Tuple2(
							newSettings,
							_List_fromArray(
								[
									A3(
									$author$project$Actions$RequestStravaActivityStreams,
									A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$ActivityStreamsDownloaded),
									settings.externalRouteId,
									token)
								]));
					} else {
						return _Utils_Tuple2(settings, _List_Nil);
					}
				} else {
					var err = _v11.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{
								lastHttpError: $elm$core$Maybe$Just(err)
							}),
						_List_Nil);
				}
			case 'ActivityStreamsDownloaded':
				var response = msg.a;
				if (response.$ === 'Ok') {
					var streams = response.a;
					var _v13 = settings.activity;
					if (_v13.$ === 'StravaActivityGotHeader') {
						var header = _v13.a;
						return _Utils_Tuple2(
							_Utils_update(
								settings,
								{activity: $author$project$Tools$StravaTypes$StravaActivityNone}),
							_List_fromArray(
								[
									A2($author$project$Actions$TrackFromStravaActivity, header, streams)
								]));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								settings,
								{
									activity: $author$project$Tools$StravaTypes$StravaActivityError('state error')
								}),
							_List_Nil);
					}
				} else {
					var err = response.a;
					return _Utils_Tuple2(
						_Utils_update(
							settings,
							{
								lastHttpError: $elm$core$Maybe$Just(err)
							}),
						_List_Nil);
				}
			case 'PasteSegment':
				var _v14 = _Utils_Tuple2(track, settings.externalSegment);
				if ((_v14.a.$ === 'Just') && (_v14.b.$ === 'SegmentPreviewed')) {
					var isTrack = _v14.a.a;
					var segment = _v14.b.a;
					var _v15 = _Utils_Tuple2(
						$author$project$Tools$StravaTools$extractFromLngLat(segment.start_latlng),
						$author$project$Tools$StravaTools$extractFromLngLat(segment.end_latlng));
					var segmentStartGpx = _v15.a;
					var segmentEndGpx = _v15.b;
					var pEndingTrackPoint = A5($author$project$DomainModel$nearestToLonLat, segmentEndGpx, 0, isTrack.trackTree, isTrack.referenceLonLat, isTrack.leafIndex);
					var pStartingTrackPoint = A5($author$project$DomainModel$nearestToLonLat, segmentStartGpx, 0, isTrack.trackTree, isTrack.referenceLonLat, isTrack.leafIndex);
					var _v16 = (_Utils_cmp(pEndingTrackPoint, pStartingTrackPoint) < 0) ? _Utils_Tuple2(pEndingTrackPoint, pStartingTrackPoint) : _Utils_Tuple2(pStartingTrackPoint, pEndingTrackPoint);
					var useStart = _v16.a;
					var useEnd = _v16.b;
					var oldPoints = A3(
						$author$project$DomainModel$extractPointsInRange,
						useStart,
						$author$project$DomainModel$skipCount(isTrack.trackTree) - useEnd,
						isTrack.trackTree);
					var undoInfo = {
						action: $author$project$Actions$PasteStravaSegment(settings),
						currentPosition: isTrack.currentPosition,
						fromEnd: $author$project$DomainModel$skipCount(isTrack.trackTree) - useEnd,
						fromStart: useStart,
						markerPosition: isTrack.markerPosition,
						originalPoints: A2($elm$core$List$map, $elm$core$Tuple$second, oldPoints)
					};
					return _Utils_Tuple2(
						settings,
						_List_fromArray(
							[
								$author$project$Actions$WithUndo(undoInfo),
								undoInfo.action,
								$author$project$Actions$TrackHasChanged,
								$author$project$Actions$HidePreview('strava'),
								$author$project$Actions$ClearStravaSegmentData
							]));
				} else {
					return _Utils_Tuple2(settings, _List_Nil);
				}
			default:
				return _Utils_Tuple2(
					$author$project$Tools$StravaTools$clearSegmentData(settings),
					_List_Nil);
		}
	});
var $author$project$Actions$AdjustTimes = function (a) {
	return {$: 'AdjustTimes', a: a};
};
var $author$project$Actions$SetTimeTicks = function (a) {
	return {$: 'SetTimeTicks', a: a};
};
var $author$project$Actions$TimeDoubling = {$: 'TimeDoubling'};
var $author$project$Actions$UsePhysicsModel = {$: 'UsePhysicsModel'};
var $author$project$Tools$Timestamp$updateWithTrack = F4(
	function (msg, options, previewColour, track) {
		switch (msg.$) {
			case 'SetMode':
				var mode = msg.a;
				var newOptions = _Utils_update(
					options,
					{mode: mode});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Timestamp$actions, newOptions, previewColour, track));
			case 'SetTickInterval':
				var interval = msg.a;
				var newOptions = _Utils_update(
					options,
					{desiredTickIntervalMillis: interval});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Timestamp$actions, newOptions, previewColour, track));
			case 'SetPower':
				var watts = msg.a;
				var newOptions = _Utils_update(
					options,
					{
						estimatedDuration: A2($author$project$Tools$Timestamp$estimatedTime, watts, track),
						steadyPower: watts
					});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Timestamp$actions, newOptions, previewColour, track));
			case 'TimeChange':
				var change = msg.a;
				var previousPointOffsetMillis = A2($author$project$Tools$Timestamp$relativeMillisToPoint, track.currentPosition - 1, track);
				var newOptions = _Utils_update(
					options,
					{
						desiredStartMillis: A2($elm$core$Basics$max, previousPointOffsetMillis, options.desiredStartMillis + change)
					});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Timestamp$actions, newOptions, previewColour, track));
			case 'ClearMilliseconds':
				var newOptions = _Utils_update(
					options,
					{desiredStartMillis: 1000 * ((options.desiredStartMillis / 1000) | 0)});
				return _Utils_Tuple2(
					newOptions,
					A3($author$project$Tools$Timestamp$actions, newOptions, previewColour, track));
			case 'ApplyNewTimes':
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWholeTrack,
					$author$project$Actions$AdjustTimes(options),
					track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			case 'ApplyTickInterval':
				var tick = msg.a;
				var undoInfo = A2(
					$author$project$TrackLoaded$undoInfoWholeTrack,
					$author$project$Actions$SetTimeTicks(tick),
					track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			case 'DoubleRelativeTimes':
				var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, $author$project$Actions$TimeDoubling, track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
			default:
				var undoInfo = A2($author$project$TrackLoaded$undoInfoWholeTrack, $author$project$Actions$UsePhysicsModel, track);
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							$author$project$Actions$WithUndo(undoInfo),
							undoInfo.action,
							$author$project$Actions$TrackHasChanged
						]));
		}
	});
var $author$project$Tools$Timestamp$update = F4(
	function (msg, options, previewColour, hasTrack) {
		if (hasTrack.$ === 'Just') {
			var track = hasTrack.a;
			return A4($author$project$Tools$Timestamp$updateWithTrack, msg, options, previewColour, track);
		} else {
			return _Utils_Tuple2(options, _List_Nil);
		}
	});
var $author$project$Tools$TrackInfoBox$update = F2(
	function (msg, options) {
		var mode = msg.a;
		return _Utils_update(
			options,
			{displayMode: mode});
	});
var $author$project$ToolsController$update = F4(
	function (toolMsg, isTrack, msgWrapper, options) {
		switch (toolMsg.$) {
			case 'ToolNoOp':
				return _Utils_Tuple2(options, _List_Nil);
			case 'ToolPopupToggle':
				var toolType = toolMsg.a;
				var newOptions = _Utils_update(
					options,
					{
						tools: A2(
							$elm$core$List$map,
							$author$project$ToolsController$toggleToolPopup(toolType),
							options.tools)
					});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(newOptions))
						]));
			case 'DisplayInfo':
				var id = toolMsg.a;
				var tag = toolMsg.b;
				return _Utils_Tuple2(
					options,
					_List_fromArray(
						[
							A2($author$project$Actions$DisplayInfo, id, tag)
						]));
			case 'ToolDockSelect':
				var toolType = toolMsg.a;
				var toolDock = toolMsg.b;
				var newOptions = _Utils_update(
					options,
					{
						tools: A2(
							$elm$core$List$map,
							A2($author$project$ToolsController$setDock, toolType, toolDock),
							options.tools)
					});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(newOptions))
						]));
			case 'ToolColourSelect':
				var toolType = toolMsg.a;
				var color = toolMsg.b;
				var newOptions = _Utils_update(
					options,
					{
						tools: A2(
							$elm$core$List$map,
							A2($author$project$ToolsController$setColour, toolType, color),
							options.tools)
					});
				return A2($author$project$ToolsController$isToolOpen, toolType, options.tools) ? A4($author$project$ToolsController$toolStateHasChanged, toolType, $author$project$ToolsController$Expanded, isTrack, newOptions) : _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'tools',
							$author$project$ToolsController$encodeToolState(newOptions))
						]));
			case 'ToolStateToggle':
				var toolType = toolMsg.a;
				var newState = toolMsg.b;
				return A4(
					$author$project$ToolsController$toolStateHasChanged,
					toolType,
					newState,
					isTrack,
					_Utils_update(
						options,
						{
							tools: A2(
								$elm$core$List$map,
								A2($author$project$ToolsController$setToolState, toolType, newState),
								options.tools)
						}));
			case 'DirectionChanges':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v2 = A4(
						$author$project$Tools$DirectionChanges$update,
						msg,
						options.directionChangeOptions,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolAbruptDirectionChanges, options.tools),
						track);
					var newOptions = _v2.a;
					var actions = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{directionChangeOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolGradientChangeMsg':
				var msg = toolMsg.a;
				var _v3 = A4(
					$author$project$Tools$GradientProblems$update,
					msg,
					options.gradientProblemOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolGradientProblems, options.tools),
					isTrack);
				var newOptions = _v3.a;
				var actions = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{gradientProblemOptions: newOptions}),
					actions);
			case 'ToolTimestampMsg':
				var msg = toolMsg.a;
				var _v4 = A4(
					$author$project$Tools$Timestamp$update,
					msg,
					options.timestampOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolGradientProblems, options.tools),
					isTrack);
				var newOptions = _v4.a;
				var actions = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{timestampOptions: newOptions}),
					actions);
			case 'DeletePoints':
				var msg = toolMsg.a;
				var _v5 = A4(
					$author$project$Tools$DeletePoints$update,
					msg,
					options.deleteOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolDeletePoints, options.tools),
					isTrack);
				var newOptions = _v5.a;
				var actions = _v5.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{deleteOptions: newOptions}),
					actions);
			case 'ToolEssentialsMsg':
				var msg = toolMsg.a;
				var _v6 = A4(
					$author$project$Tools$Essentials$update,
					msg,
					options.essentialOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolEssentials, options.tools),
					isTrack);
				var newOptions = _v6.a;
				var actions = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{essentialOptions: newOptions}),
					actions);
			case 'ToolBezierMsg':
				var msg = toolMsg.a;
				var _v7 = A4(
					$author$project$Tools$BezierSplines$update,
					msg,
					options.bezierSplineOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolBezierSplines, options.tools),
					isTrack);
				var newOptions = _v7.a;
				var actions = _v7.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{bezierSplineOptions: newOptions}),
					actions);
			case 'ToolCentroidMsg':
				var msg = toolMsg.a;
				var _v8 = A4(
					$author$project$Tools$CentroidAverage$update,
					msg,
					options.centroidAverageOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolCentroidAverage, options.tools),
					isTrack);
				var newOptions = _v8.a;
				var actions = _v8.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{centroidAverageOptions: newOptions}),
					actions);
			case 'ToolCurveFormerMsg':
				var msg = toolMsg.a;
				var _v9 = A4(
					$author$project$Tools$CurveFormer$update,
					msg,
					options.curveFormerOptions,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolCurveFormer, options.tools),
					isTrack);
				var newOptions = _v9.a;
				var actions = _v9.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{curveFormerOptions: newOptions}),
					actions);
			case 'ToolBendSmootherMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v11 = A4(
						$author$project$Tools$BendSmoother$update,
						msg,
						options.bendSmootherOptions,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolBendSmoother, options.tools),
						track);
					var newOptions = _v11.a;
					var actions = _v11.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{bendSmootherOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolNudgeMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v13 = A4(
						$author$project$Tools$Nudge$update,
						msg,
						options.nudgeOptions,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolNudge, options.tools),
						track);
					var newOptions = _v13.a;
					var actions = _v13.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{nudgeOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToggleImperial':
				var newOptions = _Utils_update(
					options,
					{imperial: !options.imperial});
				return _Utils_Tuple2(
					newOptions,
					_List_fromArray(
						[
							A2(
							$author$project$Actions$StoreLocally,
							'measure',
							$elm$json$Json$Encode$bool(newOptions.imperial))
						]));
			case 'ToolInfoMsg':
				var infoMsg = toolMsg.a;
				var newOptions = A2($author$project$Tools$TrackInfoBox$update, infoMsg, options.infoOptions);
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{infoOptions: newOptions}),
					_List_Nil);
			case 'ToolDisplaySettingMsg':
				var m = toolMsg.a;
				var _v14 = A2($author$project$Tools$DisplaySettings$update, m, options.displaySettings);
				var newOptions = _v14.a;
				var actions = _v14.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{displaySettings: newOptions}),
					actions);
			case 'ToolOutAndBackMsg':
				var msg = toolMsg.a;
				var _v15 = A3($author$project$Tools$OutAndBack$update, msg, options.outAndBackSettings, isTrack);
				var newOptions = _v15.a;
				var actions = _v15.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{outAndBackSettings: newOptions}),
					actions);
			case 'ToolSimplifyMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v17 = A4(
						$author$project$Tools$Simplify$update,
						msg,
						options.simplifySettings,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolSimplify, options.tools),
						track);
					var newOptions = _v17.a;
					var actions = _v17.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{simplifySettings: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolInterpolateMsg':
				var msg = toolMsg.a;
				var _v18 = A4(
					$author$project$Tools$Interpolate$update,
					msg,
					options.interpolateSettings,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolInterpolate, options.tools),
					isTrack);
				var newOptions = _v18.a;
				var actions = _v18.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{interpolateSettings: newOptions}),
					actions);
			case 'ToolProfileSmoothMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v20 = A4(
						$author$project$Tools$ProfileSmooth$update,
						msg,
						options.profileSmoothSettings,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolProfileSmooth, options.tools),
						track);
					var newOptions = _v20.a;
					var actions = _v20.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{profileSmoothSettings: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolMoveScaleRotateMsg':
				var msg = toolMsg.a;
				var _v21 = A4(
					$author$project$Tools$MoveScaleRotate$update,
					msg,
					options.moveScaleRotateSettings,
					A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolMoveScaleRotate, options.tools),
					isTrack);
				var newOptions = _v21.a;
				var actions = _v21.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{moveScaleRotateSettings: newOptions}),
					actions);
			case 'ToolFlythroughMsg':
				var flyMsg = toolMsg.a;
				var _v22 = function () {
					if (isTrack.$ === 'Just') {
						var track = isTrack.a;
						return A3($author$project$Tools$Flythrough$update, options.flythroughSettings, flyMsg, track);
					} else {
						return _Utils_Tuple2(options.flythroughSettings, _List_Nil);
					}
				}();
				var newOptions = _v22.a;
				var actions = _v22.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{flythroughSettings: newOptions}),
					actions);
			case 'ToolStravaMsg':
				var msg = toolMsg.a;
				var _v24 = A4(
					$author$project$Tools$StravaTools$update,
					msg,
					options.stravaSettings,
					A2($elm$core$Basics$composeR, $author$project$ToolsController$ToolStravaMsg, msgWrapper),
					isTrack);
				var newOptions = _v24.a;
				var actions = _v24.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{stravaSettings: newOptions}),
					actions);
			case 'ToolMoveAndStretchMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v26 = A5(
						$author$project$Tools$MoveAndStretch$update,
						msg,
						options.moveAndStretchSettings,
						A2($elm$core$Basics$composeR, $author$project$ToolsController$ToolMoveAndStretchMsg, msgWrapper),
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolMoveAndStretch, options.tools),
						track);
					var newOptions = _v26.a;
					var actions = _v26.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{moveAndStretchSettings: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolStartFinishMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v28 = A3($author$project$Tools$StartFinish$update, msg, options.startFinishOptions, track);
					var newOptions = _v28.a;
					var actions = _v28.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{startFinishOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolSplitJoinMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v30 = A4(
						$author$project$Tools$SplitAndJoin$update,
						msg,
						options.splitAndJoinOptions,
						track,
						A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolSplitJoinMsg));
					var newOptions = _v30.a;
					var actions = _v30.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{splitAndJoinOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolIntersectionMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var _v32 = A3(
						$author$project$Tools$Intersections$update,
						msg,
						options.intersectionOptions,
						A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolIntersectionMsg));
					var newOptions = _v32.a;
					var actions = _v32.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{intersectionOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolStraightenMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v34 = A3($author$project$Tools$Straightener$update, msg, options.straightenOptions, track);
					var newOptions = _v34.a;
					var actions = _v34.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{straightenOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolGraphMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v36 = A4(
						$author$project$Tools$Graph$update,
						msg,
						options.graphOptions,
						track,
						A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolGraphMsg));
					var newOptions = _v36.a;
					var actions = _v36.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{graphOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			case 'ToolLandUseMsg':
				var msg = toolMsg.a;
				var _v37 = A3(
					$author$project$Tools$LandUse$update,
					msg,
					A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolLandUseMsg),
					options.landUseOptions);
				var newOptions = _v37.a;
				var actions = _v37.b;
				return _Utils_Tuple2(
					_Utils_update(
						options,
						{landUseOptions: newOptions}),
					actions);
			case 'ToolSmartSmootherMsg':
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v39 = A4(
						$author$project$Tools$SmartSmoother$update,
						msg,
						options.smartSmootherOptions,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolSmartSmoother, options.tools),
						track);
					var newOptions = _v39.a;
					var actions = _v39.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{smartSmootherOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
			default:
				var msg = toolMsg.a;
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					var _v41 = A5(
						$author$project$Tools$NamedSegment$update,
						msg,
						options.namedSegmentOptions,
						track,
						A2($author$project$ToolsController$getColour, $author$project$ToolsController$ToolNamedSegments, options.tools),
						A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolNamedSegmentMsg));
					var newOptions = _v41.a;
					var actions = _v41.b;
					return _Utils_Tuple2(
						_Utils_update(
							options,
							{namedSegmentOptions: newOptions}),
						actions);
				} else {
					return _Utils_Tuple2(options, _List_Nil);
				}
		}
	});
var $author$project$Tools$TrackInfoBox$updateMemory = F2(
	function (memory, options) {
		return _Utils_update(
			options,
			{
				memoryInfo: $elm$core$Maybe$Just(memory)
			});
	});
var $author$project$TrackLoaded$Orange = {$: 'Orange'};
var $author$project$TrackLoaded$Purple = {$: 'Purple'};
var $author$project$TrackLoaded$whichMarkerIsNearestStart = function (track) {
	var _v0 = track.markerPosition;
	if (_v0.$ === 'Just') {
		var purple = _v0.a;
		return (_Utils_cmp(track.currentPosition, purple) < 1) ? $author$project$TrackLoaded$Orange : $author$project$TrackLoaded$Purple;
	} else {
		return $author$project$TrackLoaded$Orange;
	}
};
var $author$project$TrackLoaded$internalUseTree = F2(
	function (newTree, oldTrack) {
		var newLength = $author$project$DomainModel$skipCount(newTree);
		var firstMarker = $author$project$TrackLoaded$whichMarkerIsNearestStart(oldTrack);
		var changeInTrackLength = newLength - $author$project$DomainModel$skipCount(oldTrack.trackTree);
		var newOrange = A3(
			$elm$core$Basics$clamp,
			0,
			newLength,
			function () {
				if (firstMarker.$ === 'Orange') {
					return oldTrack.currentPosition;
				} else {
					return A2($elm$core$Basics$max, 0, oldTrack.currentPosition + changeInTrackLength);
				}
			}());
		var newPurple = function () {
			var _v0 = _Utils_Tuple2(oldTrack.markerPosition, firstMarker);
			if (_v0.a.$ === 'Just') {
				if (_v0.b.$ === 'Orange') {
					var purple = _v0.a.a;
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						A3($elm$core$Basics$clamp, 0, newLength, purple + changeInTrackLength));
				} else {
					var purple = _v0.a.a;
					var _v2 = _v0.b;
					return $elm$core$Maybe$Just(
						A3($elm$core$Basics$clamp, 0, newLength, purple));
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		return _Utils_update(
			oldTrack,
			{
				currentPosition: newOrange,
				leafIndex: $author$project$TrackLoaded$indexLeaves(newTree),
				markerPosition: newPurple,
				trackTree: newTree
			});
	});
var $author$project$TrackLoaded$useTreeWithRepositionedMarkers = F2(
	function (mTree, oldTrack) {
		if (mTree.$ === 'Just') {
			var newTree = mTree.a;
			return A2($author$project$TrackLoaded$internalUseTree, newTree, oldTrack);
		} else {
			return oldTrack;
		}
	});
var $author$project$Tools$Nudge$widenBendHelper = F3(
	function (points, adjustment, track) {
		var _v0 = _Utils_Tuple2(
			$elm$core$List$minimum(points),
			$elm$core$List$maximum(points));
		if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
			var statedStart = _v0.a.a;
			var statedEnd = _v0.b.a;
			var useDummyTrack = _Utils_update(
				track,
				{
					currentPosition: statedStart,
					markerPosition: $elm$core$Maybe$Just(statedEnd)
				});
			var useDummyOptions = _Utils_update(
				$author$project$Tools$Nudge$defaultOptions,
				{
					fadeExtent: $ianmackenzie$elm_units$Length$meters(10),
					horizontal: adjustment
				});
			var _v1 = A2($author$project$Tools$Nudge$computeNudgedPoints, useDummyOptions, useDummyTrack);
			var _v2 = _v1.a;
			var actualStart = _v2.a;
			var actualEnd = _v2.b;
			var newPoints = _v1.b;
			var newTree = A5(
				$author$project$DomainModel$replaceRange,
				actualStart,
				$author$project$DomainModel$skipCount(track.trackTree) - actualEnd,
				track.referenceLonLat,
				A2(
					$elm$core$List$map,
					function ($) {
						return $.gpx;
					},
					newPoints),
				track.trackTree);
			return newTree;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Tools$DirectionChanges$widenBend = F3(
	function (points, adjustment, track) {
		return A3($author$project$Tools$Nudge$widenBendHelper, points, adjustment, track);
	});
var $author$project$Main$adoptTrackInModel = F3(
	function (track, segments, model) {
		var toolOptions = model.toolOptions;
		var graphOptions = toolOptions.graphOptions;
		var graphFromTrack = _Utils_update(
			graphOptions,
			{
				analyzed: false,
				graph: $author$project$Tools$Graph$trivialGraph(track)
			});
		var newToolOptions = _Utils_update(
			toolOptions,
			{
				graphOptions: graphFromTrack,
				namedSegmentOptions: $author$project$Tools$NamedSegment$initialise(segments)
			});
		var modelWithTrack = _Utils_update(
			model,
			{
				modalMessage: $elm$core$Maybe$Nothing,
				paneLayoutOptions: A2($author$project$PaneLayoutManager$initialise, track, model.paneLayoutOptions),
				previews: $elm$core$Dict$empty,
				toolOptions: newToolOptions,
				track: $elm$core$Maybe$Just(track)
			});
		var actions = _List_fromArray(
			[$author$project$Actions$TrackHasChanged, $author$project$Actions$MapRefresh]);
		return A2($author$project$Main$performActionsOnModel, actions, modelWithTrack);
	});
var $author$project$Main$performActionsOnModel = F2(
	function (actions, model) {
		var performAction = F2(
			function (action, foldedModel) {
				var _v19 = _Utils_Tuple2(action, foldedModel.track);
				_v19$64:
				while (true) {
					switch (_v19.a.$) {
						case 'ProfileClick':
							if (_v19.b.$ === 'Just') {
								var _v20 = _v19.a;
								var container = _v20.a;
								var x = _v20.b;
								var track = _v19.b.a;
								var trackDistance = model.toolOptions.imperial ? $ianmackenzie$elm_units$Length$miles(x) : $ianmackenzie$elm_units$Length$kilometers(x);
								var newOrangeIndex = A4($author$project$PaneLayoutManager$profileViewHandlesClick, container, trackDistance, model.paneLayoutOptions, track);
								var newTrack = function () {
									if (newOrangeIndex.$ === 'Just') {
										var newOrange = newOrangeIndex.a;
										return _Utils_update(
											track,
											{currentPosition: newOrange});
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'MakeMapPointsDraggable':
							var flag = _v19.a.a;
							return _Utils_update(
								foldedModel,
								{mapPointsDraggable: flag});
						case 'ReRender':
							if (_v19.b.$ === 'Just') {
								var _v22 = _v19.a;
								return _Utils_update(
									foldedModel,
									{needsRendering: true});
							} else {
								break _v19$64;
							}
						case 'DisplayInfo':
							var _v23 = _v19.a;
							var tool = _v23.a;
							var text = _v23.b;
							return _Utils_update(
								foldedModel,
								{
									infoText: function () {
										var _v24 = foldedModel.infoText;
										if (_v24.$ === 'Just') {
											var _v25 = _v24.a;
											var isTool = _v25.a;
											var isText = _v25.b;
											return (_Utils_eq(tool, isTool) && _Utils_eq(text, isText)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
												_Utils_Tuple2(tool, text));
										} else {
											return $elm$core$Maybe$Just(
												_Utils_Tuple2(tool, text));
										}
									}()
								});
						case 'SetCurrent':
							if (_v19.b.$ === 'Just') {
								var position = _v19.a.a;
								var track = _v19.b.a;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(
											_Utils_update(
												track,
												{currentPosition: position}))
									});
							} else {
								break _v19$64;
							}
						case 'SetCurrentFromMapClick':
							if (_v19.b.$ === 'Just') {
								var position = _v19.a.a;
								var track = _v19.b.a;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(
											_Utils_update(
												track,
												{currentPosition: position}))
									});
							} else {
								break _v19$64;
							}
						case 'ShowPreview':
							if (_v19.b.$ === 'Just') {
								var previewData = _v19.a.a;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										previews: A3($elm$core$Dict$insert, previewData.tag, previewData, foldedModel.previews)
									});
							} else {
								break _v19$64;
							}
						case 'HidePreview':
							if (_v19.b.$ === 'Just') {
								var tag = _v19.a.a;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										previews: A2($elm$core$Dict$remove, tag, foldedModel.previews)
									});
							} else {
								break _v19$64;
							}
						case 'DelayMessage':
							if (_v19.b.$ === 'Just') {
								var _v26 = _v19.a;
								return foldedModel;
							} else {
								break _v19$64;
							}
						case 'WithUndo':
							if (_v19.b.$ === 'Just') {
								var undoInfo = _v19.a.a;
								var track = _v19.b.a;
								var newTrack = A5($author$project$TrackLoaded$addToUndoStack, undoInfo.action, undoInfo.fromStart, undoInfo.fromEnd, undoInfo.originalPoints, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'BendSmootherApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$BendSmoother$applyUsingOptions, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'DeletePointOrPoints':
							if (_v19.b.$ === 'Just') {
								var _v27 = _v19.a;
								var fromStart = _v27.a;
								var fromEnd = _v27.b;
								var track = _v19.b.a;
								var newTree = A3($author$project$Tools$DeletePoints$deleteSinglePoint, fromStart, fromEnd, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'BezierApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$BezierSplines$applyUsingOptions, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'CentroidAverageApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$CentroidAverage$applyUsingOptions, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'SmartSmootherApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var _v28 = _Utils_Tuple2(
									A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
									function () {
										var _v29 = track.markerPosition;
										if (_v29.$ === 'Just') {
											var purple = _v29.a;
											return $elm$core$Maybe$Just(
												A2($author$project$DomainModel$distanceFromIndex, purple, track.trackTree));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									}());
								var orangeDistance = _v28.a;
								var purpleDistance = _v28.b;
								var _v30 = A2($author$project$Tools$SmartSmoother$applyUsingOptions, options, track);
								var newTree = _v30.a;
								var oldPoints = _v30.b;
								var _v31 = function () {
									if (newTree.$ === 'Just') {
										var gotNewTree = newTree.a;
										return _Utils_Tuple2(
											A2($author$project$DomainModel$indexFromDistance, orangeDistance, gotNewTree),
											function () {
												if (purpleDistance.$ === 'Just') {
													var purple = purpleDistance.a;
													return $elm$core$Maybe$Just(
														A2($author$project$DomainModel$indexFromDistance, purple, gotNewTree));
												} else {
													return $elm$core$Maybe$Nothing;
												}
											}());
									} else {
										return _Utils_Tuple2(track.currentPosition, track.markerPosition);
									}
								}();
								var newOrange = _v31.a;
								var newPurple = _v31.b;
								var trackWithMarkers = function () {
									if (newTree.$ === 'Just') {
										var gotNewTree = newTree.a;
										return _Utils_update(
											track,
											{
												currentPosition: newOrange,
												leafIndex: $author$project$TrackLoaded$indexLeaves(gotNewTree),
												markerPosition: newPurple,
												trackTree: gotNewTree
											});
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(trackWithMarkers)
									});
							} else {
								break _v19$64;
							}
						case 'CurveFormerApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$CurveFormer$applyUsingOptions, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'NudgeApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(
											A2($author$project$Tools$Nudge$applyUsingOptions, options, track))
									});
							} else {
								break _v19$64;
							}
						case 'PasteStravaSegment':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var toolOptions = foldedModel.toolOptions;
								var _v35 = A2($author$project$Tools$StravaTools$paste, options, track);
								var newTree = _v35.a;
								var _v36 = _v35.c;
								var entry = _v36.a;
								var exit = _v36.b;
								var namedSegment = function () {
									var _v38 = $author$project$Tools$StravaTools$segmentName(options);
									if (_v38.$ === 'Just') {
										var name = _v38.a;
										return $elm$core$Maybe$Just(
											{
												createMode: $author$project$Tools$NamedSegmentOptions$ManualSegment,
												endDistance: A2($author$project$DomainModel$distanceFromIndex, exit, track.trackTree),
												endOk: true,
												name: name,
												startDistance: A2($author$project$DomainModel$distanceFromIndex, entry, track.trackTree),
												startOk: true
											});
									} else {
										return $elm$core$Maybe$Nothing;
									}
								}();
								var newSegmentOptions = function () {
									if (namedSegment.$ === 'Just') {
										var segment = namedSegment.a;
										return A2($author$project$Tools$NamedSegment$addSegment, segment, toolOptions.namedSegmentOptions);
									} else {
										return toolOptions.namedSegmentOptions;
									}
								}();
								var newToolOptions = _Utils_update(
									toolOptions,
									{namedSegmentOptions: newSegmentOptions});
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										toolOptions: newToolOptions,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ClearStravaSegmentData':
							var _v39 = _v19.a;
							var toolOptions = foldedModel.toolOptions;
							var newStravaSettings = $author$project$Tools$StravaTools$clearSegmentData(toolOptions.stravaSettings);
							return _Utils_update(
								foldedModel,
								{
									toolOptions: _Utils_update(
										toolOptions,
										{stravaSettings: newStravaSettings})
								});
						case 'Autofix':
							if (_v19.b.$ === 'Just') {
								var indices = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A3($author$project$Tools$BendSmoother$softenMultiplePoints, model.toolOptions.bendSmootherOptions, indices, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'OutAndBackApplyWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$OutAndBack$apply, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplySimplify':
							if (_v19.b.$ === 'Just') {
								var _v40 = _v19.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Simplify$apply, foldedModel.toolOptions.simplifySettings, track);
								var _v41 = _Utils_Tuple2(
									A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
									function () {
										var _v42 = track.markerPosition;
										if (_v42.$ === 'Just') {
											var purple = _v42.a;
											return $elm$core$Maybe$Just(
												A2($author$project$DomainModel$distanceFromIndex, purple, track.trackTree));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									}());
								var orangeDistance = _v41.a;
								var purpleDistance = _v41.b;
								var _v43 = function () {
									if (newTree.$ === 'Just') {
										var gotNewTree = newTree.a;
										return _Utils_Tuple2(
											A2($author$project$DomainModel$indexFromDistance, orangeDistance, gotNewTree),
											function () {
												if (purpleDistance.$ === 'Just') {
													var purple = purpleDistance.a;
													return $elm$core$Maybe$Just(
														A2($author$project$DomainModel$indexFromDistance, purple, gotNewTree));
												} else {
													return $elm$core$Maybe$Nothing;
												}
											}());
									} else {
										return _Utils_Tuple2(track.currentPosition, track.markerPosition);
									}
								}();
								var newOrange = _v43.a;
								var newPurple = _v43.b;
								var trackWithMarkers = function () {
									if (newTree.$ === 'Just') {
										var gotNewTree = newTree.a;
										return _Utils_update(
											track,
											{currentPosition: newOrange, markerPosition: newPurple, trackTree: gotNewTree});
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(trackWithMarkers)
									});
							} else {
								break _v19$64;
							}
						case 'MoveAndStretchWithOptions':
							if (_v19.b.$ === 'Just') {
								var settings = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$MoveAndStretch$apply, settings, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'OneClickQuickFix':
							if (_v19.b.$ === 'Just') {
								var _v47 = _v19.a;
								var track = _v19.b.a;
								var newTree = $author$project$Tools$OneClickQuickFix$apply(track);
								var _v48 = _Utils_Tuple2(
									A2(
										$author$project$DomainModel$indexFromDistance,
										A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
										A2($elm$core$Maybe$withDefault, track.trackTree, newTree)),
									function () {
										var _v49 = track.markerPosition;
										if (_v49.$ === 'Just') {
											var purple = _v49.a;
											return $elm$core$Maybe$Just(
												A2(
													$author$project$DomainModel$indexFromDistance,
													A2($author$project$DomainModel$distanceFromIndex, purple, track.trackTree),
													A2($elm$core$Maybe$withDefault, track.trackTree, newTree)));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									}());
								var newOrange = _v48.a;
								var newPurple = _v48.b;
								var newTrack = _Utils_update(
									track,
									{
										currentPosition: newOrange,
										leafIndex: $author$project$TrackLoaded$indexLeaves(
											A2($elm$core$Maybe$withDefault, track.trackTree, newTree)),
										markerPosition: newPurple,
										trackTree: A2($elm$core$Maybe$withDefault, track.trackTree, newTree)
									});
								var _v50 = _Utils_Tuple2(0, 0);
								var fromStart = _v50.a;
								var fromEnd = _v50.b;
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplyInterpolateWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Interpolate$apply, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'Straighten':
							if (_v19.b.$ === 'Just') {
								var _v51 = _v19.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Straightener$apply, model.toolOptions.straightenOptions, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplySmoothProfile':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTrack = function () {
									var _v52 = A2($author$project$Tools$ProfileSmooth$apply, options, track);
									if (_v52.$ === 'Just') {
										var newTree = _v52.a;
										return A2(
											$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
											$elm$core$Maybe$Just(newTree),
											track);
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'AdjustTimes':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Timestamp$applyTimeShift, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'TimeDoubling':
							if (_v19.b.$ === 'Just') {
								var _v53 = _v19.a;
								var track = _v19.b.a;
								var newTree = $author$project$Tools$Timestamp$applyDoubling(track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'UsePhysicsModel':
							if (_v19.b.$ === 'Just') {
								var _v54 = _v19.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Timestamp$applyPhysics, model.toolOptions.timestampOptions, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'SetTimeTicks':
							if (_v19.b.$ === 'Just') {
								var ticks = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$Timestamp$applyTicks, ticks, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'CloseLoopWithOptions':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$StartFinish$applyCloseLoop, options, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ReverseTrack':
							if (_v19.b.$ === 'Just') {
								var _v55 = _v19.a;
								var track = _v19.b.a;
								var newTree = $author$project$Tools$StartFinish$applyReverse(track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'MoveStartPoint':
							if (_v19.b.$ === 'Just') {
								var newStart = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$StartFinish$applyMoveStart, newStart, track);
								var newTrack = function () {
									if (newTree.$ === 'Just') {
										var aNewTree = newTree.a;
										return _Utils_update(
											track,
											{
												currentPosition: 0,
												markerPosition: $elm$core$Maybe$Nothing,
												referenceLonLat: A2($author$project$DomainModel$gpxPointFromIndex, 0, aNewTree),
												trackTree: aNewTree
											});
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'AddRiderPens':
							if (_v19.b.$ === 'Just') {
								var _v57 = _v19.a;
								var track = _v19.b.a;
								var _v58 = $author$project$Tools$StartFinish$addPens(track);
								var newTree = _v58.a;
								var oldPoints = _v58.b;
								var newTrack = function () {
									if (newTree.$ === 'Just') {
										var aNewTree = newTree.a;
										return _Utils_update(
											track,
											{
												currentPosition: 0,
												markerPosition: $elm$core$Maybe$Nothing,
												referenceLonLat: A2($author$project$DomainModel$gpxPointFromIndex, 0, aNewTree),
												trackTree: aNewTree
											});
									} else {
										return track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplyRotateAndScale':
							if (_v19.b.$ === 'Just') {
								var options = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$MoveScaleRotate$applyRotateAndScale, options, track);
								var newTrack = A2(
									$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
									newTree,
									_Utils_update(
										track,
										{
											referenceLonLat: function () {
												if (newTree.$ === 'Just') {
													var aTree = newTree.a;
													return A2($author$project$DomainModel$gpxPointFromIndex, 0, aTree);
												} else {
													return track.referenceLonLat;
												}
											}()
										}));
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplyRecentre':
							if (_v19.b.$ === 'Just') {
								var coords = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$MoveScaleRotate$applyRecentre, coords, track);
								var newTrack = function () {
									var _v61 = track.lastMapClick;
									var lon = _v61.a;
									var lat = _v61.b;
									var newReference = {
										altitude: $ianmackenzie$elm_units$Quantity$zero,
										latitude: $ianmackenzie$elm_units$Angle$degrees(lat),
										longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
											$ianmackenzie$elm_units$Angle$degrees(lon)),
										timestamp: $elm$core$Maybe$Nothing
									};
									return A2(
										$author$project$TrackLoaded$useTreeWithRepositionedMarkers,
										newTree,
										_Utils_update(
											track,
											{referenceLonLat: newReference}));
								}();
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplyMapElevations':
							if (_v19.b.$ === 'Just') {
								var elevations = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$MoveScaleRotate$applyMapElevations, elevations, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ApplyLandUseAltitudes':
							if (_v19.b.$ === 'Just') {
								var altitudes = _v19.a.a;
								var track = _v19.b.a;
								var newTrack = _Utils_update(
									track,
									{
										landUseData: A2($author$project$LandUseDataOSM$applyAltitudes, altitudes, track)
									});
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'PointMovedOnMap':
							if (_v19.b.$ === 'Just') {
								var _v62 = _v19.a;
								var startLon = _v62.a;
								var startLat = _v62.b;
								var endLon = _v62.c;
								var endLat = _v62.d;
								var track = _v19.b.a;
								var startGpx = {
									altitude: $ianmackenzie$elm_units$Quantity$zero,
									latitude: $ianmackenzie$elm_units$Angle$degrees(startLat),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(startLon)),
									timestamp: $elm$core$Maybe$Nothing
								};
								var index = A5($author$project$DomainModel$nearestToLonLat, startGpx, track.currentPosition, track.trackTree, track.referenceLonLat, track.leafIndex);
								var positionBeforeDrag = A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree);
								var endGpx = {
									altitude: positionBeforeDrag.altitude,
									latitude: $ianmackenzie$elm_units$Angle$degrees(endLat),
									longitude: $ianmackenzie$elm_geometry$Direction2d$fromAngle(
										$ianmackenzie$elm_units$Angle$degrees(endLon)),
									timestamp: $elm$core$Maybe$Nothing
								};
								var newTree = A4($author$project$DomainModel$updatePointByIndexInSitu, index, endGpx, track.referenceLonLat, track.trackTree);
								var _v63 = _Utils_Tuple2(
									index,
									$author$project$DomainModel$skipCount(track.trackTree) - index);
								var fromStart = _v63.a;
								var fromEnd = _v63.b;
								var newTrack = A5(
									$author$project$TrackLoaded$addToUndoStack,
									action,
									fromStart,
									fromEnd,
									_List_fromArray(
										[positionBeforeDrag]),
									_Utils_update(
										track,
										{trackTree: newTree}));
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'SaveLastMapClick':
							if (_v19.b.$ === 'Just') {
								var _v64 = _v19.a;
								var lon = _v64.a;
								var lat = _v64.b;
								var track = _v19.b.a;
								var newTrack = _Utils_update(
									track,
									{
										lastMapClick: _Utils_Tuple2(lon, lat)
									});
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'TrackFromSvg':
							var svgContent = _v19.a.a;
							var newTrack = A2($author$project$SvgPathExtractor$trackFromSvg, model.svgFileOptions, svgContent);
							if (newTrack.$ === 'Just') {
								var track = newTrack.a;
								return A3($author$project$Main$adoptTrackInModel, track, _List_Nil, foldedModel);
							} else {
								return _Utils_update(
									foldedModel,
									{
										modalMessage: $elm$core$Maybe$Just('nosvg')
									});
							}
						case 'ParseAndAppend':
							if (_v19.b.$ === 'Just') {
								var gpxContent = _v19.a.a;
								var track = _v19.b.a;
								var newTree = A2($author$project$Tools$SplitAndJoin$parseAndAppend, gpxContent, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'StartRoutePlanning':
							if (_v19.b.$ === 'Just') {
								var _v66 = _v19.a;
								var track = _v19.b.a;
								var toolOptions = foldedModel.toolOptions;
								var newPaneLayout = $author$project$PaneLayoutManager$forceRouteView(foldedModel.paneLayoutOptions);
								var graphOptions = toolOptions.graphOptions;
								var _v67 = A2($author$project$Tools$Graph$enterRoutePlanningMode, graphOptions, track);
								var newGraphOptions = _v67.a;
								var newTree = _v67.b;
								var newToolOptions = _Utils_update(
									toolOptions,
									{graphOptions: newGraphOptions});
								var newTrack = _Utils_update(
									track,
									{trackTree: newTree});
								return _Utils_update(
									foldedModel,
									{
										paneLayoutOptions: newPaneLayout,
										toolOptions: newToolOptions,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'ExitRoutePlanning':
							if (_v19.b.$ === 'Just') {
								var _v68 = _v19.a;
								var toolOptions = foldedModel.toolOptions;
								var newToolOptions = _Utils_update(
									toolOptions,
									{
										tools: A2(
											$elm$core$List$map,
											A2($author$project$ToolsController$setToolState, $author$project$ToolsController$ToolGraph, $author$project$ToolsController$Contracted),
											toolOptions.tools)
									});
								var newPaneLayout = $author$project$PaneLayoutManager$exitRouteView(foldedModel.paneLayoutOptions);
								return _Utils_update(
									foldedModel,
									{paneLayoutOptions: newPaneLayout, toolOptions: newToolOptions});
							} else {
								break _v19$64;
							}
						case 'AddTraversal':
							if (_v19.b.$ === 'Just') {
								var edge = _v19.a.a;
								var toolOptions = foldedModel.toolOptions;
								var graphOptions = toolOptions.graphOptions;
								var newGraphOptions = A2($author$project$Tools$Graph$addTraversal, edge, graphOptions);
								var newToolOptions = _Utils_update(
									toolOptions,
									{graphOptions: newGraphOptions});
								return _Utils_update(
									foldedModel,
									{toolOptions: newToolOptions});
							} else {
								break _v19$64;
							}
						case 'AddSelfLoop':
							if (_v19.b.$ === 'Just') {
								var node = _v19.a.a;
								var toolOptions = foldedModel.toolOptions;
								var graphOptions = toolOptions.graphOptions;
								var newGraphOptions = A2($author$project$Tools$Graph$addSelfLoop, node, graphOptions);
								var newToolOptions = _Utils_update(
									toolOptions,
									{graphOptions: newGraphOptions});
								return _Utils_update(
									foldedModel,
									{toolOptions: newToolOptions});
							} else {
								break _v19$64;
							}
						case 'DeleteEdge':
							if (_v19.b.$ === 'Just') {
								var edge = _v19.a.a;
								var toolOptions = foldedModel.toolOptions;
								var graphOptions = toolOptions.graphOptions;
								var newToolOptions = _Utils_update(
									toolOptions,
									{
										graphOptions: A2($author$project$Tools$Graph$deleteEdge, edge, graphOptions)
									});
								return _Utils_update(
									foldedModel,
									{toolOptions: newToolOptions});
							} else {
								break _v19$64;
							}
						case 'ChangeActiveTrack':
							if (_v19.b.$ === 'Just') {
								var edge = _v19.a.a;
								var toolOptions = foldedModel.toolOptions;
								var graphOptions = toolOptions.graphOptions;
								var newGraphOptions = A2($author$project$Tools$Graph$changeActiveTrack, edge, graphOptions);
								var newToolOptions = _Utils_update(
									toolOptions,
									{graphOptions: newGraphOptions});
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										toolOptions: newToolOptions,
										track: A2($author$project$Tools$Graph$getTrack, edge, graphOptions)
									});
							} else {
								break _v19$64;
							}
						case 'MakeRouteFromGraph':
							if (_v19.b.$ === 'Just') {
								var _v69 = _v19.a;
								var toolOptions = foldedModel.toolOptions;
								var graphOptions = toolOptions.graphOptions;
								var newGraphOptions = $author$project$Tools$Graph$makeNewRoute(graphOptions);
								var newToolOptions = _Utils_update(
									toolOptions,
									{graphOptions: newGraphOptions});
								var newTrack = function () {
									var _v70 = A2($author$project$Tools$Graph$getTrack, 0, newGraphOptions);
									if (_v70.$ === 'Just') {
										var foundNewTrack = _v70.a;
										return $elm$core$Maybe$Just(
											A5($author$project$TrackLoaded$addToUndoStack, action, 0, 0, _List_Nil, foundNewTrack));
									} else {
										return foldedModel.track;
									}
								}();
								return _Utils_update(
									foldedModel,
									{needsRendering: true, toolOptions: newToolOptions, track: newTrack});
							} else {
								break _v19$64;
							}
						case 'CombineNearbyPoints':
							if (_v19.b.$ === 'Just') {
								var _v71 = _v19.a;
								var track = _v19.b.a;
								var oldToolOptions = model.toolOptions;
								var oldGraphOptions = oldToolOptions.graphOptions;
								var _v72 = A2($author$project$Tools$Graph$combineNearbyPoints, oldGraphOptions, track);
								var newGraphOptions = _v72.a;
								var newTree = _v72.b;
								var newToolOptions = _Utils_update(
									oldToolOptions,
									{graphOptions: newGraphOptions});
								var _v73 = _Utils_Tuple2(
									A2(
										$author$project$DomainModel$indexFromDistance,
										A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree),
										newTree),
									function () {
										var _v74 = track.markerPosition;
										if (_v74.$ === 'Just') {
											var purple = _v74.a;
											return $elm$core$Maybe$Just(
												A2(
													$author$project$DomainModel$indexFromDistance,
													A2($author$project$DomainModel$distanceFromIndex, purple, track.trackTree),
													newTree));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									}());
								var newOrange = _v73.a;
								var newPurple = _v73.b;
								var newTrack = _Utils_update(
									track,
									{currentPosition: newOrange, markerPosition: newPurple, trackTree: newTree});
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										toolOptions: newToolOptions,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'LoadGpxFromStrava':
							var gpxContent = _v19.a.a;
							var _v75 = A2(
								$author$project$Main$update,
								$author$project$Main$GpxLoaded(gpxContent),
								foldedModel);
							var modelWithNewTrack = _v75.a;
							return modelWithNewTrack;
						case 'TrackFromStravaActivity':
							var _v76 = _v19.a;
							var header = _v76.a;
							var streams = _v76.b;
							var newTrack = A2($author$project$Tools$StravaTools$trackFromActivity, header, streams);
							if (newTrack.$ === 'Just') {
								var track = newTrack.a;
								return A3($author$project$Main$adoptTrackInModel, track, _List_Nil, foldedModel);
							} else {
								return _Utils_update(
									foldedModel,
									{
										modalMessage: $elm$core$Maybe$Just('nosvg')
									});
							}
						case 'WidenBend':
							if (_v19.b.$ === 'Just') {
								var _v78 = _v19.a;
								var points = _v78.a;
								var adjustment = _v78.b;
								var track = _v19.b.a;
								var newTree = A3($author$project$Tools$DirectionChanges$widenBend, points, adjustment, track);
								var newTrack = A2($author$project$TrackLoaded$useTreeWithRepositionedMarkers, newTree, track);
								return _Utils_update(
									foldedModel,
									{
										needsRendering: true,
										track: $elm$core$Maybe$Just(newTrack)
									});
							} else {
								break _v19$64;
							}
						case 'TrackHasChanged':
							if (_v19.b.$ === 'Just') {
								var _v79 = _v19.a;
								var _v80 = A2($author$project$ToolsController$refreshOpenTools, foldedModel.track, foldedModel.toolOptions);
								var refreshedToolOptions = _v80.a;
								var secondaryActions = _v80.b;
								var innerModelWithNewToolSettings = _Utils_update(
									foldedModel,
									{toolOptions: refreshedToolOptions});
								var modelAfterSecondaryActions = A2($author$project$Main$performActionsOnModel, secondaryActions, innerModelWithNewToolSettings);
								return _Utils_update(
									modelAfterSecondaryActions,
									{needsRendering: true});
							} else {
								break _v19$64;
							}
						case 'PointerChange':
							if (_v19.b.$ === 'Just') {
								var _v81 = _v19.a;
								var _v82 = A2($author$project$ToolsController$refreshOpenTools, foldedModel.track, foldedModel.toolOptions);
								var refreshedToolOptions = _v82.a;
								var secondaryActions = _v82.b;
								var innerModelWithNewToolSettings = _Utils_update(
									foldedModel,
									{toolOptions: refreshedToolOptions});
								var modelAfterSecondaryActions = A2($author$project$Main$performActionsOnModel, secondaryActions, innerModelWithNewToolSettings);
								return _Utils_update(
									modelAfterSecondaryActions,
									{needsRendering: true});
							} else {
								break _v19$64;
							}
						case 'SetMarker':
							if (_v19.b.$ === 'Just') {
								var maybeMarker = _v19.a.a;
								var track = _v19.b.a;
								var updatedTrack = _Utils_update(
									track,
									{markerPosition: maybeMarker});
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(updatedTrack)
									});
							} else {
								break _v19$64;
							}
						case 'StartFlythoughTicks':
							if (_v19.b.$ === 'Just') {
								var _v83 = _v19.a;
								return _Utils_update(
									foldedModel,
									{flythroughRunning: true});
							} else {
								break _v19$64;
							}
						case 'StopFlythroughTicks':
							if (_v19.b.$ === 'Just') {
								var _v84 = _v19.a;
								return _Utils_update(
									foldedModel,
									{flythroughRunning: false});
							} else {
								break _v19$64;
							}
						case 'StoredValueRetrieved':
							var _v85 = _v19.a;
							var key = _v85.a;
							var value = _v85.b;
							switch (key) {
								case 'welcome':
									return _Utils_eq(
										A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$bool, value),
										$elm$core$Result$Ok(true)) ? _Utils_update(
										foldedModel,
										{welcomeDisplayed: true}) : foldedModel;
								case 'location':
									var _v87 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, value);
									if (_v87.$ === 'Ok') {
										var countryCode = _v87.a;
										return _Utils_update(
											foldedModel,
											{
												location: $author$project$Tools$I18N$fromCountryCode(countryCode)
											});
									} else {
										return foldedModel;
									}
								case 'splits':
									return A2($author$project$Main$decodeSplitValues, value, foldedModel);
								case 'tools':
									return _Utils_update(
										foldedModel,
										{
											toolOptions: A2($author$project$ToolsController$restoreStoredValues, foldedModel.toolOptions, value)
										});
								case 'docks':
									return _Utils_update(
										foldedModel,
										{
											toolOptions: A2($author$project$ToolsController$restoreDockSettings, foldedModel.toolOptions, value)
										});
								case 'panes':
									return _Utils_update(
										foldedModel,
										{
											paneLayoutOptions: A2($author$project$PaneLayoutManager$restoreStoredValues, foldedModel.paneLayoutOptions, value)
										});
								case 'measure':
									return _Utils_update(
										foldedModel,
										{
											toolOptions: A2($author$project$ToolsController$restoreMeasure, foldedModel.toolOptions, value)
										});
								case 'background':
									var getColour = A2($elm$json$Json$Decode$decodeValue, $author$project$ToolsController$colourDecoder, value);
									if (getColour.$ === 'Ok') {
										var colour = getColour.a;
										return _Utils_update(
											foldedModel,
											{
												backgroundColour: $author$project$ToolsController$decodeColour(colour)
											});
									} else {
										return foldedModel;
									}
								case 'visuals':
									var toolOptions = model.toolOptions;
									var newToolOptions = _Utils_update(
										toolOptions,
										{
											displaySettings: A2($author$project$Tools$DisplaySettings$restoreSettings, value, toolOptions.displaySettings)
										});
									return _Utils_update(
										foldedModel,
										{toolOptions: newToolOptions});
								default:
									return foldedModel;
							}
						case 'HeapStatusUpdate':
							var heapStatus = _v19.a.a;
							var currentTools = model.toolOptions;
							var currentInfo = currentTools.infoOptions;
							var newInfo = A2($author$project$Tools$TrackInfoBox$updateMemory, heapStatus, currentInfo);
							var newTools = _Utils_update(
								currentTools,
								{infoOptions: newInfo});
							return _Utils_update(
								foldedModel,
								{toolOptions: newTools});
						case 'UndoLastAction':
							if (_v19.b.$ === 'Just') {
								var _v89 = _v19.a;
								var track = _v19.b.a;
								var topUndoAction = A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.action;
									},
									$elm$core$List$head(track.undos));
								if ((topUndoAction.$ === 'Just') && (topUndoAction.a.$ === 'MakeRouteFromGraph')) {
									var _v91 = topUndoAction.a;
									var toolOptions = foldedModel.toolOptions;
									var graphOptions = toolOptions.graphOptions;
									var newGraphOptions = $author$project$Tools$Graph$undoWalkRoute(graphOptions);
									var newToolOptions = _Utils_update(
										toolOptions,
										{graphOptions: newGraphOptions});
									var newTrack = A2($author$project$Tools$Graph$getTrack, 0, newGraphOptions);
									return _Utils_update(
										foldedModel,
										{needsRendering: true, toolOptions: newToolOptions, track: newTrack});
								} else {
									return _Utils_update(
										foldedModel,
										{
											track: $elm$core$Maybe$Just(
												$author$project$TrackLoaded$undoLastAction(track))
										});
								}
							} else {
								break _v19$64;
							}
						case 'RedoUndoneAction':
							if (_v19.b.$ === 'Just') {
								var _v92 = _v19.a;
								var track = _v19.b.a;
								var _v93 = track.redos;
								if (_v93.b) {
									var redo = _v93.a;
									var moreRedos = _v93.b;
									var modelAfterRedo = A2(
										$author$project$Main$performActionsOnModel,
										_List_fromArray(
											[
												redo.action,
												$author$project$Actions$WithUndo(redo)
											]),
										model);
									var _v94 = modelAfterRedo.track;
									if (_v94.$ === 'Just') {
										var trackAfterRedo = _v94.a;
										var trackWithCorrectRedoStack = _Utils_update(
											trackAfterRedo,
											{redos: moreRedos});
										return _Utils_update(
											modelAfterRedo,
											{
												needsRendering: true,
												track: $elm$core$Maybe$Just(trackWithCorrectRedoStack)
											});
									} else {
										return modelAfterRedo;
									}
								} else {
									return foldedModel;
								}
							} else {
								break _v19$64;
							}
						case 'FlushUndo':
							if (_v19.b.$ === 'Just') {
								var _v95 = _v19.a;
								var track = _v19.b.a;
								return _Utils_update(
									foldedModel,
									{
										track: $elm$core$Maybe$Just(
											_Utils_update(
												track,
												{redos: _List_Nil, undos: _List_Nil}))
									});
							} else {
								break _v19$64;
							}
						default:
							break _v19$64;
					}
				}
				return foldedModel;
			});
		return $author$project$Main$render(
			A3($elm$core$List$foldl, performAction, model, actions));
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		var processGpxContent = function (content) {
			var trackName = function () {
				var _v18 = $author$project$GpxParser$parseTrackName(content);
				if (_v18.$ === 'Just') {
					var gotTrackName = _v18.a;
					return gotTrackName;
				} else {
					return A2($elm$core$Maybe$withDefault, 'no track name', model.filename);
				}
			}();
			var gpxSegments = $author$project$GpxParser$parseSegments(content);
			var _v16 = A2($author$project$TrackLoaded$trackFromSegments, trackName, gpxSegments);
			if (_v16.$ === 'Just') {
				var _v17 = _v16.a;
				var track = _v17.a;
				var segments = _v17.b;
				var modelWithTrack = A3($author$project$Main$adoptTrackInModel, track, segments, model);
				return _Utils_Tuple2(
					modelWithTrack,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A3($author$project$Main$showTrackOnMapCentered, modelWithTrack.paneLayoutOptions, modelWithTrack.toolOptions.imperial, track),
								A2($author$project$LandUseDataOSM$requestLandUseData, $author$project$Main$ReceivedLandUseData, track),
								$author$project$LocalStorage$sessionClear,
								A2($andrewMacmurray$elm_delay$Delay$after, 1000, $author$project$Main$ProfilePaint)
							])));
			} else {
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							modalMessage: $elm$core$Maybe$Just('noload')
						}),
					$elm$core$Platform$Cmd$none);
			}
		};
		switch (msg.$) {
			case 'OAuthCodeReceived':
				var jsonCode = msg.a;
				var _v1 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, jsonCode);
				if (_v1.$ === 'Ok') {
					var code = _v1.a;
					return _Utils_Tuple2(
						model,
						A2($author$project$Tools$StravaDataLoad$exchangeCodeForToken, $author$project$Main$OAuthTokenReceived, code));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'OAuthTokenReceived':
				var token = msg.a;
				var tools = model.toolOptions;
				var newStrava = function () {
					if (token.$ === 'Ok') {
						var isToken = token.a;
						return A2($author$project$Tools$StravaTools$haveReceivedToken, isToken, tools.stravaSettings);
					} else {
						return tools.stravaSettings;
					}
				}();
				var newTools = _Utils_update(
					tools,
					{stravaSettings: newStrava});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{toolOptions: newTools}),
					$elm$core$Platform$Cmd$none);
			case 'DisplayWelcome':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							infoText: $elm$core$Maybe$Just(
								_Utils_Tuple2('main', 'welcome'))
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$LocalStorage$storageSetItem,
								'welcome',
								$elm$json$Json$Encode$bool(true)),
								$elm$core$Platform$Cmd$none
							])));
			case 'RGTOptions':
				var options = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							rgtOptions: A2($author$project$Tools$RGTOptions$update, options, model.rgtOptions)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ProfilePaint':
				var _v3 = model.track;
				if (_v3.$ === 'Just') {
					var track = _v3.a;
					return _Utils_Tuple2(
						model,
						A5($author$project$PaneLayoutManager$paintProfileCharts, model.paneLayoutOptions, model.toolOptions.imperial, track, model.toolOptions.namedSegmentOptions.namedSegments, model.previews));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'BackgroundClick':
				var toolsStuff = $author$project$ToolsController$clearPopups(model.toolOptions);
				var paneStuff = model.paneLayoutOptions;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							infoText: $elm$core$Maybe$Nothing,
							isPopupOpen: false,
							loadOptionsMenuOpen: false,
							paneLayoutOptions: _Utils_update(
								paneStuff,
								{popupVisible: false}),
							toolOptions: toolsStuff
						}),
					$elm$core$Platform$Cmd$none);
			case 'Language':
				var location = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{location: location}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$LocalStorage$storageSetItem,
								'location',
								$elm$json$Json$Encode$string(location.country.code)),
								$elm$core$Dict$isEmpty(location.textDictionary) ? A2($author$project$Tools$I18N$requestDictionary, $author$project$Main$I18NMsg, location.country.code) : $elm$core$Platform$Cmd$none
							])));
			case 'ToggleRGTOptions':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{rgtOptionsVisible: !model.rgtOptionsVisible}),
					$elm$core$Platform$Cmd$none);
			case 'ToggleLanguageEditor':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{languageEditorOpen: !model.languageEditorOpen}),
					$elm$core$Platform$Cmd$none);
			case 'I18NMsg':
				var i18n = msg.a;
				var _v4 = A3(
					$author$project$Tools$I18N$update,
					i18n,
					$author$project$Main$I18NMsg,
					_Utils_Tuple2(model.location, model.languageEditor));
				var newLocation = _v4.a;
				var newOptions = _v4.b;
				var cmds = _v4.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{languageEditor: newOptions, location: newLocation}),
					cmds);
			case 'AdjustTimeZone':
				var newZone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{zone: newZone}),
					$author$project$MyIP$requestIpInformation($author$project$Main$ReceivedIpDetails));
			case 'DismissModalMessage':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{modalMessage: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'ReceivedIpDetails':
				var response = msg.a;
				var ipInfo = $author$project$MyIP$processIpInfo(response);
				var mapInfoWithLocation = function () {
					if (ipInfo.$ === 'Just') {
						var ip = ipInfo.a;
						return {centreLat: ip.latitude, centreLon: ip.longitude, mapZoom: 10.0};
					} else {
						return {centreLat: 0.0, centreLon: 0.0, mapZoom: 1.0};
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ipInfo: ipInfo}),
					A2($author$project$MapPortController$createMap, $author$project$ViewMap$defaultStyleUrl, mapInfoWithLocation));
			case 'GpxRequested':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							modalMessage: $elm$core$Maybe$Just('askgpx')
						}),
					A2(
						$elm$file$File$Select$file,
						_List_fromArray(
							['text/gpx']),
						$author$project$Main$GpxSelected));
			case 'GpxSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							filename: $elm$core$Maybe$Just(
								$elm$file$File$name(file)),
							modalMessage: $elm$core$Maybe$Just('loading')
						}),
					A2(
						$elm$core$Task$perform,
						$author$project$Main$GpxLoaded,
						$elm$file$File$toString(file)));
			case 'GpxLoaded':
				var content = msg.a;
				return processGpxContent(content);
			case 'StorageMessage':
				var json = msg.a;
				var actions = A2($author$project$LocalStorage$processStoragePortMessage, json, model);
				var newModel = A2($author$project$Main$performActionsOnModel, actions, model);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, model));
			case 'SplitLeftDockRightEdge':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							leftDockRightEdge: A2($author$project$SplitPane$SplitPane$update, m, model.leftDockRightEdge)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'SplitRightDockLeftEdge':
				var m = msg.a;
				var newModel = $author$project$Main$adjustSpaceForContent(
					_Utils_update(
						model,
						{
							rightDockLeftEdge: A2($author$project$SplitPane$SplitPane$update, m, model.rightDockLeftEdge)
						}));
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'Resize':
				var width = msg.a;
				var height = msg.b;
				var newModel = A3($author$project$Main$allocateSpaceForDocksAndContent, width, height, model);
				return _Utils_Tuple2(
					newModel,
					A2(
						$author$project$Main$performActionCommands,
						_List_fromArray(
							[
								$author$project$Actions$MapRefresh,
								A2(
								$author$project$Actions$StoreLocally,
								'splits',
								$author$project$Main$encodeSplitValues(model))
							]),
						newModel));
			case 'GotWindowSize':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var info = result.a;
					var newModel = A3($author$project$Main$allocateSpaceForDocksAndContent, info.viewport.width | 0, info.viewport.height | 0, model);
					return _Utils_Tuple2(
						newModel,
						A2(
							$author$project$Main$performActionCommands,
							_List_fromArray(
								[$author$project$Actions$MapRefresh]),
							newModel));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'ToolsMsg':
				var toolMsg = msg.a;
				var _v7 = A4($author$project$ToolsController$update, toolMsg, model.track, $author$project$Main$ToolsMsg, model.toolOptions);
				var newToolOptions = _v7.a;
				var actions = _v7.b;
				var newModel = _Utils_update(
					model,
					{toolOptions: newToolOptions});
				var modelAfterActions = A2($author$project$Main$performActionsOnModel, actions, newModel);
				return _Utils_Tuple2(
					modelAfterActions,
					A2($author$project$Main$performActionCommands, actions, modelAfterActions));
			case 'PaneMsg':
				var paneMsg = msg.a;
				var _v8 = A7($author$project$PaneLayoutManager$update, paneMsg, $author$project$Main$PaneMsg, model.track, model.toolOptions.graphOptions.graph, model.contentArea, model.paneLayoutOptions, model.previews);
				var newOptions = _v8.a;
				var actions = _v8.b;
				var newModel = A2(
					$author$project$Main$performActionsOnModel,
					actions,
					_Utils_update(
						model,
						{paneLayoutOptions: newOptions}));
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'ToggleToolPopup':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isPopupOpen: !model.isPopupOpen}),
					$elm$core$Platform$Cmd$none);
			case 'BackgroundColour':
				var colour = msg.a;
				var newModel = _Utils_update(
					model,
					{backgroundColour: colour});
				var actions = _List_fromArray(
					[
						A2(
						$author$project$Actions$StoreLocally,
						'background',
						$author$project$ToolsController$encodeColour(colour))
					]);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'RestoreDefaultToolLayout':
				var newModel = _Utils_update(
					model,
					{toolOptions: $author$project$ToolsController$defaultOptions});
				return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
			case 'WriteGpxFile':
				var outputFilename = function () {
					var _v10 = model.filename;
					if (_v10.$ === 'Just') {
						var filename = _v10.a;
						return _Utils_ap(
							filename,
							(!A2(
								$elm$core$String$endsWith,
								'.GPX',
								$elm$core$String$toUpper(filename))) ? '.gpx' : '');
					} else {
						return 'NOFILENAME';
					}
				}();
				var _v9 = model.track;
				if (_v9.$ === 'Just') {
					var track = _v9.a;
					return _Utils_Tuple2(
						model,
						A3(
							$elm$file$File$Download$string,
							outputFilename,
							'text/gpx',
							A4($author$project$WriteGPX$writeGPX, model.filename, model.rgtOptions, track, model.toolOptions.namedSegmentOptions.namedSegments)));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								modalMessage: $elm$core$Maybe$Just('nowrite')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'FilenameChange':
				var filename = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							filename: $elm$core$Maybe$Just(filename)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TimeToUpdateMemory':
				return _Utils_Tuple2(model, $author$project$LocalStorage$fetchMemoryUsage);
			case 'OneClickMsg':
				var oneClickMsg = msg.a;
				var actions = A2($author$project$Tools$OneClickQuickFix$update, oneClickMsg, model.track);
				var modelAfterActions = A2($author$project$Main$performActionsOnModel, actions, model);
				return _Utils_Tuple2(
					modelAfterActions,
					A2($author$project$Main$performActionCommands, actions, modelAfterActions));
			case 'FetchElevationsFromMap':
				return _Utils_Tuple2(model, $author$project$MapPortController$requestElevations);
			case 'ReplaceTrackOnMapAfterStyleChange':
				var actions = _List_fromArray(
					[$author$project$Actions$TrackHasChanged]);
				var newModel = A2($author$project$Main$performActionsOnModel, actions, model);
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'ToggleLoadOptionMenu':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadOptionsMenuOpen: !model.loadOptionsMenuOpen}),
					$elm$core$Platform$Cmd$none);
			case 'SvgMsg':
				var svgMsg = msg.a;
				var _v11 = A3($author$project$SvgPathExtractor$update, svgMsg, model.svgFileOptions, $author$project$Main$SvgMsg);
				var newOptions = _v11.a;
				var actions = _v11.b;
				var newModel = A2(
					$author$project$Main$performActionsOnModel,
					actions,
					_Utils_update(
						model,
						{svgFileOptions: newOptions}));
				return _Utils_Tuple2(
					newModel,
					A2($author$project$Main$performActionCommands, actions, newModel));
			case 'FlythroughTick':
				var posix = msg.a;
				var _v12 = model.track;
				if (_v12.$ === 'Just') {
					var track = _v12.a;
					var _v13 = A3($author$project$ToolsController$flythroughTick, model.toolOptions, posix, track);
					var updatedToolOptions = _v13.a;
					var actions = _v13.b;
					var newModel = A2(
						$author$project$Main$performActionsOnModel,
						actions,
						_Utils_update(
							model,
							{toolOptions: updatedToolOptions}));
					return _Utils_Tuple2(
						newModel,
						A2($author$project$Main$performActionCommands, actions, newModel));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'HideInfoPopup':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{infoText: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			default:
				var results = msg.a;
				var _v14 = model.track;
				if (_v14.$ === 'Just') {
					var track = _v14.a;
					var _v15 = A2($author$project$LandUseDataOSM$processLandUseData, results, track);
					var landUse = _v15.a;
					var cmds = _v15.b;
					var newTrack = _Utils_update(
						track,
						{landUseData: landUse});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								track: $elm$core$Maybe$Just(newTrack)
							}),
						cmds);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Main$DismissModalMessage = {$: 'DismissModalMessage'};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var rules = _v0.rules;
		var topLevel = _v0.topLevel;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$ViewPureStyles$commonLayoutStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(2),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$Font$size(14),
		$mdgriffith$elm_ui$Element$Font$family(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$typeface('Open Sans'),
				$mdgriffith$elm_ui$Element$Font$sansSerif
			]))
	]);
var $author$project$ViewPureStyles$edges = {bottom: 0, left: 0, right: 0, top: 0};
var $author$project$Tools$I18N$ChooseInner = function (a) {
	return {$: 'ChooseInner', a: a};
};
var $author$project$Tools$I18N$ChooseOuter = function (a) {
	return {$: 'ChooseOuter', a: a};
};
var $author$project$Tools$I18N$ContentChange = function (a) {
	return {$: 'ContentChange', a: a};
};
var $author$project$Tools$I18N$Download = {$: 'Download'};
var $mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var $author$project$Tools$I18N$Update = {$: 'Update'};
var $author$project$Tools$I18N$Upload = {$: 'Upload'};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite = A3($mdgriffith$elm_ui$Element$rgb255, 241, 242, 246);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var label = _v0.label;
		var onPress = _v0.onPress;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var left = _v0.left;
	var bottom = _v0.bottom;
	var right = _v0.right;
	var top = _v0.top;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var left = _v0.left;
	var bottom = _v0.bottom;
	var right = _v0.right;
	var top = _v0.top;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$optionWith = F2(
	function (val, view) {
		return A2($mdgriffith$elm_ui$Element$Input$Option, val, view);
	});
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Element$Input$Column = {$: 'Column'};
var $mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var $mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var $mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var $mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.selected) ? $mdgriffith$elm_ui$Element$Input$Selected : $mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.options;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found.$) {
						case 'NotFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3($mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Attr':
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.selected;
																if (_v2.$ === 'Nothing') {
																	return $elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Column);
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$saturatedSky = A3($mdgriffith$elm_ui$Element$rgb255, 83, 82, 237);
var $author$project$Tools$I18N$editor = F3(
	function (wrapper, location, options) {
		var updateButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(3),
					$mdgriffith$elm_ui$Element$Border$rounded(6),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 114, 159, 207))
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('UPDATE'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$I18N$Update))
			});
		var saveButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(3),
					$mdgriffith$elm_ui$Element$Border$rounded(6),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 114, 159, 207))
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('SAVE TO DOWNLOADS'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$I18N$Download))
			});
		var loadButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$width(3),
					$mdgriffith$elm_ui$Element$Border$rounded(6),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 114, 159, 207))
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('LOAD LANGUAGE FILE'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$I18N$Upload))
			});
		var valueEditor = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(800))
				]),
			_List_fromArray(
				[
					function () {
					var _v2 = options.editorValue;
					if (_v2.$ === 'Just') {
						var value = _v2.a;
						return A2(
							$mdgriffith$elm_ui$Element$Input$multiline,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$rounded(6),
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color(
									A3($mdgriffith$elm_ui$Element$rgb255, 114, 159, 207)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('text'),
								onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$ContentChange),
								placeholder: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Appears to be empty'))),
								spellcheck: false,
								text: value
							});
					} else {
						return $mdgriffith$elm_ui$Element$none;
					}
				}(),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(40),
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					_List_fromArray(
						[updateButton, saveButton, loadButton]))
				]));
		var button = F2(
			function (key, state) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $mdgriffith$elm_ui$Element$Font$bold : $mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$alignTop
						]),
					$mdgriffith$elm_ui$Element$text(key));
			});
		var option = function (key) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				key,
				button(key));
		};
		var innerDictionaryList = function (inner) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$radio,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(4),
						$mdgriffith$elm_ui$Element$spacing(3)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('inner'),
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$ChooseInner),
					options: A2(
						$elm$core$List$map,
						option,
						$elm$core$Dict$keys(inner)),
					selected: options.editorInner
				});
		};
		var outerDictionaryList = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(4),
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('outer'),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$I18N$ChooseOuter),
				options: A2(
					$elm$core$List$map,
					option,
					$elm$core$Dict$keys(location.textDictionary)),
				selected: options.editorOuter
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$saturatedSky),
					$mdgriffith$elm_ui$Element$Border$width(4),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$alignBottom,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$moveUp(50),
					$mdgriffith$elm_ui$Element$moveRight(50)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text(location.country.name)),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							outerDictionaryList,
							function () {
							var _v0 = options.editorOuter;
							if (_v0.$ === 'Nothing') {
								return $mdgriffith$elm_ui$Element$none;
							} else {
								var key = _v0.a;
								var _v1 = A2($elm$core$Dict$get, key, location.textDictionary);
								if (_v1.$ === 'Just') {
									var innerDict = _v1.a;
									return A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignTop,
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												innerDictionaryList(innerDict),
												valueEditor
											]));
								} else {
									return $mdgriffith$elm_ui$Element$none;
								}
							}
						}()
						]))
				]));
	});
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $author$project$Main$HideInfoPopup = {$: 'HideInfoPopup'};
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $author$project$Tools$I18N$localisedString = F3(
	function (location, tool, tag) {
		var fromDefault = function () {
			var _v3 = A2($elm$core$Dict$get, tool, $author$project$Tools$I18N$defaultLocation.textDictionary);
			if (_v3.$ === 'Just') {
				var innerDict = _v3.a;
				return A2($elm$core$Dict$get, tag, innerDict);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var fromActiveLocation = function () {
			var _v2 = A2($elm$core$Dict$get, tool, location.textDictionary);
			if (_v2.$ === 'Just') {
				var innerDict = _v2.a;
				return A2($elm$core$Dict$get, tag, innerDict);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (fromActiveLocation.$ === 'Just') {
			var gotText = fromActiveLocation.a;
			return gotText;
		} else {
			if (fromDefault.$ === 'Just') {
				var gotText = fromDefault.a;
				return gotText;
			} else {
				return tool + (':' + (tag + '?'));
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm_explorations$markdown$Markdown$defaultOptions = {
	defaultHighlighting: $elm$core$Maybe$Nothing,
	githubFlavored: $elm$core$Maybe$Just(
		{breaks: false, tables: false}),
	sanitize: true,
	smartypants: false
};
var $elm_explorations$markdown$Markdown$toHtmlWith = _Markdown_toHtml;
var $elm_explorations$markdown$Markdown$toHtml = $elm_explorations$markdown$Markdown$toHtmlWith($elm_explorations$markdown$Markdown$defaultOptions);
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $feathericons$elm_feather$FeatherIcons$toHtml = F2(
	function (attributes, _v0) {
		var attrs = _v0.a.attrs;
		var src = _v0.a.src;
		var strSize = $elm$core$String$fromFloat(attrs.size);
		var baseAttributes = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$fill('none'),
				$elm$svg$Svg$Attributes$height(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$width(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$stroke('currentColor'),
				$elm$svg$Svg$Attributes$strokeLinecap('round'),
				$elm$svg$Svg$Attributes$strokeLinejoin('round'),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(attrs.strokeWidth)),
				$elm$svg$Svg$Attributes$viewBox(attrs.viewBox)
			]);
		var combinedAttributes = _Utils_ap(
			function () {
				var _v1 = attrs._class;
				if (_v1.$ === 'Just') {
					var c = _v1.a;
					return A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$class(c),
						baseAttributes);
				} else {
					return baseAttributes;
				}
			}(),
			attributes);
		return A2(
			$elm$svg$Svg$svg,
			combinedAttributes,
			A2(
				$elm$core$List$map,
				$elm$svg$Svg$map($elm$core$Basics$never),
				src));
	});
var $feathericons$elm_feather$FeatherIcons$Icon = function (a) {
	return {$: 'Icon', a: a};
};
var $feathericons$elm_feather$FeatherIcons$withSize = F2(
	function (size, _v0) {
		var src = _v0.a.src;
		var attrs = _v0.a.attrs;
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: _Utils_update(
					attrs,
					{size: size}),
				src: src
			});
	});
var $author$project$ViewPureStyles$useIconWithSize = function (size) {
	return A2(
		$elm$core$Basics$composeL,
		A2(
			$elm$core$Basics$composeL,
			$mdgriffith$elm_ui$Element$html,
			$feathericons$elm_feather$FeatherIcons$toHtml(_List_Nil)),
		$feathericons$elm_feather$FeatherIcons$withSize(size));
};
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $feathericons$elm_feather$FeatherIcons$defaultAttributes = function (name) {
	return {
		_class: $elm$core$Maybe$Just('feather feather-' + name),
		size: 24,
		sizeUnit: '',
		strokeWidth: 2,
		viewBox: '0 0 24 24'
	};
};
var $feathericons$elm_feather$FeatherIcons$makeBuilder = F2(
	function (name, src) {
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: $feathericons$elm_feather$FeatherIcons$defaultAttributes(name),
				src: src
			});
	});
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $feathericons$elm_feather$FeatherIcons$x = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'x',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('18'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('6'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('18'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $author$project$Main$infoTextPopup = F2(
	function (location, maybeSomething) {
		if (maybeSomething.$ === 'Just') {
			var _v1 = maybeSomething.a;
			var tool = _v1.a;
			var tag = _v1.b;
			var close = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtPurple),
						$mdgriffith$elm_ui$Element$alignRight
					]),
				{
					label: A2($author$project$ViewPureStyles$useIconWithSize, 20, $feathericons$elm_feather$FeatherIcons$x),
					onPress: $elm$core$Maybe$Just($author$project$Main$HideInfoPopup)
				});
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(400)),
						$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtPurple),
						$mdgriffith$elm_ui$Element$Border$width(4),
						$mdgriffith$elm_ui$Element$Border$rounded(10)
					]),
				_List_fromArray(
					[
						close,
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2(
									$elm_explorations$markdown$Markdown$toHtml,
									_List_Nil,
									A3($author$project$Tools$I18N$localisedString, location, tool, tag)))
							]))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var html = el.a.html;
				var styles = el.a.styles;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $author$project$Main$BackgroundClick = function (a) {
	return {$: 'BackgroundClick', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet = {$: 'NoStaticStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$RenderModeOption = function (a) {
	return {$: 'RenderModeOption', a: a};
};
var $mdgriffith$elm_ui$Element$noStaticStyleSheet = $mdgriffith$elm_ui$Internal$Model$RenderModeOption($mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions = {preventDefault: true, stopPropagation: false};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event = F6(
	function (keys, button, clientPos, offsetPos, pagePos, screenPos) {
		return {button: button, clientPos: clientPos, keys: keys, offsetPos: offsetPos, pagePos: pagePos, screenPos: screenPos};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton = {$: 'BackButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton = {$: 'ErrorButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton = {$: 'ForwardButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton = {$: 'MainButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton = {$: 'MiddleButton'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId = function (id) {
	switch (id) {
		case 0:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton;
		case 1:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton;
		case 2:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton;
		case 3:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton;
		case 4:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder = A2(
	$elm$json$Json$Decode$map,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId,
	A2($elm$json$Json$Decode$field, 'button', $elm$json$Json$Decode$int));
var $mpizenberg$elm_pointer_events$Internal$Decode$clientPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$Keys = F3(
	function (alt, ctrl, shift) {
		return {alt: alt, ctrl: ctrl, shift: shift};
	});
var $mpizenberg$elm_pointer_events$Internal$Decode$keys = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Internal$Decode$Keys,
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool));
var $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$pagePos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$screenPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'screenX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'screenY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder = A7($elm$json$Json$Decode$map6, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event, $mpizenberg$elm_pointer_events$Internal$Decode$keys, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder, $mpizenberg$elm_pointer_events$Internal$Decode$clientPos, $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos, $mpizenberg$elm_pointer_events$Internal$Decode$pagePos, $mpizenberg$elm_pointer_events$Internal$Decode$screenPos);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'click', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $author$project$PaneLayoutManager$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$ViewPureStyles$conditionallyVisible = F2(
	function (test, element) {
		return test ? A2($mdgriffith$elm_ui$Element$el, _List_Nil, element) : A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'display', 'none'))
				]),
			element);
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Height') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Width') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 'Nothing') {
					if (_v8.b.$ === 'Nothing') {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((_v8.a.a.$ === 'Px') && (_v8.b.$ === 'Just')) {
						switch (_v8.b.a.$) {
							case 'Px':
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 'Fill':
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.value - input.min) / (input.max - input.min);
		var _v0 = input.thumb;
		var thumbAttributes = _v0.a;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 'Nothing') {
				return '20px';
			} else {
				if (height.a.$ === 'Px') {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 'Nothing') {
				return '20px';
			} else {
				if (width.a.$ === 'Px') {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (trackWidth.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (trackHeight.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.label,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' ui-slide-bar focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 'Nothing') {
											return input.onChange(0);
										} else {
											var val = _v4.a;
											return input.onChange(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.step;
										if (_v5.$ === 'Nothing') {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.min))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.max))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.value))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3(
												$mdgriffith$elm_ui$Element$Input$viewVerticalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackWidth) : A3(
												$mdgriffith$elm_ui$Element$Input$viewHorizontalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $mdgriffith$elm_ui$Element$Input$Thumb = function (a) {
	return {$: 'Thumb', a: a};
};
var $mdgriffith$elm_ui$Element$Input$thumb = $mdgriffith$elm_ui$Element$Input$Thumb;
var $author$project$ViewPureStyles$sliderThumb = $mdgriffith$elm_ui$Element$Input$thumb(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$Border$rounded(4),
			$mdgriffith$elm_ui$Element$Border$width(1),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
		]));
var $author$project$About$aboutText = '\n# GPXmagic App v3.10.0 (9bb2df0a)\n\n## 3.10.0\n\nThis is an installable application. For now, it\'s basically the same as the web version\nbut the Strava login is moved to the Strava tool (and logging in won\'t destroy a loaded route).\n\n## 3.9.5\n\nMax nudge fade area increasing to 100m.\n\n## 3.9.4\n\n"Buy Me A Coffee" should work now!\n\n## 3.9.3\n\nAdded "smooth blend" option to Nudge. This creates a smooth curve either end of the nudged\nzone, using a cosine function. Thanks to DC for your persistence.\n\n## 3.9.2\n\nFix bug that caused Purple marker to appear on map when route loaded.\n\n## 3.9.1\n\nPrevious Profile view available as "Profile 2". You can have them both open, either, none,\nto suit your M.O.\n\n## 3.9.0\n\n**New profile chart alert**. We\'ve found a rather nice charting library. If you\'re interested in the\ntechnical stuff, it uses an HTML5 canvas instead of SVG.\n\n* Toggle between gradient colours or monochrome\n* Monochrome chart shows segments and previews for Profile Smoother\n* Zoom using mouse wheel\n* Click and drag sideways to pan (when zoomed in)\n* Default view is whole track\n* Mouseover will show altitude, gradient, segment name, smoothing method as appropriate\n\nNote that track detail may be elided when zoomed out, to maintain performance.\n\n## 3.8.2\n\nReinstate slider for gradient limits in Profile Smoother.\n\n## 3.8.1\n\nFixed Profile Smoother bug introduced in 3.8.0.\n\n## 3.8.0\n\nInternal changes to be more consistent in how Undo is managed. This manages to reduce the\ncode download from 631228 bytes to 618400, so it\'s good for the planet as well.\n\n## 3.7.0\n\nIn Move & Stretch tool, change the vertical slider into a set of buttons (like Nudge). This makes\nit easier to adjust altitudes to centimeter precision, and can be used then to make your peaks\nand valleys agree exactly with the road book. A video will explain in due course.\n\n## 3.6.1\n\nUse Mapbox GL JS version 2.11.0.\n\nUse latest versions of Mapbox maps for "Outdoors", "Streets" and "Satellite streets".\n\n## 3.6.0\n\nAdds new functionality to Timestamp tool, allowing you to estimate the ride duration\nand (if you wish) create fictitious timestamps for each point.\n\n## 3.5.8\n\nLoad from remote URL now understands (and requires) uuencoded URLs.\n\nRemote load should display route on Map view correctly.\n\n## 3.5.7\n\nAdds support for "Open in GPXmagic" button. If you have a site that hosts GPX files, you\ncan add this button (or any button of your choice), so that GPXmagic will launch and load\nthe GPX file from the URL provided. **Please note** for this to work, you must ensure that\nthe site allows CORS access from http://stepwiserefinement.co.uk.s3-website-eu-west-1.amazonaws.com\n-- if you don\'t know what that means, you probably won\'t be able to make it work :)\n\nSee https://s3.eu-west-1.amazonaws.com/stepwiserefinement.co.uk/GPXmagic/TestRemoteLoad.html for usage.\n\n## 3.5.6\n\nMoved Pane Layout menu to top right of the first view pane, instead of being buried in the\ntop bar.\n\nProfile view now respects option to use Imperial measures.\n\n## 3.5.5\n\nFixes bug that misplaced segments on routes with named segments and duplicate adjacent trackpoints.\n\n## 3.5.4\n\nShades segments on Profile view, all the time.\n\nFixes some refresh errors on Named Segments previews.\n\nAdd a "Google Street View" link to the Information tool (Point mode).\n\n## 3.5.3\n\nWhen Named Segment tool is open, the buffer zones at the start and end of the route\nare marked with a pale colour. (Best not use this colour for the tool.)\n\n## 3.5.2\n\nIn the Strava tool, when a Strava route is loaded, the "view on Strava" link now works.\n\nIn the Information tool, under "Point", there is a link that will attempt to open Google\nStreet View, looking along the route from the location of the Orange marker.\n\n## 3.5.1\n\nA satisfying liaison between Land Use data and Named Segments provides automatic creation\n(or "seeding" if you prefer) of segments near named features on the route, given available\nOpen Street Map data. 3.5.1 makes it easier to detect incorrect segments.\n\n## 3.4.11\n\nSmall changes to Move, Scale, Rotate:\n\n* Track length matches current length when tool is opened.\n* Track length can be adjusted in 10m or 17.6 yard increments (click on the slider then use the\nleft and right arrows to adjust finely.)\n\n## 3.4.10\n\nDisplays route on Map when route loaded from Strava.\n\nCorrected segment proximity to route check that was failing in Southern hemisphere.\n\n## 3.4.9\n\nBumps the Mapbox component from v2.6 to v2.10.\n\nSwitches to "globe" projection instead of Mercator.\n\nAdded a new "Basic" map option with no terrain.\n\n## 3.4.8\n\nIn Bend Problems and Gradient Problems, clicking on the next / current / previous buttons\nwill centre the Map view on the problem, regardless of the status of the padlock in the view.\n\n## 3.4.7\n\nIn Named Segments, the "eye" icon is always visible for all segments. Thanks, Jan Langkjær Hansen.\n\n## 3.4.6\n\nThe Ukrainian stripes are replaced by a black stripe of mourning for Queen Elizabeth II.\n\n## In 3.4.5\n\nFix bug where updating a Named Segment such that it changes the segment order results\nin much confusion.\n\n## In 3.4.4\n\nCulls place names in 3D view so that only those visible are painted. More responsive and\nway less confusing.\n\n## In 3.4.3\n\nIn Split and Join, you can control where the splits are. If you only need one split, use\nthe Orange marker only and it will write two files, one up to the Orange marker and one\nbeyond. If you place the Purple marker, it will write the section between the markers, so\nyou can dairly easily hop along the route and write out your chosen sections. Thanks to\nJan Deca for this suggestion.\n\n## In 3.4.2\n\nYou can Hide a tool directly from the tool setting control. If you do this, you will need\nto use the Tools summary control to restore it. Thanks to David Ogle for this suggestion.\n\n## In 3.4.1\n\n### New Timestamps tool\n\nAs of 3.4, GPXmagic will read timing information in recorded GPX files, and will write these\nout again. This can be useful if you\'re trying to match video frames with GPX locations, for\nKinomap for example.\n\nIt permits editing with caveats:\n\n* Edits that simply move existing points in space will not change the time on those points.\n(Example: Nudge, Straighten, Profile smoothing, Centroid average.)\n\n* Edits that create new points will attempt to use times that are "sensible" -- generally being\ninterpolated from the existing track.\n(Example: Splines, Bend smoothing, One-Click Quick-Fix.)\n\n* Edits that delete points will not change the timing of remaining points.\n(Example: Delete.)\n\n* Route planner doesn\'t make any sense, nor does out and back.\n\n* Errors are quite likely, at this stage in development.\n\nThe new tool allows a few operations specifically affecting time:\n\n* Change the time on a track point to correspond with a specific time on a video (say). This will\nshift all subsequent points by the same amount, to the end of the track.\n\n* The "time control" is uses the time offset from the start of the ride (is this best?). The\nchevrons above and below allow you to increment and decrement by hours, minutes, seconds, or\nmilliseconds. You can also remove the milliseconds. You may not move to a time offset earlier\nthan the preceding point.\n\n* You may _replace_ all existing points by points that interpolate time-wise at intervals of\nhalf-second, second, or 5 seconds.\n\n* You may double all the time offsets for the whole route. Suppose you\'ve\nrecorded a 60fps video from a motor vehicle, and if played at half-speed, it would sync. well\nfor a bike ride. (This does not require that you first use time interpolation.)\n\n### Strava Activity import\n\nIn the Strava tool you can now load both Routes and Activities directly into GPXmagic. Activities\nwill (of course) have time information available.\n\n## Acknowledgements\n\n* Thanks to all those who\'ve provided support, comments, bug reports, and help along the way.\n\n* Thanks to RGT for the Magic Roads concept and an excellent indoor cycling platform.\n\n## Legal guff\n\nCompatible with Strava, for the purpose of loading route and segment data.\n\nGPXmagicV3 is open source at https://github.com/peterjamesward/GPXmagicV3\n\nContains numerous libraries under various licence terms, all of which are available in source\nform via https://package.elm-lang.org.\n\nMap component provided by MapBox.com.\n\nLand use data courtesy of Open Street Map via the Overpass API.\n\nIcons from www.flaticon.com/free-icons/.\n\nYour IP address may be logged for the purpose of aggregate usage recording; no personal details are stored.\n\nCookie policy is "use no cookies". This may not apply to third-party components.\n\n\n    ';
var $author$project$ViewAbout$view = function (_v0) {
	var contentWidth = _v0.a;
	var contentHeight = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(
					$ianmackenzie$elm_units$Pixels$inPixels(contentWidth))),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(
					$ianmackenzie$elm_units$Pixels$inPixels(contentHeight))),
				$mdgriffith$elm_ui$Element$pointer,
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$Border$width(8),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds),
				$mdgriffith$elm_ui$Element$scrollbarY
			]),
		A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					A2($elm_explorations$markdown$Markdown$toHtml, _List_Nil, $author$project$About$aboutText))
				])));
};
var $ianmackenzie$elm_3d_scene$Scene3d$BackgroundColor = function (a) {
	return {$: 'BackgroundColor', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor = function (color) {
	return $ianmackenzie$elm_3d_scene$Scene3d$BackgroundColor(color);
};
var $author$project$View3dCommonElements$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$View3dCommonElements$ImageDoubleClick = function (a) {
	return {$: 'ImageDoubleClick', a: a};
};
var $author$project$View3dCommonElements$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$View3dCommonElements$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$View3dCommonElements$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$View3dCommonElements$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $author$project$View3dCommonElements$onContextMenu = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'contextmenu',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'dblclick', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mousedown', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mouseup', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$defaultOptions = {preventDefault: true, stopPropagation: false};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$Event = F3(
	function (mouseEvent, deltaY, deltaMode) {
		return {deltaMode: deltaMode, deltaY: deltaY, mouseEvent: mouseEvent};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaLine = {$: 'DeltaLine'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPage = {$: 'DeltaPage'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPixel = {$: 'DeltaPixel'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$deltaModeDecoder = function () {
	var intToMode = function (_int) {
		switch (_int) {
			case 1:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaLine;
			case 2:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPage;
			default:
				return $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$DeltaPixel;
		}
	};
	return A2($elm$json$Json$Decode$map, intToMode, $elm$json$Json$Decode$int);
}();
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$eventDecoder = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$Event,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'deltaY', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'deltaMode', $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$deltaModeDecoder));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWithOptions = F2(
	function (options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			'wheel',
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel = $mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWithOptions($mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$defaultOptions);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$peace = A3($mdgriffith$elm_ui$Element$rgb255, 164, 176, 190);
var $author$project$View3dCommonElements$common3dSceneAttributes = F2(
	function (msgWrapper, context) {
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
					A2($elm$core$Basics$composeR, $author$project$View3dCommonElements$ImageGrab, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
					A2($elm$core$Basics$composeR, $author$project$View3dCommonElements$ImageRelease, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
					A2($elm$core$Basics$composeR, $author$project$View3dCommonElements$ImageClick, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
					A2($elm$core$Basics$composeR, $author$project$View3dCommonElements$ImageDoubleClick, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
					function (event) {
						return msgWrapper(
							$author$project$View3dCommonElements$ImageMouseWheel(event.deltaY));
					})),
				$author$project$View3dCommonElements$onContextMenu(
				msgWrapper($author$project$View3dCommonElements$ImageNoOp)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$pointer,
				$mdgriffith$elm_ui$Element$Border$width(0),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace)
			]);
	});
var $author$project$ViewFirstPerson$deriveViewPointAndCamera = F3(
	function (context, track, mFlythrough) {
		var cameraViewpoint = function () {
			if (mFlythrough.$ === 'Nothing') {
				var localRoad = $author$project$DomainModel$asRecord(
					A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree));
				var gradientAsAngle = $ianmackenzie$elm_units$Angle$atan(localRoad.gradientAtStart / 100.0);
				return $ianmackenzie$elm_3d_camera$Viewpoint3d$orbitZ(
					{
						azimuth: $ianmackenzie$elm_geometry$Direction2d$toAngle(
							$ianmackenzie$elm_geometry$Direction2d$reverse(localRoad.directionAtStart)),
						distance: $ianmackenzie$elm_units$Length$meters(10),
						elevation: A2(
							$ianmackenzie$elm_units$Quantity$minus,
							gradientAsAngle,
							$ianmackenzie$elm_units$Angle$degrees(20.0)),
						focalPoint: localRoad.startPoint.space
					});
			} else {
				var flying = mFlythrough.a;
				return $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
					{eyePoint: flying.cameraPosition, focalPoint: flying.focusPoint, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ});
			}
		}();
		return $ianmackenzie$elm_3d_camera$Camera3d$perspective(
			{
				verticalFieldOfView: $ianmackenzie$elm_units$Angle$degrees(120.0 - (context.zoomLevel * 2.0)),
				viewpoint: cameraViewpoint
			});
	});
var $author$project$UtilsForViews$elmuiColour = function (c) {
	var _v0 = $avh4$elm_color$Color$toRgba(c);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return A3($mdgriffith$elm_ui$Element$rgb, red, green, blue);
};
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber = F5(
	function (original, integers, decimals, prefix, suffix) {
		return {decimals: decimals, integers: integers, original: original, prefix: prefix, suffix: suffix};
	});
var $cuducos$elm_format_number$FormatNumber$Parser$Negative = {$: 'Negative'};
var $cuducos$elm_format_number$FormatNumber$Parser$Positive = {$: 'Positive'};
var $cuducos$elm_format_number$FormatNumber$Parser$Zero = {$: 'Zero'};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $cuducos$elm_format_number$FormatNumber$Parser$classify = function (formatted) {
	var onlyZeros = A2(
		$elm$core$String$all,
		function (_char) {
			return _Utils_eq(
				_char,
				_Utils_chr('0'));
		},
		$elm$core$String$concat(
			A2(
				$elm$core$List$append,
				formatted.integers,
				$elm$core$List$singleton(formatted.decimals))));
	return onlyZeros ? $cuducos$elm_format_number$FormatNumber$Parser$Zero : ((formatted.original < 0) ? $cuducos$elm_format_number$FormatNumber$Parser$Negative : $cuducos$elm_format_number$FormatNumber$Parser$Positive);
};
var $elm$core$String$filter = _String_filter;
var $cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit = F2(
	function (desiredLength, value) {
		var length = $elm$core$String$length(value);
		var missing = (_Utils_cmp(length, desiredLength) < 0) ? $elm$core$Basics$abs(desiredLength - length) : 0;
		return _Utils_ap(
			value,
			A2($elm$core$String$repeat, missing, '0'));
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$removeZeros = function (decimals) {
	return (A2($elm$core$String$right, 1, decimals) !== '0') ? decimals : $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(
		A2($elm$core$String$dropRight, 1, decimals));
};
var $cuducos$elm_format_number$FormatNumber$Parser$getDecimals = F2(
	function (locale, digits) {
		var _v0 = locale.decimals;
		switch (_v0.$) {
			case 'Max':
				return $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(digits);
			case 'Exact':
				return digits;
			default:
				var min = _v0.a;
				return A2($cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit, min, digits);
		}
	});
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				_Utils_chr('0'),
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				$elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					$elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _v0.a.a.valueOf()) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $cuducos$elm_format_number$FormatNumber$Parser$splitInParts = F2(
	function (locale, value) {
		var toString = function () {
			var _v1 = locale.decimals;
			switch (_v1.$) {
				case 'Max':
					var max = _v1.a;
					return $myrho$elm_round$Round$round(max);
				case 'Min':
					return $elm$core$String$fromFloat;
				default:
					var exact = _v1.a;
					return $myrho$elm_round$Round$round(exact);
			}
		}();
		var asList = A2(
			$elm$core$String$split,
			'.',
			toString(value));
		var decimals = function () {
			var _v0 = $elm$core$List$tail(asList);
			if (_v0.$ === 'Just') {
				var values = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(values));
			} else {
				return '';
			}
		}();
		var integers = A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(asList));
		return _Utils_Tuple2(integers, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$splitByIndian = function (integers) {
	var thousand = ($elm$core$String$length(integers) > 3) ? A2($elm$core$String$right, 3, integers) : integers;
	var reversedSplitHundreds = function (value) {
		return ($elm$core$String$length(value) > 2) ? A2(
			$elm$core$List$cons,
			A2($elm$core$String$right, 2, value),
			reversedSplitHundreds(
				A2($elm$core$String$dropRight, 2, value))) : ((!$elm$core$String$length(value)) ? _List_Nil : _List_fromArray(
			[value]));
	};
	return $elm$core$List$reverse(
		A2(
			$elm$core$List$cons,
			thousand,
			reversedSplitHundreds(
				A2($elm$core$String$dropRight, 3, integers))));
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitByWestern = function (integers) {
	var reversedSplitThousands = function (value) {
		return ($elm$core$String$length(value) > 3) ? A2(
			$elm$core$List$cons,
			A2($elm$core$String$right, 3, value),
			reversedSplitThousands(
				A2($elm$core$String$dropRight, 3, value))) : _List_fromArray(
			[value]);
	};
	return $elm$core$List$reverse(
		reversedSplitThousands(integers));
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitIntegers = F2(
	function (system, integers) {
		if (system.$ === 'Western') {
			return $cuducos$elm_format_number$FormatNumber$Parser$splitByWestern(
				A2($elm$core$String$filter, $elm$core$Char$isDigit, integers));
		} else {
			return $cuducos$elm_format_number$FormatNumber$Parser$splitByIndian(
				A2($elm$core$String$filter, $elm$core$Char$isDigit, integers));
		}
	});
var $cuducos$elm_format_number$FormatNumber$Parser$parse = F2(
	function (locale, original) {
		var parts = A2($cuducos$elm_format_number$FormatNumber$Parser$splitInParts, locale, original);
		var integers = A2(
			$cuducos$elm_format_number$FormatNumber$Parser$splitIntegers,
			locale.system,
			A2($elm$core$String$filter, $elm$core$Char$isDigit, parts.a));
		var decimals = A2($cuducos$elm_format_number$FormatNumber$Parser$getDecimals, locale, parts.b);
		var partial = A5($cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber, original, integers, decimals, '', '');
		var _v0 = $cuducos$elm_format_number$FormatNumber$Parser$classify(partial);
		switch (_v0.$) {
			case 'Negative':
				return _Utils_update(
					partial,
					{prefix: locale.negativePrefix, suffix: locale.negativeSuffix});
			case 'Positive':
				return _Utils_update(
					partial,
					{prefix: locale.positivePrefix, suffix: locale.positiveSuffix});
			default:
				return _Utils_update(
					partial,
					{prefix: locale.zeroPrefix, suffix: locale.zeroSuffix});
		}
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals = F2(
	function (locale, decimals) {
		return (decimals === '') ? '' : _Utils_ap(locale.decimalSeparator, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$stringfy = F2(
	function (locale, formatted) {
		var stringfyDecimals = $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals(locale);
		var integers = A2($elm$core$String$join, locale.thousandSeparator, formatted.integers);
		var decimals = stringfyDecimals(formatted.decimals);
		return $elm$core$String$concat(
			_List_fromArray(
				[formatted.prefix, integers, decimals, formatted.suffix]));
	});
var $cuducos$elm_format_number$FormatNumber$format = F2(
	function (locale, number_) {
		return A2(
			$cuducos$elm_format_number$FormatNumber$Stringfy$stringfy,
			locale,
			A2($cuducos$elm_format_number$FormatNumber$Parser$parse, locale, number_));
	});
var $author$project$UtilsForViews$showDecimal1 = function (x) {
	var locale = _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{
			decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(1),
			negativePrefix: '-',
			thousandSeparator: ''
		});
	return A2($cuducos$elm_format_number$FormatNumber$format, locale, x);
};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$white = A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255);
var $author$project$ViewFirstPerson$headUpDisplay = function (gradient) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$alignLeft,
				$mdgriffith$elm_ui$Element$moveDown(10),
				$mdgriffith$elm_ui$Element$moveRight(10),
				$mdgriffith$elm_ui$Element$Background$color(
				$author$project$UtilsForViews$elmuiColour(
					$author$project$ColourPalette$gradientColourPastel(gradient))),
				$mdgriffith$elm_ui$Element$Font$size(30),
				$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
				$mdgriffith$elm_ui$Element$padding(6),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(100)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(100)),
				$mdgriffith$elm_ui$Element$Border$rounded(100),
				$mdgriffith$elm_ui$Element$Border$width(2),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white)
			]),
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			$mdgriffith$elm_ui$Element$text(
				$author$project$UtilsForViews$showDecimal1(gradient))));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$CastsShadows = function (a) {
	return {$: 'CastsShadows', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$castsShadows = function (flag) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$CastsShadows(flag);
};
var $elm_explorations$webgl$WebGL$Internal$Alpha = function (a) {
	return {$: 'Alpha', a: a};
};
var $elm_explorations$webgl$WebGL$alpha = $elm_explorations$webgl$WebGL$Internal$Alpha;
var $elm_explorations$webgl$WebGL$Internal$Antialias = {$: 'Antialias'};
var $elm_explorations$webgl$WebGL$antialias = $elm_explorations$webgl$WebGL$Internal$Antialias;
var $elm_explorations$webgl$WebGL$Internal$ClearColor = F4(
	function (a, b, c, d) {
		return {$: 'ClearColor', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$clearColor = $elm_explorations$webgl$WebGL$Internal$ClearColor;
var $elm_explorations$webgl$WebGL$Internal$Depth = function (a) {
	return {$: 'Depth', a: a};
};
var $elm_explorations$webgl$WebGL$depth = $elm_explorations$webgl$WebGL$Internal$Depth;
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm_explorations$webgl$WebGL$Internal$Stencil = function (a) {
	return {$: 'Stencil', a: a};
};
var $elm_explorations$webgl$WebGL$stencil = $elm_explorations$webgl$WebGL$Internal$Stencil;
var $avh4$elm_color$Color$toCssString = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var roundTo = function (x) {
		return $elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return $elm$core$Basics$round(x * 10000) / 100;
	};
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				$elm$core$String$fromFloat(
				pct(r)),
				'%,',
				$elm$core$String$fromFloat(
				pct(g)),
				'%,',
				$elm$core$String$fromFloat(
				pct(b)),
				'%,',
				$elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var $elm_explorations$webgl$WebGL$toHtmlWith = F3(
	function (options, attributes, entities) {
		return A3(_WebGL_toHtml, options, attributes, entities);
	});
var $ianmackenzie$elm_units$Pixels$toInt = function (_v0) {
	var numPixels = _v0.a;
	return numPixels;
};
var $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 1, 1, 1, 1);
var $ianmackenzie$elm_3d_scene$Scene3d$call = F3(
	function (renderPasses, lights, settings) {
		return A2(
			$elm$core$List$map,
			function (renderPass) {
				return A2(renderPass, lights, settings);
			},
			renderPasses);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$CieXyz = F3(
	function (a, b, c) {
		return {$: 'CieXyz', a: a, b: b, c: c};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToCieXyz = F2(
	function (_v0, _v1) {
		var intensity = _v0.a;
		var y = _v1.a.y;
		var x = _v1.a.x;
		return A3($ianmackenzie$elm_3d_scene$Scene3d$Types$CieXyz, (intensity * x) / y, intensity, (intensity * ((1 - x) - y)) / y);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$cieXyzToLinearRgb = function (_v0) {
	var bigX = _v0.a;
	var bigY = _v0.b;
	var bigZ = _v0.c;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$LinearRgb(
		A3($elm_explorations$linear_algebra$Math$Vector3$vec3, ((3.2406 * bigX) - (1.5372 * bigY)) - (0.4986 * bigZ), (((-0.9689) * bigX) + (1.8758 * bigY)) + (0.0415 * bigZ), ((0.0557 * bigX) - (0.204 * bigY)) + (1.057 * bigZ)));
};
var $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb = F2(
	function (intensity, chromaticity) {
		return $ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$cieXyzToLinearRgb(
			A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToCieXyz, intensity, chromaticity));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$modelMatrix = function (transformation) {
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: transformation.ix, m12: transformation.jx, m13: transformation.kx, m14: transformation.px, m21: transformation.iy, m22: transformation.jy, m23: transformation.ky, m24: transformation.py, m31: transformation.iz, m32: transformation.jz, m33: transformation.kz, m34: transformation.pz, m41: 0, m42: 0, m43: 0, m44: 1});
};
var $ianmackenzie$elm_3d_scene$Scene3d$createRenderPass = F5(
	function (sceneProperties, viewMatrix, projectionMatrix, transformation, drawFunction) {
		var normalSign = transformation.isRightHanded ? 1 : (-1);
		var modelScale = A4($elm_explorations$linear_algebra$Math$Vector4$vec4, transformation.scale, transformation.scale, transformation.scale, normalSign);
		return A6(
			drawFunction,
			sceneProperties,
			modelScale,
			$ianmackenzie$elm_3d_scene$Scene3d$Transformation$modelMatrix(transformation),
			transformation.isRightHanded,
			viewMatrix,
			projectionMatrix);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses = F6(
	function (sceneProperties, viewMatrix, projectionMatrix, currentTransformation, node, accumulated) {
		collectRenderPasses:
		while (true) {
			switch (node.$) {
				case 'EmptyNode':
					return accumulated;
				case 'Transformed':
					var transformation = node.a;
					var childNode = node.b;
					var $temp$sceneProperties = sceneProperties,
						$temp$viewMatrix = viewMatrix,
						$temp$projectionMatrix = projectionMatrix,
						$temp$currentTransformation = A2($ianmackenzie$elm_3d_scene$Scene3d$Transformation$compose, transformation, currentTransformation),
						$temp$node = childNode,
						$temp$accumulated = accumulated;
					sceneProperties = $temp$sceneProperties;
					viewMatrix = $temp$viewMatrix;
					projectionMatrix = $temp$projectionMatrix;
					currentTransformation = $temp$currentTransformation;
					node = $temp$node;
					accumulated = $temp$accumulated;
					continue collectRenderPasses;
				case 'MeshNode':
					var meshDrawFunction = node.b;
					var updatedMeshes = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, meshDrawFunction),
						accumulated.meshes);
					return {meshes: updatedMeshes, points: accumulated.points, shadows: accumulated.shadows};
				case 'PointNode':
					var pointDrawFunction = node.b;
					var updatedPoints = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, pointDrawFunction),
						accumulated.points);
					return {meshes: accumulated.meshes, points: updatedPoints, shadows: accumulated.shadows};
				case 'ShadowNode':
					var shadowDrawFunction = node.a;
					var updatedShadows = A2(
						$elm$core$List$cons,
						A5($ianmackenzie$elm_3d_scene$Scene3d$createRenderPass, sceneProperties, viewMatrix, projectionMatrix, currentTransformation, shadowDrawFunction),
						accumulated.shadows);
					return {meshes: accumulated.meshes, points: accumulated.points, shadows: updatedShadows};
				default:
					var childNodes = node.a;
					return A3(
						$elm$core$List$foldl,
						A4($ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses, sceneProperties, viewMatrix, projectionMatrix, currentTransformation),
						accumulated,
						childNodes);
			}
		}
	});
var $elm_explorations$webgl$WebGL$Internal$ColorMask = F4(
	function (a, b, c, d) {
		return {$: 'ColorMask', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$Settings$colorMask = $elm_explorations$webgl$WebGL$Internal$ColorMask;
var $elm_explorations$webgl$WebGL$Internal$DepthTest = F4(
	function (a, b, c, d) {
		return {$: 'DepthTest', a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$Settings$DepthTest$greaterOrEqual = function (_v0) {
	var far = _v0.far;
	var near = _v0.near;
	var write = _v0.write;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 518, write, near, far);
};
var $elm_explorations$webgl$WebGL$Internal$PolygonOffset = F2(
	function (a, b) {
		return {$: 'PolygonOffset', a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$Settings$polygonOffset = $elm_explorations$webgl$WebGL$Internal$PolygonOffset;
var $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil = _List_fromArray(
	[
		$elm_explorations$webgl$WebGL$Settings$DepthTest$greaterOrEqual(
		{far: 1, near: 0, write: false}),
		A4($elm_explorations$webgl$WebGL$Settings$colorMask, false, false, false, false),
		A2($elm_explorations$webgl$WebGL$Settings$polygonOffset, 0.0, 1.0)
	]);
var $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount = 8;
var $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits = 15;
var $elm_explorations$webgl$WebGL$Settings$StencilTest$replace = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(7681);
var $ianmackenzie$elm_3d_scene$Scene3d$dummyFragmentShader = {
	src: '\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ',
	attributes: {},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$triangleStrip = $elm_explorations$webgl$WebGL$Mesh1(
	{elemSize: 1, indexSize: 0, mode: 5});
var $ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadMesh = $elm_explorations$webgl$WebGL$triangleStrip(
	_List_fromArray(
		[
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, -1, -1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, -1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, -1, 1)
		},
			{
			position: A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 1)
		}
		]));
var $ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadVertexShader = {
	src: '\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ',
	attributes: {position: 'position'},
	uniforms: {}
};
var $elm_explorations$webgl$WebGL$Settings$StencilTest$test = function (stencilTest) {
	return A3(
		$elm_explorations$webgl$WebGL$Settings$StencilTest$testSeparate,
		{mask: stencilTest.mask, ref: stencilTest.ref, writeMask: stencilTest.writeMask},
		{fail: stencilTest.fail, test: stencilTest.test, zfail: stencilTest.zfail, zpass: stencilTest.zpass},
		{fail: stencilTest.fail, test: stencilTest.test, zfail: stencilTest.zfail, zpass: stencilTest.zpass});
};
var $ianmackenzie$elm_3d_scene$Scene3d$updateStencil = function (test) {
	return A5(
		$elm_explorations$webgl$WebGL$entityWith,
		_List_fromArray(
			[
				$elm_explorations$webgl$WebGL$Settings$StencilTest$test(test),
				A4($elm_explorations$webgl$WebGL$Settings$colorMask, false, false, false, false)
			]),
		$ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadVertexShader,
		$ianmackenzie$elm_3d_scene$Scene3d$dummyFragmentShader,
		$ianmackenzie$elm_3d_scene$Scene3d$fullScreenQuadMesh,
		{});
};
var $ianmackenzie$elm_3d_scene$Scene3d$resetStencil = $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, mask: 0, ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, writeMask: $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace});
var $elm_explorations$webgl$WebGL$Settings$StencilTest$greater = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(516);
var $elm_explorations$webgl$WebGL$Settings$StencilTest$invert = $elm_explorations$webgl$WebGL$Settings$StencilTest$Operation(5386);
var $ianmackenzie$elm_3d_scene$Scene3d$singleLightMask = function (index) {
	return A2($elm$core$Basics$pow, 2, index + 4);
};
var $ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue = function (lightIndex) {
	return $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
		{
			fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep,
			mask: $ianmackenzie$elm_3d_scene$Scene3d$lowerFourBits,
			ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount,
			test: $elm_explorations$webgl$WebGL$Settings$StencilTest$greater,
			writeMask: $ianmackenzie$elm_3d_scene$Scene3d$singleLightMask(lightIndex),
			zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$invert,
			zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$invert
		});
};
var $ianmackenzie$elm_3d_scene$Scene3d$createShadow = F3(
	function (shadowRenderPasses, lightIndex, lightMatrix) {
		return $elm$core$List$concat(
			_List_fromArray(
				[
					A3($ianmackenzie$elm_3d_scene$Scene3d$call, shadowRenderPasses, lightMatrix, $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil),
					_List_fromArray(
					[
						$ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue(lightIndex),
						$ianmackenzie$elm_3d_scene$Scene3d$resetStencil
					])
				]));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$createShadows = F2(
	function (shadowRenderPasses, shadowCasters) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$indexedMap,
				$ianmackenzie$elm_3d_scene$Scene3d$createShadow(shadowRenderPasses),
				shadowCasters));
	});
var $elm_explorations$webgl$WebGL$Settings$DepthTest$less = function (_v0) {
	var far = _v0.far;
	var near = _v0.near;
	var write = _v0.write;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 513, write, near, far);
};
var $elm_explorations$webgl$WebGL$Settings$DepthTest$default = $elm_explorations$webgl$WebGL$Settings$DepthTest$less(
	{far: 1, near: 0, write: true});
var $elm_explorations$webgl$WebGL$Internal$Blend = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {$: 'Blend', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_explorations$webgl$WebGL$Settings$Blend$custom = function (_v0) {
	var alpha = _v0.alpha;
	var color = _v0.color;
	var a = _v0.a;
	var b = _v0.b;
	var g = _v0.g;
	var r = _v0.r;
	var expand = F2(
		function (_v1, _v2) {
			var eq1 = _v1.a;
			var f11 = _v1.b;
			var f12 = _v1.c;
			var eq2 = _v2.a;
			var f21 = _v2.b;
			var f22 = _v2.c;
			return $elm_explorations$webgl$WebGL$Internal$Blend(eq1)(f11)(f12)(eq2)(f21)(f22)(r)(g)(b)(a);
		});
	return A2(expand, color, alpha);
};
var $elm_explorations$webgl$WebGL$Settings$Blend$Blender = F3(
	function (a, b, c) {
		return {$: 'Blender', a: a, b: b, c: c};
	});
var $elm_explorations$webgl$WebGL$Settings$Blend$customAdd = F2(
	function (_v0, _v1) {
		var factor1 = _v0.a;
		var factor2 = _v1.a;
		return A3($elm_explorations$webgl$WebGL$Settings$Blend$Blender, 32774, factor1, factor2);
	});
var $elm_explorations$webgl$WebGL$Settings$Blend$Factor = function (a) {
	return {$: 'Factor', a: a};
};
var $elm_explorations$webgl$WebGL$Settings$Blend$one = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(1);
var $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(771);
var $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha = $elm_explorations$webgl$WebGL$Settings$Blend$Factor(770);
var $ianmackenzie$elm_3d_scene$Scene3d$defaultBlend = $elm_explorations$webgl$WebGL$Settings$Blend$custom(
	{
		a: 0,
		alpha: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$one, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
		b: 0,
		color: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
		g: 0,
		r: 0
	});
var $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault = _List_fromArray(
	[$elm_explorations$webgl$WebGL$Settings$DepthTest$default, $ianmackenzie$elm_3d_scene$Scene3d$defaultBlend]);
var $ianmackenzie$elm_geometry$Point3d$unsafe = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(givenCoordinates);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$placementFrame = function (transformation) {
	return $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: $ianmackenzie$elm_geometry$Point3d$unsafe(
				{x: transformation.px, y: transformation.py, z: transformation.pz}),
			xDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.ix, y: transformation.iy, z: transformation.iz}),
			yDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.jx, y: transformation.jy, z: transformation.jz}),
			zDirection: $ianmackenzie$elm_geometry$Direction3d$unsafe(
				{x: transformation.kx, y: transformation.ky, z: transformation.kz})
		});
};
var $ianmackenzie$elm_geometry$Direction3d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var d = _v1.a;
		var _v2 = frame.zDirection;
		var k = _v2.a;
		var _v3 = frame.yDirection;
		var j = _v3.a;
		var _v4 = frame.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction3d(
			{x: ((d.x * i.x) + (d.y * i.y)) + (d.z * i.z), y: ((d.x * j.x) + (d.y * j.y)) + (d.z * j.z), z: ((d.x * k.x) + (d.y * k.y)) + (d.z * k.z)});
	});
var $ianmackenzie$elm_geometry$Point3d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var deltaZ = p.z - p0.z;
		var _v3 = frame.zDirection;
		var k = _v3.a;
		var _v4 = frame.yDirection;
		var j = _v4.a;
		var _v5 = frame.xDirection;
		var i = _v5.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point3d(
			{x: ((deltaX * i.x) + (deltaY * i.y)) + (deltaZ * i.z), y: ((deltaX * j.x) + (deltaY * j.y)) + (deltaZ * j.z), z: ((deltaX * k.x) + (deltaY * k.y)) + (deltaZ * k.z)});
	});
var $ianmackenzie$elm_geometry$Frame3d$relativeTo = F2(
	function (otherFrame, frame) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$originPoint(frame)),
				xDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$xDirection(frame)),
				yDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$yDirection(frame)),
				zDirection: A2(
					$ianmackenzie$elm_geometry$Direction3d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame3d$zDirection(frame))
			});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds = F4(
	function (viewFrame, scale, modelBounds, current) {
		var originalCenter = modelBounds.centerPoint;
		var modelZDimension = (2 * modelBounds.halfZ) * scale;
		var modelYDimension = (2 * modelBounds.halfY) * scale;
		var modelXDimension = (2 * modelBounds.halfX) * scale;
		var modelCenterZ = originalCenter.z * scale;
		var modelCenterY = originalCenter.y * scale;
		var modelCenterX = originalCenter.x * scale;
		var k = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$zDirection(viewFrame));
		var zDimension = ($elm$core$Basics$abs(modelXDimension * k.x) + $elm$core$Basics$abs(modelYDimension * k.y)) + $elm$core$Basics$abs(modelZDimension * k.z);
		var j = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$yDirection(viewFrame));
		var yDimension = ($elm$core$Basics$abs(modelXDimension * j.x) + $elm$core$Basics$abs(modelYDimension * j.y)) + $elm$core$Basics$abs(modelZDimension * j.z);
		var i = $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Frame3d$xDirection(viewFrame));
		var xDimension = ($elm$core$Basics$abs(modelXDimension * i.x) + $elm$core$Basics$abs(modelYDimension * i.y)) + $elm$core$Basics$abs(modelZDimension * i.z);
		var nodeBounds = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
			_Utils_Tuple3(
				$ianmackenzie$elm_units$Quantity$Quantity(xDimension),
				$ianmackenzie$elm_units$Quantity$Quantity(yDimension),
				$ianmackenzie$elm_units$Quantity$Quantity(zDimension)),
			A2(
				$ianmackenzie$elm_geometry$Point3d$relativeTo,
				viewFrame,
				A3($ianmackenzie$elm_geometry$Point3d$meters, modelCenterX, modelCenterY, modelCenterZ)));
		if (current.$ === 'Just') {
			var currentBounds = current.a;
			return $elm$core$Maybe$Just(
				A2($ianmackenzie$elm_geometry$BoundingBox3d$union, currentBounds, nodeBounds));
		} else {
			return $elm$core$Maybe$Just(nodeBounds);
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$getViewBounds = F4(
	function (viewFrame, scale, current, nodes) {
		getViewBounds:
		while (true) {
			if (nodes.b) {
				var first = nodes.a;
				var rest = nodes.b;
				switch (first.$) {
					case 'EmptyNode':
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = current,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'MeshNode':
						var modelBounds = first.a;
						var updated = A4($ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds, viewFrame, scale, modelBounds, current);
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = updated,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'ShadowNode':
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = current,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'PointNode':
						var modelBounds = first.a;
						var updated = A4($ianmackenzie$elm_3d_scene$Scene3d$updateViewBounds, viewFrame, scale, modelBounds, current);
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = updated,
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					case 'Group':
						var childNodes = first.a;
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = A4($ianmackenzie$elm_3d_scene$Scene3d$getViewBounds, viewFrame, scale, current, childNodes),
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
					default:
						var transformation = first.a;
						var childNode = first.b;
						var localViewFrame = A2(
							$ianmackenzie$elm_geometry$Frame3d$relativeTo,
							$ianmackenzie$elm_3d_scene$Scene3d$Transformation$placementFrame(transformation),
							viewFrame);
						var localScale = scale * transformation.scale;
						var $temp$viewFrame = viewFrame,
							$temp$scale = scale,
							$temp$current = A4(
							$ianmackenzie$elm_3d_scene$Scene3d$getViewBounds,
							localViewFrame,
							localScale,
							current,
							_List_fromArray(
								[childNode])),
							$temp$nodes = rest;
						viewFrame = $temp$viewFrame;
						scale = $temp$scale;
						current = $temp$current;
						nodes = $temp$nodes;
						continue getViewBounds;
				}
			} else {
				return current;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Transformation$identity = {isRightHanded: true, ix: 1, iy: 0, iz: 0, jx: 0, jy: 1, jz: 0, kx: 0, ky: 0, kz: 1, px: 0, py: 0, pz: 0, scale: 1};
var $ianmackenzie$elm_3d_scene$Scene3d$initStencil = $ianmackenzie$elm_3d_scene$Scene3d$updateStencil(
	{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, mask: 0, ref: $ianmackenzie$elm_3d_scene$Scene3d$initialStencilCount, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$always, writeMask: 255, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$replace});
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Light = function (a) {
	return {$: 'Light', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled = $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
	{b: 0, castsShadows: false, g: 0, parameter: 0, r: 0, type_: 0, x: 0, y: 0, z: 0});
var $ianmackenzie$elm_3d_scene$Scene3d$lightPair = F2(
	function (_v0, _v1) {
		var first = _v0.a;
		var second = _v1.a;
		return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{m11: first.x, m12: first.r, m13: second.x, m14: second.r, m21: first.y, m22: first.g, m23: second.y, m24: second.g, m31: first.z, m32: first.b, m33: second.z, m34: second.b, m41: first.type_, m42: first.parameter, m43: second.type_, m44: second.parameter});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled = _Utils_Tuple2(
	{
		lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled),
		lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled)
	},
	A4($elm_explorations$linear_algebra$Math$Vector4$vec4, 0, 0, 0, 0));
var $elm_explorations$webgl$WebGL$Settings$StencilTest$equal = $elm_explorations$webgl$WebGL$Settings$StencilTest$Test(514);
var $elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual = function (_v0) {
	var far = _v0.far;
	var near = _v0.near;
	var write = _v0.write;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 515, write, near, far);
};
var $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits = 240;
var $ianmackenzie$elm_3d_scene$Scene3d$outsideStencil = _List_fromArray(
	[
		$elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual(
		{far: 1, near: 0, write: true}),
		$elm_explorations$webgl$WebGL$Settings$StencilTest$test(
		{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, mask: $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits, ref: 0, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$equal, writeMask: 0, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep}),
		$ianmackenzie$elm_3d_scene$Scene3d$defaultBlend
	]);
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$projectionMatrix = F2(
	function (_v0, _v1) {
		var camera = _v0.a;
		var aspectRatio = _v1.aspectRatio;
		var farClipDepth = _v1.farClipDepth;
		var nearClipDepth = _v1.nearClipDepth;
		var _v2 = $ianmackenzie$elm_units$Quantity$abs(nearClipDepth);
		var n = _v2.a;
		var _v3 = $ianmackenzie$elm_units$Quantity$abs(farClipDepth);
		var f = _v3.a;
		var _v4 = camera.projection;
		if (_v4.$ === 'Perspective') {
			var frustumSlope = _v4.a;
			return $elm$core$Basics$isInfinite(f) ? $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 1 / (aspectRatio * frustumSlope), m12: 0, m13: 0, m14: 0, m21: 0, m22: 1 / frustumSlope, m23: 0, m24: 0, m31: 0, m32: 0, m33: -1, m34: (-2) * n, m41: 0, m42: 0, m43: -1, m44: 0}) : $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 1 / (aspectRatio * frustumSlope), m12: 0, m13: 0, m14: 0, m21: 0, m22: 1 / frustumSlope, m23: 0, m24: 0, m31: 0, m32: 0, m33: (-(f + n)) / (f - n), m34: (((-2) * f) * n) / (f - n), m41: 0, m42: 0, m43: -1, m44: 0});
		} else {
			var viewportHeight = _v4.a.a;
			return $elm$core$Basics$isInfinite(f) ? $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 2 / (aspectRatio * viewportHeight), m12: 0, m13: 0, m14: 0, m21: 0, m22: 2 / viewportHeight, m23: 0, m24: 0, m31: 0, m32: 0, m33: 0, m34: -1, m41: 0, m42: 0, m43: 0, m44: 1}) : $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
				{m11: 2 / (aspectRatio * viewportHeight), m12: 0, m13: 0, m14: 0, m21: 0, m22: 2 / viewportHeight, m23: 0, m24: 0, m31: 0, m32: 0, m33: (-2) / (f - n), m34: (-(f + n)) / (f - n), m41: 0, m42: 0, m43: 0, m44: 1});
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$enabledFlag = F2(
	function (lightMask, lightIndex) {
		return ((1 & (lightMask >> lightIndex)) === 1) ? 0 : 1;
	});
var $ianmackenzie$elm_3d_scene$Scene3d$insideStencil = function (lightMask) {
	return _List_fromArray(
		[
			$elm_explorations$webgl$WebGL$Settings$DepthTest$lessOrEqual(
			{far: 1, near: 0, write: true}),
			$elm_explorations$webgl$WebGL$Settings$StencilTest$test(
			{fail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, mask: $ianmackenzie$elm_3d_scene$Scene3d$upperFourBits, ref: lightMask, test: $elm_explorations$webgl$WebGL$Settings$StencilTest$equal, writeMask: 0, zfail: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep, zpass: $elm_explorations$webgl$WebGL$Settings$StencilTest$keep}),
			$ianmackenzie$elm_3d_scene$Scene3d$defaultBlend
		]);
};
var $ianmackenzie$elm_3d_scene$Scene3d$renderWithinShadows = F3(
	function (meshRenderPasses, lightMatrices, numShadowingLights) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (lightMask) {
					var stencilMask = lightMask << 4;
					var enabledLights = A4(
						$elm_explorations$linear_algebra$Math$Vector4$vec4,
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 0),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 1),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 2),
						A2($ianmackenzie$elm_3d_scene$Scene3d$enabledFlag, lightMask, 3));
					return A3(
						$ianmackenzie$elm_3d_scene$Scene3d$call,
						meshRenderPasses,
						_Utils_Tuple2(lightMatrices, enabledLights),
						$ianmackenzie$elm_3d_scene$Scene3d$insideStencil(stencilMask));
				},
				A2(
					$elm$core$List$range,
					1,
					A2($elm$core$Basics$pow, 2, numShadowingLights) - 1)));
	});
var $elm_explorations$linear_algebra$Math$Matrix4$toRecord = _MJS_m4x4toRecord;
var $ianmackenzie$elm_geometry$Frame3d$atOrigin = $ianmackenzie$elm_geometry$Geometry$Types$Frame3d(
	{originPoint: $ianmackenzie$elm_geometry$Point3d$origin, xDirection: $ianmackenzie$elm_geometry$Direction3d$x, yDirection: $ianmackenzie$elm_geometry$Direction3d$y, zDirection: $ianmackenzie$elm_geometry$Direction3d$z});
var $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Frame3d$toMat4 = function (frame) {
	var p = $ianmackenzie$elm_geometry$Point3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$originPoint(frame));
	var k = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$zDirection(frame));
	var j = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$yDirection(frame));
	var i = $ianmackenzie$elm_geometry$Direction3d$unwrap(
		$ianmackenzie$elm_geometry$Frame3d$xDirection(frame));
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: i.x, m12: j.x, m13: k.x, m14: p.x, m21: i.y, m22: j.y, m23: k.y, m24: p.y, m31: i.z, m32: j.z, m33: k.z, m34: p.z, m41: 0, m42: 0, m43: 0, m44: 1});
};
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$modelViewMatrix = F2(
	function (modelFrame, _v0) {
		var viewpointFrame = _v0.a;
		return $ianmackenzie$elm_geometry_linear_algebra_interop$Geometry$Interop$LinearAlgebra$Frame3d$toMat4(
			A2($ianmackenzie$elm_geometry$Frame3d$relativeTo, viewpointFrame, modelFrame));
	});
var $ianmackenzie$elm_3d_camera$WebGL$Matrices$viewMatrix = function (camera) {
	return A2($ianmackenzie$elm_3d_camera$WebGL$Matrices$modelViewMatrix, $ianmackenzie$elm_geometry$Frame3d$atOrigin, camera);
};
var $ianmackenzie$elm_3d_camera$Camera3d$viewpoint = function (_v0) {
	var camera = _v0.a;
	return camera.viewpoint;
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$xDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$xDirection(frame);
};
var $ianmackenzie$elm_3d_camera$Viewpoint3d$yDirection = function (_v0) {
	var frame = _v0.a;
	return $ianmackenzie$elm_geometry$Frame3d$yDirection(frame);
};
var $ianmackenzie$elm_3d_scene$Scene3d$toWebGLEntities = function (_arguments) {
	var viewpoint = $ianmackenzie$elm_3d_camera$Camera3d$viewpoint(_arguments.camera);
	var viewFrame = $ianmackenzie$elm_geometry$Frame3d$unsafe(
		{
			originPoint: $ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(viewpoint),
			xDirection: $ianmackenzie$elm_3d_camera$Viewpoint3d$xDirection(viewpoint),
			yDirection: $ianmackenzie$elm_3d_camera$Viewpoint3d$yDirection(viewpoint),
			zDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(viewpoint))
		});
	var _v0 = $ianmackenzie$elm_3d_scene$Scene3d$Entity$group(_arguments.entities);
	var rootNode = _v0.a;
	var _v1 = A4(
		$ianmackenzie$elm_3d_scene$Scene3d$getViewBounds,
		viewFrame,
		1,
		$elm$core$Maybe$Nothing,
		_List_fromArray(
			[rootNode]));
	if (_v1.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var viewBounds = _v1.a;
		var viewMatrix = $ianmackenzie$elm_3d_camera$WebGL$Matrices$viewMatrix(viewpoint);
		var nearClipDepth = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			0.99,
			A2(
				$ianmackenzie$elm_units$Quantity$max,
				$ianmackenzie$elm_units$Quantity$abs(_arguments.clipDepth),
				$ianmackenzie$elm_units$Quantity$negate(
					$ianmackenzie$elm_geometry$BoundingBox3d$maxZ(viewBounds))));
		var _v2 = $ianmackenzie$elm_geometry$BoundingBox3d$dimensions(viewBounds);
		var xDimension = _v2.a;
		var yDimension = _v2.b;
		var zDimension = _v2.c;
		var sceneDiameter = $ianmackenzie$elm_geometry$Vector3d$length(
			A3($ianmackenzie$elm_geometry$Vector3d$xyz, xDimension, yDimension, zDimension));
		var farClipDepth = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			1.01,
			A2(
				$ianmackenzie$elm_units$Quantity$plus,
				sceneDiameter,
				$ianmackenzie$elm_units$Quantity$negate(
					$ianmackenzie$elm_geometry$BoundingBox3d$minZ(viewBounds))));
		var projectionMatrix = A2(
			$ianmackenzie$elm_3d_camera$WebGL$Matrices$projectionMatrix,
			_arguments.camera,
			{aspectRatio: _arguments.aspectRatio, farClipDepth: farClipDepth, nearClipDepth: nearClipDepth});
		var projectionType = $elm_explorations$linear_algebra$Math$Matrix4$toRecord(projectionMatrix).m44;
		var eyePointOrDirectionToCamera = (!projectionType) ? $ianmackenzie$elm_geometry$Point3d$toMeters(
			$ianmackenzie$elm_3d_camera$Viewpoint3d$eyePoint(viewpoint)) : $ianmackenzie$elm_geometry$Direction3d$unwrap(
			$ianmackenzie$elm_geometry$Direction3d$reverse(
				$ianmackenzie$elm_3d_camera$Viewpoint3d$viewDirection(viewpoint)));
		var _v3 = function () {
			var _v4 = _arguments.toneMapping;
			switch (_v4.$) {
				case 'NoToneMapping':
					return _Utils_Tuple2(0, 0);
				case 'ReinhardLuminanceToneMapping':
					return _Utils_Tuple2(1, 0);
				case 'ReinhardPerChannelToneMapping':
					return _Utils_Tuple2(2, 0);
				case 'ExtendedReinhardLuminanceToneMapping':
					var overexposureLimit = _v4.a;
					return _Utils_Tuple2(3, overexposureLimit);
				case 'ExtendedReinhardPerChannelToneMapping':
					var overexposureLimit = _v4.a;
					return _Utils_Tuple2(4, overexposureLimit);
				default:
					return _Utils_Tuple2(5, 0);
			}
		}();
		var toneMapType = _v3.a;
		var toneMapParam = _v3.b;
		var _v5 = _arguments.exposure;
		var exposureLuminance = _v5.a;
		var _v6 = A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb, exposureLuminance, _arguments.whiteBalance);
		var referenceWhite = _v6.a;
		var sceneProperties = $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
			{
				m11: 0,
				m12: eyePointOrDirectionToCamera.x,
				m13: $elm_explorations$linear_algebra$Math$Vector3$getX(referenceWhite),
				m14: _arguments.supersampling,
				m21: 0,
				m22: eyePointOrDirectionToCamera.y,
				m23: $elm_explorations$linear_algebra$Math$Vector3$getY(referenceWhite),
				m24: $ianmackenzie$elm_units$Length$inMeters(sceneDiameter),
				m31: 0,
				m32: eyePointOrDirectionToCamera.z,
				m33: $elm_explorations$linear_algebra$Math$Vector3$getZ(referenceWhite),
				m34: toneMapType,
				m41: 0,
				m42: projectionType,
				m43: 0,
				m44: toneMapParam
			});
		var renderPasses = A6(
			$ianmackenzie$elm_3d_scene$Scene3d$collectRenderPasses,
			sceneProperties,
			viewMatrix,
			projectionMatrix,
			$ianmackenzie$elm_3d_scene$Scene3d$Transformation$identity,
			rootNode,
			{meshes: _List_Nil, points: _List_Nil, shadows: _List_Nil});
		var _v7 = _arguments.lights;
		switch (_v7.$) {
			case 'SingleUnshadowedPass':
				var lightMatrices = _v7.a;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(lightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
			case 'SingleShadowedPass':
				var lightMatrices = _v7.a;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.meshes, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							_List_fromArray(
							[$ianmackenzie$elm_3d_scene$Scene3d$initStencil]),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.shadows, lightMatrices.lights12, $ianmackenzie$elm_3d_scene$Scene3d$createShadowStencil),
							_List_fromArray(
							[
								$ianmackenzie$elm_3d_scene$Scene3d$storeStencilValue(0)
							]),
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(lightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$outsideStencil),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
			default:
				var shadowCasters = _v7.a;
				var allLightMatrices = _v7.b;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$call,
							renderPasses.meshes,
							_Utils_Tuple2(allLightMatrices, $ianmackenzie$elm_3d_scene$Scene3d$allLightsEnabled),
							$ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault),
							_List_fromArray(
							[$ianmackenzie$elm_3d_scene$Scene3d$initStencil]),
							A2($ianmackenzie$elm_3d_scene$Scene3d$createShadows, renderPasses.shadows, shadowCasters),
							A3(
							$ianmackenzie$elm_3d_scene$Scene3d$renderWithinShadows,
							renderPasses.meshes,
							allLightMatrices,
							$elm$core$List$length(shadowCasters)),
							A3($ianmackenzie$elm_3d_scene$Scene3d$call, renderPasses.points, $ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled, $ianmackenzie$elm_3d_scene$Scene3d$depthTestDefault)
						]));
		}
	}
};
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $ianmackenzie$elm_3d_scene$Scene3d$composite = F2(
	function (_arguments, scenes) {
		var commonWebGLOptions = _List_fromArray(
			[
				$elm_explorations$webgl$WebGL$depth(1),
				$elm_explorations$webgl$WebGL$stencil(0),
				$elm_explorations$webgl$WebGL$alpha(true),
				A4($elm_explorations$webgl$WebGL$clearColor, 0, 0, 0, 0)
			]);
		var _v0 = function () {
			var _v1 = _arguments.antialiasing;
			switch (_v1.$) {
				case 'NoAntialiasing':
					return _Utils_Tuple3(commonWebGLOptions, '0', 1);
				case 'Multisampling':
					return _Utils_Tuple3(
						A2($elm$core$List$cons, $elm_explorations$webgl$WebGL$antialias, commonWebGLOptions),
						'1',
						1);
				default:
					var value = _v1.a;
					return _Utils_Tuple3(commonWebGLOptions, '0', value);
			}
		}();
		var webGLOptions = _v0.a;
		var key = _v0.b;
		var scalingFactor = _v0.c;
		var _v2 = _arguments.dimensions;
		var width = _v2.a;
		var height = _v2.b;
		var heightInPixels = $ianmackenzie$elm_units$Pixels$toInt(height);
		var heightCss = A2(
			$elm$html$Html$Attributes$style,
			'height',
			$elm$core$String$fromInt(heightInPixels) + 'px');
		var widthInPixels = $ianmackenzie$elm_units$Pixels$toInt(width);
		var aspectRatio = widthInPixels / heightInPixels;
		var webGLEntities = A2(
			$elm$core$List$concatMap,
			function (scene) {
				return $ianmackenzie$elm_3d_scene$Scene3d$toWebGLEntities(
					{aspectRatio: aspectRatio, camera: _arguments.camera, clipDepth: _arguments.clipDepth, entities: scene.entities, exposure: scene.exposure, lights: scene.lights, supersampling: scalingFactor, toneMapping: scene.toneMapping, whiteBalance: scene.whiteBalance});
			},
			scenes);
		var widthCss = A2(
			$elm$html$Html$Attributes$style,
			'width',
			$elm$core$String$fromInt(widthInPixels) + 'px');
		var _v3 = _arguments.background;
		var givenBackgroundColor = _v3.a;
		var backgroundColorString = $avh4$elm_color$Color$toCssString(givenBackgroundColor);
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding', '0px'),
					widthCss,
					heightCss
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					key,
					A3(
						$elm_explorations$webgl$WebGL$toHtmlWith,
						webGLOptions,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$width(
								$elm$core$Basics$round(widthInPixels * scalingFactor)),
								$elm$html$Html$Attributes$height(
								$elm$core$Basics$round(heightInPixels * scalingFactor)),
								widthCss,
								heightCss,
								A2($elm$html$Html$Attributes$style, 'display', 'block'),
								A2($elm$html$Html$Attributes$style, 'background-color', backgroundColorString)
							]),
						webGLEntities))
				]));
	});
var $ianmackenzie$elm_3d_scene$Scene3d$custom = function (_arguments) {
	return A2(
		$ianmackenzie$elm_3d_scene$Scene3d$composite,
		{antialiasing: _arguments.antialiasing, background: _arguments.background, camera: _arguments.camera, clipDepth: _arguments.clipDepth, dimensions: _arguments.dimensions},
		_List_fromArray(
			[
				{entities: _arguments.entities, exposure: _arguments.exposure, lights: _arguments.lights, toneMapping: _arguments.toneMapping, whiteBalance: _arguments.whiteBalance}
			]));
};
var $ianmackenzie$elm_3d_scene$Scene3d$Types$Chromaticity = function (a) {
	return {$: 'Chromaticity', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity = function (xy) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Chromaticity(xy);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight = $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity(
	{x: 0.31271, y: 0.32902});
var $ianmackenzie$elm_3d_scene$Scene3d$Light$directional = F2(
	function (_v0, light) {
		var shadowFlag = _v0.a;
		var _v1 = $ianmackenzie$elm_geometry$Direction3d$unwrap(light.direction);
		var z = _v1.z;
		var y = _v1.y;
		var x = _v1.x;
		var _v2 = A2($ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb, light.intensity, light.chromaticity);
		var rgb = _v2.a;
		return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
			{
				b: $elm_explorations$linear_algebra$Math$Vector3$getZ(rgb),
				castsShadows: shadowFlag,
				g: $elm_explorations$linear_algebra$Math$Vector3$getY(rgb),
				parameter: 0,
				r: $elm_explorations$linear_algebra$Math$Vector3$getX(rgb),
				type_: 1,
				x: -x,
				y: -y,
				z: -z
			});
	});
var $ianmackenzie$elm_3d_scene$Scene3d$Exposure = function (a) {
	return {$: 'Exposure', a: a};
};
var $ianmackenzie$elm_units$Luminance$nits = function (numNits) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numNits);
};
var $ianmackenzie$elm_3d_scene$Scene3d$exposureValue = function (ev100) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Exposure(
		$ianmackenzie$elm_units$Luminance$nits(
			1.2 * A2($elm$core$Basics$pow, 2, ev100)));
};
var $ianmackenzie$elm_units$Illuminance$lux = function (numLux) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numLux);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Multisampling = {$: 'Multisampling'};
var $ianmackenzie$elm_3d_scene$Scene3d$multisampling = $ianmackenzie$elm_3d_scene$Scene3d$Multisampling;
var $ianmackenzie$elm_3d_scene$Scene3d$NoToneMapping = {$: 'NoToneMapping'};
var $ianmackenzie$elm_3d_scene$Scene3d$noToneMapping = $ianmackenzie$elm_3d_scene$Scene3d$NoToneMapping;
var $ianmackenzie$elm_units$Illuminance$inLux = function (_v0) {
	var numLux = _v0.a;
	return numLux;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$soft = function (light) {
	soft:
	while (true) {
		if (_Utils_eq(light.intensityAbove, $ianmackenzie$elm_units$Quantity$zero) && _Utils_eq(light.intensityBelow, $ianmackenzie$elm_units$Quantity$zero)) {
			return $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled;
		} else {
			if (A2(
				$ianmackenzie$elm_units$Quantity$greaterThan,
				$ianmackenzie$elm_units$Quantity$abs(light.intensityAbove),
				$ianmackenzie$elm_units$Quantity$abs(light.intensityBelow))) {
				var $temp$light = {
					chromaticity: light.chromaticity,
					intensityAbove: light.intensityBelow,
					intensityBelow: light.intensityAbove,
					upDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(light.upDirection)
				};
				light = $temp$light;
				continue soft;
			} else {
				var nitsBelow = $elm$core$Basics$abs(
					$ianmackenzie$elm_units$Illuminance$inLux(light.intensityBelow) / $elm$core$Basics$pi);
				var nitsAbove = $elm$core$Basics$abs(
					$ianmackenzie$elm_units$Illuminance$inLux(light.intensityAbove) / $elm$core$Basics$pi);
				var _v0 = $ianmackenzie$elm_geometry$Direction3d$unwrap(light.upDirection);
				var z = _v0.z;
				var y = _v0.y;
				var x = _v0.x;
				var _v1 = A2(
					$ianmackenzie$elm_3d_scene$Scene3d$ColorConversions$chromaticityToLinearRgb,
					$ianmackenzie$elm_units$Quantity$float(1),
					light.chromaticity);
				var rgb = _v1.a;
				return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(
					{
						b: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getZ(rgb),
						castsShadows: false,
						g: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getY(rgb),
						parameter: nitsBelow / nitsAbove,
						r: nitsAbove * $elm_explorations$linear_algebra$Math$Vector3$getX(rgb),
						type_: 3,
						x: x,
						y: y,
						z: z
					});
			}
		}
	}
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead = function (_arguments) {
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$soft(
		{chromaticity: _arguments.chromaticity, intensityAbove: _arguments.intensity, intensityBelow: $ianmackenzie$elm_units$Quantity$zero, upDirection: _arguments.upDirection});
};
var $ianmackenzie$elm_units$Temperature$inKelvins = function (_v0) {
	var numKelvins = _v0.a;
	return numKelvins;
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature = function (temperature) {
	var t = A3(
		$elm$core$Basics$clamp,
		1667,
		25000,
		$ianmackenzie$elm_units$Temperature$inKelvins(temperature));
	var x = (t <= 4000) ? ((((((-0.2661239) * 1.0e9) / ((t * t) * t)) - ((0.2343589 * 1.0e6) / (t * t))) + ((0.8776956 * 1.0e3) / t)) + 0.17991) : ((((((-3.0258469) * 1.0e9) / ((t * t) * t)) + ((2.1070379 * 1.0e6) / (t * t))) + ((0.2226347 * 1.0e3) / t)) + 0.24039);
	var y = (t <= 2222) ? (((((-1.1063814) * ((x * x) * x)) - (1.3481102 * (x * x))) + (2.18555832 * x)) - 0.20219683) : ((t <= 4000) ? (((((-0.9549476) * ((x * x) * x)) - (1.37418593 * (x * x))) + (2.09137015 * x)) - 0.16748867) : ((((3.081758 * ((x * x) * x)) - (5.8733867 * (x * x))) + (3.75112997 * x)) - 0.37001483));
	return $ianmackenzie$elm_3d_scene$Scene3d$Light$chromaticity(
		{x: x, y: y});
};
var $ianmackenzie$elm_units$Temperature$Temperature = function (a) {
	return {$: 'Temperature', a: a};
};
var $ianmackenzie$elm_units$Temperature$kelvins = function (numKelvins) {
	return $ianmackenzie$elm_units$Temperature$Temperature(numKelvins);
};
var $ianmackenzie$elm_3d_scene$Scene3d$Light$skylight = $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature(
	$ianmackenzie$elm_units$Temperature$kelvins(12000));
var $ianmackenzie$elm_3d_scene$Scene3d$Light$sunlight = $ianmackenzie$elm_3d_scene$Scene3d$Light$colorTemperature(
	$ianmackenzie$elm_units$Temperature$kelvins(5600));
var $ianmackenzie$elm_3d_scene$Scene3d$MultiplePasses = F2(
	function (a, b) {
		return {$: 'MultiplePasses', a: a, b: b};
	});
var $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass = function (a) {
	return {$: 'SingleUnshadowedPass', a: a};
};
var $ianmackenzie$elm_3d_scene$Scene3d$eraseLight = function (_v0) {
	var light = _v0.a;
	return $ianmackenzie$elm_3d_scene$Scene3d$Types$Light(light);
};
var $ianmackenzie$elm_3d_scene$Scene3d$lightCastsShadows = function (_v0) {
	var properties = _v0.a;
	return properties.castsShadows;
};
var $ianmackenzie$elm_3d_scene$Scene3d$noLights = $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass($ianmackenzie$elm_3d_scene$Scene3d$lightingDisabled.a);
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$singleLight = function (_v0) {
	var light = _v0.a;
	return $elm_explorations$linear_algebra$Math$Matrix4$fromRecord(
		{m11: light.x, m12: light.r, m13: 0, m14: 0, m21: light.y, m22: light.g, m23: 0, m24: 0, m31: light.z, m32: light.b, m33: 0, m34: 0, m41: light.type_, m42: light.parameter, m43: 0, m44: 0});
};
var $ianmackenzie$elm_3d_scene$Scene3d$eightLights = F8(
	function (first, second, third, fourth, fifth, sixth, seventh, eigth) {
		var _v0 = A2(
			$elm$core$List$partition,
			$ianmackenzie$elm_3d_scene$Scene3d$lightCastsShadows,
			_List_fromArray(
				[
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(first),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(second),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(third),
					$ianmackenzie$elm_3d_scene$Scene3d$eraseLight(fourth)
				]));
		var enabledShadowCasters = _v0.a;
		var disabledShadowCasters = _v0.b;
		if (!enabledShadowCasters.b) {
			return $ianmackenzie$elm_3d_scene$Scene3d$SingleUnshadowedPass(
				{
					lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, first, second),
					lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, third, fourth),
					lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, fifth, sixth),
					lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, seventh, eigth)
				});
		} else {
			var sortedLights = _Utils_ap(enabledShadowCasters, disabledShadowCasters);
			if ((((sortedLights.b && sortedLights.b.b) && sortedLights.b.b.b) && sortedLights.b.b.b.b) && (!sortedLights.b.b.b.b.b)) {
				var light0 = sortedLights.a;
				var _v3 = sortedLights.b;
				var light1 = _v3.a;
				var _v4 = _v3.b;
				var light2 = _v4.a;
				var _v5 = _v4.b;
				var light3 = _v5.a;
				return A2(
					$ianmackenzie$elm_3d_scene$Scene3d$MultiplePasses,
					A2($elm$core$List$map, $ianmackenzie$elm_3d_scene$Scene3d$singleLight, enabledShadowCasters),
					{
						lights12: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, light0, light1),
						lights34: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, light2, light3),
						lights56: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, fifth, sixth),
						lights78: A2($ianmackenzie$elm_3d_scene$Scene3d$lightPair, seventh, eigth)
					});
			} else {
				return $ianmackenzie$elm_3d_scene$Scene3d$noLights;
			}
		}
	});
var $ianmackenzie$elm_3d_scene$Scene3d$threeLights = F3(
	function (first, second, third) {
		return A8($ianmackenzie$elm_3d_scene$Scene3d$eightLights, first, second, third, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled, $ianmackenzie$elm_3d_scene$Scene3d$Light$disabled);
	});
var $ianmackenzie$elm_3d_scene$Scene3d$sunny = function (_arguments) {
	var sun = A2(
		$ianmackenzie$elm_3d_scene$Scene3d$Light$directional,
		$ianmackenzie$elm_3d_scene$Scene3d$Light$castsShadows(_arguments.shadows),
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$sunlight,
			direction: _arguments.sunlightDirection,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(80000)
		});
	var sky = $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead(
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$skylight,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(20000),
			upDirection: _arguments.upDirection
		});
	var environment = $ianmackenzie$elm_3d_scene$Scene3d$Light$overhead(
		{
			chromaticity: $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight,
			intensity: $ianmackenzie$elm_units$Illuminance$lux(15000),
			upDirection: $ianmackenzie$elm_geometry$Direction3d$reverse(_arguments.upDirection)
		});
	var lights = A3($ianmackenzie$elm_3d_scene$Scene3d$threeLights, sun, sky, environment);
	return $ianmackenzie$elm_3d_scene$Scene3d$custom(
		{
			antialiasing: $ianmackenzie$elm_3d_scene$Scene3d$multisampling,
			background: _arguments.background,
			camera: _arguments.camera,
			clipDepth: _arguments.clipDepth,
			dimensions: _arguments.dimensions,
			entities: _arguments.entities,
			exposure: $ianmackenzie$elm_3d_scene$Scene3d$exposureValue(15),
			lights: lights,
			toneMapping: $ianmackenzie$elm_3d_scene$Scene3d$noToneMapping,
			whiteBalance: $ianmackenzie$elm_3d_scene$Scene3d$Light$daylight
		});
};
var $author$project$ViewFirstPerson$view = F6(
	function (context, contentArea, track, scene, msgWrapper, mFlythrough) {
		var flythroughHUD = function () {
			if (mFlythrough.$ === 'Just') {
				var flythrough = mFlythrough.a;
				return $mdgriffith$elm_ui$Element$inFront(
					$author$project$ViewFirstPerson$headUpDisplay(flythrough.gradient));
			} else {
				return $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				flythroughHUD,
				A2($author$project$View3dCommonElements$common3dSceneAttributes, msgWrapper, context)),
			$mdgriffith$elm_ui$Element$html(
				$ianmackenzie$elm_3d_scene$Scene3d$sunny(
					{
						background: $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor($avh4$elm_color$Color$lightBlue),
						camera: A3($author$project$ViewFirstPerson$deriveViewPointAndCamera, context, track, mFlythrough),
						clipDepth: $ianmackenzie$elm_units$Length$meters(1),
						dimensions: contentArea,
						entities: scene,
						shadows: false,
						sunlightDirection: $ianmackenzie$elm_geometry$Direction3d$negativeZ,
						upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ
					})));
	});
var $author$project$ViewGraph$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewGraph$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$ViewGraph$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$ViewGraph$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$ViewGraph$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$ViewGraph$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$toString = function (_v0) {
	var quantity = _v0.a;
	return $elm$core$String$fromFloat(quantity);
};
var $ianmackenzie$elm_1d_parameter$Parameter1d$trailing = F2(
	function (n, _function) {
		return (n < 1) ? _List_Nil : A5($ianmackenzie$elm_1d_parameter$Parameter1d$range, 1, n, n, _function, _List_Nil);
	});
var $ianmackenzie$elm_geometry$Point2d$unwrap = function (_v0) {
	var pointCoordinates = _v0.a;
	return pointCoordinates;
};
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$arc2d = F2(
	function (attributes, arc) {
		var sweptAngle = $ianmackenzie$elm_geometry$Arc2d$sweptAngle(arc);
		var sweepFlag = A2($ianmackenzie$elm_units$Quantity$greaterThanOrEqualTo, $ianmackenzie$elm_units$Quantity$zero, sweptAngle) ? '1' : '0';
		var radius = $ianmackenzie$elm_geometry$Arc2d$radius(arc);
		var radiusString = $ianmackenzie$elm_geometry_svg$Geometry$Svg$toString(radius);
		var p0 = $ianmackenzie$elm_geometry$Point2d$unwrap(
			$ianmackenzie$elm_geometry$Arc2d$startPoint(arc));
		var moveCommand = _List_fromArray(
			[
				'M',
				$elm$core$String$fromFloat(p0.x),
				$elm$core$String$fromFloat(p0.y)
			]);
		var maxSegmentAngle = $ianmackenzie$elm_units$Angle$turns(1 / 3);
		var numSegments = 1 + $elm$core$Basics$floor(
			$elm$core$Basics$abs(
				A2($ianmackenzie$elm_units$Quantity$ratio, sweptAngle, maxSegmentAngle)));
		var arcSegment = function (parameterValue) {
			var _v0 = $ianmackenzie$elm_geometry$Point2d$unwrap(
				A2($ianmackenzie$elm_geometry$Arc2d$pointOn, arc, parameterValue));
			var y = _v0.y;
			var x = _v0.x;
			return _List_fromArray(
				[
					'A',
					radiusString,
					radiusString,
					'0',
					'0',
					sweepFlag,
					$elm$core$String$fromFloat(x),
					$elm$core$String$fromFloat(y)
				]);
		};
		var arcSegments = A2($ianmackenzie$elm_1d_parameter$Parameter1d$trailing, numSegments, arcSegment);
		var pathComponents = _Utils_ap(
			moveCommand,
			$elm$core$List$concat(arcSegments));
		var pathAttribute = $elm$svg$Svg$Attributes$d(
			A2($elm$core$String$join, ' ', pathComponents));
		return A2(
			$elm$svg$Svg$path,
			A2($elm$core$List$cons, pathAttribute, attributes),
			_List_Nil);
	});
var $ianmackenzie$elm_geometry$Direction2d$y = $ianmackenzie$elm_geometry$Direction2d$positiveY;
var $ianmackenzie$elm_geometry$Frame2d$atPoint = function (point) {
	return $ianmackenzie$elm_geometry$Frame2d$unsafe(
		{originPoint: point, xDirection: $ianmackenzie$elm_geometry$Direction2d$x, yDirection: $ianmackenzie$elm_geometry$Direction2d$y});
};
var $ianmackenzie$elm_geometry$Circle2d$centerPoint = function (_v0) {
	var properties = _v0.a;
	return properties.centerPoint;
};
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $ianmackenzie$elm_geometry$Circle2d$radius = function (_v0) {
	var properties = _v0.a;
	return properties.radius;
};
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d = F2(
	function (attributes, circle) {
		var r = $elm$svg$Svg$Attributes$r(
			$ianmackenzie$elm_geometry_svg$Geometry$Svg$toString(
				$ianmackenzie$elm_geometry$Circle2d$radius(circle)));
		var _v0 = $ianmackenzie$elm_geometry$Point2d$unwrap(
			$ianmackenzie$elm_geometry$Circle2d$centerPoint(circle));
		var y = _v0.y;
		var x = _v0.x;
		var cx = $elm$svg$Svg$Attributes$cx(
			$elm$core$String$fromFloat(x));
		var cy = $elm$svg$Svg$Attributes$cy(
			$elm$core$String$fromFloat(y));
		return A2(
			$elm$svg$Svg$circle,
			A2(
				$elm$core$List$cons,
				cx,
				A2(
					$elm$core$List$cons,
					cy,
					A2($elm$core$List$cons, r, attributes))),
			_List_Nil);
	});
var $ianmackenzie$elm_units$Pixels$float = function (numPixels) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numPixels);
};
var $elm$svg$Svg$Attributes$fontFamily = _VirtualDom_attribute('font-family');
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $ianmackenzie$elm_geometry$Frame2d$atOrigin = $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(
	{originPoint: $ianmackenzie$elm_geometry$Point2d$origin, xDirection: $ianmackenzie$elm_geometry$Direction2d$x, yDirection: $ianmackenzie$elm_geometry$Direction2d$y});
var $ianmackenzie$elm_geometry$Direction2d$mirrorAcross = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var d = _v1.a;
		var _v2 = axis.direction;
		var a = _v2.a;
		var xx = 1 - ((2 * a.x) * a.x);
		var xy = (2 * a.x) * a.y;
		var yy = 1 - ((2 * a.y) * a.y);
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
			{x: (yy * d.x) + (xy * d.y), y: (xy * d.x) + (xx * d.y)});
	});
var $ianmackenzie$elm_geometry$Point2d$mirrorAcross = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var _v3 = axis.direction;
		var d = _v3.a;
		var a = 1 - ((2 * d.y) * d.y);
		var b = (2 * d.x) * d.y;
		var c = 1 - ((2 * d.x) * d.x);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: (p0.x + (a * deltaX)) + (b * deltaY), y: (p0.y + (b * deltaX)) + (c * deltaY)});
	});
var $ianmackenzie$elm_geometry$Frame2d$originPoint = function (_v0) {
	var frame = _v0.a;
	return frame.originPoint;
};
var $ianmackenzie$elm_geometry$Frame2d$xDirection = function (_v0) {
	var frame = _v0.a;
	return frame.xDirection;
};
var $ianmackenzie$elm_geometry$Frame2d$yDirection = function (_v0) {
	var frame = _v0.a;
	return frame.yDirection;
};
var $ianmackenzie$elm_geometry$Frame2d$mirrorAcross = function (axis) {
	var mirrorPoint = $ianmackenzie$elm_geometry$Point2d$mirrorAcross(axis);
	var mirrorDirection = $ianmackenzie$elm_geometry$Direction2d$mirrorAcross(axis);
	return function (frame) {
		return $ianmackenzie$elm_geometry$Frame2d$unsafe(
			{
				originPoint: mirrorPoint(
					$ianmackenzie$elm_geometry$Frame2d$originPoint(frame)),
				xDirection: mirrorDirection(
					$ianmackenzie$elm_geometry$Frame2d$xDirection(frame)),
				yDirection: mirrorDirection(
					$ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
			});
	};
};
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $ianmackenzie$elm_geometry$Direction2d$unwrap = function (_v0) {
	var directionComponents = _v0.a;
	return directionComponents;
};
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$placeIn = F2(
	function (frame, element) {
		var p = $ianmackenzie$elm_geometry$Point2d$unwrap(
			$ianmackenzie$elm_geometry$Frame2d$originPoint(frame));
		var d2 = $ianmackenzie$elm_geometry$Direction2d$unwrap(
			$ianmackenzie$elm_geometry$Frame2d$yDirection(frame));
		var d1 = $ianmackenzie$elm_geometry$Direction2d$unwrap(
			$ianmackenzie$elm_geometry$Frame2d$xDirection(frame));
		var components = _List_fromArray(
			[
				$elm$core$String$fromFloat(d1.x),
				$elm$core$String$fromFloat(d1.y),
				$elm$core$String$fromFloat(d2.x),
				$elm$core$String$fromFloat(d2.y),
				$elm$core$String$fromFloat(p.x),
				$elm$core$String$fromFloat(p.y)
			]);
		var transform = 'matrix(' + (A2($elm$core$String$join, ' ', components) + ')');
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform(transform)
				]),
			_List_fromArray(
				[element]));
	});
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross = function (axis) {
	return $ianmackenzie$elm_geometry_svg$Geometry$Svg$placeIn(
		A2($ianmackenzie$elm_geometry$Frame2d$mirrorAcross, axis, $ianmackenzie$elm_geometry$Frame2d$atOrigin));
};
var $author$project$ViewGraph$onContextMenu = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'contextmenu',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mousemove', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$coordinatesString = function (point) {
	var _v0 = $ianmackenzie$elm_geometry$Point2d$unwrap(point);
	var y = _v0.y;
	var x = _v0.x;
	return $elm$core$String$fromFloat(x) + (',' + $elm$core$String$fromFloat(y));
};
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$pointsAttribute = function (points) {
	return $elm$svg$Svg$Attributes$points(
		A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$map, $ianmackenzie$elm_geometry_svg$Geometry$Svg$coordinatesString, points)));
};
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$polyline2d = F2(
	function (attributes, polyline) {
		var vertices = $ianmackenzie$elm_geometry$Polyline2d$vertices(polyline);
		return A2(
			$elm$svg$Svg$polyline,
			A2(
				$elm$core$List$cons,
				$ianmackenzie$elm_geometry_svg$Geometry$Svg$pointsAttribute(vertices),
				attributes),
			_List_Nil);
	});
var $author$project$ViewGraph$AddSelfLoop = function (a) {
	return {$: 'AddSelfLoop', a: a};
};
var $author$project$ViewGraph$AddTraversal = function (a) {
	return {$: 'AddTraversal', a: a};
};
var $author$project$ViewGraph$DeleteRoad = function (a) {
	return {$: 'DeleteRoad', a: a};
};
var $author$project$ViewGraph$EditRoad = function (a) {
	return {$: 'EditRoad', a: a};
};
var $author$project$ViewGraph$PopupHide = {$: 'PopupHide'};
var $author$project$Tools$Graph$edgeCanBeAdded = F2(
	function (newEdge, options) {
		var _v0 = _Utils_Tuple2(
			$elm_community$list_extra$List$Extra$last(options.graph.userRoute),
			A2($elm$core$Dict$get, newEdge, options.graph.edges));
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'Just') {
				if (_v0.b.$ === 'Just') {
					var lastTraversal = _v0.a.a;
					var clickedEdge = _v0.b.a;
					var _v1 = A2($elm$core$Dict$get, lastTraversal.edge, options.graph.edges);
					if (_v1.$ === 'Just') {
						var currentLastEdge = _v1.a;
						var finalNode = _Utils_eq(lastTraversal.direction, $author$project$Tools$GraphOptions$Natural) ? currentLastEdge.highNode : currentLastEdge.lowNode;
						return _Utils_eq(finalNode, clickedEdge.lowNode) || _Utils_eq(finalNode, clickedEdge.highNode);
					} else {
						return false;
					}
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'Just') {
					var _v2 = _v0.a;
					return true;
				} else {
					break _v0$2;
				}
			}
		}
		return false;
	});
var $author$project$Tools$Graph$edgeCanBeDeleted = F2(
	function (edge, options) {
		return ($elm$core$Dict$size(options.graph.edges) > 1) && (!A2(
			$elm$core$List$any,
			function (traversal) {
				return _Utils_eq(traversal.edge, edge);
			},
			options.graph.userRoute));
	});
var $author$project$Tools$Graph$loopCanBeAdded = F2(
	function (node, options) {
		var _v0 = $elm_community$list_extra$List$Extra$last(options.graph.userRoute);
		if (_v0.$ === 'Just') {
			var traversal = _v0.a;
			var _v1 = A2($elm$core$Dict$get, traversal.edge, options.graph.edges);
			if (_v1.$ === 'Just') {
				var finalEdge = _v1.a;
				var finalNode = _Utils_eq(traversal.direction, $author$project$Tools$GraphOptions$Natural) ? finalEdge.highNode : finalEdge.lowNode;
				return _Utils_eq(finalNode, node);
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $author$project$ViewPureStyles$rgtDark = A3($mdgriffith$elm_ui$Element$rgb255, 12, 0, 22);
var $author$project$UtilsForViews$showDecimal2 = function (x) {
	var locale = _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{
			decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(2),
			negativePrefix: '-',
			thousandSeparator: ''
		});
	return A2($cuducos$elm_format_number$FormatNumber$format, locale, x);
};
var $author$project$UtilsForViews$showShortMeasure = F2(
	function (imperial, distance) {
		return imperial ? ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inFeet(distance)) + ' feet') : ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMeters(distance)) + 'm');
	});
var $author$project$ViewGraph$stopProp = {preventDefault: false, stopPropagation: true};
var $author$project$ViewGraph$popup = F3(
	function (msgWrapper, context, options) {
		var popupMenu = function () {
			var _v2 = context.clickFeature;
			switch (_v2.$) {
				case 'ClickNone':
					return _List_Nil;
				case 'ClickNode':
					var node = _v2.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							'Place ' + ($elm$core$String$fromInt(node) + '...')),
							A2($author$project$Tools$Graph$loopCanBeAdded, node, options) ? A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text(
									'Add ' + (A2($author$project$UtilsForViews$showShortMeasure, false, options.minimumRadiusAtPlaces) + ' loop here')),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										$author$project$ViewGraph$AddSelfLoop(node)))
							}) : $mdgriffith$elm_ui$Element$none,
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text('Close menu'),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$ViewGraph$PopupHide))
							})
						]);
				default:
					var edge = _v2.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							'Road ' + ($elm$core$String$fromInt(edge) + '...')),
							A2($author$project$Tools$Graph$edgeCanBeAdded, edge, options) ? A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text('Add to route'),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										$author$project$ViewGraph$AddTraversal(edge)))
							}) : $mdgriffith$elm_ui$Element$none,
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text('Edit this road'),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										$author$project$ViewGraph$EditRoad(edge)))
							}),
							A2($author$project$Tools$Graph$edgeCanBeDeleted, edge, options) ? A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text('Delete this Road'),
								onPress: $elm$core$Maybe$Just(
									msgWrapper(
										$author$project$ViewGraph$DeleteRoad(edge)))
							}) : $mdgriffith$elm_ui$Element$none,
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_Nil,
							{
								label: $mdgriffith$elm_ui$Element$text('Close menu'),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$ViewGraph$PopupHide))
							})
						]);
			}
		}();
		var _v0 = context.clickPoint;
		if (_v0.$ === 'Nothing') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var _v1 = _v0.a;
			var x = _v1.a;
			var y = _v1.b;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$alignLeft,
						$mdgriffith$elm_ui$Element$moveDown(y),
						$mdgriffith$elm_ui$Element$moveRight(x),
						$mdgriffith$elm_ui$Element$Background$color($author$project$ViewPureStyles$rgtDark),
						$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$padding(6),
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A3(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
							'click',
							$author$project$ViewGraph$stopProp,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
								msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A3(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
							'dblclick',
							$author$project$ViewGraph$stopProp,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
								msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A3(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
							'mousedown',
							$author$project$ViewGraph$stopProp,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
								msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A3(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
							'mouseup',
							$author$project$ViewGraph$stopProp,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
								msgWrapper)))
					]),
				popupMenu);
		}
	});
var $ianmackenzie$elm_geometry$Direction2d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var d = _v1.a;
		var _v2 = frame.yDirection;
		var dy = _v2.a;
		var _v3 = frame.xDirection;
		var dx = _v3.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Direction2d(
			{x: (d.x * dx.x) + (d.y * dx.y), y: (d.x * dy.x) + (d.y * dy.y)});
	});
var $ianmackenzie$elm_geometry$Point2d$relativeTo = F2(
	function (_v0, _v1) {
		var frame = _v0.a;
		var p = _v1.a;
		var _v2 = frame.originPoint;
		var p0 = _v2.a;
		var deltaX = p.x - p0.x;
		var deltaY = p.y - p0.y;
		var _v3 = frame.yDirection;
		var j = _v3.a;
		var _v4 = frame.xDirection;
		var i = _v4.a;
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: (deltaX * i.x) + (deltaY * i.y), y: (deltaX * j.x) + (deltaY * j.y)});
	});
var $ianmackenzie$elm_geometry$Frame2d$relativeTo = F2(
	function (otherFrame, frame) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Frame2d(
			{
				originPoint: A2(
					$ianmackenzie$elm_geometry$Point2d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame2d$originPoint(frame)),
				xDirection: A2(
					$ianmackenzie$elm_geometry$Direction2d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame2d$xDirection(frame)),
				yDirection: A2(
					$ianmackenzie$elm_geometry$Direction2d$relativeTo,
					otherFrame,
					$ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
			});
	});
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo = function (frame) {
	return $ianmackenzie$elm_geometry_svg$Geometry$Svg$placeIn(
		A2(
			$ianmackenzie$elm_geometry$Frame2d$relativeTo,
			$ianmackenzie$elm_geometry$Frame2d$copy(frame),
			$ianmackenzie$elm_geometry$Frame2d$atOrigin));
};
var $ianmackenzie$elm_geometry$Frame2d$reverseY = function (frame) {
	return $ianmackenzie$elm_geometry$Frame2d$unsafe(
		{
			originPoint: $ianmackenzie$elm_geometry$Frame2d$originPoint(frame),
			xDirection: $ianmackenzie$elm_geometry$Frame2d$xDirection(frame),
			yDirection: $ianmackenzie$elm_geometry$Direction2d$reverse(
				$ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
		});
};
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$rotateAround = F3(
	function (point, angle, element) {
		var angleString = $elm$core$String$fromFloat(
			$ianmackenzie$elm_units$Angle$inDegrees(angle));
		var _v0 = $ianmackenzie$elm_geometry$Point2d$unwrap(point);
		var y = _v0.y;
		var x = _v0.x;
		var rotate = 'rotate(' + (angleString + (' ' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + ')')))));
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform(rotate)
				]),
			_List_fromArray(
				[element]));
	});
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $ianmackenzie$elm_geometry$Geometry$Types$Circle2d = function (a) {
	return {$: 'Circle2d', a: a};
};
var $ianmackenzie$elm_geometry$Circle2d$withRadius = F2(
	function (givenRadius, givenCenterPoint) {
		return $ianmackenzie$elm_geometry$Geometry$Types$Circle2d(
			{
				centerPoint: givenCenterPoint,
				radius: $ianmackenzie$elm_units$Quantity$abs(givenRadius)
			});
	});
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $author$project$ViewGraph$ImageReset = {$: 'ImageReset'};
var $author$project$ViewGraph$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$ViewGraph$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$ViewGraph$ToggleEdgeMode = {$: 'ToggleEdgeMode'};
var $feathericons$elm_feather$FeatherIcons$activity = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'activity',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('22 12 18 12 15 21 9 3 6 12 2 12')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$maximize = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'maximize',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$minus = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'minus',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('5'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('19'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil)
		]));
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $author$project$ToolTip$myTooltip = function (str) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$ViewPureStyles$rgtPurple),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$padding(4),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(100))
			]),
		A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(str)
				])));
};
var $mdgriffith$elm_ui$Internal$Model$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$onLeft = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$OnLeft, element);
};
var $feathericons$elm_feather$FeatherIcons$plus = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'plus',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('5'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('5'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('19'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil)
		]));
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $author$project$ToolTip$tooltip = F2(
	function (usher, tooltip_) {
		return $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$transparent(true),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$transparent(false)
							])),
						A3(
						$elm$core$Basics$composeL,
						usher,
						$mdgriffith$elm_ui$Element$map($elm$core$Basics$never),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'pointerEvents', 'none'))
								]),
							tooltip_))
					]),
				$mdgriffith$elm_ui$Element$none));
	});
var $author$project$ViewPureStyles$useIcon = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$mdgriffith$elm_ui$Element$html,
		$feathericons$elm_feather$FeatherIcons$toHtml(_List_Nil)),
	$feathericons$elm_feather$FeatherIcons$withSize(20));
var $author$project$ViewGraph$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewGraph$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewGraph$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewGraph$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewGraph$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewGraph$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewGraph$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewGraph$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewGraph$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$onLeft,
							$author$project$ToolTip$myTooltip('Change how\nroads are drawn'))
						]),
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$activity),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewGraph$ToggleEdgeMode))
					})
				]));
	});
var $author$project$ViewGraph$view = F5(
	function (location, context, _v0, options, msgWrapper) {
		var width = _v0.a;
		var height = _v0.b;
		var topLeftFrame = $ianmackenzie$elm_geometry$Frame2d$reverseY(
			$ianmackenzie$elm_geometry$Frame2d$atPoint(
				A2(
					$ianmackenzie$elm_geometry$Point2d$xy,
					$ianmackenzie$elm_units$Quantity$zero,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(height))));
		var textAttributes = function (atPoint) {
			return _List_fromArray(
				[
					$elm$svg$Svg$Attributes$fill('rgb(250, 250, 250)'),
					$elm$svg$Svg$Attributes$fontFamily('sans serif'),
					$elm$svg$Svg$Attributes$fontSize('16px'),
					$elm$svg$Svg$Attributes$stroke('none'),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$xCoordinate(atPoint)) + 10)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$yCoordinate(atPoint))))
				]);
		};
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			$ianmackenzie$elm_geometry$Point2d$origin,
			A2(
				$ianmackenzie$elm_geometry$Point2d$xy,
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(width),
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(height)));
		var graph = A2($elm$core$Maybe$withDefault, options.graph, options.suggestedNewGraph);
		var edgeToHighlight = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.edge;
				},
				A2($elm_community$list_extra$List$Extra$getAt, options.selectedTraversal, graph.userRoute)));
		var edgeAttributes = function (edgeIndex) {
			return _Utils_eq(edgeIndex, edgeToHighlight) ? _List_fromArray(
				[
					$elm$svg$Svg$Attributes$stroke(
					$author$project$UtilsForViews$uiColourHexString($author$project$ViewPureStyles$rgtPurple)),
					$elm$svg$Svg$Attributes$fill('none'),
					$elm$svg$Svg$Attributes$strokeWidth('5'),
					$elm$svg$Svg$Attributes$strokeLinecap('round'),
					$elm$svg$Svg$Attributes$strokeLinejoin('round')
				]) : _List_fromArray(
				[
					$elm$svg$Svg$Attributes$stroke(
					$author$project$UtilsForViews$uiColourHexString($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver)),
					$elm$svg$Svg$Attributes$fill('none'),
					$elm$svg$Svg$Attributes$strokeWidth('3'),
					$elm$svg$Svg$Attributes$strokeLinecap('round'),
					$elm$svg$Svg$Attributes$strokeLinejoin('round')
				]);
		};
		var pointsAsPolyline = F2(
			function (edgeIndex, points) {
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$polyline2d,
					edgeAttributes(edgeIndex),
					$ianmackenzie$elm_geometry$Polyline2d$fromVertices(points));
			});
		var camera = $author$project$ViewGraph$deriveCamera(context);
		var edgeFold = F2(
			function (road, outputs) {
				return A2(
					$elm$core$List$cons,
					A3($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, camera, screenRectangle, road.endPoint.space),
					outputs);
			});
		var edgeLabels = A2(
			$elm$core$List$map,
			function (_v11) {
				var index = _v11.a;
				var edgeInfo = _v11.b;
				var labelAt = A3(
					$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
					camera,
					screenRectangle,
					A2(
						$author$project$DomainModel$earthPointFromIndex,
						($author$project$DomainModel$skipCount(edgeInfo.track.trackTree) / 2) | 0,
						edgeInfo.track.trackTree).space);
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross,
					A2($ianmackenzie$elm_geometry$Axis2d$through, labelAt, $ianmackenzie$elm_geometry$Direction2d$x),
					A2(
						$elm$svg$Svg$text_,
						textAttributes(labelAt),
						_List_fromArray(
							[
								$elm$svg$Svg$text(
								'Road ' + $elm$core$String$fromInt(index))
							])));
			},
			$elm$core$Dict$toList(graph.edges));
		var nodes2d = A2(
			$elm$core$Dict$map,
			F2(
				function (_v10, pt) {
					return A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						camera,
						screenRectangle,
						A2(
							$ianmackenzie$elm_geometry$Point3d$on,
							$ianmackenzie$elm_geometry$SketchPlane3d$xy,
							A2($ianmackenzie$elm_geometry$Point2d$fromTuple, $ianmackenzie$elm_units$Length$meters, pt)));
				}),
			graph.nodes);
		var nodeLabels = $elm$core$Dict$values(
			A2(
				$elm$core$Dict$map,
				F2(
					function (index, vertex) {
						return A2(
							$ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross,
							A2($ianmackenzie$elm_geometry$Axis2d$through, vertex, $ianmackenzie$elm_geometry$Direction2d$x),
							A2(
								$elm$svg$Svg$text_,
								textAttributes(vertex),
								_List_fromArray(
									[
										$elm$svg$Svg$text(
										'Place ' + $elm$core$String$fromInt(index))
									])));
					}),
				nodes2d));
		var svgNodes = $elm$core$Dict$values(
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v9, vertex) {
						return A2(
							$ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$stroke('red'),
									$elm$svg$Svg$Attributes$strokeWidth('3'),
									$elm$svg$Svg$Attributes$fill('none')
								]),
							A2(
								$ianmackenzie$elm_geometry$Circle2d$withRadius,
								$ianmackenzie$elm_units$Pixels$float(8),
								vertex));
					}),
				nodes2d));
		var renderEdge = F2(
			function (edgeIndex, tree) {
				var startPoint = A3(
					$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
					camera,
					screenRectangle,
					A2($author$project$DomainModel$earthPointFromIndex, 0, tree).space);
				var svgPoints = A7(
					$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
					0,
					$author$project$DomainModel$skipCount(tree),
					$elm$core$Basics$always(
						$elm$core$Maybe$Just(8)),
					0,
					tree,
					edgeFold,
					_List_fromArray(
						[startPoint]));
				return A2(pointsAsPolyline, edgeIndex, svgPoints);
			});
		var renderEdgeArc = F2(
			function (edgeIndex, tree) {
				var _v7 = _Utils_Tuple3(
					A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						camera,
						screenRectangle,
						A2($author$project$DomainModel$earthPointFromIndex, 0, tree).space),
					A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						camera,
						screenRectangle,
						A2(
							$author$project$DomainModel$earthPointFromIndex,
							($author$project$DomainModel$skipCount(tree) / 2) | 0,
							tree).space),
					A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						camera,
						screenRectangle,
						A2(
							$author$project$DomainModel$earthPointFromIndex,
							$author$project$DomainModel$skipCount(tree),
							tree).space));
				var start = _v7.a;
				var mid = _v7.b;
				var end = _v7.c;
				var _v8 = A3($ianmackenzie$elm_geometry$Arc2d$throughPoints, start, mid, end);
				if (_v8.$ === 'Just') {
					var arc = _v8.a;
					return A2(
						$ianmackenzie$elm_geometry_svg$Geometry$Svg$arc2d,
						edgeAttributes(edgeIndex),
						arc);
				} else {
					return A2(renderEdge, edgeIndex, tree);
				}
			});
		var svgEdges = A2(
			$elm$core$List$map,
			function (_v5) {
				var index = _v5.a;
				var edgeInfo = _v5.b;
				var _v6 = context.edgeMode;
				if (_v6.$ === 'EdgeArc') {
					return A2(renderEdgeArc, index, edgeInfo.track.trackTree);
				} else {
					return A2(renderEdge, index, edgeInfo.track.trackTree);
				}
			},
			$elm$core$Dict$toList(graph.edges));
		var arrowAttributes = function (atPoint) {
			return _List_fromArray(
				[
					$elm$svg$Svg$Attributes$fill(
					$author$project$UtilsForViews$uiColourHexString($author$project$ViewPureStyles$rgtPurple)),
					$elm$svg$Svg$Attributes$fontFamily('sans serif'),
					$elm$svg$Svg$Attributes$fontSize('20px'),
					$elm$svg$Svg$Attributes$stroke('none'),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$xCoordinate(atPoint)) + 10)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$yCoordinate(atPoint)) + 10))
				]);
		};
		var arrowsOnHighlightedEdge = function () {
			var _v1 = A2($elm_community$list_extra$List$Extra$getAt, options.selectedTraversal, graph.userRoute);
			if (_v1.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var edge = _v1.a.edge;
				var direction = _v1.a.direction;
				var _v2 = A2($elm$core$Dict$get, edge, graph.edges);
				if (_v2.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var edgeInfo = _v2.a;
					var midPoint = ($author$project$DomainModel$skipCount(edgeInfo.track.trackTree) / 2) | 0;
					var midLeaf = $author$project$DomainModel$asRecord(
						A2($author$project$DomainModel$leafFromIndex, midPoint, edgeInfo.track.trackTree));
					var rotation = function () {
						if (direction.$ === 'Natural') {
							return $ianmackenzie$elm_geometry$Direction2d$toAngle(midLeaf.directionAtStart);
						} else {
							return $ianmackenzie$elm_geometry$Direction2d$toAngle(
								$ianmackenzie$elm_geometry$Direction2d$reverse(midLeaf.directionAtStart));
						}
					}();
					var _v3 = _Utils_Tuple2(
						A3($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, camera, screenRectangle, midLeaf.startPoint.space),
						A3($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, camera, screenRectangle, midLeaf.endPoint.space));
					var p1 = _v3.a;
					return _List_fromArray(
						[
							A3(
							$ianmackenzie$elm_geometry_svg$Geometry$Svg$rotateAround,
							p1,
							rotation,
							A2(
								$ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross,
								A2($ianmackenzie$elm_geometry$Axis2d$through, p1, $ianmackenzie$elm_geometry$Direction2d$x),
								A2(
									$elm$svg$Svg$text_,
									arrowAttributes(p1),
									_List_fromArray(
										[
											$elm$svg$Svg$text('>>>>')
										]))))
						]);
				}
			}
		}();
		var svgElement = A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$width(
					$ianmackenzie$elm_units$Pixels$inPixels(width)),
					$elm$html$Html$Attributes$height(
					$ianmackenzie$elm_units$Pixels$inPixels(height))
				]),
			_List_fromArray(
				[
					A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo,
					topLeftFrame,
					A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_Utils_ap(
							svgNodes,
							_Utils_ap(
								svgEdges,
								_Utils_ap(
									nodeLabels,
									_Utils_ap(edgeLabels, arrowsOnHighlightedEdge))))))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
						A2($elm$core$Basics$composeR, $author$project$ViewGraph$ImageGrab, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
						A2($elm$core$Basics$composeR, $author$project$ViewGraph$ImageDrag, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
						A2($elm$core$Basics$composeR, $author$project$ViewGraph$ImageRelease, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
						A2($elm$core$Basics$composeR, $author$project$ViewGraph$ImageClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
						function (event) {
							return msgWrapper(
								$author$project$ViewGraph$ImageMouseWheel(event.deltaY));
						})),
					$author$project$ViewGraph$onContextMenu(
					msgWrapper($author$project$ViewGraph$ImageNoOp)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Border$width(0),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$ViewGraph$zoomButtons, msgWrapper, context)),
					$mdgriffith$elm_ui$Element$inFront(
					A3($author$project$ViewGraph$popup, msgWrapper, context, options))
				]),
			$mdgriffith$elm_ui$Element$html(svgElement));
	});
var $author$project$ViewMap$ChooseMapStyle = function (a) {
	return {$: 'ChooseMapStyle', a: a};
};
var $author$project$ViewMapContext$MapBasic = {$: 'MapBasic'};
var $author$project$ViewMapContext$MapLight = {$: 'MapLight'};
var $author$project$ViewMapContext$MapSatellite = {$: 'MapSatellite'};
var $author$project$ViewMapContext$MapSatelliteStreets = {$: 'MapSatelliteStreets'};
var $author$project$ViewMapContext$MapStreets = {$: 'MapStreets'};
var $author$project$ViewMap$ToggleDraggable = {$: 'ToggleDraggable'};
var $author$project$ViewMap$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $author$project$ViewMap$ToggleMapStyleMenu = {$: 'ToggleMapStyleMenu'};
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $feathericons$elm_feather$FeatherIcons$layers = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'layers',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('12 2 2 7 12 12 22 7 12 2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('2 17 12 22 22 17')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('2 12 12 17 22 12')
				]),
			_List_Nil)
		]));
var $author$project$ToolTip$localisedTooltip = F3(
	function (location, tool, tag) {
		return $author$project$ToolTip$myTooltip(
			A3($author$project$Tools$I18N$localisedString, location, tool, tag));
	});
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $feathericons$elm_feather$FeatherIcons$lock = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'lock',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('11'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('11'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M7 11V7a5 5 0 0 1 10 0v4')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$move = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'move',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('5 9 2 12 5 15')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('9 5 12 2 15 5')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('15 19 12 22 9 19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('19 9 22 12 19 15')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('2'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('22'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('2'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('22')
				]),
			_List_Nil)
		]));
var $mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status.$ === 'Selected') {
								return $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							$mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status.$) {
									case 'Idle':
										return 1;
									case 'Focused':
										return 1;
									default:
										return 5;
								}
							}()),
							$mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status.$) {
									case 'Idle':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 'Focused':
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$Option,
			val,
			$mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var $feathericons$elm_feather$FeatherIcons$unlock = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'unlock',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('11'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('11'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M7 11V7a5 5 0 0 1 9.9-1')
				]),
			_List_Nil)
		]));
var $author$project$ViewMap$view = F4(
	function (location, _v0, mContext, msgWrapper) {
		var viewWidth = _v0.a;
		var viewHeight = _v0.b;
		var mapStyleChoices = function (context) {
			return context.mapStyleMenuOpen ? A2(
				$mdgriffith$elm_ui$Element$Input$radio,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$Font$size(12),
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$moveLeft(40),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('map styles'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$ViewMap$ChooseMapStyle),
					options: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapStreets,
							$mdgriffith$elm_ui$Element$text('Streets')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapOutdoors,
							$mdgriffith$elm_ui$Element$text('Outdoors')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapBasic,
							$mdgriffith$elm_ui$Element$text('Basic')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapSatellite,
							$mdgriffith$elm_ui$Element$text('Satellite')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapSatelliteStreets,
							$mdgriffith$elm_ui$Element$text('Satellite streets')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$ViewMapContext$MapLight,
							$mdgriffith$elm_ui$Element$text('Light'))
						]),
					selected: $elm$core$Maybe$Just(context.mapStyle)
				}) : $mdgriffith$elm_ui$Element$none;
		};
		var handyMapControls = function (context) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$moveDown(100),
						$mdgriffith$elm_ui$Element$moveLeft(10),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$Font$size(40),
						$mdgriffith$elm_ui$Element$padding(6),
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$rounded(4),
						$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								A2(
								$author$project$ToolTip$tooltip,
								$mdgriffith$elm_ui$Element$onLeft,
								context.followOrange ? A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'locked') : A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'unlocked'))
							]),
						{
							label: context.followOrange ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$ViewMap$ToggleFollowOrange))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								A2(
								$author$project$ToolTip$tooltip,
								$mdgriffith$elm_ui$Element$onLeft,
								context.draggable ? A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'drag') : A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'nodrag'))
							]),
						{
							label: context.draggable ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$move) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$x),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$ViewMap$ToggleDraggable))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[
								A2(
								$author$project$ToolTip$tooltip,
								$mdgriffith$elm_ui$Element$onLeft,
								A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'mapstyle')),
								$mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignRight]),
									mapStyleChoices(context)))
							]),
						{
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$layers),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$ViewMap$ToggleMapStyleMenu))
						})
					]));
		};
		if (mContext.$ === 'Just') {
			var context = mContext.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$inFront(
						handyMapControls(context))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(
									$ianmackenzie$elm_units$Pixels$inPixels(viewWidth))),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(
									$ianmackenzie$elm_units$Pixels$inPixels(viewHeight))),
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$Border$width(2),
								$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id('map'))
							]),
						$mdgriffith$elm_ui$Element$none)
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id('map'))
							]),
						$mdgriffith$elm_ui$Element$none)
					]));
		}
	});
var $author$project$ViewPlan$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewPlan$ImageDoubleClick = function (a) {
	return {$: 'ImageDoubleClick', a: a};
};
var $author$project$ViewPlan$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$ViewPlan$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$ViewPlan$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$ViewPlan$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$ViewPlan$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $author$project$ViewPlan$onContextMenu = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$custom,
			'contextmenu',
			$elm$json$Json$Decode$succeed(
				{message: msg, preventDefault: true, stopPropagation: true})));
};
var $ianmackenzie$elm_geometry$Rectangle2d$contains = F2(
	function (point, rectangle) {
		var localFrame = $ianmackenzie$elm_geometry$Rectangle2d$axes(rectangle);
		var x = A2($ianmackenzie$elm_geometry$Point2d$xCoordinateIn, localFrame, point);
		var y = A2($ianmackenzie$elm_geometry$Point2d$yCoordinateIn, localFrame, point);
		var _v0 = $ianmackenzie$elm_geometry$Rectangle2d$dimensions(rectangle);
		var width = _v0.a;
		var height = _v0.b;
		return A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_units$Quantity$half(width),
			$ianmackenzie$elm_units$Quantity$abs(x)) && A2(
			$ianmackenzie$elm_units$Quantity$lessThanOrEqualTo,
			$ianmackenzie$elm_units$Quantity$half(height),
			$ianmackenzie$elm_units$Quantity$abs(y));
	});
var $ianmackenzie$elm_3d_camera$Point3d$Projection$depth = F2(
	function (_v0, point) {
		var camera = _v0.a;
		var _v1 = camera.viewpoint;
		var viewpointFrame = _v1.a;
		return $ianmackenzie$elm_units$Quantity$negate(
			A2($ianmackenzie$elm_geometry$Point3d$zCoordinateIn, viewpointFrame, point));
	});
var $author$project$View3dCommonElements$placesOverlay = F4(
	function (display, _v0, track, camera) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var textAttributes = function (atPoint) {
			return _List_fromArray(
				[
					$elm$svg$Svg$Attributes$fill('white'),
					$elm$svg$Svg$Attributes$fontFamily('sans-serif'),
					$elm$svg$Svg$Attributes$fontSize('12px'),
					$elm$svg$Svg$Attributes$stroke('none'),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$xCoordinate(atPoint)) + 10)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(
						$ianmackenzie$elm_units$Pixels$toFloat(
							$ianmackenzie$elm_geometry$Point2d$yCoordinate(atPoint))))
				]);
		};
		var screenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			$ianmackenzie$elm_geometry$Point2d$origin,
			A2(
				$ianmackenzie$elm_geometry$Point2d$xy,
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenWidth),
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight)));
		var nodes2d = A2(
			$elm$core$Dict$filter,
			F2(
				function (_v4, screenPoint) {
					return A2($ianmackenzie$elm_geometry$Rectangle2d$contains, screenPoint, screenRectangle);
				}),
			A2(
				$elm$core$Dict$map,
				F2(
					function (_v3, place) {
						return A3($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, camera, screenRectangle, place.space);
					}),
				A2(
					$elm$core$Dict$filter,
					F2(
						function (_v2, place) {
							return $ianmackenzie$elm_units$Quantity$greaterThanZero(
								A2($ianmackenzie$elm_3d_camera$Point3d$Projection$depth, camera, place.space));
						}),
					track.landUseData.places)));
		var placeNames = A2(
			$elm$svg$Svg$g,
			_List_Nil,
			$elm$core$Dict$values(
				A2(
					$elm$core$Dict$map,
					F2(
						function (name, place) {
							return A2(
								$elm$svg$Svg$g,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$stroke('white'),
												$elm$svg$Svg$Attributes$strokeWidth('1'),
												$elm$svg$Svg$Attributes$fill('none')
											]),
										A2(
											$ianmackenzie$elm_geometry$Circle2d$withRadius,
											$ianmackenzie$elm_units$Pixels$float(3),
											place)),
										A2(
										$ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross,
										A2($ianmackenzie$elm_geometry$Axis2d$through, place, $ianmackenzie$elm_geometry$Direction2d$x),
										A2(
											$elm$svg$Svg$text_,
											textAttributes(place),
											_List_fromArray(
												[
													$elm$svg$Svg$text(name)
												])))
									]));
						}),
					nodes2d)));
		var _v1 = _Utils_Tuple2(
			$elm$core$String$fromInt(
				$ianmackenzie$elm_units$Pixels$inPixels(givenWidth)),
			$elm$core$String$fromInt(
				$ianmackenzie$elm_units$Pixels$inPixels(givenHeight)));
		var svgWidth = _v1.a;
		var svgHeight = _v1.b;
		if ($elm$core$Dict$isEmpty(track.landUseData.places) || (!display.placeNames)) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var topLeftFrame = $ianmackenzie$elm_geometry$Frame2d$reverseY(
				$ianmackenzie$elm_geometry$Frame2d$atPoint(
					A2(
						$ianmackenzie$elm_geometry$Point2d$xy,
						$ianmackenzie$elm_units$Quantity$zero,
						$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight))));
			return $mdgriffith$elm_ui$Element$html(
				A2(
					$elm$svg$Svg$svg,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$width(svgWidth),
							$elm$svg$Svg$Attributes$height(svgHeight)
						]),
					_List_fromArray(
						[
							A2($ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo, topLeftFrame, placeNames)
						])));
		}
	});
var $author$project$ViewPlan$ImageReset = {$: 'ImageReset'};
var $author$project$ViewPlan$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$ViewPlan$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$ViewPlan$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $author$project$ViewPlan$stopProp = {preventDefault: false, stopPropagation: true};
var $author$project$ViewPlan$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewPlan$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewPlan$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: context.followSelectedPoint ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewPlan$ToggleFollowOrange))
					})
				]));
	});
var $author$project$ViewPlan$view = F6(
	function (context, display, contentArea, track, scene, msgWrapper) {
		var dragging = context.dragAction;
		var camera = A3($author$project$ViewPlan$deriveCamera, track.trackTree, context, track.currentPosition);
		var overlay = A4($author$project$View3dCommonElements$placesOverlay, display, contentArea, track, camera);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageGrab, msgWrapper))),
					(!_Utils_eq(dragging, $author$project$ViewPlanContext$DragNone)) ? $mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageDrag, msgWrapper))) : $mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageRelease, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
						A2($elm$core$Basics$composeR, $author$project$ViewPlan$ImageDoubleClick, msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
						function (event) {
							return msgWrapper(
								$author$project$ViewPlan$ImageMouseWheel(event.deltaY));
						})),
					$author$project$ViewPlan$onContextMenu(
					msgWrapper($author$project$ViewPlan$ImageNoOp)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Border$width(0),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$inFront(overlay),
					$mdgriffith$elm_ui$Element$inFront(
					A2($author$project$ViewPlan$zoomButtons, msgWrapper, context))
				]),
			$mdgriffith$elm_ui$Element$html(
				$ianmackenzie$elm_3d_scene$Scene3d$sunny(
					{
						background: $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor($avh4$elm_color$Color$lightBlue),
						camera: camera,
						clipDepth: $ianmackenzie$elm_units$Length$meters(1),
						dimensions: contentArea,
						entities: scene,
						shadows: false,
						sunlightDirection: $ianmackenzie$elm_geometry$Direction3d$negativeZ,
						upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ
					})));
	});
var $author$project$ViewProfileChartContext$ImageClick = function (a) {
	return {$: 'ImageClick', a: a};
};
var $author$project$ViewProfileChartContext$ImageDoubleClick = function (a) {
	return {$: 'ImageDoubleClick', a: a};
};
var $author$project$ViewProfileChartContext$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$ViewProfileChartContext$ImageGrab = function (a) {
	return {$: 'ImageGrab', a: a};
};
var $author$project$ViewProfileChartContext$ImageMouseWheel = function (a) {
	return {$: 'ImageMouseWheel', a: a};
};
var $author$project$ViewProfileChartContext$ImageRelease = function (a) {
	return {$: 'ImageRelease', a: a};
};
var $author$project$ViewProfileChartContext$ImageNoOp = {$: 'ImageNoOp'};
var $author$project$ViewProfileChartContext$ImageReset = {$: 'ImageReset'};
var $author$project$ViewProfileChartContext$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$ViewProfileChartContext$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$ViewProfileChartContext$ToggleColours = {$: 'ToggleColours'};
var $author$project$ViewProfileChartContext$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var description = _v0.description;
		var src = _v0.src;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $author$project$ViewProfileChartsCanvas$stopProp = {preventDefault: false, stopPropagation: true};
var $author$project$ViewProfileChartsCanvas$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewProfileChartsCanvas$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewProfileChartsCanvas$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewProfileChartsCanvas$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewProfileChartsCanvas$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '20'))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: context.followSelectedPoint ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ToggleFollowOrange))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(20)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(20))
								]),
							{
								description: 'Toggle colours',
								src: context.colouredChart ? 'images/crayons-2.png' : 'images/crayons.png'
							}),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ToggleColours))
					})
				]));
	});
var $author$project$ViewProfileChartsCanvas$view = F4(
	function (context, paneId, _v0, msgWrapper) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var tenPercentHeight = ($ianmackenzie$elm_units$Pixels$inPixels(givenHeight) / 10) | 0;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$inFront(
						A2($author$project$ViewProfileChartsCanvas$zoomButtons, msgWrapper, context)),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
							function (event) {
								return msgWrapper(
									$author$project$ViewProfileChartContext$ImageMouseWheel(event.deltaY));
							})),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
							A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageGrab, msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
							A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageRelease, msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
							A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageClick, msgWrapper))),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
							A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageDoubleClick, msgWrapper)))
					]),
				function () {
					var _v1 = context.dragAction;
					if (_v1.$ === 'DragPan') {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
									A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageDrag, msgWrapper))),
								$mdgriffith$elm_ui$Element$pointer
							]);
					} else {
						return _List_Nil;
					}
				}()),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$ianmackenzie$elm_units$Pixels$inPixels(givenWidth))),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(7 * tenPercentHeight)),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id(
								'altitude.' + $author$project$PaneContext$paneIdToString(paneId)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(
								$ianmackenzie$elm_units$Pixels$inPixels(givenWidth))),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(3 * tenPercentHeight)),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id(
								'gradient.' + $author$project$PaneContext$paneIdToString(paneId)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $author$project$ViewProfileChartsWebGL$deriveGradientCamera = F4(
	function (treeNode, context, currentPosition, _v0) {
		var width = _v0.a;
		var height = _v0.b;
		var trackLengthInView = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			A2($elm$core$Basics$pow, 0.5, context.zoomLevel),
			$author$project$DomainModel$trueLength(treeNode));
		var metresPerPixel = $ianmackenzie$elm_units$Length$inMeters(trackLengthInView) / $ianmackenzie$elm_units$Pixels$inPixels(width);
		var viewportHeight = $ianmackenzie$elm_units$Length$meters(
			metresPerPixel * $ianmackenzie$elm_units$Pixels$inPixels(height));
		var lookingAt = $author$project$DomainModel$withoutTime(
			A3(
				$ianmackenzie$elm_geometry$Point3d$xyz,
				A2($author$project$DomainModel$distanceFromIndex, currentPosition, treeNode),
				$ianmackenzie$elm_units$Quantity$zero,
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					context.emphasis,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(
						A2($author$project$DomainModel$earthPointFromIndex, currentPosition, treeNode).space))));
		var eyePoint = A2(
			$ianmackenzie$elm_geometry$Point3d$translateBy,
			A3($ianmackenzie$elm_geometry$Vector3d$meters, 0.0, 0.0, 1000.0),
			lookingAt.space);
		var viewpoint = $ianmackenzie$elm_3d_camera$Viewpoint3d$lookAt(
			{eyePoint: eyePoint, focalPoint: lookingAt.space, upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveY});
		return $ianmackenzie$elm_3d_camera$Camera3d$orthographic(
			{viewpoint: viewpoint, viewportHeight: viewportHeight});
	});
var $elm$svg$Svg$Attributes$opacity = _VirtualDom_attribute('opacity');
var $author$project$ViewProfileChartsWebGL$pointInAltitudeView = F3(
	function (context, i, tree) {
		var distance = A2($author$project$DomainModel$distanceFromIndex, i, tree);
		var altitude = A2($author$project$DomainModel$gpxPointFromIndex, i, tree).altitude;
		return $author$project$DomainModel$withoutTime(
			A3(
				$ianmackenzie$elm_geometry$Point3d$xyz,
				distance,
				$ianmackenzie$elm_units$Quantity$zero,
				A2($ianmackenzie$elm_units$Quantity$multiplyBy, context.emphasis, altitude)));
	});
var $author$project$DomainModel$endPoint = function (treeNode) {
	return $author$project$DomainModel$asRecord(treeNode).endPoint;
};
var $author$project$DomainModel$gradientFromNode = function (treeNode) {
	return 100.0 * A2(
		$ianmackenzie$elm_units$Quantity$ratio,
		A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				$author$project$DomainModel$startPoint(treeNode).space),
			$ianmackenzie$elm_geometry$Point3d$zCoordinate(
				$author$project$DomainModel$endPoint(treeNode).space)),
		$author$project$DomainModel$trueLength(treeNode));
};
var $author$project$ViewProfileChartsWebGL$pointInGradientView = F3(
	function (context, i, tree) {
		var gradient = $author$project$DomainModel$gradientFromNode(
			A2($author$project$DomainModel$leafFromIndex, i, tree));
		var distance = A2($author$project$DomainModel$distanceFromIndex, i, tree);
		var compensateForZoom = function (g) {
			return ((2.0 * g) * A2($elm$core$Basics$pow, 0.5, context.zoomLevel)) * $ianmackenzie$elm_units$Length$inKilometers(
				$author$project$DomainModel$trueLength(tree));
		};
		return $author$project$DomainModel$withoutTime(
			A3(
				$ianmackenzie$elm_geometry$Point3d$xyz,
				distance,
				$ianmackenzie$elm_units$Length$meters(
					compensateForZoom(gradient)),
				$ianmackenzie$elm_units$Quantity$zero));
	});
var $ianmackenzie$elm_geometry$Polygon2d$innerLoops = function (_v0) {
	var polygon = _v0.a;
	return polygon.innerLoops;
};
var $ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d = F2(
	function (attributes, polygon) {
		var loops = A2(
			$elm$core$List$cons,
			$ianmackenzie$elm_geometry$Polygon2d$outerLoop(polygon),
			$ianmackenzie$elm_geometry$Polygon2d$innerLoops(polygon));
		var loopString = function (loop) {
			if (!loop.b) {
				return '';
			} else {
				var coordinateStrings = A2(
					$elm$core$List$map,
					function (point) {
						var _v1 = $ianmackenzie$elm_geometry$Point2d$unwrap(point);
						var y = _v1.y;
						var x = _v1.x;
						return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
					},
					loop);
				return 'M ' + (A2($elm$core$String$join, ' L ', coordinateStrings) + ' Z');
			}
		};
		var pathAttribute = $elm$svg$Svg$Attributes$d(
			A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$map, loopString, loops)));
		return A2(
			$elm$svg$Svg$path,
			A2($elm$core$List$cons, pathAttribute, attributes),
			_List_Nil);
	});
var $ianmackenzie$elm_geometry$Point2d$projectOnto = F2(
	function (_v0, _v1) {
		var axis = _v0.a;
		var p = _v1.a;
		var _v2 = axis.originPoint;
		var p0 = _v2.a;
		var _v3 = axis.direction;
		var d = _v3.a;
		var distance = ((p.x - p0.x) * d.x) + ((p.y - p0.y) * d.y);
		return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(
			{x: p0.x + (distance * d.x), y: p0.y + (distance * d.y)});
	});
var $ianmackenzie$elm_units$Quantity$round = function (_v0) {
	var value = _v0.a;
	return $ianmackenzie$elm_units$Quantity$Quantity(
		$elm$core$Basics$round(value));
};
var $author$project$UtilsForViews$showLongMeasure = F2(
	function (imperial, distance) {
		return imperial ? ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMiles(distance)) + ' miles') : ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Length$inMeters(distance)) + 'm');
	});
var $author$project$ViewProfileChartContext$SetEmphasis = function (a) {
	return {$: 'SetEmphasis', a: a};
};
var $author$project$ViewProfileChartsWebGL$stopProp = {preventDefault: false, stopPropagation: true};
var $author$project$ViewProfileChartsWebGL$zoomButtons = F2(
	function (msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewProfileChartsWebGL$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewProfileChartsWebGL$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewProfileChartsWebGL$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewProfileChartsWebGL$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$ViewProfileChartContext$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$ViewProfileChartContext$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$centerX
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('x8'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$ViewProfileChartContext$SetEmphasis(8)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$centerX
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('x4'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$ViewProfileChartContext$SetEmphasis(4)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$centerX
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('x2'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$ViewProfileChartContext$SetEmphasis(2)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$centerX
						]),
					{
						label: $mdgriffith$elm_ui$Element$text('x1'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$ViewProfileChartContext$SetEmphasis(1)))
					})
				]));
	});
var $author$project$ViewProfileChartsWebGL$view = F7(
	function (context, _v0, track, segments, msgWrapper, previews, imperial) {
		var givenWidth = _v0.a;
		var givenHeight = _v0.b;
		var trackLengthInView = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			A2($elm$core$Basics$pow, 0.5, context.zoomLevel),
			$author$project$DomainModel$trueLength(track.trackTree));
		var segmentHatch = F2(
			function (pt1, pt2) {
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$stroke('none'),
							$elm$svg$Svg$Attributes$fill('black'),
							$elm$svg$Svg$Attributes$opacity('40%')
						]),
					$ianmackenzie$elm_geometry$Polygon2d$singleLoop(
						_List_fromArray(
							[
								pt1,
								pt2,
								A2($ianmackenzie$elm_geometry$Point2d$projectOnto, $ianmackenzie$elm_geometry$Axis2d$x, pt2),
								A2($ianmackenzie$elm_geometry$Point2d$projectOnto, $ianmackenzie$elm_geometry$Axis2d$x, pt1)
							])));
			});
		var pointOfInterest = A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree);
		var orangePoint = A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree);
		var orangeLeaf = $author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, track.currentPosition, track.trackTree));
		var makeSvgPoint = F2(
			function (distance, road) {
				return A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					distance,
					$ianmackenzie$elm_units$Length$meters(road.gradientAtStart),
					A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						context.emphasis,
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint.space)));
			});
		var makeSvgPointAsList = F2(
			function (distance, road) {
				return _List_fromArray(
					[
						A2(makeSvgPoint, distance, road)
					]);
			});
		var leftEdge = A3(
			$ianmackenzie$elm_units$Quantity$clamp,
			$ianmackenzie$elm_units$Quantity$zero,
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				trackLengthInView,
				$author$project$DomainModel$trueLength(track.trackTree)),
			A2(
				$ianmackenzie$elm_units$Quantity$minus,
				$ianmackenzie$elm_units$Quantity$half(trackLengthInView),
				pointOfInterest));
		var rightEdge = A2($ianmackenzie$elm_units$Quantity$plus, trackLengthInView, leftEdge);
		var foldFn = F3(
			function (renderFn, road, _v13) {
				var distanceSoFar = _v13.a;
				var outputs = _v13.b;
				var newEntry = A2(renderFn, distanceSoFar, road);
				return _Utils_Tuple3(
					A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, distanceSoFar),
					_Utils_ap(newEntry, outputs),
					$elm$core$Maybe$Just(road));
			});
		var currentPoint = A2($author$project$DomainModel$earthPointFromIndex, track.currentPosition, track.trackTree);
		var fullRenderBox = A2(
			$ianmackenzie$elm_geometry$BoundingBox3d$withDimensions,
			_Utils_Tuple3($ianmackenzie$elm_units$Length$kilometer, $ianmackenzie$elm_units$Length$kilometer, $ianmackenzie$elm_units$Length$kilometer),
			currentPoint.space);
		var depthFn = function (road) {
			return A2($ianmackenzie$elm_geometry$BoundingBox3d$intersects, fullRenderBox, road.boundingBox) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				$elm$core$Basics$round(10 + context.zoomLevel));
		};
		var renderProfileData = function (trackToRender) {
			var _v10 = _Utils_Tuple2(
				A2($author$project$DomainModel$indexFromDistance, leftEdge, trackToRender.trackTree) - 1,
				A2($author$project$DomainModel$indexFromDistanceRoundedUp, rightEdge, trackToRender.trackTree) + 1);
			var leftIndex = _v10.a;
			var rightIndex = _v10.b;
			var _v11 = _Utils_Tuple2(
				A2($author$project$DomainModel$distanceFromIndex, leftIndex, trackToRender.trackTree),
				A2($author$project$DomainModel$distanceFromIndex, rightIndex, trackToRender.trackTree));
			var trueLeftEdge = _v11.a;
			var finalSvgPoint = function () {
				var leaf = $author$project$DomainModel$asRecord(
					A2($author$project$DomainModel$leafFromIndex, rightIndex, trackToRender.trackTree));
				return A3(
					$ianmackenzie$elm_geometry$Point3d$xyz,
					rightEdge,
					$ianmackenzie$elm_units$Length$meters(leaf.gradientAtStart),
					A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						context.emphasis,
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(leaf.endPoint.space)));
			}();
			var _v12 = A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				leftIndex,
				rightIndex,
				depthFn,
				0,
				trackToRender.trackTree,
				foldFn(makeSvgPointAsList),
				_Utils_Tuple3(trueLeftEdge, _List_Nil, $elm$core$Maybe$Nothing));
			var altitudeSvgPoints = _v12.b;
			return $elm$core$List$reverse(
				A2($elm$core$List$cons, finalSvgPoint, altitudeSvgPoints));
		};
		var renderDataOnce = renderProfileData(track);
		var compensateForZoom = function (g) {
			return ((2.0 * g) * A2($elm$core$Basics$pow, 0.5, context.zoomLevel)) * $ianmackenzie$elm_units$Length$inKilometers(
				$author$project$DomainModel$trueLength(track.trackTree));
		};
		var common3dSceneAttributes = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDown(
					A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageGrab, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onUp(
					A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageRelease, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
					A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageClick, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onDoubleClick(
					A2($elm$core$Basics$composeR, $author$project$ViewProfileChartContext$ImageDoubleClick, msgWrapper))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Wheel$onWheel(
					function (event) {
						return msgWrapper(
							$author$project$ViewProfileChartContext$ImageMouseWheel(event.deltaY));
					})),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$pointer,
				$mdgriffith$elm_ui$Element$Border$width(0),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace)
			]);
		var _v1 = _Utils_Tuple2(
			givenWidth,
			$ianmackenzie$elm_units$Quantity$round(
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					0.5,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight))));
		var gradientWidth = _v1.a;
		var gradientHeight = _v1.b;
		var gradientScreenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			$ianmackenzie$elm_geometry$Point2d$origin,
			A2(
				$ianmackenzie$elm_geometry$Point2d$xy,
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(gradientWidth),
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(gradientHeight)));
		var _v2 = _Utils_Tuple2(
			givenWidth,
			$ianmackenzie$elm_units$Quantity$round(
				A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					0.5,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(givenHeight))));
		var altitudeWidth = _v2.a;
		var altitudeHeight = _v2.b;
		var topLeftFrame = $ianmackenzie$elm_geometry$Frame2d$reverseY(
			$ianmackenzie$elm_geometry$Frame2d$atPoint(
				A2(
					$ianmackenzie$elm_geometry$Point2d$xy,
					$ianmackenzie$elm_units$Quantity$zero,
					$ianmackenzie$elm_units$Quantity$toFloatQuantity(altitudeHeight))));
		var _v3 = _Utils_Tuple2(
			$elm$core$String$fromInt(
				$ianmackenzie$elm_units$Pixels$inPixels(altitudeWidth)),
			$elm$core$String$fromInt(
				$ianmackenzie$elm_units$Pixels$inPixels(altitudeHeight)));
		var svgWidth = _v3.a;
		var svgHeight = _v3.b;
		var altitudeCamera = A4(
			$author$project$ViewProfileChartsWebGL$deriveAltitudeCamera,
			track.trackTree,
			context,
			track.currentPosition,
			_Utils_Tuple2(altitudeWidth, altitudeHeight));
		var paintSegment = function (segment) {
			var makeShadedBlock = F2(
				function (road, _v9) {
					var left = _v9.a;
					var outputs = _v9.b;
					var right = A2($ianmackenzie$elm_units$Quantity$plus, road.trueLength, left);
					var pt2 = A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						altitudeCamera,
						gradientScreenRectangle,
						A3(
							$ianmackenzie$elm_geometry$Point3d$xyz,
							right,
							$ianmackenzie$elm_units$Quantity$zero,
							A2(
								$ianmackenzie$elm_units$Quantity$multiplyBy,
								context.emphasis,
								$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.endPoint.space))));
					var pt1 = A3(
						$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
						altitudeCamera,
						gradientScreenRectangle,
						A3(
							$ianmackenzie$elm_geometry$Point3d$xyz,
							left,
							$ianmackenzie$elm_units$Quantity$zero,
							A2(
								$ianmackenzie$elm_units$Quantity$multiplyBy,
								context.emphasis,
								$ianmackenzie$elm_geometry$Point3d$zCoordinate(road.startPoint.space))));
					return _Utils_Tuple2(
						right,
						A2(
							$elm$core$List$cons,
							A2(segmentHatch, pt1, pt2),
							outputs));
				});
			var _v7 = _Utils_Tuple2(
				A2($author$project$DomainModel$indexFromDistance, segment.startDistance, track.trackTree),
				A2($author$project$DomainModel$indexFromDistance, segment.endDistance, track.trackTree));
			var leftIndex = _v7.a;
			var rightIndex = _v7.b;
			var _v8 = A7(
				$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
				leftIndex,
				rightIndex,
				$elm$core$Basics$always($elm$core$Maybe$Nothing),
				0,
				track.trackTree,
				makeShadedBlock,
				_Utils_Tuple2(segment.startDistance, _List_Nil));
			var svgShapes = _v8.b;
			return A2($elm$svg$Svg$g, _List_Nil, svgShapes);
		};
		var paintSegments = A2(
			$elm$svg$Svg$g,
			_List_Nil,
			A2($elm$core$List$map, paintSegment, segments));
		var pointsToColouredCurtain = function (points) {
			var pointsInScreenSpace = A2(
				$elm$core$List$map,
				A2($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, altitudeCamera, gradientScreenRectangle),
				points);
			var makeSection = F3(
				function (pt1, pt2, colour) {
					return A2(
						$ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$stroke('none'),
								$elm$svg$Svg$Attributes$fill(
								$author$project$UtilsForViews$colourHexString(colour))
							]),
						$ianmackenzie$elm_geometry$Polygon2d$singleLoop(
							_List_fromArray(
								[
									pt1,
									pt2,
									A2($ianmackenzie$elm_geometry$Point2d$projectOnto, $ianmackenzie$elm_geometry$Axis2d$x, pt2),
									A2($ianmackenzie$elm_geometry$Point2d$projectOnto, $ianmackenzie$elm_geometry$Axis2d$x, pt1)
								])));
				});
			var gradients = A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$ianmackenzie$elm_geometry$Point3d$yCoordinate,
					A2($elm$core$Basics$composeR, $ianmackenzie$elm_units$Length$inMeters, $author$project$ColourPalette$gradientColourPastel)),
				points);
			var steppedLines = A4(
				$elm$core$List$map3,
				makeSection,
				pointsInScreenSpace,
				A2($elm$core$List$drop, 1, pointsInScreenSpace),
				gradients);
			return A2($elm$svg$Svg$g, _List_Nil, steppedLines);
		};
		var altitudeScreenRectangle = A2(
			$ianmackenzie$elm_geometry$Rectangle2d$from,
			$ianmackenzie$elm_geometry$Point2d$origin,
			A2(
				$ianmackenzie$elm_geometry$Point2d$xy,
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(altitudeWidth),
				$ianmackenzie$elm_units$Quantity$toFloatQuantity(altitudeHeight)));
		var orangeAltitude2d = A3(
			$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
			altitudeCamera,
			altitudeScreenRectangle,
			A3($author$project$ViewProfileChartsWebGL$pointInAltitudeView, context, track.currentPosition, track.trackTree).space);
		var orangeAltitudeSvg = A2(
			$ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$stroke('orange'),
					$elm$svg$Svg$Attributes$strokeWidth('4'),
					$elm$svg$Svg$Attributes$fill('none')
				]),
			A2(
				$ianmackenzie$elm_geometry$Circle2d$withRadius,
				$ianmackenzie$elm_units$Pixels$float(10),
				orangeAltitude2d));
		var textLine = F2(
			function (lineNum, content) {
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$mirrorAcross,
					A2($ianmackenzie$elm_geometry$Axis2d$through, orangeAltitude2d, $ianmackenzie$elm_geometry$Direction2d$x),
					A2(
						$elm$svg$Svg$text_,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$fill('black'),
								$elm$svg$Svg$Attributes$fontFamily('sans-serif'),
								$elm$svg$Svg$Attributes$fontSize('14px'),
								$elm$svg$Svg$Attributes$stroke('none'),
								$elm$svg$Svg$Attributes$x(
								$elm$core$String$fromFloat(
									$ianmackenzie$elm_units$Pixels$toFloat(
										$ianmackenzie$elm_geometry$Point2d$xCoordinate(orangeAltitude2d)) + 20)),
								$elm$svg$Svg$Attributes$y(
								$elm$core$String$fromFloat(
									$ianmackenzie$elm_units$Pixels$toFloat(
										$ianmackenzie$elm_geometry$Point2d$yCoordinate(orangeAltitude2d)) - (lineNum * 20)))
							]),
						_List_fromArray(
							[
								$elm$svg$Svg$text(content)
							])));
			});
		var orangeText = _List_fromArray(
			[
				A2(
				textLine,
				1,
				$author$project$UtilsForViews$showDecimal2(orangeLeaf.gradientAtStart) + '%'),
				A2(
				textLine,
				2,
				A2(
					$author$project$UtilsForViews$showShortMeasure,
					imperial,
					$ianmackenzie$elm_geometry$Point3d$zCoordinate(orangePoint.space))),
				A2(
				textLine,
				3,
				A2(
					$author$project$UtilsForViews$showLongMeasure,
					imperial,
					A2($author$project$DomainModel$distanceFromIndex, track.currentPosition, track.trackTree)))
			]);
		var pointsAsAltitudePolyline = F2(
			function (colour, points) {
				var pointsInScreenSpace = A2(
					$elm$core$List$map,
					A2($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, altitudeCamera, altitudeScreenRectangle),
					points);
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$polyline2d,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$stroke(colour),
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$strokeWidth('3'),
							$elm$svg$Svg$Attributes$strokeLinecap('round'),
							$elm$svg$Svg$Attributes$strokeLinejoin('round')
						]),
					$ianmackenzie$elm_geometry$Polyline2d$fromVertices(pointsInScreenSpace));
			});
		var makeAltitudePreviewHelper = F2(
			function (colour, previewTree) {
				return A2(
					pointsAsAltitudePolyline,
					$author$project$UtilsForViews$uiColourHexString(colour),
					renderProfileData(
						_Utils_update(
							track,
							{trackTree: previewTree})));
			});
		var makeAltitudePreview = F3(
			function (k, preview, outputs) {
				var _v6 = preview.shape;
				if (_v6.$ === 'PreviewProfile') {
					var previewTree = _v6.a;
					return A2(
						$elm$core$List$cons,
						A2(makeAltitudePreviewHelper, preview.colour, previewTree),
						outputs);
				} else {
					return outputs;
				}
			});
		var altitudePreviews = A3($elm$core$Dict$foldl, makeAltitudePreview, _List_Nil, previews);
		var purpleSvg = function () {
			var _v5 = track.markerPosition;
			if (_v5.$ === 'Just') {
				var purple = _v5.a;
				var purple2d = A3(
					$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
					altitudeCamera,
					altitudeScreenRectangle,
					A3($author$project$ViewProfileChartsWebGL$pointInAltitudeView, context, purple, track.trackTree).space);
				return _List_fromArray(
					[
						A2(
						$ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$stroke('purple'),
								$elm$svg$Svg$Attributes$strokeWidth('4'),
								$elm$svg$Svg$Attributes$fill('none')
							]),
						A2(
							$ianmackenzie$elm_geometry$Circle2d$withRadius,
							$ianmackenzie$elm_units$Pixels$float(8),
							purple2d))
					]);
			} else {
				return _List_Nil;
			}
		}();
		var altitudeChart = A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width(svgWidth),
					$elm$svg$Svg$Attributes$height(svgHeight)
				]),
			_List_fromArray(
				[
					A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo,
					topLeftFrame,
					A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A2(pointsAsAltitudePolyline, 'black', renderDataOnce),
								pointsToColouredCurtain(renderDataOnce),
								paintSegments,
								A2(
								$elm$svg$Svg$g,
								_List_Nil,
								A2(
									$elm$core$List$cons,
									orangeAltitudeSvg,
									_Utils_ap(orangeText, purpleSvg))),
								A2($elm$svg$Svg$g, _List_Nil, altitudePreviews)
							])))
				]));
		var gradientCamera = A4(
			$author$project$ViewProfileChartsWebGL$deriveGradientCamera,
			track.trackTree,
			context,
			track.currentPosition,
			_Utils_Tuple2(altitudeWidth, altitudeHeight));
		var orangeGradient2d = A3(
			$ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace,
			gradientCamera,
			gradientScreenRectangle,
			A3($author$project$ViewProfileChartsWebGL$pointInGradientView, context, track.currentPosition, track.trackTree).space);
		var orangeGradientSvg = A2(
			$ianmackenzie$elm_geometry_svg$Geometry$Svg$circle2d,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$stroke('orange'),
					$elm$svg$Svg$Attributes$strokeWidth('4'),
					$elm$svg$Svg$Attributes$fill('none')
				]),
			A2(
				$ianmackenzie$elm_geometry$Circle2d$withRadius,
				$ianmackenzie$elm_units$Pixels$float(10),
				orangeGradient2d));
		var pointsAsGradientPolyline = F2(
			function (colour, points) {
				var zoomAdjust = function (pt) {
					return A3(
						$ianmackenzie$elm_geometry$Point3d$xyz,
						$ianmackenzie$elm_geometry$Point3d$xCoordinate(pt),
						A2(
							$ianmackenzie$elm_units$Quantity$multiplyBy,
							compensateForZoom(1.0),
							$ianmackenzie$elm_geometry$Point3d$yCoordinate(pt)),
						$ianmackenzie$elm_geometry$Point3d$zCoordinate(pt));
				};
				var pointsInScreenSpace = A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						zoomAdjust,
						A2($ianmackenzie$elm_3d_camera$Point3d$Projection$toScreenSpace, gradientCamera, gradientScreenRectangle)),
					points);
				var makeStep = F2(
					function (pt1, pt2) {
						return _List_fromArray(
							[
								pt1,
								A2(
								$ianmackenzie$elm_geometry$Point2d$xy,
								$ianmackenzie$elm_geometry$Point2d$xCoordinate(pt2),
								$ianmackenzie$elm_geometry$Point2d$yCoordinate(pt1)),
								pt2
							]);
					});
				var steppedLines = $elm$core$List$concat(
					A3(
						$elm$core$List$map2,
						makeStep,
						pointsInScreenSpace,
						A2($elm$core$List$drop, 1, pointsInScreenSpace)));
				return A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$polyline2d,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$stroke(colour),
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$strokeWidth('3'),
							$elm$svg$Svg$Attributes$strokeLinecap('round'),
							$elm$svg$Svg$Attributes$strokeLinejoin('round')
						]),
					$ianmackenzie$elm_geometry$Polyline2d$fromVertices(steppedLines));
			});
		var distanceAxis = A2(
			pointsAsGradientPolyline,
			'gray',
			_List_fromArray(
				[
					A3($ianmackenzie$elm_geometry$Point3d$xyz, leftEdge, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero),
					A3($ianmackenzie$elm_geometry$Point3d$xyz, rightEdge, $ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero)
				]));
		var makeGradientPreviewHelper = F2(
			function (colour, previewTree) {
				return A2(
					pointsAsGradientPolyline,
					$author$project$UtilsForViews$uiColourHexString(colour),
					renderProfileData(
						_Utils_update(
							track,
							{trackTree: previewTree})));
			});
		var makeGradientPreview = F3(
			function (k, preview, outputs) {
				var _v4 = preview.shape;
				if (_v4.$ === 'PreviewProfile') {
					var previewTree = _v4.a;
					return A2(
						$elm$core$List$cons,
						A2(makeGradientPreviewHelper, preview.colour, previewTree),
						outputs);
				} else {
					return outputs;
				}
			});
		var gradientPreviews = A3($elm$core$Dict$foldl, makeGradientPreview, _List_Nil, previews);
		var gradientChart = A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width(svgWidth),
					$elm$svg$Svg$Attributes$height(svgHeight)
				]),
			_List_fromArray(
				[
					A2(
					$ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo,
					topLeftFrame,
					A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								distanceAxis,
								A2(pointsAsGradientPolyline, 'black', renderDataOnce),
								A2(
								$elm$svg$Svg$g,
								_List_Nil,
								A2($elm$core$List$cons, orangeGradientSvg, orangeText)),
								A2($elm$svg$Svg$g, _List_Nil, gradientPreviews)
							])))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$pointer,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$inFront(
							A2($author$project$ViewProfileChartsWebGL$zoomButtons, msgWrapper, context)),
						common3dSceneAttributes))),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(altitudeChart),
					$mdgriffith$elm_ui$Element$html(gradientChart)
				]));
	});
var $author$project$View3dCommonElements$ImageDrag = function (a) {
	return {$: 'ImageDrag', a: a};
};
var $author$project$View3dCommonElements$ImageReset = {$: 'ImageReset'};
var $author$project$View3dCommonElements$ImageZoomIn = {$: 'ImageZoomIn'};
var $author$project$View3dCommonElements$ImageZoomOut = {$: 'ImageZoomOut'};
var $author$project$View3dCommonElements$ToggleFollowOrange = {$: 'ToggleFollowOrange'};
var $author$project$ViewPureStyles$stopProp = {preventDefault: false, stopPropagation: true};
var $author$project$View3dCommonElements$zoomButtons = F3(
	function (location, msgWrapper, context) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(5),
					$mdgriffith$elm_ui$Element$moveLeft(10),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
					$mdgriffith$elm_ui$Element$Font$size(40),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(4),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$View3dCommonElements$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$View3dCommonElements$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$View3dCommonElements$ImageNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$View3dCommonElements$ImageNoOp),
							msgWrapper)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$plus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$View3dCommonElements$ImageZoomIn))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$minus),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$View3dCommonElements$ImageZoomOut))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_Nil,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$maximize),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$View3dCommonElements$ImageReset))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					context.followSelectedPoint ? _List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$onLeft,
							A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'locked'))
						]) : _List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$onLeft,
							A3($author$project$ToolTip$localisedTooltip, location, 'panes', 'unlocked'))
						]),
					{
						label: context.followSelectedPoint ? $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$lock) : $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$unlock),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$View3dCommonElements$ToggleFollowOrange))
					})
				]));
	});
var $author$project$ViewThirdPerson$view = F7(
	function (location, context, display, contentArea, track, scene, msgWrapper) {
		var dragging = context.dragAction;
		var camera = A3($author$project$ViewThirdPerson$deriveCamera, track.trackTree, context, track.currentPosition);
		var overlay = A4($author$project$View3dCommonElements$placesOverlay, display, contentArea, track, camera);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				(!_Utils_eq(dragging, $author$project$View3dCommonElements$DragNone)) ? $mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
						A2($elm$core$Basics$composeR, $author$project$View3dCommonElements$ImageDrag, msgWrapper))) : $mdgriffith$elm_ui$Element$pointer,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$inFront(overlay),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$inFront(
							A3($author$project$View3dCommonElements$zoomButtons, location, msgWrapper, context)),
						A2($author$project$View3dCommonElements$common3dSceneAttributes, msgWrapper, context)))),
			$mdgriffith$elm_ui$Element$html(
				$ianmackenzie$elm_3d_scene$Scene3d$sunny(
					{
						background: $ianmackenzie$elm_3d_scene$Scene3d$backgroundColor($avh4$elm_color$Color$lightBlue),
						camera: A3($author$project$ViewThirdPerson$deriveCamera, track.trackTree, context, track.currentPosition),
						clipDepth: $ianmackenzie$elm_units$Length$meters(1),
						dimensions: contentArea,
						entities: scene,
						shadows: false,
						sunlightDirection: $ianmackenzie$elm_geometry$Direction3d$negativeZ,
						upDirection: $ianmackenzie$elm_geometry$Direction3d$positiveZ
					})));
	});
var $author$project$PaneLayoutManager$SetViewMode = F2(
	function (a, b) {
		return {$: 'SetViewMode', a: a, b: b};
	});
var $author$project$PaneLayoutManager$TogglePopup = {$: 'TogglePopup'};
var $author$project$PaneLayoutManager$PaneNoOp = {$: 'PaneNoOp'};
var $author$project$PaneLayoutManager$SetPaneLayout = function (a) {
	return {$: 'SetPaneLayout', a: a};
};
var $feathericons$elm_feather$FeatherIcons$columns = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'columns',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$grid = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'grid',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('14'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('14'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('7'),
					$elm$svg$Svg$Attributes$height('7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$server = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'server',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('2'),
					$elm$svg$Svg$Attributes$y('2'),
					$elm$svg$Svg$Attributes$width('20'),
					$elm$svg$Svg$Attributes$height('8'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('2'),
					$elm$svg$Svg$Attributes$y('14'),
					$elm$svg$Svg$Attributes$width('20'),
					$elm$svg$Svg$Attributes$height('8'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('6.01'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('6.01'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$square = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'square',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('3'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('18'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil)
		]));
var $author$project$Tools$I18N$text = F3(
	function (location, tool, tag) {
		return $mdgriffith$elm_ui$Element$text(
			A3($author$project$Tools$I18N$localisedString, location, tool, tag));
	});
var $author$project$PaneLayoutManager$optionList = function (location) {
	var localise = A2($author$project$Tools$I18N$text, location, 'panes');
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$Input$option,
			$author$project$PaneContext$PanesOne,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$square),
						localise('one')
					]))),
			A2(
			$mdgriffith$elm_ui$Element$Input$option,
			$author$project$PaneContext$PanesLeftRight,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$columns),
						localise('tall')
					]))),
			A2(
			$mdgriffith$elm_ui$Element$Input$option,
			$author$project$PaneContext$PanesUpperLower,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$server),
						localise('flat')
					]))),
			A2(
			$mdgriffith$elm_ui$Element$Input$option,
			$author$project$PaneContext$PanesGrid,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						$author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$grid),
						localise('grid')
					])))
		]);
};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue = A3($mdgriffith$elm_ui$Element$rgb255, 47, 53, 66);
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$ufoGreen = A3($mdgriffith$elm_ui$Element$rgb255, 46, 213, 115);
var $author$project$ViewPureStyles$subtleToolStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$ufoGreen),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$padding(4),
		$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue)
	]);
var $author$project$PaneLayoutManager$showOptionsMenu = F3(
	function (location, msgWrapper, options) {
		return options.popupVisible ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveDown(30),
					$mdgriffith$elm_ui$Element$moveLeft(80),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'dblclick',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mousedown',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'mouseup',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$PaneNoOp),
							msgWrapper))),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '20'))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$radio,
				_Utils_ap(
					$author$project$ViewPureStyles$subtleToolStyles,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(10)
						])),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('layout'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$SetPaneLayout),
					options: $author$project$PaneLayoutManager$optionList(location),
					selected: $elm$core$Maybe$Just(options.paneLayout)
				})) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$PaneLayoutManager$paneLayoutMenu = F3(
	function (location, msgWrapper, options) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
					$mdgriffith$elm_ui$Element$Border$width(2),
					$mdgriffith$elm_ui$Element$inFront(
					A3($author$project$PaneLayoutManager$showOptionsMenu, location, msgWrapper, options)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPureStyles$stopProp,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Basics$always($author$project$PaneLayoutManager$TogglePopup),
							msgWrapper)))
				]),
			{
				label: A3($author$project$Tools$I18N$text, location, 'panes', 'layout'),
				onPress: $elm$core$Maybe$Just(
					msgWrapper($author$project$PaneLayoutManager$TogglePopup))
			});
	});
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$clearChill = A3($mdgriffith$elm_ui$Element$rgb255, 30, 144, 255);
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var right = _v0.right;
	var left = _v0.left;
	var top = _v0.top;
	var bottom = _v0.bottom;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$ViewPureStyles$radioButton = F2(
	function (label, state) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(1),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$clearChill),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? {bottom: 0, left: 2, right: 2, top: 2} : {bottom: 0, left: 1, right: 1, top: 1}),
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite : $smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue : $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
				$mdgriffith$elm_ui$Element$text(label)));
	});
var $mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Row);
var $author$project$PaneLayoutManager$viewModeChoices = F4(
	function (location, msgWrapper, context, options) {
		var localise = A2(
			$elm$core$Basics$composeL,
			$author$project$ViewPureStyles$radioButton,
			A2($author$project$Tools$I18N$localisedString, location, 'panes'));
		var fullOptionList = _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewMap,
				localise('Map')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewThird,
				localise('Perspective')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewFirst,
				localise('Rider')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewProfileCanvas,
				localise('Profile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewProfileWebGL,
				localise('OldProfile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewPlan,
				localise('Plan')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewGraph,
				localise('Route')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewInfo,
				localise('About'))
			]);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 4, right: 0, top: 4})
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Choose view'),
						onChange: A2(
							$elm$core$Basics$composeL,
							msgWrapper,
							$author$project$PaneLayoutManager$SetViewMode(context.paneId)),
						options: fullOptionList,
						selected: $elm$core$Maybe$Just(context.activeView)
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 4, right: 10, top: 4})
						]),
					A3($author$project$PaneLayoutManager$paneLayoutMenu, location, msgWrapper, options))
				]));
	});
var $author$project$PaneLayoutManager$viewModeChoicesNoMap = F3(
	function (location, msgWrapper, pane) {
		var localise = A2(
			$elm$core$Basics$composeL,
			$author$project$ViewPureStyles$radioButton,
			A2($author$project$Tools$I18N$localisedString, location, 'panes'));
		var reducedOptionList = _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewThird,
				localise('Perspective')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewFirst,
				localise('Rider')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewProfileCanvas,
				localise('Profile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewProfileWebGL,
				localise('OldProfile')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewPlan,
				localise('Plan')),
				A2(
				$mdgriffith$elm_ui$Element$Input$optionWith,
				$author$project$ViewMode$ViewGraph,
				localise('Route'))
			]);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 4, right: 0, top: 4})
						]),
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('Choose view'),
						onChange: A2(
							$elm$core$Basics$composeL,
							msgWrapper,
							$author$project$PaneLayoutManager$SetViewMode(pane.paneId)),
						options: reducedOptionList,
						selected: $elm$core$Maybe$Just(pane.activeView)
					})
				]));
	});
var $author$project$ColourPalette$scrollbarBackground = $smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos;
var $author$project$ViewPureStyles$wideSliderStylesWithWidth = function (w) {
	var usedWidth = $elm$core$Basics$round(
		0.8 * $ianmackenzie$elm_units$Pixels$toInt(w));
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(24)),
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(usedWidth)),
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$behindContent(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(usedWidth)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(2)),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
						$mdgriffith$elm_ui$Element$Border$rounded(6)
					]),
				$mdgriffith$elm_ui$Element$none))
		]);
};
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$PaneLayoutManager$viewPanes = function (location) {
	return function (msgWrapper) {
		return function (mTrack) {
			return function (segments) {
				return function (graphOptions) {
					return function (displayOptions) {
						return function (_v0) {
							return function (options) {
								return function (mFlythrough) {
									return function (previews) {
										return function (imperial) {
											var w = _v0.a;
											var h = _v0.b;
											var slider = function () {
												if (mTrack.$ === 'Just') {
													var track = mTrack.a;
													return A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX]),
														A2(
															$mdgriffith$elm_ui$Element$Input$slider,
															$author$project$ViewPureStyles$wideSliderStylesWithWidth(w),
															{
																label: $mdgriffith$elm_ui$Element$Input$labelHidden('position'),
																max: $author$project$DomainModel$skipCount(track.trackTree),
																min: 0,
																onChange: A2(
																	$elm$core$Basics$composeR,
																	$elm$core$Basics$round,
																	A2($elm$core$Basics$composeR, $author$project$PaneLayoutManager$SetCurrentPosition, msgWrapper)),
																step: $elm$core$Maybe$Just(1),
																thumb: $author$project$ViewPureStyles$sliderThumb,
																value: track.currentPosition
															}));
												} else {
													return A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
														$mdgriffith$elm_ui$Element$text('Please load a route'));
												}
											}();
											var _v1 = A2(
												$author$project$PaneLayoutManager$dimensionsWithLayout,
												options.paneLayout,
												_Utils_Tuple2(w, h));
											var paneWidth = _v1.a;
											var paneHeight = _v1.b;
											var showNonMapViews = function (pane) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_Nil,
													_List_fromArray(
														[
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewThird),
															function () {
																var _v3 = _Utils_Tuple2(pane.thirdPersonContext, mTrack);
																if ((_v3.a.$ === 'Just') && (_v3.b.$ === 'Just')) {
																	var context = _v3.a.a;
																	var track = _v3.b.a;
																	return A7(
																		$author$project$ViewThirdPerson$view,
																		location,
																		context,
																		displayOptions,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		track,
																		options.scene3d,
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$ThirdPersonViewMessage(pane.paneId)));
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewFirst),
															function () {
																var _v4 = _Utils_Tuple2(pane.thirdPersonContext, mTrack);
																if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
																	var context = _v4.a.a;
																	var track = _v4.b.a;
																	return A6(
																		$author$project$ViewFirstPerson$view,
																		context,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		track,
																		options.scene3d,
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$ThirdPersonViewMessage(pane.paneId)),
																		mFlythrough);
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewPlan),
															function () {
																var _v5 = _Utils_Tuple2(pane.planContext, mTrack);
																if ((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) {
																	var context = _v5.a.a;
																	var track = _v5.b.a;
																	return A6(
																		$author$project$ViewPlan$view,
																		context,
																		displayOptions,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		track,
																		options.scene3d,
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$PlanViewMessage(pane.paneId)));
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewGraph),
															function () {
																var _v6 = _Utils_Tuple2(pane.graphContext, mTrack);
																if ((_v6.a.$ === 'Just') && (_v6.b.$ === 'Just')) {
																	var context = _v6.a.a;
																	return A5(
																		$author$project$ViewGraph$view,
																		location,
																		context,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		graphOptions,
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$GraphViewMessage(pane.paneId)));
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewProfileCanvas),
															function () {
																var _v7 = pane.profileContext;
																if (_v7.$ === 'Just') {
																	var context = _v7.a;
																	return A4(
																		$author$project$ViewProfileChartsCanvas$view,
																		context,
																		pane.paneId,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$ProfileViewMessage(pane.paneId)));
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewProfileWebGL),
															function () {
																var _v8 = _Utils_Tuple2(pane.profileContext, mTrack);
																if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
																	var context = _v8.a.a;
																	var track = _v8.b.a;
																	return A7(
																		$author$project$ViewProfileChartsWebGL$view,
																		context,
																		_Utils_Tuple2(paneWidth, paneHeight),
																		track,
																		segments,
																		A2(
																			$elm$core$Basics$composeL,
																			msgWrapper,
																			$author$project$PaneLayoutManager$ProfileViewMessage(pane.paneId)),
																		previews,
																		imperial);
																} else {
																	return $mdgriffith$elm_ui$Element$none;
																}
															}()),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewInfo),
															$author$project$ViewAbout$view(
																_Utils_Tuple2(paneWidth, paneHeight)))
														]));
											};
											var viewPaneNoMap = function (pane) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$centerX
														]),
													_List_fromArray(
														[
															A3($author$project$PaneLayoutManager$viewModeChoicesNoMap, location, msgWrapper, pane),
															showNonMapViews(pane)
														]));
											};
											var viewPaneZeroWithMap = function (pane) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$centerX
														]),
													_List_fromArray(
														[
															A4($author$project$PaneLayoutManager$viewModeChoices, location, msgWrapper, pane, options),
															showNonMapViews(pane),
															A2(
															$author$project$ViewPureStyles$conditionallyVisible,
															_Utils_eq(pane.activeView, $author$project$ViewMode$ViewMap),
															A4(
																$author$project$ViewMap$view,
																location,
																_Utils_Tuple2(paneWidth, paneHeight),
																pane.mapContext,
																A2($elm$core$Basics$composeL, msgWrapper, $author$project$PaneLayoutManager$MapViewMessage)))
														]));
											};
											return A2(
												$mdgriffith$elm_ui$Element$column,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$alignTop,
														$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
													]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$wrappedRow,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$centerX,
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
															]),
														function () {
															if (_Utils_eq(mTrack, $elm$core$Maybe$Nothing)) {
																return _List_fromArray(
																	[
																		viewPaneZeroWithMap($author$project$PaneLayoutManager$defaultOptions.pane1),
																		slider
																	]);
															} else {
																var _v2 = options.paneLayout;
																switch (_v2.$) {
																	case 'PanesOne':
																		return _List_fromArray(
																			[
																				viewPaneZeroWithMap(options.pane1),
																				slider
																			]);
																	case 'PanesLeftRight':
																		return _List_fromArray(
																			[
																				viewPaneZeroWithMap(options.pane1),
																				viewPaneNoMap(options.pane2),
																				slider
																			]);
																	case 'PanesUpperLower':
																		return _List_fromArray(
																			[
																				viewPaneZeroWithMap(options.pane1),
																				viewPaneNoMap(options.pane2),
																				slider
																			]);
																	case 'PanesGrid':
																		return _List_fromArray(
																			[
																				viewPaneZeroWithMap(options.pane1),
																				viewPaneNoMap(options.pane2),
																				viewPaneNoMap(options.pane3),
																				viewPaneNoMap(options.pane4),
																				slider
																			]);
																	default:
																		return _List_fromArray(
																			[
																				viewPaneZeroWithMap(options.pane1),
																				slider
																			]);
																}
															}
														}())
													]));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Main$viewPaneArea = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$htmlAttribute(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick($author$project$Main$BackgroundClick)),
			$author$project$ViewPureStyles$commonLayoutStyles),
		$author$project$PaneLayoutManager$viewPanes(model.location)($author$project$Main$PaneMsg)(model.track)(model.toolOptions.namedSegmentOptions.namedSegments)(model.toolOptions.graphOptions)(model.toolOptions.displaySettings)(model.contentArea)(model.paneLayoutOptions)(model.toolOptions.flythroughSettings.flythrough)(model.previews)(model.toolOptions.imperial));
};
var $author$project$Main$centralAreaView = function (model) {
	return $author$project$Main$viewPaneArea(model);
};
var $author$project$SplitPane$SplitPane$ViewConfig = function (a) {
	return {$: 'ViewConfig', a: a};
};
var $author$project$SplitPane$SplitPane$createViewConfig = function (_v0) {
	var toMsg = _v0.toMsg;
	var customSplitter = _v0.customSplitter;
	return $author$project$SplitPane$SplitPane$ViewConfig(
		{splitter: customSplitter, toMsg: toMsg});
};
var $author$project$Main$leftDockConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitLeftDockRightEdge});
var $mdgriffith$elm_ui$Element$Lazy$embed = function (x) {
	switch (x.$) {
		case 'Unstyled':
			var html = x.a;
			return html;
		case 'Styled':
			var styled = x.a;
			return styled.html(
				A2(
					$mdgriffith$elm_ui$Internal$Model$OnlyDynamic,
					{
						focus: {backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing},
						hover: $mdgriffith$elm_ui$Internal$Model$AllowHover,
						mode: $mdgriffith$elm_ui$Internal$Model$Layout
					},
					styled.styles));
		case 'Text':
			var text = x.a;
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(text));
		default:
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(''));
	}
};
var $mdgriffith$elm_ui$Element$Lazy$apply5 = F6(
	function (fn, a, b, c, d, e) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			A5(fn, a, b, c, d, e));
	});
var $elm$virtual_dom$VirtualDom$lazy7 = _VirtualDom_lazy7;
var $mdgriffith$elm_ui$Element$Lazy$lazy5 = F6(
	function (fn, a, b, c, d, e) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A7($elm$virtual_dom$VirtualDom$lazy7, $mdgriffith$elm_ui$Element$Lazy$apply5, fn, a, b, c, d, e));
	});
var $author$project$ToolsController$ToolNoOp = {$: 'ToolNoOp'};
var $author$project$ToolsController$ToolPopupToggle = function (a) {
	return {$: 'ToolPopupToggle', a: a};
};
var $author$project$ToolsController$ToolStateToggle = F2(
	function (a, b) {
		return {$: 'ToolStateToggle', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Element$below = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Below, element);
};
var $feathericons$elm_feather$FeatherIcons$chevronsDown = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-down',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('7 13 12 18 17 13')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('7 6 12 11 17 6')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronsUp = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-up',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('17 11 12 6 7 11')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('17 18 12 13 7 18')
				]),
			_List_Nil)
		]));
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var label = _v0.label;
		var url = _v0.url;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$ToolsController$nextToolState = function (state) {
	switch (state.$) {
		case 'Expanded':
			return $author$project$ToolsController$Contracted;
		case 'Contracted':
			return $author$project$ToolsController$Expanded;
		case 'Disabled':
			return $author$project$ToolsController$Disabled;
		case 'AlwaysOpen':
			return $author$project$ToolsController$AlwaysOpen;
		case 'SettingsOpen':
			return $author$project$ToolsController$SettingsClosed;
		default:
			return $author$project$ToolsController$SettingsOpen;
	}
};
var $feathericons$elm_feather$FeatherIcons$settings = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'settings',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('3')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z')
				]),
			_List_Nil)
		]));
var $author$project$ToolsController$ToolColourSelect = F2(
	function (a, b) {
		return {$: 'ToolColourSelect', a: a, b: b};
	});
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$frenchSkyBlue = A3($mdgriffith$elm_ui$Element$rgb255, 112, 161, 255);
var $author$project$ViewPureStyles$neatToolsBorder = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$saturatedSky),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$frenchSkyBlue),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$white),
		$mdgriffith$elm_ui$Element$padding(4)
	]);
var $author$project$ToolsController$showColourOptions = F2(
	function (msgWrapper, toolEntry) {
		var colourBlock = function (colour) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(colour),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(20)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(20))
					]),
				{
					label: $mdgriffith$elm_ui$Element$none,
					onPress: $elm$core$Maybe$Just(
						msgWrapper(
							A2($author$project$ToolsController$ToolColourSelect, toolEntry.toolType, colour)))
				});
		};
		return toolEntry.isPopupOpen ? A2(
			$mdgriffith$elm_ui$Element$column,
			A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$ViewPureStyles$neatToolsBorder),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$turquoise),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$emerald),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$amethyst),
							colourBlock($author$project$ViewPureStyles$rgtDark)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$greenSea),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$nephritis),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$belizeHole),
							colourBlock($author$project$ViewPureStyles$rgtPurple),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$midnightBlue)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$carrot),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$alizarin),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$clouds),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$concrete)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$orange),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pumpkin),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$pomegranate),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos)
						]))
				])) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$ToolsController$ToolDockSelect = F2(
	function (a, b) {
		return {$: 'ToolDockSelect', a: a, b: b};
	});
var $feathericons$elm_feather$FeatherIcons$arrowLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('19'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('5'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('12 19 5 12 12 5')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$arrowRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'arrow-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('5'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('19'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('12 5 19 12 12 19')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$eyeOff = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'eye-off',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('1'),
					$elm$svg$Svg$Attributes$y1('1'),
					$elm$svg$Svg$Attributes$x2('23'),
					$elm$svg$Svg$Attributes$y2('23')
				]),
			_List_Nil)
		]));
var $author$project$ToolsController$showDockOptions = F3(
	function (location, msgWrapper, toolEntry) {
		return toolEntry.isPopupOpen ? A2(
			$mdgriffith$elm_ui$Element$row,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(4),
				$author$project$ViewPureStyles$neatToolsBorder),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$ToolTip$localisedTooltip, location, 'tools', 'left'))
						]),
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowLeft),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockUpperLeft)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$ToolTip$localisedTooltip, location, 'tools', 'right'))
						]),
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$arrowRight),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockUpperRight)))
					}),
					((!_Utils_eq(toolEntry.toolType, $author$project$ToolsController$ToolSettings)) && (!_Utils_eq(toolEntry.toolType, $author$project$ToolsController$ToolEssentials))) ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_List_fromArray(
						[
							A2(
							$author$project$ToolTip$tooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$ToolTip$localisedTooltip, location, 'tools', 'hide')),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 20, right: 0, top: 0})
						]),
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$eyeOff),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								A2($author$project$ToolsController$ToolDockSelect, toolEntry.toolType, $author$project$ToolsController$DockNone)))
					}) : $mdgriffith$elm_ui$Element$none
				])) : $mdgriffith$elm_ui$Element$none;
	});
var $feathericons$elm_feather$FeatherIcons$slash = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'slash',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('4.93'),
					$elm$svg$Svg$Attributes$y1('4.93'),
					$elm$svg$Svg$Attributes$x2('19.07'),
					$elm$svg$Svg$Attributes$y2('19.07')
				]),
			_List_Nil)
		]));
var $author$project$ToolsController$DeletePoints = function (a) {
	return {$: 'DeletePoints', a: a};
};
var $author$project$ToolsController$DirectionChanges = function (a) {
	return {$: 'DirectionChanges', a: a};
};
var $author$project$ToolsController$ToolBendSmootherMsg = function (a) {
	return {$: 'ToolBendSmootherMsg', a: a};
};
var $author$project$ToolsController$ToolBezierMsg = function (a) {
	return {$: 'ToolBezierMsg', a: a};
};
var $author$project$ToolsController$ToolCentroidMsg = function (a) {
	return {$: 'ToolCentroidMsg', a: a};
};
var $author$project$ToolsController$ToolCurveFormerMsg = function (a) {
	return {$: 'ToolCurveFormerMsg', a: a};
};
var $author$project$ToolsController$ToolDisplaySettingMsg = function (a) {
	return {$: 'ToolDisplaySettingMsg', a: a};
};
var $author$project$ToolsController$ToolEssentialsMsg = function (a) {
	return {$: 'ToolEssentialsMsg', a: a};
};
var $author$project$ToolsController$ToolFlythroughMsg = function (a) {
	return {$: 'ToolFlythroughMsg', a: a};
};
var $author$project$ToolsController$ToolGradientChangeMsg = function (a) {
	return {$: 'ToolGradientChangeMsg', a: a};
};
var $author$project$ToolsController$ToolInfoMsg = function (a) {
	return {$: 'ToolInfoMsg', a: a};
};
var $author$project$ToolsController$ToolInterpolateMsg = function (a) {
	return {$: 'ToolInterpolateMsg', a: a};
};
var $author$project$ToolsController$ToolMoveScaleRotateMsg = function (a) {
	return {$: 'ToolMoveScaleRotateMsg', a: a};
};
var $author$project$ToolsController$ToolNudgeMsg = function (a) {
	return {$: 'ToolNudgeMsg', a: a};
};
var $author$project$ToolsController$ToolOutAndBackMsg = function (a) {
	return {$: 'ToolOutAndBackMsg', a: a};
};
var $author$project$ToolsController$ToolProfileSmoothMsg = function (a) {
	return {$: 'ToolProfileSmoothMsg', a: a};
};
var $author$project$ToolsController$ToolSimplifyMsg = function (a) {
	return {$: 'ToolSimplifyMsg', a: a};
};
var $author$project$ToolsController$ToolSmartSmootherMsg = function (a) {
	return {$: 'ToolSmartSmootherMsg', a: a};
};
var $author$project$ToolsController$ToolStartFinishMsg = function (a) {
	return {$: 'ToolStartFinishMsg', a: a};
};
var $author$project$ToolsController$ToolStraightenMsg = function (a) {
	return {$: 'ToolStraightenMsg', a: a};
};
var $author$project$ToolsController$ToolTimestampMsg = function (a) {
	return {$: 'ToolTimestampMsg', a: a};
};
var $author$project$ViewPureStyles$noTrackMessage = function (location) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$spacing(5),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A3($author$project$Tools$I18N$text, location, 'tools', 'notrack')
			]));
};
var $author$project$Tools$BendSmoother$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$BendSmootherOptions$SmoothPoint = {$: 'SmoothPoint'};
var $author$project$Tools$BendSmoother$ApplySmoothBend = {$: 'ApplySmoothBend'};
var $author$project$Tools$BendSmoother$SetBendTrackPointSpacing = function (a) {
	return {$: 'SetBendTrackPointSpacing', a: a};
};
var $author$project$ViewPureStyles$commonShortHorizontalSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(20)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $mdgriffith$elm_ui$Element$Input$defaultThumb = $mdgriffith$elm_ui$Element$Input$Thumb(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(16)),
			$mdgriffith$elm_ui$Element$Border$rounded(8),
			$mdgriffith$elm_ui$Element$Border$width(1),
			$mdgriffith$elm_ui$Element$Border$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
			$mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
		]));
var $mdgriffith$elm_ui$Element$Input$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelBelow = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Below);
var $author$project$Tools$BendSmoother$bendSmoothnessSlider = F4(
	function (location, imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$BendSmoother$toolId, 'spacing'),
							_List_fromArray(
								[
									A2(
									$author$project$UtilsForViews$showShortMeasure,
									imperial,
									$ianmackenzie$elm_units$Length$meters(options.bendTrackPointSpacing))
								])))),
				max: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(30.0) : $ianmackenzie$elm_units$Length$meters(10.0)),
				min: $ianmackenzie$elm_units$Length$inMeters(
					imperial ? $ianmackenzie$elm_units$Length$feet(3.0) : $ianmackenzie$elm_units$Length$meters(1.0)),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BendSmoother$SetBendTrackPointSpacing),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.bendTrackPointSpacing
			});
	});
var $author$project$Tools$BendSmoother$viewBendControls = F5(
	function (location, imperial, wrapper, options, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$BendSmoother$toolId);
		var fixBendButton = function (smooth) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: function () {
						if (smooth.$ === 'Just') {
							var isSmooth = smooth.a;
							return A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$BendSmoother$toolId, 'smooth'),
											_List_fromArray(
												[
													A2(
													$author$project$UtilsForViews$showShortMeasure,
													imperial,
													$ianmackenzie$elm_units$Length$meters(isSmooth.radius))
												])))
									]));
						} else {
							return i18n('none');
						}
					}(),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$BendSmoother$ApplySmoothBend))
				});
		};
		if (track.$ === 'Just') {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A4($author$project$Tools$BendSmoother$bendSmoothnessSlider, location, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixBendButton(options.smoothedBend))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$BendSmoother$SetSegments = function (a) {
	return {$: 'SetSegments', a: a};
};
var $author$project$Tools$BendSmoother$segmentSlider = F3(
	function (imperial, options, wrap) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						'Segments: ' + $elm$core$String$fromInt(options.segments))),
				max: 7.0,
				min: 1.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BendSmoother$SetSegments),
					$elm$core$Basics$round),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.segments
			});
	});
var $author$project$Tools$BendSmoother$viewPointControls = F5(
	function (location, imperial, wrapper, options, track) {
		if (track.$ === 'Just') {
			var fixButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: $mdgriffith$elm_ui$Element$text('Smooth points'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$BendSmoother$ApplySmoothBend))
				});
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A3($author$project$Tools$BendSmoother$segmentSlider, imperial, options, wrapper)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$BendSmoother$view = F5(
	function (location, imperial, wrapper, options, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$BendSmoother$toolId);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$Input$radioRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('mode'),
							onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$BendSmoother$SetMode),
							options: _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									$author$project$Tools$BendSmootherOptions$SmoothBend,
									i18n('Bend')),
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									$author$project$Tools$BendSmootherOptions$SmoothPoint,
									i18n('Point'))
								]),
							selected: $elm$core$Maybe$Just(options.mode)
						})),
					function () {
					var _v0 = options.mode;
					if (_v0.$ === 'SmoothBend') {
						return A5($author$project$Tools$BendSmoother$viewBendControls, location, imperial, wrapper, options, track);
					} else {
						return A5($author$project$Tools$BendSmoother$viewPointControls, location, imperial, wrapper, options, track);
					}
				}()
				]));
	});
var $author$project$Tools$BezierSplines$BezierApplyWithOptions = {$: 'BezierApplyWithOptions'};
var $author$project$Tools$BezierSplines$SetBezierStyle = function (a) {
	return {$: 'SetBezierStyle', a: a};
};
var $author$project$Tools$BezierSplines$SetBezierTension = function (a) {
	return {$: 'SetBezierTension', a: a};
};
var $author$project$Tools$BezierSplines$SetBezierTolerance = function (a) {
	return {$: 'SetBezierTolerance', a: a};
};
var $author$project$Tools$BezierOptions$ThroughExisting = {$: 'ThroughExisting'};
var $author$project$Tools$BezierSplines$view = F4(
	function (location, wrap, options, track) {
		var sliders = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$BezierSplines$toolId, 'tension'),
									_List_fromArray(
										[
											$author$project$UtilsForViews$showDecimal2(options.bezierTension)
										])))),
						max: 1.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierTension),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.bezierTension
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$BezierSplines$toolId, 'tolerance'),
									_List_fromArray(
										[
											$author$project$UtilsForViews$showDecimal2(options.bezierTolerance)
										])))),
						max: 10.0,
						min: 1.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierTolerance),
						step: $elm$core$Maybe$Just(0.5),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.bezierTolerance
					})
				]));
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$BezierSplines$toolId);
		var modeChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Style'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$BezierSplines$SetBezierStyle),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$ThroughExisting,
						i18n('through')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$BezierOptions$Approximated,
						i18n('approx'))
					]),
				selected: $elm$core$Maybe$Just(options.bezierStyle)
			});
		var extent = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _List_fromArray(
				[
					i18n('whole')
				]) : _List_fromArray(
				[
					i18n('part')
				]));
		var actionButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$author$project$ViewPureStyles$neatToolsBorder),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n('apply')
							])),
					onPress: $elm$core$Maybe$Just(
						wrap($author$project$Tools$BezierSplines$BezierApplyWithOptions))
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					sliders),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					modeChoice),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					extent),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					actionButton)
				]));
	});
var $author$project$Tools$CentroidAverage$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$CentroidAverage$SetWeighting = function (a) {
	return {$: 'SetWeighting', a: a};
};
var $author$project$Tools$CentroidAverage$ToggleAltitude = function (a) {
	return {$: 'ToggleAltitude', a: a};
};
var $author$project$Tools$CentroidAverage$TogglePosition = function (a) {
	return {$: 'TogglePosition', a: a};
};
var $mdgriffith$elm_ui$Element$Input$checkbox = F2(
	function (attrs, _v0) {
		var onChange = _v0.onChange;
		var checked = _v0.checked;
		var icon = _v0.icon;
		var label = _v0.label;
		var attributes = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Events$onClick(
						onChange(!checked))),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$Input$onKeyLookup(
					function (code) {
						return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(
							onChange(!checked)) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(
							onChange(!checked)) : $elm$core$Maybe$Nothing);
					}),
					$mdgriffith$elm_ui$Element$Input$tabindex(0),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			attrs);
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						A2(
							$elm$html$Html$Attributes$attribute,
							'aria-checked',
							checked ? 'true' : 'false')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(label),
						attributes))),
			label,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
					]),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[
							icon(checked)
						]))));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$Input$defaultCheckbox = function (checked) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable'),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$size(9),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Border$rounded(3),
				$mdgriffith$elm_ui$Element$Border$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : A3($mdgriffith$elm_ui$Element$rgb, 211 / 255, 211 / 255, 211 / 255)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 1,
					color: checked ? A4($mdgriffith$elm_ui$Element$rgba, 238 / 255, 238 / 255, 238 / 255, 0) : A3($mdgriffith$elm_ui$Element$rgb, 238 / 255, 238 / 255, 238 / 255),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : $mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$Border$width(
				checked ? 0 : 1),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(6)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(9)),
							$mdgriffith$elm_ui$Element$rotate(
							$elm$core$Basics$degrees(-45)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$moveUp(1),
							$mdgriffith$elm_ui$Element$transparent(!checked),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 2, left: 2, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$none))
			]),
		$mdgriffith$elm_ui$Element$none);
};
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $mdgriffith$elm_ui$Element$Input$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Element$Input$labelRight = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnRight);
var $author$project$Tools$CentroidAverage$view = F4(
	function (location, wrap, options, track) {
		var sliders = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$CentroidAverage$toolId, 'weight'),
									_List_fromArray(
										[
											$author$project$UtilsForViews$showDecimal2(options.weighting)
										])))),
						max: 1.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$SetWeighting),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.weighting
					})
				]));
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$CentroidAverage$toolId);
		var modeChoices = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.applyToPosition,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_Nil,
							i18n('Position')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$TogglePosition)
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$checkbox,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					{
						checked: options.applyToAltitude,
						icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelRight,
							_List_Nil,
							i18n('Altitude')),
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$CentroidAverage$ToggleAltitude)
					})
				]));
		var extent = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Applies to whole track')
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Applies between markers')
				]));
		var actionButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$author$project$ViewPureStyles$neatToolsBorder),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n('Apply')
							])),
					onPress: $elm$core$Maybe$Just(
						wrap($author$project$Tools$CentroidAverage$ApplyWithOptions))
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					sliders),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					modeChoices),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					extent),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					actionButton)
				]));
	});
var $author$project$Tools$CurveFormer$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$CurveFormer$DraggerReset = {$: 'DraggerReset'};
var $author$project$Tools$CurveFormerOptions$Piecewise = {$: 'Piecewise'};
var $author$project$Tools$CurveFormer$SetDiscWidth = function (a) {
	return {$: 'SetDiscWidth', a: a};
};
var $author$project$Tools$CurveFormer$SetGradientSmoothingMode = function (a) {
	return {$: 'SetGradientSmoothingMode', a: a};
};
var $author$project$Tools$CurveFormer$SetPushRadius = function (a) {
	return {$: 'SetPushRadius', a: a};
};
var $author$project$Tools$CurveFormer$SetSpacing = function (a) {
	return {$: 'SetSpacing', a: a};
};
var $author$project$Tools$CurveFormer$SetTransitionRadius = function (a) {
	return {$: 'SetTransitionRadius', a: a};
};
var $author$project$Tools$CurveFormer$ToggleUsePullRadius = function (a) {
	return {$: 'ToggleUsePullRadius', a: a};
};
var $author$project$Tools$CurveFormer$DraggerGrab = function (a) {
	return {$: 'DraggerGrab', a: a};
};
var $author$project$Tools$CurveFormer$DraggerMove = function (a) {
	return {$: 'DraggerMove', a: a};
};
var $author$project$Tools$CurveFormer$DraggerRelease = function (a) {
	return {$: 'DraggerRelease', a: a};
};
var $author$project$Tools$CurveFormer$controlSvgRadius = 100;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions = {preventDefault: true, stopPropagation: false};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event = F5(
	function (pointerType, pointer, pointerId, isPrimary, contactDetails) {
		return {contactDetails: contactDetails, isPrimary: isPrimary, pointer: pointer, pointerId: pointerId, pointerType: pointerType};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails = F5(
	function (width, height, pressure, tiltX, tiltY) {
		return {height: height, pressure: pressure, tiltX: tiltX, tiltY: tiltY, width: width};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails,
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pressure', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType = {$: 'MouseType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType = {$: 'PenType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType = {$: 'TouchType'};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType = function (str) {
	switch (str) {
		case 'pen':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType;
		case 'touch':
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType;
		default:
			return $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder = A2($elm$json$Json$Decode$map, $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType, $elm$json$Json$Decode$string);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event,
	A2($elm$json$Json$Decode$field, 'pointerType', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'pointerId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'isPrimary', $elm$json$Json$Decode$bool),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						message: tag(ev),
						preventDefault: options.preventDefault,
						stopPropagation: options.stopPropagation
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointerdown', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onMove = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointermove', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onUp = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onWithOptions, 'pointerup', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$defaultOptions);
var $ianmackenzie$elm_geometry$Point2d$fromMeters = function (givenCoordinates) {
	return $ianmackenzie$elm_geometry$Geometry$Types$Point2d(givenCoordinates);
};
var $author$project$Tools$CurveFormer$point = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $ianmackenzie$elm_geometry$Point2d$fromMeters(
		{x: x, y: y});
};
var $author$project$Tools$CurveFormer$twoWayDragControl = F2(
	function (options, wrapper) {
		var clickableContainer = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$mdgriffith$elm_ui$Element$el(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerGrab, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onMove(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerMove, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onUp(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$CurveFormer$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$CurveFormer$DraggerRelease, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'touch-action', 'none')),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$alignLeft
						])),
				$mdgriffith$elm_ui$Element$html),
			$elm$svg$Svg$svg(
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$viewBox('-150 -150 300 300'),
						$elm$svg$Svg$Attributes$width('140px'),
						$elm$svg$Svg$Attributes$height('140px')
					])));
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$components(options.vector);
		var x = _v0.a;
		var y = _v0.b;
		var _v1 = _Utils_Tuple2(
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(x)),
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(y)));
		var xPoint = _v1.a;
		var yPoint = _v1.b;
		return clickableContainer(
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$circle,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$cx('0'),
							$elm$svg$Svg$Attributes$cy('0'),
							$elm$svg$Svg$Attributes$r(
							$elm$core$String$fromInt($author$project$Tools$CurveFormer$controlSvgRadius)),
							$elm$svg$Svg$Attributes$stroke('black'),
							$elm$svg$Svg$Attributes$strokeWidth('1'),
							$elm$svg$Svg$Attributes$fill('darkslategrey')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$line,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$x1('0'),
							$elm$svg$Svg$Attributes$y1('0'),
							$elm$svg$Svg$Attributes$x2(xPoint),
							$elm$svg$Svg$Attributes$y2(yPoint),
							$elm$svg$Svg$Attributes$stroke('orange'),
							$elm$svg$Svg$Attributes$strokeWidth('10'),
							$elm$svg$Svg$Attributes$strokeLinecap('round')
						]),
					_List_Nil)
				]));
	});
var $author$project$Tools$CurveFormer$view = F5(
	function (location, imperial, wrapper, options, track) {
		var squared = function (x) {
			return x * x;
		};
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$CurveFormer$toolId);
		var showModeSelection = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: _Utils_eq(options.smoothGradient, $author$project$Tools$CurveFormerOptions$Holistic),
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					i18n('gradient')),
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetGradientSmoothingMode),
					function (check) {
						return check ? $author$project$Tools$CurveFormerOptions$Holistic : $author$project$Tools$CurveFormerOptions$Piecewise;
					})
			});
		if (track.$ === 'Just') {
			var showTransitionRadiusSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$CurveFormer$toolId, 'join'),
								_List_fromArray(
									[
										A2($author$project$UtilsForViews$showShortMeasure, imperial, options.transitionRadius)
									])))),
					max: 10.0,
					min: 2.0,
					onChange: A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetTransitionRadius),
						squared),
					step: $elm$core$Maybe$Nothing,
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $elm$core$Basics$sqrt(
						$ianmackenzie$elm_units$Length$inMeters(options.transitionRadius))
				});
			var showSpacingSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$CurveFormer$toolId, 'spacing'),
								_List_fromArray(
									[
										A2($author$project$UtilsForViews$showShortMeasure, imperial, options.spacing)
									])))),
					max: 10.0,
					min: 2.0,
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetSpacing),
					step: $elm$core$Maybe$Nothing,
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inMeters(options.spacing)
				});
			var showPushRadiusSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$CurveFormer$toolId, 'radius'),
								_List_fromArray(
									[
										A2($author$project$UtilsForViews$showShortMeasure, imperial, options.pushRadius)
									])))),
					max: 10.0,
					min: 2.0,
					onChange: A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetPushRadius),
						squared),
					step: $elm$core$Maybe$Nothing,
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $elm$core$Basics$sqrt(
						$ianmackenzie$elm_units$Length$inMeters(options.pushRadius))
				});
			var showPullSelection = A2(
				$mdgriffith$elm_ui$Element$Input$checkbox,
				_List_Nil,
				{
					checked: options.usePullRadius,
					icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelRight,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerY]),
						i18n('outliers')),
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$ToggleUsePullRadius)
				});
			var showActionButtons = A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$ViewPureStyles$neatToolsBorder,
						{
							label: i18n('Reset'),
							onPress: $elm$core$Maybe$Just(
								wrapper($author$project$Tools$CurveFormer$DraggerReset))
						}),
						function () {
						var _v1 = _Utils_Tuple2(
							$elm$core$List$length(options.newTrackPoints) >= 3,
							options.pointsAreContiguous);
						if (_v1.b) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$ViewPureStyles$neatToolsBorder,
								{
									label: i18n('Apply'),
									onPress: $elm$core$Maybe$Just(
										wrapper($author$project$Tools$CurveFormer$ApplyWithOptions))
								});
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$author$project$ViewPureStyles$subtleToolStyles),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[
												i18n('none')
											])),
									onPress: $elm$core$Maybe$Nothing
								});
						}
					}()
					]));
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						_Utils_update(
							$author$project$ViewPureStyles$edges,
							{right: 10})),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2($author$project$Tools$CurveFormer$twoWayDragControl, options, wrapper),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignLeft,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										showPushRadiusSlider,
										showTransitionRadiusSlider,
										showSpacingSlider,
										showPullSelection,
										options.usePullRadius ? A2(
										$mdgriffith$elm_ui$Element$Input$slider,
										$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
										{
											label: A2(
												$mdgriffith$elm_ui$Element$Input$labelBelow,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text(
													A2(
														$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
														A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$CurveFormer$toolId, 'join'),
														_List_fromArray(
															[
																A2($author$project$UtilsForViews$showShortMeasure, imperial, options.pullRadius)
															])))),
											max: 40.0,
											min: 1.0,
											onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$CurveFormer$SetDiscWidth),
											step: $elm$core$Maybe$Nothing,
											thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
											value: $ianmackenzie$elm_units$Length$inMeters(
												A2($ianmackenzie$elm_units$Quantity$minus, options.pushRadius, options.pullRadius))
										}) : $mdgriffith$elm_ui$Element$none
									])),
								showModeSelection,
								showActionButtons
							]))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$DeletePoints$DeletePointOrPoints = {$: 'DeletePointOrPoints'};
var $author$project$Tools$DeletePoints$view = F4(
	function (location, msgWrapper, options, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$DeletePoints$toolId);
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var fromStart = _v0.a;
		var fromEnd = _v0.b;
		var wholeTrackIsSelected = (!fromStart) && (!fromEnd);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$padding(4),
						$mdgriffith$elm_ui$Element$spacing(4),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(50))
					]),
				wholeTrackIsSelected ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					i18n('sorry')) : A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$neatToolsBorder),
					{
						label: options.singlePoint ? i18n('single') : i18n('many'),
						onPress: $elm$core$Maybe$Just(
							msgWrapper($author$project$Tools$DeletePoints$DeletePointOrPoints))
					})));
	});
var $author$project$Tools$DirectionChanges$Autofix = {$: 'Autofix'};
var $author$project$Tools$DirectionChanges$DirectionChangeWithRadius = {$: 'DirectionChangeWithRadius'};
var $author$project$Tools$DirectionChanges$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$DirectionChanges$NudgeOne = {$: 'NudgeOne'};
var $author$project$Tools$DirectionChanges$ResultList = {$: 'ResultList'};
var $author$project$Tools$DirectionChanges$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$Tools$DirectionChanges$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$DirectionChanges$SetRadius = function (a) {
	return {$: 'SetRadius', a: a};
};
var $author$project$Tools$DirectionChanges$SetResultMode = function (a) {
	return {$: 'SetResultMode', a: a};
};
var $author$project$Tools$DirectionChanges$SetThreshold = function (a) {
	return {$: 'SetThreshold', a: a};
};
var $author$project$Tools$DirectionChanges$ViewNext = {$: 'ViewNext'};
var $author$project$Tools$DirectionChanges$ViewPrevious = {$: 'ViewPrevious'};
var $author$project$ToolTip$buttonStylesWithTooltip = F2(
	function (usher, tooltip_) {
		return A2(
			$elm$core$List$cons,
			A2(
				$author$project$ToolTip$tooltip,
				usher,
				$author$project$ToolTip$myTooltip(tooltip_)),
			$author$project$ViewPureStyles$neatToolsBorder);
	});
var $feathericons$elm_feather$FeatherIcons$chevronLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('15 18 9 12 15 6')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('9 18 15 12 9 6')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$info = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'info',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('16'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('8'),
					$elm$svg$Svg$Attributes$x2('12.01'),
					$elm$svg$Svg$Attributes$y2('8')
				]),
			_List_Nil)
		]));
var $author$project$ViewPureStyles$infoButton = function (onPress) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A3(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
					'click',
					$author$project$ViewPureStyles$stopProp,
					$elm$core$Basics$always(onPress)))
			]),
		{
			label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$info),
			onPress: $elm$core$Maybe$Just(onPress)
		});
};
var $feathericons$elm_feather$FeatherIcons$mousePointer = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'mouse-pointer',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M13 13l6 6')
				]),
			_List_Nil)
		]));
var $author$project$ViewPureStyles$shortSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(24)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $author$project$UtilsForViews$showDecimal0 = function (x) {
	var locale = _Utils_update(
		$cuducos$elm_format_number$FormatNumber$Locales$usLocale,
		{
			decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(0),
			negativePrefix: '-',
			thousandSeparator: ''
		});
	return A2($cuducos$elm_format_number$FormatNumber$format, locale, x);
};
var $author$project$UtilsForViews$showAngle = function (angle) {
	return $author$project$UtilsForViews$showDecimal0(
		$ianmackenzie$elm_units$Angle$inDegrees(angle));
};
var $author$project$Tools$DirectionChanges$view = F5(
	function (location, imperial, msgWrapper, options, isTrack) {
		var wrappedRowStyle = function (breaches) {
			return _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(
						A3(
							$elm$core$Basics$clamp,
							32,
							300,
							(($elm$core$List$length(breaches) / 3) | 0) * 24))),
					A2($mdgriffith$elm_ui$Element$spacingXY, 6, 6),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$padding(6)
				]);
		};
		var singlePointLinkButton = F2(
			function (track, point) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, $author$project$ViewPureStyles$neatToolsBorder),
					{
						label: $mdgriffith$elm_ui$Element$text(
							A2(
								$author$project$UtilsForViews$showLongMeasure,
								imperial,
								A2($author$project$DomainModel$distanceFromIndex, point, track))),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$Tools$DirectionChanges$SetCurrentPosition(point)))
					});
			});
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$DirectionChanges$toolId);
		var commonButtons = function (current) {
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[
						$author$project$ViewPureStyles$infoButton(
						msgWrapper(
							A2($author$project$Tools$DirectionChanges$DisplayInfo, 'bends', 'locate'))),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2(
							$author$project$ToolTip$buttonStylesWithTooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, 'prev')),
						{
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$Tools$DirectionChanges$ViewPrevious))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2(
							$author$project$ToolTip$buttonStylesWithTooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, 'this')),
						{
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$mousePointer),
							onPress: $elm$core$Maybe$Just(
								msgWrapper(
									$author$project$Tools$DirectionChanges$SetCurrentPosition(current)))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2(
							$author$project$ToolTip$buttonStylesWithTooltip,
							$mdgriffith$elm_ui$Element$below,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, 'next')),
						{
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$Tools$DirectionChanges$ViewNext))
						})
					]));
		};
		var singlePointResultsNavigation = function (breaches) {
			if (!breaches.b) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					i18n('none'));
			} else {
				var _v15 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(
						0,
						$ianmackenzie$elm_units$Angle$degrees(0)),
					A2($elm_community$list_extra$List$Extra$getAt, options.currentPointBreach, options.singlePointBreaches));
				var position = _v15.a;
				var turn = _v15.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, '.of.'),
									_List_fromArray(
										[
											$elm$core$String$fromInt(options.currentPointBreach + 1),
											$elm$core$String$fromInt(
											$elm$core$List$length(options.singlePointBreaches)),
											$author$project$UtilsForViews$showAngle(turn)
										])))),
							commonButtons(position)
						]));
			}
		};
		var bendResultsNavigation = function (breaches) {
			if (!breaches.b) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					i18n('none'));
			} else {
				var _v13 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(
						_List_fromArray(
							[0]),
						$ianmackenzie$elm_units$Quantity$zero),
					A2($elm_community$list_extra$List$Extra$getAt, options.currentBendBreach, options.bendBreaches));
				var window = _v13.a;
				var radius = _v13.b;
				var at = A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$List$head(window));
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, '.radius.'),
									_List_fromArray(
										[
											$elm$core$String$fromInt(options.currentBendBreach + 1),
											$elm$core$String$fromInt(
											$elm$core$List$length(options.bendBreaches)),
											A2(
											$author$project$UtilsForViews$showShortMeasure,
											imperial,
											$ianmackenzie$elm_units$Quantity$abs(radius))
										])))),
							commonButtons(at)
						]));
			}
		};
		var bendLinkButton = F2(
			function (track, _v11) {
				var window = _v11.a;
				var _v10 = $elm$core$List$head(window);
				if (_v10.$ === 'Just') {
					var point = _v10.a;
					return A2(singlePointLinkButton, track, point);
				} else {
					return $mdgriffith$elm_ui$Element$none;
				}
			});
		if (isTrack.$ === 'Just') {
			var track = isTrack.a;
			var resultModeSelection = A2(
				$mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Results mode'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$DirectionChanges$SetResultMode),
					options: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$DirectionChanges$ResultNavigation,
							i18n('summary')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$DirectionChanges$ResultList,
							i18n('list'))
						]),
					selected: $elm$core$Maybe$Just(options.resultMode)
				});
			var modeSelection = A2(
				$mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Mode'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$DirectionChanges$SetMode),
					options: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$DirectionChanges$DirectionChangeAbrupt,
							i18n('usepoint')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$DirectionChanges$DirectionChangeWithRadius,
							i18n('useradius'))
						]),
					selected: $elm$core$Maybe$Just(options.mode)
				});
			var bendButtonFix = (_Utils_eq(options.bendBreaches, _List_Nil) || _Utils_eq(options.mode, $author$project$Tools$DirectionChanges$DirectionChangeAbrupt)) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(4)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$none,
						$author$project$ViewPureStyles$infoButton(
						msgWrapper(
							A2($author$project$Tools$DirectionChanges$DisplayInfo, 'bends', 'widen'))),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, $author$project$ViewPureStyles$neatToolsBorder),
						{
							label: i18n('adjust'),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$Tools$DirectionChanges$NudgeOne))
						})
					]));
			var autofixButton = (_Utils_eq(options.singlePointBreaches, _List_Nil) || _Utils_eq(options.mode, $author$project$Tools$DirectionChanges$DirectionChangeWithRadius)) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(4)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$none,
						$author$project$ViewPureStyles$infoButton(
						msgWrapper(
							A2($author$project$Tools$DirectionChanges$DisplayInfo, 'bends', 'autofix'))),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, $author$project$ViewPureStyles$neatToolsBorder),
						{
							label: i18n('smooth'),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$Tools$DirectionChanges$Autofix))
						})
					]));
			var angleSelection = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$shortSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, 'change'),
								_List_fromArray(
									[
										$elm$core$String$fromInt(
										$elm$core$Basics$round(
											$ianmackenzie$elm_units$Angle$inDegrees(options.threshold)))
									])))),
					max: 170,
					min: 15,
					onChange: A2(
						$elm$core$Basics$composeR,
						$ianmackenzie$elm_units$Angle$degrees,
						A2($elm$core$Basics$composeR, $author$project$Tools$DirectionChanges$SetThreshold, msgWrapper)),
					step: $elm$core$Maybe$Just(1),
					thumb: $author$project$ViewPureStyles$sliderThumb,
					value: $ianmackenzie$elm_units$Angle$inDegrees(options.threshold)
				});
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(6),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							modeSelection,
							angleSelection,
							_Utils_eq(options.mode, $author$project$Tools$DirectionChanges$DirectionChangeWithRadius) ? A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							$author$project$ViewPureStyles$shortSliderStyles,
							{
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelBelow,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$DirectionChanges$toolId, 'radius'),
											_List_fromArray(
												[
													A2($author$project$UtilsForViews$showShortMeasure, imperial, options.radius)
												])))),
								max: 100.0,
								min: 4.0,
								onChange: A2(
									$elm$core$Basics$composeR,
									$ianmackenzie$elm_units$Length$meters,
									A2($elm$core$Basics$composeR, $author$project$Tools$DirectionChanges$SetRadius, msgWrapper)),
								step: $elm$core$Maybe$Just(1),
								thumb: $author$project$ViewPureStyles$sliderThumb,
								value: $ianmackenzie$elm_units$Length$inMeters(options.radius)
							}) : $mdgriffith$elm_ui$Element$none,
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							autofixButton),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							bendButtonFix),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							resultModeSelection),
							function () {
							var _v1 = _Utils_Tuple2(options.mode, options.resultMode);
							if (_v1.a.$ === 'DirectionChangeAbrupt') {
								if (_v1.b.$ === 'ResultNavigation') {
									var _v2 = _v1.a;
									var _v3 = _v1.b;
									return singlePointResultsNavigation(options.singlePointBreaches);
								} else {
									var _v4 = _v1.a;
									var _v5 = _v1.b;
									return A2(
										$mdgriffith$elm_ui$Element$wrappedRow,
										wrappedRowStyle(options.singlePointBreaches),
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												$elm$core$Tuple$first,
												singlePointLinkButton(track.trackTree)),
											options.singlePointBreaches));
								}
							} else {
								if (_v1.b.$ === 'ResultNavigation') {
									var _v6 = _v1.a;
									var _v7 = _v1.b;
									return bendResultsNavigation(options.bendBreaches);
								} else {
									var _v8 = _v1.a;
									var _v9 = _v1.b;
									return A2(
										$mdgriffith$elm_ui$Element$wrappedRow,
										wrappedRowStyle(options.bendBreaches),
										A2(
											$elm$core$List$map,
											bendLinkButton(track.trackTree),
											options.bendBreaches));
								}
							}
						}()
						])));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$DisplaySettings$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$LandUseDataTypes$LandUsePlanar = {$: 'LandUsePlanar'};
var $author$project$LandUseDataTypes$LandUseSloped = {$: 'LandUseSloped'};
var $author$project$Tools$DisplaySettings$SetCentreLine = function (a) {
	return {$: 'SetCentreLine', a: a};
};
var $author$project$Tools$DisplaySettings$SetCurtainStyle = function (a) {
	return {$: 'SetCurtainStyle', a: a};
};
var $author$project$Tools$DisplaySettings$SetGroundPlane = function (a) {
	return {$: 'SetGroundPlane', a: a};
};
var $author$project$Tools$DisplaySettings$SetLandUse = function (a) {
	return {$: 'SetLandUse', a: a};
};
var $author$project$Tools$DisplaySettings$SetPlaceNames = function (a) {
	return {$: 'SetPlaceNames', a: a};
};
var $author$project$Tools$DisplaySettings$SetRoadSurface = function (a) {
	return {$: 'SetRoadSurface', a: a};
};
var $author$project$Tools$DisplaySettings$SetTerrainFineness = function (a) {
	return {$: 'SetTerrainFineness', a: a};
};
var $author$project$Tools$DisplaySettings$view = F3(
	function (location, wrap, options) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$DisplaySettings$toolId);
		var landUseChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(4)
							]),
						_List_fromArray(
							[
								i18n('Land Use'),
								$author$project$ViewPureStyles$infoButton(
								wrap(
									A2($author$project$Tools$DisplaySettings$DisplayInfo, 'display', 'landuse')))
							]))),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetLandUse),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$LandUseDataTypes$LandUseHidden,
						i18n('None')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$LandUseDataTypes$LandUsePlanar,
						i18n('Flat')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$LandUseDataTypes$LandUseSloped,
						i18n('3D'))
					]),
				selected: $elm$core$Maybe$Just(options.landUse)
			});
		var curtainChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					i18n('Curtain')),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetCurtainStyle),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$NoCurtain,
						i18n('None')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$PlainCurtain,
						i18n('Plain')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$DisplaySettingsOptions$PastelCurtain,
						i18n('Coloured'))
					]),
				selected: $elm$core$Maybe$Just(options.curtainStyle)
			});
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					curtainChoice,
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(5),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								checked: options.roadSurface,
								icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelRight,
									_List_Nil,
									i18n('road')),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetRoadSurface)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(5),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								checked: options.groundPlane,
								icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelRight,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Ground')),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetGroundPlane)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(5),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								checked: options.centreLine,
								icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelRight,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Centre line')),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetCentreLine)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(5),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								checked: options.placeNames,
								icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelRight,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Place names')),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetPlaceNames)
							})
						])),
					landUseChoice,
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							(options.terrainFineness === 0.0) ? i18n('noterrain') : i18n('quality')),
						max: 3.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$DisplaySettings$SetTerrainFineness),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.terrainFineness
					})
				]));
	});
var $author$project$Tools$Essentials$DropMarker = {$: 'DropMarker'};
var $author$project$Tools$Essentials$LiftMarker = {$: 'LiftMarker'};
var $author$project$Tools$Essentials$MarkerBackwardOne = {$: 'MarkerBackwardOne'};
var $author$project$Tools$Essentials$MarkerForwardOne = {$: 'MarkerForwardOne'};
var $author$project$Tools$Essentials$PointerBackwardOne = {$: 'PointerBackwardOne'};
var $author$project$Tools$Essentials$PointerFastForward = {$: 'PointerFastForward'};
var $author$project$Tools$Essentials$PointerForwardOne = {$: 'PointerForwardOne'};
var $author$project$Tools$Essentials$PointerRewind = {$: 'PointerRewind'};
var $feathericons$elm_feather$FeatherIcons$chevronsLeft = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-left',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('11 17 6 12 11 7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('18 17 13 12 18 7')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronsRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('13 17 18 12 13 7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('6 17 11 12 6 7')
				]),
			_List_Nil)
		]));
var $author$project$Tools$Essentials$positionDescription = F4(
	function (location, imperial, pos, track) {
		var localString = A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Essentials$toolId, 'point');
		return A2(
			$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
			localString,
			_List_fromArray(
				[
					$elm$core$String$fromInt(pos),
					A2(
					$author$project$UtilsForViews$showLongMeasure,
					imperial,
					A2($author$project$DomainModel$distanceFromIndex, pos, track))
				]));
	});
var $smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly = A3($mdgriffith$elm_ui$Element$rgb255, 240, 147, 43);
var $author$project$Tools$Essentials$viewPointers = F5(
	function (location, imperial, msgWrapper, options, track) {
		var purpleStyle = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
				$mdgriffith$elm_ui$Element$Border$rounded(4),
				$mdgriffith$elm_ui$Element$Border$width(4),
				$mdgriffith$elm_ui$Element$padding(6),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$centerX
			]);
		var orangeStyle = _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
				$mdgriffith$elm_ui$Element$Border$rounded(4),
				$mdgriffith$elm_ui$Element$Border$width(4),
				$mdgriffith$elm_ui$Element$padding(6),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$centerX
			]);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(4),
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text(
						A4($author$project$Tools$Essentials$positionDescription, location, imperial, options.orange, track.trackTree))),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							orangeStyle,
							{
								label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronsLeft),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$Tools$Essentials$PointerRewind))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							orangeStyle,
							{
								label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$Tools$Essentials$PointerBackwardOne))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							orangeStyle,
							{
								label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$Tools$Essentials$PointerForwardOne))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							orangeStyle,
							{
								label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronsRight),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$Tools$Essentials$PointerFastForward))
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					function () {
						var _v0 = options.purple;
						if (_v0.$ === 'Just') {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
										$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(34)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple),
											$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
											$mdgriffith$elm_ui$Element$Border$rounded(4),
											$mdgriffith$elm_ui$Element$Border$width(2),
											$mdgriffith$elm_ui$Element$padding(8),
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$centerX
										]),
									{
										label: A3($author$project$Tools$I18N$text, location, $author$project$Tools$Essentials$toolId, 'lift'),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Essentials$LiftMarker))
									}));
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(34)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								A2(
									$mdgriffith$elm_ui$Element$Input$button,
									purpleStyle,
									{
										label: A3($author$project$Tools$I18N$text, location, $author$project$Tools$Essentials$toolId, 'drop'),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Essentials$DropMarker))
									}));
						}
					}()),
					function () {
					var _v1 = options.purple;
					if (_v1.$ === 'Just') {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$blurple)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									purpleStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Essentials$MarkerBackwardOne))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									purpleStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Essentials$MarkerForwardOne))
									})
								]));
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(10),
									$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									purpleStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
										onPress: $elm$core$Maybe$Nothing
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									purpleStyle,
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
										onPress: $elm$core$Maybe$Nothing
									})
								]));
					}
				}(),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					function () {
						var _v2 = options.purple;
						if (_v2.$ === 'Just') {
							var something = _v2.a;
							return $mdgriffith$elm_ui$Element$text(
								A4($author$project$Tools$Essentials$positionDescription, location, imperial, something, track.trackTree));
						} else {
							return A3($author$project$Tools$I18N$text, location, $author$project$Tools$Essentials$toolId, 'note');
						}
					}())
				]));
	});
var $author$project$Tools$Essentials$Redo = {$: 'Redo'};
var $author$project$Tools$Essentials$Undo = {$: 'Undo'};
var $author$project$Actions$actionTextForUndo = F2(
	function (location, action) {
		return A3(
			$author$project$Tools$I18N$localisedString,
			location,
			'action',
			function () {
				switch (action.$) {
					case 'DeletePointOrPoints':
						return 'delete1';
					case 'BezierApplyWithOptions':
						return 'spline';
					case 'CentroidAverageApplyWithOptions':
						return 'centroid';
					case 'CurveFormerApplyWithOptions':
						return 'radius';
					case 'BendSmootherApplyWithOptions':
						return 'arc';
					case 'PointMovedOnMap':
						return 'map';
					case 'NudgeApplyWithOptions':
						return 'nudge';
					case 'OutAndBackApplyWithOptions':
						return 'outback';
					case 'ApplySimplify':
						return 'simplify';
					case 'ApplyInterpolateWithOptions':
						return 'insert';
					case 'OneClickQuickFix':
						return '1CQF';
					case 'ApplySmoothProfile':
						return 'profile';
					case 'ApplyRotateAndScale':
						return 'scale';
					case 'ApplyRecentre':
						return 'move';
					case 'ApplyMapElevations':
						return 'elevations';
					case 'AddFullTrackToMapForElevations':
						return 'elevations';
					case 'PasteStravaSegment':
						return 'segment';
					case 'MoveAndStretchWithOptions':
						return 'stretch';
					case 'CloseLoopWithOptions':
						return 'close';
					case 'ReverseTrack':
						return 'reverse';
					case 'MoveStartPoint':
						return 'start';
					case 'AddRiderPens':
						return 'pens';
					case 'ParseAndAppend':
						return 'append';
					case 'Straighten':
						return 'straighten';
					case 'Autofix':
						return 'autofix';
					case 'MakeRouteFromGraph':
						return 'route';
					case 'WidenBend':
						return 'widen';
					case 'SmartSmootherApplyWithOptions':
						return 'smart';
					case 'CombineNearbyPoints':
						return 'combine';
					case 'AdjustTimes':
						return 'adjusttimes';
					case 'SetTimeTicks':
						return 'settimeticks';
					case 'TimeDoubling':
						return 'double';
					case 'UsePhysicsModel':
						return 'physics';
					default:
						return 'unknown';
				}
			}());
	});
var $author$project$Tools$Essentials$viewUndoRedo = F3(
	function (location, msgWrapper, track) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(20),
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						function () {
						var _v0 = track.undos;
						if (!_v0.b) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$ViewPureStyles$neatToolsBorder,
								{
									label: A3($author$project$Tools$I18N$text, location, $author$project$Tools$Essentials$toolId, 'noundo'),
									onPress: $elm$core$Maybe$Nothing
								});
						} else {
							var undo = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Essentials$toolId, 'undo'),
											_List_fromArray(
												[
													A2($author$project$Actions$actionTextForUndo, location, undo.action)
												]))),
									onPress: $elm$core$Maybe$Just(
										msgWrapper($author$project$Tools$Essentials$Undo))
								});
						}
					}(),
						function () {
						var _v1 = track.redos;
						if (!_v1.b) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$ViewPureStyles$neatToolsBorder,
								{
									label: A3($author$project$Tools$I18N$text, location, $author$project$Tools$Essentials$toolId, 'noredo'),
									onPress: $elm$core$Maybe$Nothing
								});
						} else {
							var redo = _v1.a;
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignRight, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: $mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Essentials$toolId, 'redo'),
											_List_fromArray(
												[
													A2($author$project$Actions$actionTextForUndo, location, redo.action)
												]))),
									onPress: $elm$core$Maybe$Just(
										msgWrapper($author$project$Tools$Essentials$Redo))
								});
						}
					}()
					])));
	});
var $author$project$Tools$Essentials$view = F5(
	function (location, imperial, msgWrapper, options, isTrack) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				if (isTrack.$ === 'Just') {
					var track = isTrack.a;
					return _List_fromArray(
						[
							A5($author$project$Tools$Essentials$viewPointers, location, imperial, msgWrapper, options, track),
							A3($author$project$Tools$Essentials$viewUndoRedo, location, msgWrapper, track)
						]);
				} else {
					return _List_fromArray(
						[
							$author$project$ViewPureStyles$noTrackMessage(location)
						]);
				}
			}());
	});
var $author$project$Tools$Flythrough$PauseFlythrough = {$: 'PauseFlythrough'};
var $author$project$Tools$Flythrough$ResetFlythrough = {$: 'ResetFlythrough'};
var $author$project$Tools$Flythrough$ResumeFlythrough = {$: 'ResumeFlythrough'};
var $author$project$Tools$Flythrough$SetFlythroughSpeed = function (a) {
	return {$: 'SetFlythroughSpeed', a: a};
};
var $author$project$Tools$Flythrough$StartFlythrough = {$: 'StartFlythrough'};
var $feathericons$elm_feather$FeatherIcons$pause = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'pause',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('6'),
					$elm$svg$Svg$Attributes$y('4'),
					$elm$svg$Svg$Attributes$width('4'),
					$elm$svg$Svg$Attributes$height('16')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('14'),
					$elm$svg$Svg$Attributes$y('4'),
					$elm$svg$Svg$Attributes$width('4'),
					$elm$svg$Svg$Attributes$height('16')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$play = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'play',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('5 3 19 12 5 21 5 3')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$rewind = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'rewind',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('11 19 2 12 11 5 11 19')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('22 19 13 12 22 5 22 19')
				]),
			_List_Nil)
		]));
var $ianmackenzie$elm_units$Speed$inMetersPerSecond = function (_v0) {
	var numMetersPerSecond = _v0.a;
	return numMetersPerSecond;
};
var $ianmackenzie$elm_units$Speed$inKilometersPerHour = function (speed) {
	return ($ianmackenzie$elm_units$Constants$hour * $ianmackenzie$elm_units$Speed$inMetersPerSecond(speed)) * 0.001;
};
var $ianmackenzie$elm_units$Speed$inMilesPerHour = function (speed) {
	return ($ianmackenzie$elm_units$Constants$hour / $ianmackenzie$elm_units$Constants$mile) * $ianmackenzie$elm_units$Speed$inMetersPerSecond(speed);
};
var $author$project$UtilsForViews$showSpeed = F2(
	function (imperial, speed) {
		return imperial ? ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Speed$inMilesPerHour(speed)) + 'mph') : ($author$project$UtilsForViews$showDecimal2(
			$ianmackenzie$elm_units$Speed$inKilometersPerHour(speed)) + 'kph');
	});
var $author$project$Tools$Flythrough$view = F4(
	function (location, imperial, options, wrapper) {
		var speed = $ianmackenzie$elm_units$Speed$metersPerSecond(
			A2($elm$core$Basics$pow, 10.0, options.flythroughSpeed));
		var resetButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$rewind),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$Flythrough$ResetFlythrough))
			});
		var pauseButton = function (state) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				function () {
					if (state.$ === 'Paused') {
						return {
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$play),
							onPress: $elm$core$Maybe$Just(
								wrapper($author$project$Tools$Flythrough$ResumeFlythrough))
						};
					} else {
						return {
							label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$pause),
							onPress: $elm$core$Maybe$Just(
								wrapper($author$project$Tools$Flythrough$PauseFlythrough))
						};
					}
				}());
		};
		var playPauseButton = function () {
			var _v1 = options.flythrough;
			if (_v1.$ === 'Nothing') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$ViewPureStyles$neatToolsBorder,
					{
						label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$play),
						onPress: $elm$core$Maybe$Just(
							wrapper($author$project$Tools$Flythrough$StartFlythrough))
					});
			} else {
				var flying = _v1.a;
				return pauseButton(flying.running);
			}
		}();
		var flythroughSpeedSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Flythrough$toolId, 'speed'),
							_List_fromArray(
								[
									A2($author$project$UtilsForViews$showSpeed, imperial, speed)
								])))),
				max: 3.0,
				min: 1.0,
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Flythrough$SetFlythroughSpeed),
				step: $elm$core$Maybe$Nothing,
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.flythroughSpeed
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(10),
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$centerX
							]),
						_List_fromArray(
							[resetButton, playPauseButton]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					flythroughSpeedSlider),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					function () {
						var _v0 = options.flythrough;
						if (_v0.$ === 'Just') {
							var flying = _v0.a;
							return $mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Flythrough$toolId, 'where'),
									_List_fromArray(
										[
											A2($author$project$UtilsForViews$showLongMeasure, imperial, flying.metresFromRouteStart)
										])));
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}())
				]));
	});
var $author$project$Tools$GradientProblems$Autofix = {$: 'Autofix'};
var $author$project$Tools$GradientProblems$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$GradientProblems$ResultList = {$: 'ResultList'};
var $author$project$Tools$GradientProblems$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$Tools$GradientProblems$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$GradientProblems$SetResultMode = function (a) {
	return {$: 'SetResultMode', a: a};
};
var $author$project$Tools$GradientProblems$SetThreshold = function (a) {
	return {$: 'SetThreshold', a: a};
};
var $author$project$Tools$GradientProblems$SteepClimb = {$: 'SteepClimb'};
var $author$project$Tools$GradientProblems$SteepDescent = {$: 'SteepDescent'};
var $author$project$Tools$GradientProblems$ViewNext = {$: 'ViewNext'};
var $author$project$Tools$GradientProblems$ViewPrevious = {$: 'ViewPrevious'};
var $author$project$Tools$GradientProblems$view = F5(
	function (location, imperial, msgWrapper, options, isTrack) {
		var linkButton = F2(
			function (track, point) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, $author$project$ViewPureStyles$neatToolsBorder),
					{
						label: $mdgriffith$elm_ui$Element$text(
							A2(
								$author$project$UtilsForViews$showLongMeasure,
								imperial,
								A2($author$project$DomainModel$distanceFromIndex, point, track))),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$Tools$GradientProblems$SetCurrentPosition(point)))
					});
			});
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$GradientProblems$toolId);
		var resultsNavigation = function () {
			var _v2 = options.breaches;
			if (!_v2.b) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					i18n('none'));
			} else {
				var _v3 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, 0),
					A2($elm_community$list_extra$List$Extra$getAt, options.currentBreach, options.breaches));
				var position = _v3.a;
				var turn = _v3.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$GradientProblems$toolId, '.of.'),
									_List_fromArray(
										[
											$elm$core$String$fromInt(options.currentBreach + 1),
											$elm$core$String$fromInt(
											$elm$core$List$length(options.breaches)),
											$author$project$UtilsForViews$showDecimal2(turn)
										])))),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									msgWrapper(
										A2($author$project$Tools$GradientProblems$DisplayInfo, 'bends', 'locate'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$GradientProblems$toolId, 'prev')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$GradientProblems$ViewPrevious))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$GradientProblems$toolId, 'this')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$mousePointer),
										onPress: $elm$core$Maybe$Just(
											msgWrapper(
												$author$project$Tools$GradientProblems$SetCurrentPosition(position)))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$GradientProblems$toolId, 'next')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$GradientProblems$ViewNext))
									})
								]))
						]));
			}
		}();
		if (isTrack.$ === 'Just') {
			var track = isTrack.a;
			var thresholdSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$shortSliderStyles,
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Threshold'),
					max: 20,
					min: 3,
					onChange: A2($elm$core$Basics$composeR, $author$project$Tools$GradientProblems$SetThreshold, msgWrapper),
					step: $elm$core$Maybe$Just(1),
					thumb: $author$project$ViewPureStyles$sliderThumb,
					value: options.threshold
				});
			var resultModeSelection = A2(
				$mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Results mode'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$GradientProblems$SetResultMode),
					options: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$GradientProblems$ResultNavigation,
							i18n('summary')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$GradientProblems$ResultList,
							i18n('list'))
						]),
					selected: $elm$core$Maybe$Just(options.resultMode)
				});
			var modeSelection = A2(
				$mdgriffith$elm_ui$Element$Input$radio,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				{
					label: $mdgriffith$elm_ui$Element$Input$labelHidden('Mode'),
					onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$GradientProblems$SetMode),
					options: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$GradientProblems$AbruptChange,
							i18n('usepoint')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$GradientProblems$SteepClimb,
							i18n('climbs')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							$author$project$Tools$GradientProblems$SteepDescent,
							i18n('descents'))
						]),
					selected: $elm$core$Maybe$Just(options.mode)
				});
			var autofixButton = _Utils_eq(options.breaches, _List_Nil) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(4)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$none,
						$author$project$ViewPureStyles$infoButton(
						msgWrapper(
							A2($author$project$Tools$GradientProblems$DisplayInfo, 'gradients', 'autofix'))),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$alignTop, $author$project$ViewPureStyles$neatToolsBorder),
						{
							label: i18n('smooth'),
							onPress: $elm$core$Maybe$Just(
								msgWrapper($author$project$Tools$GradientProblems$Autofix))
						})
					]));
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$spacing(6)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							modeSelection),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							thresholdSlider),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$GradientProblems$toolId, 'threshold'),
									_List_fromArray(
										[
											$author$project$UtilsForViews$showDecimal2(options.threshold)
										])))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							autofixButton),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							resultModeSelection),
							function () {
							var _v1 = options.resultMode;
							if (_v1.$ === 'ResultNavigation') {
								return resultsNavigation;
							} else {
								return A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$scrollbarY,
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(
												A3(
													$elm$core$Basics$clamp,
													32,
													300,
													(($elm$core$List$length(options.breaches) / 3) | 0) * 24))),
											A2($mdgriffith$elm_ui$Element$spacingXY, 6, 6),
											$mdgriffith$elm_ui$Element$padding(6),
											$mdgriffith$elm_ui$Element$alignTop
										]),
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Tuple$first,
											linkButton(track.trackTree)),
										options.breaches));
							}
						}()
						])));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$Graph$AdoptNewTrack = {$: 'AdoptNewTrack'};
var $author$project$Tools$Graph$CentreLineOffset = function (a) {
	return {$: 'CentreLineOffset', a: a};
};
var $author$project$Tools$Graph$ClearRoute = {$: 'ClearRoute'};
var $author$project$Tools$Graph$ConvertFromGraph = {$: 'ConvertFromGraph'};
var $author$project$Tools$Graph$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$Graph$FlipDirection = function (a) {
	return {$: 'FlipDirection', a: a};
};
var $author$project$Tools$Graph$GraphAnalyse = {$: 'GraphAnalyse'};
var $author$project$Tools$Graph$HighlightTraversal = function (a) {
	return {$: 'HighlightTraversal', a: a};
};
var $author$project$Tools$Graph$MinimumRadius = function (a) {
	return {$: 'MinimumRadius', a: a};
};
var $author$project$Tools$Graph$RemoveLastTraversal = {$: 'RemoveLastTraversal'};
var $author$project$Tools$Graph$RevertToTrack = {$: 'RevertToTrack'};
var $author$project$Tools$Graph$SetTolerance = function (a) {
	return {$: 'SetTolerance', a: a};
};
var $author$project$Tools$Graph$UndoDeleteRoad = {$: 'UndoDeleteRoad'};
var $feathericons$elm_feather$FeatherIcons$delete = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'delete',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('18'),
					$elm$svg$Svg$Attributes$y1('9'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('15')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('9'),
					$elm$svg$Svg$Attributes$x2('18'),
					$elm$svg$Svg$Attributes$y2('15')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$eye = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'eye',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('3')
				]),
			_List_Nil)
		]));
var $mdgriffith$elm_ui$Element$InternalIndexedColumn = function (a) {
	return {$: 'InternalIndexedColumn', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 'GridPosition', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 'GridTemplateStyle', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsGrid = {$: 'AsGrid'};
var $mdgriffith$elm_ui$Internal$Model$asGrid = $mdgriffith$elm_ui$Internal$Model$AsGrid;
var $mdgriffith$elm_ui$Internal$Flag$gridPosition = $mdgriffith$elm_ui$Internal$Flag$flag(35);
var $mdgriffith$elm_ui$Internal$Flag$gridTemplate = $mdgriffith$elm_ui$Internal$Flag$flag(34);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$StyleClass,
							$mdgriffith$elm_ui$Internal$Flag$gridPosition,
							$mdgriffith$elm_ui$Internal$Model$GridPosition(
								{col: columnLevel, height: 1, row: rowLevel, width: 1}))
						]),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.width;
			} else {
				var colConfig = col.a;
				return colConfig.width;
			}
		};
		var columnHeader = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.header;
			} else {
				var colConfig = col.a;
				return colConfig.header;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				$elm$core$List$all,
				$elm$core$Basics$eq($mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2($elm$core$List$map, columnHeader, config.columns));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (columnConfig.$ === 'InternalIndexedColumn') {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							column: cursor.column + 1,
							elements: A2(
								$elm$core$List$cons,
								A3(
									onGrid,
									cursor.row,
									cursor.column,
									A2(
										col.view,
										_Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? (cursor.row - 1) : (cursor.row - 2),
										cell)),
								cursor.elements)
						});
				} else {
					var col = columnConfig.a;
					return {
						column: cursor.column + 1,
						elements: A2(
							$elm$core$List$cons,
							A3(
								onGrid,
								cursor.row,
								cursor.column,
								col.view(cell)),
							cursor.elements),
						row: cursor.row
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					$elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {column: 1, elements: newCursor.elements, row: cursor.row + 1};
			});
		var children = A3(
			$elm$core$List$foldl,
			build(config.columns),
			{
				column: 1,
				elements: _List_Nil,
				row: _Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.data);
		var _v0 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _v0.a;
		var sY = _v0.b;
		var template = A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			$mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					columns: A2($elm$core$List$map, columnWidth, config.columns),
					rows: A2(
						$elm$core$List$repeat,
						$elm$core$List$length(config.data),
						$mdgriffith$elm_ui$Internal$Model$Content),
					spacing: _Utils_Tuple2(
						$mdgriffith$elm_ui$Element$px(sX),
						$mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asGrid,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($elm$core$List$cons, template, attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 'Nothing') {
						return children.elements;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							$elm$core$List$reverse(children.elements));
					}
				}()));
	});
var $mdgriffith$elm_ui$Element$indexedTable = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				columns: A2($elm$core$List$map, $mdgriffith$elm_ui$Element$InternalIndexedColumn, config.columns),
				data: config.data
			});
	});
var $smucode$elm_flat_colors$FlatColors$AmericanPalette$lightGreenishBlue = A3($mdgriffith$elm_ui$Element$rgb255, 85, 239, 196);
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $feathericons$elm_feather$FeatherIcons$refreshCw = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'refresh-cw',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('23 4 23 10 17 10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('1 20 1 14 7 14')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15')
				]),
			_List_Nil)
		]));
var $author$project$Tools$Graph$view = F4(
	function (location, imperial, wrapper, options) {
		var traversals = function () {
			var graph = options.graph;
			return A2(
				$elm$core$List$map,
				function (traversal) {
					var _v0 = A2($elm$core$Dict$get, traversal.edge, graph.edges);
					if (_v0.$ === 'Nothing') {
						return {endPlace: -1, length: $ianmackenzie$elm_units$Quantity$zero, road: -1, startPlace: -1};
					} else {
						var edgeInfo = _v0.a;
						var _v1 = traversal.direction;
						if (_v1.$ === 'Natural') {
							return {
								endPlace: edgeInfo.highNode,
								length: $author$project$DomainModel$trueLength(edgeInfo.track.trackTree),
								road: traversal.edge,
								startPlace: edgeInfo.lowNode
							};
						} else {
							return {
								endPlace: edgeInfo.lowNode,
								length: $author$project$DomainModel$trueLength(edgeInfo.track.trackTree),
								road: traversal.edge,
								startPlace: edgeInfo.highNode
							};
						}
					}
				},
				graph.userRoute);
		}();
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Graph$toolId);
		var guidanceText = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$lightGreenishBlue),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			_List_fromArray(
				[
					A2($author$project$ViewPureStyles$useIconWithSize, 20, $feathericons$elm_feather$FeatherIcons$info),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(4)
						]),
					_List_fromArray(
						[
							options.analyzed ? ($elm$core$List$isEmpty(options.graph.userRoute) ? i18n('guidanceNoRoute') : i18n('guidanceAnalyzed')) : i18n('guidanceNotAnalyzed')
						]))
				]));
		var dataStyles = function (selected) {
			return selected ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ViewPureStyles$rgtPurple),
					$mdgriffith$elm_ui$Element$padding(2)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$padding(2)
				]);
		};
		var traversalsTable = function () {
			var totalLength = $ianmackenzie$elm_units$Quantity$sum(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.length;
					},
					traversals));
			var headerAttrs = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtPurple)
				]);
			var footerAttrs = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 0, left: 0, right: 0, top: 2}),
					$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtPurple)
				]);
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(300)),
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$Border$width(2),
						$mdgriffith$elm_ui$Element$Border$rounded(6),
						$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtDark)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(1)),
									headerAttrs),
								i18n('blank')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									headerAttrs),
								i18n('from')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									headerAttrs),
								i18n('to')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									headerAttrs),
								i18n('along')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									headerAttrs),
								i18n('distance'))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$mdgriffith$elm_ui$Element$indexedTable,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(220)),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$spacing(4)
								]),
							{
								columns: _List_fromArray(
									[
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(2)
														]),
													_List_fromArray(
														[
															_Utils_eq(
															i + 1,
															$elm$core$List$length(traversals)) ? A2(
															$mdgriffith$elm_ui$Element$Input$button,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$alignRight,
																	A2(
																	$author$project$ToolTip$tooltip,
																	$mdgriffith$elm_ui$Element$below,
																	A3($author$project$ToolTip$localisedTooltip, location, $author$project$Tools$Graph$toolId, 'remove'))
																]),
															{
																label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$delete),
																onPress: $elm$core$Maybe$Just(
																	wrapper($author$project$Tools$Graph$RemoveLastTraversal))
															}) : $mdgriffith$elm_ui$Element$none,
															(($elm$core$List$length(traversals) === 1) || _Utils_eq(t.startPlace, t.endPlace)) ? A2(
															$mdgriffith$elm_ui$Element$Input$button,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$alignRight,
																	A2(
																	$author$project$ToolTip$tooltip,
																	$mdgriffith$elm_ui$Element$below,
																	A3($author$project$ToolTip$localisedTooltip, location, $author$project$Tools$Graph$toolId, 'reverse'))
																]),
															{
																label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$refreshCw),
																onPress: $elm$core$Maybe$Just(
																	wrapper(
																		$author$project$Tools$Graph$FlipDirection(i)))
															}) : $mdgriffith$elm_ui$Element$none,
															A2(
															$mdgriffith$elm_ui$Element$Input$button,
															_List_fromArray(
																[$mdgriffith$elm_ui$Element$alignRight]),
															{
																label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$eye),
																onPress: $elm$core$Maybe$Just(
																	wrapper(
																		$author$project$Tools$Graph$HighlightTraversal(i)))
															})
														]));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(1)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													dataStyles(
														_Utils_eq(i, options.selectedTraversal)),
													$mdgriffith$elm_ui$Element$text(
														A2(
															$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
															A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'place1'),
															_List_fromArray(
																[
																	$elm$core$String$fromInt(t.startPlace)
																]))));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(2)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													dataStyles(
														_Utils_eq(i, options.selectedTraversal)),
													$mdgriffith$elm_ui$Element$text(
														A2(
															$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
															A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'place2'),
															_List_fromArray(
																[
																	$elm$core$String$fromInt(t.endPlace)
																]))));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(2)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													dataStyles(
														_Utils_eq(i, options.selectedTraversal)),
													$mdgriffith$elm_ui$Element$text(
														A2(
															$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
															A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'road'),
															_List_fromArray(
																[
																	$elm$core$String$fromInt(t.road)
																]))));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(2)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													dataStyles(
														_Utils_eq(i, options.selectedTraversal)),
													$mdgriffith$elm_ui$Element$text(
														A2($author$project$UtilsForViews$showLongMeasure, false, t.length)));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(2)
									}
									]),
								data: traversals
							})),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(1)),
									footerAttrs),
								$mdgriffith$elm_ui$Element$text(' ')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									footerAttrs),
								$mdgriffith$elm_ui$Element$text(' ')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									footerAttrs),
								$mdgriffith$elm_ui$Element$text(' ')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									footerAttrs),
								$mdgriffith$elm_ui$Element$text(' ')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									footerAttrs),
								$mdgriffith$elm_ui$Element$text(
									A2($author$project$UtilsForViews$showLongMeasure, false, totalLength)))
							]))
					]));
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			_List_fromArray(
				[
					guidanceText,
					function () {
					if (options.analyzed) {
						var undoButton = (!$elm$core$List$isEmpty(options.graphUndos)) ? A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(3)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$ViewPureStyles$neatToolsBorder,
									{
										label: i18n('undo'),
										onPress: $elm$core$Maybe$Just(
											wrapper($author$project$Tools$Graph$UndoDeleteRoad))
									})
								])) : $mdgriffith$elm_ui$Element$none;
						var traversalPrevious = A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronLeft),
								onPress: $elm$core$Maybe$Just(
									wrapper(
										$author$project$Tools$Graph$HighlightTraversal(
											A2($elm$core$Basics$max, 0, options.selectedTraversal - 1))))
							});
						var traversalNext = A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronRight),
								onPress: $elm$core$Maybe$Just(
									wrapper(
										$author$project$Tools$Graph$HighlightTraversal(
											A2(
												$elm$core$Basics$min,
												$elm$core$List$length(traversals) - 1,
												options.selectedTraversal + 1))))
							});
						var revertButton = A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: i18n('revert'),
								onPress: $elm$core$Maybe$Just(
									wrapper($author$project$Tools$Graph$RevertToTrack))
							});
						var radius = $ianmackenzie$elm_units$Length$inMeters(options.minimumRadiusAtPlaces);
						var offset = $ianmackenzie$elm_units$Length$inMeters(options.centreLineOffset);
						var offsetSlider = A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$none,
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'offset'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$slider,
									$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
									{
										label: A2(
											$mdgriffith$elm_ui$Element$Input$labelBelow,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text(
												A2(
													$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
													A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'isOffset'),
													_List_fromArray(
														[
															$author$project$UtilsForViews$showDecimal2(
															$elm$core$Basics$abs(offset)),
															(offset < 0.0) ? A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'left') : ((offset > 0.0) ? A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'right') : '')
														])))),
										max: 5.0,
										min: -5.0,
										onChange: A2(
											$elm$core$Basics$composeL,
											A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Graph$CentreLineOffset),
											$ianmackenzie$elm_units$Length$meters),
										step: $elm$core$Maybe$Just(0.25),
										thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
										value: offset
									})
								]));
						var minRadiusSlider = A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$none,
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'radius'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$slider,
									$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
									{
										label: A2(
											$mdgriffith$elm_ui$Element$Input$labelBelow,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text(
												A2(
													$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
													A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'isRadius'),
													_List_fromArray(
														[
															$author$project$UtilsForViews$showDecimal2(
															$elm$core$Basics$abs(radius))
														])))),
										max: 15.0,
										min: 1.0,
										onChange: A2(
											$elm$core$Basics$composeL,
											A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Graph$MinimumRadius),
											$ianmackenzie$elm_units$Length$meters),
										step: $elm$core$Maybe$Just(1.0),
										thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
										value: radius
									})
								]));
						var finishButton = (!$elm$core$List$isEmpty(options.graph.userRoute)) ? A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(3)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'render'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$ViewPureStyles$neatToolsBorder,
									{
										label: i18n('convert'),
										onPress: $elm$core$Maybe$Just(
											wrapper($author$project$Tools$Graph$ConvertFromGraph))
									})
								])) : $mdgriffith$elm_ui$Element$none;
						var clearRouteButton = A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: i18n('clear'),
								onPress: $elm$core$Maybe$Just(
									wrapper($author$project$Tools$Graph$ClearRoute))
							});
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$padding(4),
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[traversalPrevious, traversalNext, clearRouteButton, revertButton])),
									traversalsTable,
									undoButton,
									A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[offsetSlider, minRadiusSlider])),
									finishButton
								]));
					} else {
						var toleranceSlider = A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$none,
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'tolerance'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$slider,
									$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
									{
										label: A2(
											$mdgriffith$elm_ui$Element$Input$labelBelow,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text(
												A2(
													$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
													A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Graph$toolId, 'isTolerance'),
													_List_fromArray(
														[
															A2($author$project$UtilsForViews$showShortMeasure, imperial, options.matchingTolerance)
														])))),
										max: 5.0,
										min: 0.0,
										onChange: A2(
											$elm$core$Basics$composeL,
											A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Graph$SetTolerance),
											$ianmackenzie$elm_units$Length$meters),
										step: $elm$core$Maybe$Nothing,
										thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
										value: $ianmackenzie$elm_units$Length$inMeters(options.matchingTolerance)
									})
								]));
						var analyseButton = A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(3),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'info'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$ViewPureStyles$neatToolsBorder,
									{
										label: i18n('find'),
										onPress: $elm$core$Maybe$Just(
											wrapper($author$project$Tools$Graph$GraphAnalyse))
									})
								]));
						var adoptTrackButton = A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(3),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$Tools$Graph$DisplayInfo, 'graph', 'adoptInfo'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$ViewPureStyles$neatToolsBorder,
									{
										label: i18n('adopt'),
										onPress: $elm$core$Maybe$Just(
											wrapper($author$project$Tools$Graph$AdoptNewTrack))
									})
								]));
						return A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[toleranceSlider, adoptTrackButton, analyseButton]));
					}
				}()
				]));
	});
var $author$project$Tools$Interpolate$Apply = {$: 'Apply'};
var $author$project$Tools$Interpolate$SetSpacing = function (a) {
	return {$: 'SetSpacing', a: a};
};
var $author$project$Tools$Interpolate$view = F5(
	function (location, imperial, wrapper, options, track) {
		if (track.$ === 'Just') {
			var spacingSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Interpolate$toolId, 'spacing'),
								_List_fromArray(
									[
										A2($author$project$UtilsForViews$showShortMeasure, imperial, options.minimumSpacing)
									])))),
					max: 50.0,
					min: 1.0,
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Interpolate$SetSpacing),
					step: $elm$core$Maybe$Just(0.5),
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inMeters(options.minimumSpacing)
				});
			var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Interpolate$toolId);
			var fixButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: $mdgriffith$elm_ui$Element$text('Insert points'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$Interpolate$Apply))
				});
			var extent = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					_List_fromArray(
						[
							i18n('usage')
						])));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						spacingSlider),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						extent),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$Intersections$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$Intersections$ResultList = {$: 'ResultList'};
var $author$project$Tools$Intersections$SetCurrentPosition = function (a) {
	return {$: 'SetCurrentPosition', a: a};
};
var $author$project$Tools$Intersections$SetResultMode = function (a) {
	return {$: 'SetResultMode', a: a};
};
var $author$project$Tools$Intersections$ViewNext = {$: 'ViewNext'};
var $author$project$Tools$Intersections$ViewPrevious = {$: 'ViewPrevious'};
var $author$project$Tools$Intersections$view = F5(
	function (location, imperial, msgWrapper, options, track) {
		var linkButton = function (_v3) {
			var thisSegment = _v3.thisSegment;
			var otherSegment = _v3.otherSegment;
			var category = _v3.category;
			var thisText = $elm$core$String$fromInt(thisSegment);
			var otherText = $elm$core$String$fromInt(otherSegment);
			var distanceText = A2(
				$author$project$UtilsForViews$showLongMeasure,
				imperial,
				A2($author$project$DomainModel$distanceFromIndex, thisSegment, track.trackTree));
			var categoryText = function () {
				switch (category.$) {
					case 'Crossing':
						return 'crosses';
					case 'SameDirection':
						return 'loops';
					default:
						return 'reverses';
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: $mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Intersections$toolId, 'detail'),
							_List_fromArray(
								[thisText, categoryText, otherText, distanceText]))),
					onPress: $elm$core$Maybe$Just(
						msgWrapper(
							$author$project$Tools$Intersections$SetCurrentPosition(thisSegment)))
				});
		};
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Intersections$toolId);
		var resultModeSelection = A2(
			$mdgriffith$elm_ui$Element$Input$radioRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Results mode'),
				onChange: A2($elm$core$Basics$composeL, msgWrapper, $author$project$Tools$Intersections$SetResultMode),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$Intersections$ResultNavigation,
						i18n('Summary')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$Intersections$ResultList,
						i18n('List'))
					]),
				selected: $elm$core$Maybe$Just(options.resultMode)
			});
		var resultsNavigation = function () {
			var _v1 = options.features;
			if (!_v1.b) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
					i18n('none'));
			} else {
				var a = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(options.current + 1) + (' of ' + $elm$core$String$fromInt(
									$elm$core$List$length(options.features))))),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									msgWrapper(
										A2($author$project$Tools$Intersections$DisplayInfo, 'bends', 'locate'))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Intersections$toolId, 'prev')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronLeft),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Intersections$ViewPrevious))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Intersections$toolId, 'this')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$mousePointer),
										onPress: $elm$core$Maybe$Just(
											msgWrapper(
												$author$project$Tools$Intersections$SetCurrentPosition(a.thisSegment)))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									A2(
										$author$project$ToolTip$buttonStylesWithTooltip,
										$mdgriffith$elm_ui$Element$below,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Intersections$toolId, 'next')),
									{
										label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$chevronRight),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Intersections$ViewNext))
									})
								]))
						]));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						resultModeSelection,
						function () {
						var _v0 = options.resultMode;
						if (_v0.$ === 'ResultNavigation') {
							return resultsNavigation;
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(150)),
										$mdgriffith$elm_ui$Element$scrollbarY
									]),
								A2($elm$core$List$map, linkButton, options.features));
						}
					}()
					])));
	});
var $author$project$Tools$LandUse$legend = function () {
	var showLegendEntry = function (_v0) {
		var name = _v0.a;
		var colour = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					$author$project$UtilsForViews$elmuiColour(colour)),
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$ViewPureStyles$contrastingColour(
						$author$project$UtilsForViews$elmuiColour(colour))),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Font$bold
				]),
			$mdgriffith$elm_ui$Element$text(name));
	};
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$spacingXY, 6, 6),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$padding(6)
			]),
		A2(
			$elm$core$List$map,
			showLegendEntry,
			$elm$core$Dict$toList($author$project$Tools$LandUseColours$landUseColours)));
}();
var $author$project$Tools$LandUse$view = F4(
	function (location, wrap, options, maybeTrack) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$LandUse$toolId);
		var status = function () {
			if (maybeTrack.$ === 'Just') {
				var track = maybeTrack.a;
				var _v1 = track.landUseData.status;
				switch (_v1.$) {
					case 'LandUseError':
						var err = _v1.a;
						return $mdgriffith$elm_ui$Element$text(err);
					case 'LandUseNoTrack':
						return i18n('notrack');
					case 'LandUseWaitingOSM':
						return i18n('waiting');
					case 'LandUseWaitingMap':
						return i18n('altitude');
					default:
						return i18n('success');
				}
			} else {
				return i18n('notrack');
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(4),
						$mdgriffith$elm_ui$Element$spacing(6),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$none,
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[status])),
						$author$project$Tools$LandUse$legend
					])));
	});
var $author$project$Tools$MoveAndStretch$DraggerApply = {$: 'DraggerApply'};
var $author$project$Tools$MoveAndStretch$DraggerMarker = function (a) {
	return {$: 'DraggerMarker', a: a};
};
var $author$project$Tools$MoveAndStretch$DraggerModeToggle = function (a) {
	return {$: 'DraggerModeToggle', a: a};
};
var $author$project$Tools$MoveAndStretch$DraggerReset = {$: 'DraggerReset'};
var $author$project$Tools$MoveAndStretch$NudgeButton = function (a) {
	return {$: 'NudgeButton', a: a};
};
var $author$project$Tools$MoveAndStretch$DraggerGrab = function (a) {
	return {$: 'DraggerGrab', a: a};
};
var $author$project$Tools$MoveAndStretch$DraggerMove = function (a) {
	return {$: 'DraggerMove', a: a};
};
var $author$project$Tools$MoveAndStretch$DraggerRelease = function (a) {
	return {$: 'DraggerRelease', a: a};
};
var $author$project$Tools$MoveAndStretch$point = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $ianmackenzie$elm_geometry$Point2d$fromMeters(
		{x: x, y: y});
};
var $author$project$Tools$MoveAndStretch$radius = 100;
var $author$project$Tools$MoveAndStretch$twoWayDragControl = F2(
	function (model, wrapper) {
		var clickableContainer = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$mdgriffith$elm_ui$Element$el(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onDown(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$MoveAndStretch$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$MoveAndStretch$DraggerGrab, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onMove(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$MoveAndStretch$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$MoveAndStretch$DraggerMove, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$onUp(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.pointer;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.offsetPos;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$Tools$MoveAndStretch$point,
											A2($elm$core$Basics$composeR, $author$project$Tools$MoveAndStretch$DraggerRelease, wrapper)))))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'touch-action', 'none')),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$alignLeft
						])),
				$mdgriffith$elm_ui$Element$html),
			$elm$svg$Svg$svg(
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$viewBox('-150 -150 300 300'),
						$elm$svg$Svg$Attributes$width('140px'),
						$elm$svg$Svg$Attributes$height('140px')
					])));
		var _v0 = $ianmackenzie$elm_geometry$Vector2d$components(model.vector);
		var x = _v0.a;
		var y = _v0.b;
		var _v1 = _Utils_Tuple2(
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(x)),
			$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Length$inMeters(y)));
		var xPoint = _v1.a;
		var yPoint = _v1.b;
		return clickableContainer(
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$circle,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$cx('0'),
							$elm$svg$Svg$Attributes$cy('0'),
							$elm$svg$Svg$Attributes$r(
							$elm$core$String$fromInt($author$project$Tools$MoveAndStretch$radius)),
							$elm$svg$Svg$Attributes$stroke('black'),
							$elm$svg$Svg$Attributes$strokeWidth('1'),
							$elm$svg$Svg$Attributes$fill('darkslategrey')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$line,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$x1('0'),
							$elm$svg$Svg$Attributes$y1('0'),
							$elm$svg$Svg$Attributes$x2(xPoint),
							$elm$svg$Svg$Attributes$y2(yPoint),
							$elm$svg$Svg$Attributes$stroke('orange'),
							$elm$svg$Svg$Attributes$strokeWidth('10'),
							$elm$svg$Svg$Attributes$strokeLinecap('round')
						]),
					_List_Nil)
				]));
	});
var $ianmackenzie$elm_units$Constants$yard = 3 * $ianmackenzie$elm_units$Constants$foot;
var $ianmackenzie$elm_units$Length$yards = function (numYards) {
	return $ianmackenzie$elm_units$Length$meters($ianmackenzie$elm_units$Constants$yard * numYards);
};
var $ianmackenzie$elm_units$Length$yard = $ianmackenzie$elm_units$Length$yards(1);
var $author$project$Tools$MoveAndStretch$view = F5(
	function (location, imperial, options, wrapper, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$MoveAndStretch$toolId);
		var showModeSelection = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: !_Utils_eq(options.mode, $author$project$Tools$MoveAndStretchOptions$Translate),
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					i18n('Stretch')),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$MoveAndStretch$DraggerModeToggle)
			});
		var verticalButton = F2(
			function (label, increment) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$ViewPureStyles$neatToolsBorder),
					{
						label: i18n(label),
						onPress: $elm$core$Maybe$Just(
							wrapper(
								$author$project$Tools$MoveAndStretch$NudgeButton(increment)))
					});
			});
		var verticalNudgeButtons = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignRight]),
			imperial ? _List_fromArray(
				[
					A2(verticalButton, '+1yd', $ianmackenzie$elm_units$Length$yard),
					A2(verticalButton, '+1ft', $ianmackenzie$elm_units$Length$foot),
					A2(verticalButton, '+1in', $ianmackenzie$elm_units$Length$inch),
					A2(verticalButton, '0', $ianmackenzie$elm_units$Quantity$zero),
					A2(
					verticalButton,
					'-1in',
					$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$inch)),
					A2(
					verticalButton,
					'-1ft',
					$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$foot)),
					A2(
					verticalButton,
					'-1yd',
					$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$yard))
				]) : _List_fromArray(
				[
					A2(verticalButton, '+1m', $ianmackenzie$elm_units$Length$meter),
					A2(
					verticalButton,
					'+10cm',
					$ianmackenzie$elm_units$Length$centimeters(10)),
					A2(verticalButton, '+1cm', $ianmackenzie$elm_units$Length$centimeter),
					A2(verticalButton, '0', $ianmackenzie$elm_units$Quantity$zero),
					A2(
					verticalButton,
					'-1cm',
					$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$centimeter)),
					A2(
					verticalButton,
					'-10cm',
					$ianmackenzie$elm_units$Quantity$negate(
						$ianmackenzie$elm_units$Length$centimeters(10))),
					A2(
					verticalButton,
					'-1m',
					$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$meter))
				]));
		var _v0 = $author$project$TrackLoaded$getRangeFromMarkers(track);
		var nearEnd = _v0.a;
		var fromEnd = _v0.b;
		var farEnd = $author$project$DomainModel$skipCount(track.trackTree) - fromEnd;
		var canApply = function () {
			var _v2 = options.mode;
			if (_v2.$ === 'Translate') {
				return _Utils_cmp(nearEnd, farEnd) < 0;
			} else {
				var drag = _v2.a;
				return (_Utils_cmp(nearEnd, drag) < 0) && (_Utils_cmp(drag, farEnd) < 0);
			}
		}();
		var showActionButtons = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$ViewPureStyles$neatToolsBorder,
					{
						label: i18n('Zero'),
						onPress: $elm$core$Maybe$Just(
							wrapper($author$project$Tools$MoveAndStretch$DraggerReset))
					}),
					canApply ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$ViewPureStyles$neatToolsBorder,
					{
						label: i18n('apply'),
						onPress: $elm$core$Maybe$Just(
							wrapper($author$project$Tools$MoveAndStretch$DraggerApply))
					}) : A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$ViewPureStyles$neatToolsBorder,
					{
						label: i18n('invalid'),
						onPress: $elm$core$Maybe$Nothing
					})
				]));
		var showSliderInStretchMode = function () {
			var _v1 = options.mode;
			if (_v1.$ === 'Stretch') {
				var drag = _v1.a;
				var sliderText = $mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveAndStretch$toolId, 'white'),
						_List_fromArray(
							[
								$elm$core$String$fromInt(drag)
							])));
				var fineButtons = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$ViewPureStyles$neatToolsBorder,
						{
							label: $mdgriffith$elm_ui$Element$text('<'),
							onPress: $elm$core$Maybe$Just(
								wrapper(
									$author$project$Tools$MoveAndStretch$DraggerMarker(
										A2($elm$core$Basics$max, nearEnd + 1, drag - 1))))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$ViewPureStyles$neatToolsBorder,
						{
							label: $mdgriffith$elm_ui$Element$text('>'),
							onPress: $elm$core$Maybe$Just(
								wrapper(
									$author$project$Tools$MoveAndStretch$DraggerMarker(
										A2($elm$core$Basics$min, farEnd - 1, drag + 1))))
						})
					]);
				return A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_Nil,
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								A2($elm$core$List$cons, sliderText, fineButtons))),
						max: farEnd - 1,
						min: nearEnd + 1,
						onChange: A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$MoveAndStretch$DraggerMarker),
							$elm$core$Basics$round),
						step: $elm$core$Maybe$Just(1.0),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: drag
					});
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2($author$project$Tools$MoveAndStretch$twoWayDragControl, options, wrapper),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							showModeSelection),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							showSliderInStretchMode),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							showActionButtons),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
									A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveAndStretch$toolId, 'height'),
									_List_fromArray(
										[
											A2($author$project$UtilsForViews$showShortMeasure, imperial, options.heightSliderSetting)
										]))))
						])),
					verticalNudgeButtons
				]));
	});
var $author$project$Tools$MoveScaleRotate$Recentre = {$: 'Recentre'};
var $author$project$Tools$MoveScaleRotate$RotateAndScale = {$: 'RotateAndScale'};
var $author$project$Tools$MoveScaleRotate$SetRotateAngle = function (a) {
	return {$: 'SetRotateAngle', a: a};
};
var $author$project$Tools$MoveScaleRotate$SetTrackLength = function (a) {
	return {$: 'SetTrackLength', a: a};
};
var $author$project$Tools$MoveScaleRotate$UseMapElevations = {$: 'UseMapElevations'};
var $author$project$Tools$MoveScaleRotate$Zero = {$: 'Zero'};
var $ianmackenzie$elm_units$Angle$Negative = {$: 'Negative'};
var $ianmackenzie$elm_units$Angle$Positive = {$: 'Positive'};
var $ianmackenzie$elm_units$Angle$toDms = function (angle) {
	var signedDegrees = $ianmackenzie$elm_units$Angle$inDegrees(angle);
	var sign = (signedDegrees >= 0) ? $ianmackenzie$elm_units$Angle$Positive : $ianmackenzie$elm_units$Angle$Negative;
	var numDegrees = $elm$core$Basics$abs(signedDegrees);
	var integerDegrees = $elm$core$Basics$floor(numDegrees);
	var fractionalDegrees = numDegrees - integerDegrees;
	var numMinutes = fractionalDegrees * 60;
	var integerMinutes = $elm$core$Basics$floor(numMinutes);
	var fractionalMinutes = numMinutes - integerMinutes;
	var numSeconds = fractionalMinutes * 60;
	return {degrees: integerDegrees, minutes: integerMinutes, seconds: numSeconds, sign: sign};
};
var $author$project$UtilsForViews$latitudeString = function (angle) {
	var _v0 = $ianmackenzie$elm_units$Angle$toDms(angle);
	var sign = _v0.sign;
	var degrees = _v0.degrees;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var signString = function () {
		if (sign.$ === 'Positive') {
			return 'N';
		} else {
			return 'S';
		}
	}();
	return $elm$core$String$concat(
		_List_fromArray(
			[
				signString,
				' ',
				$elm$core$String$fromInt(degrees),
				'° ',
				$elm$core$String$fromInt(minutes),
				'′ ',
				$elm$core$String$fromInt(
				$elm$core$Basics$round(seconds)),
				'″'
			]));
};
var $author$project$UtilsForViews$longitudeString = function (angle) {
	var _v0 = $ianmackenzie$elm_units$Angle$toDms(angle);
	var sign = _v0.sign;
	var degrees = _v0.degrees;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var signString = function () {
		if (sign.$ === 'Positive') {
			return 'E';
		} else {
			return 'W';
		}
	}();
	return $elm$core$String$concat(
		_List_fromArray(
			[
				signString,
				' ',
				$elm$core$String$fromInt(degrees),
				'° ',
				$elm$core$String$fromInt(minutes),
				'′ ',
				$elm$core$String$fromInt(
				$elm$core$Basics$round(seconds)),
				'″'
			]));
};
var $author$project$Tools$MoveScaleRotate$view = F5(
	function (location, imperial, options, wrapper, maybeTrack) {
		var recentreButton = function () {
			if (maybeTrack.$ === 'Just') {
				var track = maybeTrack.a;
				var _v2 = track.lastMapClick;
				var lon = _v2.a;
				var lat = _v2.b;
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($author$project$ToolTip$buttonStylesWithTooltip, $mdgriffith$elm_ui$Element$below, 'Click on Map to set the destination'),
					{
						label: $mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveScaleRotate$toolId, 'move'),
								_List_fromArray(
									[
										$author$project$UtilsForViews$longitudeString(
										$ianmackenzie$elm_units$Angle$degrees(lon)),
										$author$project$UtilsForViews$latitudeString(
										$ianmackenzie$elm_units$Angle$degrees(lat))
									]))),
						onPress: $elm$core$Maybe$Just(
							wrapper($author$project$Tools$MoveScaleRotate$Recentre))
					});
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		if (maybeTrack.$ === 'Just') {
			var scaleSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							imperial ? A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveScaleRotate$toolId, 'imperial'),
								_List_fromArray(
									[
										$author$project$UtilsForViews$showDecimal2(
										$ianmackenzie$elm_units$Length$inMiles(options.desiredTrackLength))
									])) : A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveScaleRotate$toolId, 'metric'),
								_List_fromArray(
									[
										$author$project$UtilsForViews$showDecimal2(
										$ianmackenzie$elm_units$Length$inKilometers(options.desiredTrackLength))
									])))),
					max: 100.0,
					min: 1.0,
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$MoveScaleRotate$SetTrackLength),
					step: $elm$core$Maybe$Just(
						imperial ? $ianmackenzie$elm_units$Length$inKilometers(
							$ianmackenzie$elm_units$Length$yards(17.6)) : $ianmackenzie$elm_units$Length$inKilometers(
							$ianmackenzie$elm_units$Length$meters(10))),
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inKilometers(options.desiredTrackLength)
				});
			var rotationSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$MoveScaleRotate$toolId, 'rotation'),
								_List_fromArray(
									[
										$author$project$UtilsForViews$showDecimal0(
										$ianmackenzie$elm_units$Angle$inDegrees(options.rotateAngle))
									])))),
					max: 30.0,
					min: -30.0,
					onChange: A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$MoveScaleRotate$SetRotateAngle),
						$ianmackenzie$elm_units$Angle$degrees),
					step: $elm$core$Maybe$Just(1.0),
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Angle$inDegrees(options.rotateAngle)
				});
			var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$MoveScaleRotate$toolId);
			var rotateButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('apply'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$MoveScaleRotate$RotateAndScale))
				});
			var zeroButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('Zero'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$MoveScaleRotate$Zero))
				});
			var elevationFetchButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2($author$project$ToolTip$buttonStylesWithTooltip, $mdgriffith$elm_ui$Element$below, 'First, tilt the Map view to get elevation data'),
				{
					label: i18n('elevations'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$MoveScaleRotate$UseMapElevations))
				});
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(6),
						$mdgriffith$elm_ui$Element$padding(6),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						rotationSlider),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						scaleSlider),
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(6),
								$mdgriffith$elm_ui$Element$padding(6)
							]),
						_List_fromArray(
							[rotateButton, zeroButton, recentreButton, elevationFetchButton]))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$NamedSegment$ChangeName = F2(
	function (a, b) {
		return {$: 'ChangeName', a: a, b: b};
	});
var $author$project$Tools$NamedSegment$CreateSegment = {$: 'CreateSegment'};
var $author$project$Tools$NamedSegment$DeleteSegment = {$: 'DeleteSegment'};
var $author$project$Tools$NamedSegment$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$NamedSegment$EnableAutoSuggest = function (a) {
	return {$: 'EnableAutoSuggest', a: a};
};
var $author$project$Tools$NamedSegment$LandUseProximity = function (a) {
	return {$: 'LandUseProximity', a: a};
};
var $author$project$Tools$NamedSegment$SelectSegment = function (a) {
	return {$: 'SelectSegment', a: a};
};
var $author$project$Tools$NamedSegment$TogglePreferCloser = function (a) {
	return {$: 'TogglePreferCloser', a: a};
};
var $author$project$Tools$NamedSegment$UpdateSegment = {$: 'UpdateSegment'};
var $feathericons$elm_feather$FeatherIcons$alertTriangle = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'alert-triangle',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('9'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('13')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('17'),
					$elm$svg$Svg$Attributes$x2('12.01'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil)
		]));
var $smucode$elm_flat_colors$FlatColors$AmericanPalette$brightYarrow = A3($mdgriffith$elm_ui$Element$rgb255, 253, 203, 110);
var $feathericons$elm_feather$FeatherIcons$checkCircle = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'check-circle',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M22 11.08V12a10 10 0 1 1-5.93-9.14')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('22 4 12 14.01 9 11.01')
				]),
			_List_Nil)
		]));
var $author$project$Tools$NamedSegment$checkForRuleBreaches = F2(
	function (track, options) {
		var validate = F3(
			function (previous, current, next) {
				return _Utils_update(
					current,
					{
						endOk: A2(
							$ianmackenzie$elm_units$Quantity$lessThan,
							next.startDistance,
							A2(
								$ianmackenzie$elm_units$Quantity$plus,
								$ianmackenzie$elm_units$Length$meters(50),
								current.endDistance)) && A2(
							$ianmackenzie$elm_units$Quantity$lessThan,
							$author$project$DomainModel$trueLength(track.trackTree),
							A2(
								$ianmackenzie$elm_units$Quantity$plus,
								$ianmackenzie$elm_units$Length$meters(190),
								current.endDistance)),
						startOk: A2(
							$ianmackenzie$elm_units$Quantity$greaterThan,
							A2(
								$ianmackenzie$elm_units$Quantity$plus,
								$ianmackenzie$elm_units$Length$meters(50),
								previous.endDistance),
							current.startDistance) && A2(
							$ianmackenzie$elm_units$Quantity$greaterThan,
							$ianmackenzie$elm_units$Length$meters(110),
							current.startDistance)
					});
			});
		var dummyLast = {
			createMode: $author$project$Tools$NamedSegmentOptions$AutoSegment,
			endDistance: $author$project$DomainModel$trueLength(track.trackTree),
			endOk: true,
			name: 'dummy',
			startDistance: $author$project$DomainModel$trueLength(track.trackTree),
			startOk: true
		};
		var dummyFirst = {createMode: $author$project$Tools$NamedSegmentOptions$AutoSegment, endDistance: $ianmackenzie$elm_units$Quantity$zero, endOk: true, name: 'dummy', startDistance: $ianmackenzie$elm_units$Quantity$zero, startOk: true};
		var validated = A4(
			$elm$core$List$map3,
			validate,
			A2($elm$core$List$cons, dummyFirst, options.namedSegments),
			options.namedSegments,
			_Utils_ap(
				A2($elm$core$List$drop, 1, options.namedSegments),
				_List_fromArray(
					[dummyLast])));
		return _Utils_update(
			options,
			{namedSegments: validated});
	});
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly);
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $feathericons$elm_feather$FeatherIcons$trash2 = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'trash-2',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('3 6 5 6 21 6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('10'),
					$elm$svg$Svg$Attributes$y1('11'),
					$elm$svg$Svg$Attributes$x2('10'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('14'),
					$elm$svg$Svg$Attributes$y1('11'),
					$elm$svg$Svg$Attributes$x2('14'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil)
		]));
var $author$project$Tools$NamedSegment$view = F5(
	function (location, imperial, wrapper, options, track) {
		var validated = A2($author$project$Tools$NamedSegment$checkForRuleBreaches, track, options);
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$NamedSegment$toolId);
		var newSegmentButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('create'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$NamedSegment$CreateSegment))
				}));
		var selectedSegmentDetail = function () {
			var _v3 = options.selectedSegment;
			if (_v3.$ === 'Just') {
				var selected = _v3.a;
				var _v4 = A2($elm_community$list_extra$List$Extra$getAt, selected, options.namedSegments);
				if (_v4.$ === 'Nothing') {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n('select')
							]));
				} else {
					var segment = _v4.a;
					var upsAndDowns = F2(
						function (road, _v7) {
							var up = _v7.a;
							var down = _v7.b;
							var steepest = _v7.c;
							return _Utils_Tuple3(
								A2($ianmackenzie$elm_units$Quantity$plus, up, road.altitudeGained),
								A2($ianmackenzie$elm_units$Quantity$plus, down, road.altitudeLost),
								A2($elm$core$Basics$max, steepest, road.gradientAtStart));
						});
					var labels = _List_fromArray(
						['distance', 'ascent', 'descent', 'steepest']);
					var distance = A2($ianmackenzie$elm_units$Quantity$minus, segment.startDistance, segment.endDistance);
					var _v5 = _Utils_Tuple2(
						A2($author$project$DomainModel$indexFromDistance, segment.startDistance, track.trackTree),
						A2($author$project$DomainModel$indexFromDistance, segment.endDistance, track.trackTree));
					var startIndex = _v5.a;
					var endIndex = _v5.b;
					var _v6 = A7(
						$author$project$DomainModel$traverseTreeBetweenLimitsToDepth,
						startIndex,
						endIndex,
						$elm$core$Basics$always($elm$core$Maybe$Nothing),
						0,
						track.trackTree,
						upsAndDowns,
						_Utils_Tuple3($ianmackenzie$elm_units$Quantity$zero, $ianmackenzie$elm_units$Quantity$zero, 0.0));
					var ascent = _v6.a;
					var descent = _v6.b;
					var maxGrade = _v6.c;
					return A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(10),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								A2(
									$elm$core$List$map,
									A2($author$project$Tools$I18N$text, location, 'info'),
									labels)),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(
										A2($author$project$UtilsForViews$showLongMeasure, imperial, distance)),
										$mdgriffith$elm_ui$Element$text(
										A2($author$project$UtilsForViews$showShortMeasure, imperial, ascent)),
										$mdgriffith$elm_ui$Element$text(
										A2($author$project$UtilsForViews$showShortMeasure, imperial, descent)),
										$mdgriffith$elm_ui$Element$text(
										$author$project$UtilsForViews$showDecimal2(maxGrade))
									]))
							]));
				}
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							i18n('select')
						]));
			}
		}();
		var highlightErrors = function (isOk) {
			return isOk ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$padding(2)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$brightYarrow),
					$mdgriffith$elm_ui$Element$padding(2)
				]);
		};
		var goodSeparation = function (segments) {
			return A2(
				$elm$core$List$all,
				function (seg) {
					return seg.startOk && seg.endOk;
				},
				segments);
		};
		var overlapWarning = goodSeparation(validated.namedSegments) ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$brightYarrow)
				]),
			_List_fromArray(
				[
					A2($author$project$ViewPureStyles$useIconWithSize, 48, $feathericons$elm_feather$FeatherIcons$alertTriangle),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$NamedSegment$toolId, 'warning'))
						]))
				]));
		var duplicateWarning = A2(
			$elm_community$list_extra$List$Extra$allDifferentBy,
			function ($) {
				return $.name;
			},
			options.namedSegments) ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$brightYarrow)
				]),
			_List_fromArray(
				[
					A2($author$project$ViewPureStyles$useIconWithSize, 48, $feathericons$elm_feather$FeatherIcons$alertTriangle),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$NamedSegment$toolId, 'duplicate'))
						]))
				]));
		var dataStyles = function (selected) {
			return selected ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ViewPureStyles$rgtPurple),
					$mdgriffith$elm_ui$Element$padding(2)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$padding(2)
				]);
		};
		var segmentsTable = function () {
			var headerAttrs = _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Font$color($author$project$ViewPureStyles$rgtDark),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 0, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtPurple)
				]);
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2(
							$mdgriffith$elm_ui$Element$minimum,
							200,
							A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill))),
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$Border$width(2),
						$mdgriffith$elm_ui$Element$Border$rounded(6),
						$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$rgtDark)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(2)),
									headerAttrs),
								i18n('name')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(1)),
									headerAttrs),
								i18n('start')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(1)),
									headerAttrs),
								i18n('end')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$fillPortion(1)),
									headerAttrs),
								$mdgriffith$elm_ui$Element$text('  '))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$mdgriffith$elm_ui$Element$indexedTable,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(120)),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$spacing(4)
								]),
							{
								columns: _List_fromArray(
									[
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, t) {
												return A2(
													$mdgriffith$elm_ui$Element$Input$text,
													dataStyles(
														_Utils_eq(
															$elm$core$Maybe$Just(i),
															options.selectedSegment)),
													{
														label: $mdgriffith$elm_ui$Element$Input$labelHidden('name'),
														onChange: A2(
															$elm$core$Basics$composeL,
															wrapper,
															$author$project$Tools$NamedSegment$ChangeName(i)),
														placeholder: $elm$core$Maybe$Nothing,
														text: t.name
													});
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(3)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (_v0, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													highlightErrors(t.startOk),
													$mdgriffith$elm_ui$Element$text(
														A2($author$project$UtilsForViews$showLongMeasure, imperial, t.startDistance)));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(1)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (_v1, t) {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													highlightErrors(t.endOk),
													$mdgriffith$elm_ui$Element$text(
														A2($author$project$UtilsForViews$showLongMeasure, imperial, t.endDistance)));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(1)
									},
										{
										header: $mdgriffith$elm_ui$Element$none,
										view: F2(
											function (i, _v2) {
												return A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$spaceEvenly]),
													A2(
														$elm$core$List$cons,
														A2(
															$mdgriffith$elm_ui$Element$Input$button,
															_List_fromArray(
																[
																	A2(
																	$author$project$ToolTip$tooltip,
																	$mdgriffith$elm_ui$Element$onLeft,
																	A3($author$project$ToolTip$localisedTooltip, location, $author$project$Tools$NamedSegment$toolId, 'show'))
																]),
															{
																label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$eye),
																onPress: $elm$core$Maybe$Just(
																	wrapper(
																		$author$project$Tools$NamedSegment$SelectSegment(i)))
															}),
														_Utils_eq(
															$elm$core$Maybe$Just(i),
															options.selectedSegment) ? _List_fromArray(
															[
																A2(
																$mdgriffith$elm_ui$Element$Input$button,
																_List_fromArray(
																	[
																		A2(
																		$author$project$ToolTip$tooltip,
																		$mdgriffith$elm_ui$Element$onLeft,
																		A3($author$project$ToolTip$localisedTooltip, location, $author$project$Tools$NamedSegment$toolId, 'update'))
																	]),
																{
																	label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$checkCircle),
																	onPress: $elm$core$Maybe$Just(
																		wrapper($author$project$Tools$NamedSegment$UpdateSegment))
																}),
																A2(
																$mdgriffith$elm_ui$Element$Input$button,
																_List_fromArray(
																	[
																		A2(
																		$author$project$ToolTip$tooltip,
																		$mdgriffith$elm_ui$Element$onLeft,
																		A3($author$project$ToolTip$localisedTooltip, location, $author$project$Tools$NamedSegment$toolId, 'delete'))
																	]),
																{
																	label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$trash2),
																	onPress: $elm$core$Maybe$Just(
																		wrapper($author$project$Tools$NamedSegment$DeleteSegment))
																})
															]) : _List_Nil));
											}),
										width: $mdgriffith$elm_ui$Element$fillPortion(1)
									}
									]),
								data: validated.namedSegments
							}))
					]));
		}();
		var autoSuggestButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			$elm$core$Dict$isEmpty(track.landUseData.places) ? i18n('nolanduse') : A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$checkbox,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								{
									checked: !_Utils_eq(options.landUseProximity, $elm$core$Maybe$Nothing),
									icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
									label: A2(
										$mdgriffith$elm_ui$Element$Input$labelRight,
										_List_Nil,
										i18n('landuse')),
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$NamedSegment$EnableAutoSuggest)
								}),
								$author$project$ViewPureStyles$infoButton(
								wrapper(
									A2($author$project$Tools$NamedSegment$DisplayInfo, $author$project$Tools$NamedSegment$toolId, 'landusetip')))
							])),
						_Utils_eq(options.landUseProximity, $elm$core$Maybe$Nothing) ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$Input$slider,
						$author$project$ViewPureStyles$shortSliderStyles,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$Input$labelBelow,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									A2(
										$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$NamedSegment$toolId, 'proximity'),
										_List_fromArray(
											[
												$author$project$UtilsForViews$showDecimal0(
												A2(
													$elm$core$Maybe$withDefault,
													0,
													A2($elm$core$Maybe$map, $ianmackenzie$elm_units$Length$inMeters, options.landUseProximity)))
											])))),
							max: 5000,
							min: 50,
							onChange: A2(
								$elm$core$Basics$composeR,
								$ianmackenzie$elm_units$Length$meters,
								A2($elm$core$Basics$composeR, $author$project$Tools$NamedSegment$LandUseProximity, wrapper)),
							step: $elm$core$Maybe$Just(50),
							thumb: $author$project$ViewPureStyles$sliderThumb,
							value: A2(
								$elm$core$Maybe$withDefault,
								0,
								A2($elm$core$Maybe$map, $ianmackenzie$elm_units$Length$inMeters, options.landUseProximity))
						}),
						_Utils_eq(options.landUseProximity, $elm$core$Maybe$Nothing) ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$Input$checkbox,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						{
							checked: options.landUsePreferCloser,
							icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
							label: A2(
								$mdgriffith$elm_ui$Element$Input$labelRight,
								_List_Nil,
								i18n('closer')),
							onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$NamedSegment$TogglePreferCloser)
						})
					])));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(4),
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[segmentsTable, selectedSegmentDetail, newSegmentButton, autoSuggestButton, overlapWarning, duplicateWarning])));
	});
var $author$project$Tools$Nudge$ApplyWithOptions = {$: 'ApplyWithOptions'};
var $author$project$Tools$Nudge$NudgeButton = function (a) {
	return {$: 'NudgeButton', a: a};
};
var $author$project$Tools$Nudge$SetCosineEasing = function (a) {
	return {$: 'SetCosineEasing', a: a};
};
var $author$project$Tools$Nudge$SetEasingSpacing = function (a) {
	return {$: 'SetEasingSpacing', a: a};
};
var $author$project$Tools$Nudge$SetFadeExtent = function (a) {
	return {$: 'SetFadeExtent', a: a};
};
var $author$project$Tools$Nudge$SetHorizontalNudgeFactor = function (a) {
	return {$: 'SetHorizontalNudgeFactor', a: a};
};
var $author$project$Tools$Nudge$SetVerticalNudgeFactor = function (a) {
	return {$: 'SetVerticalNudgeFactor', a: a};
};
var $author$project$Tools$Nudge$ZeroNudgeFactors = {$: 'ZeroNudgeFactors'};
var $author$project$ViewPureStyles$commonShortVerticalSliderStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(150)),
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(20)),
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$behindContent(
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(2)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(150)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$scrollbarBackground),
					$mdgriffith$elm_ui$Element$Border$rounded(6)
				]),
			$mdgriffith$elm_ui$Element$none))
	]);
var $author$project$Tools$Nudge$view = F5(
	function (location, imperial, options, msgWrapper, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Nudge$toolId);
		var vertical = F2(
			function (label, increment) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$ViewPureStyles$neatToolsBorder),
					{
						label: i18n(label),
						onPress: $elm$core$Maybe$Just(
							msgWrapper(
								$author$project$Tools$Nudge$NudgeButton(increment)))
					});
			});
		if (track.$ === 'Nothing') {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		} else {
			var zeroButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('Zero'),
					onPress: $elm$core$Maybe$Just(
						msgWrapper($author$project$Tools$Nudge$ZeroNudgeFactors))
				});
			var verticalNudgeSlider = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$paddingEach(
						_Utils_update(
							$author$project$ViewPureStyles$edges,
							{left: 10}))
					]),
				A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortVerticalSliderStyles,
					{
						label: A2(
							$mdgriffith$elm_ui$Element$Input$labelBelow,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							$mdgriffith$elm_ui$Element$text(
								A2($author$project$UtilsForViews$showShortMeasure, imperial, options.vertical))),
						max: $ianmackenzie$elm_units$Length$inMeters(
							imperial ? $ianmackenzie$elm_units$Length$feet(21.0) : $ianmackenzie$elm_units$Length$meters(7.0)),
						min: $ianmackenzie$elm_units$Length$inMeters(
							imperial ? $ianmackenzie$elm_units$Length$feet(-21.0) : $ianmackenzie$elm_units$Length$meters(-7.0)),
						onChange: A2(
							$elm$core$Basics$composeR,
							$ianmackenzie$elm_units$Length$meters,
							A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetVerticalNudgeFactor, msgWrapper)),
						step: $elm$core$Maybe$Just(
							$ianmackenzie$elm_units$Length$inMeters(
								imperial ? $ianmackenzie$elm_units$Length$inches(2) : $ianmackenzie$elm_units$Length$centimeters(5))),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: $ianmackenzie$elm_units$Length$inMeters(options.vertical)
					}));
			var verticalNudgeButtons = A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignRight]),
				imperial ? _List_fromArray(
					[
						A2(vertical, '+1yd', $ianmackenzie$elm_units$Length$yard),
						A2(vertical, '+1ft', $ianmackenzie$elm_units$Length$foot),
						A2(vertical, '+1in', $ianmackenzie$elm_units$Length$inch),
						A2(
						vertical,
						'-1in',
						$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$inch)),
						A2(
						vertical,
						'-1ft',
						$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$foot)),
						A2(
						vertical,
						'-1yd',
						$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$yard))
					]) : _List_fromArray(
					[
						A2(vertical, '+1m', $ianmackenzie$elm_units$Length$meter),
						A2(
						vertical,
						'+10cm',
						$ianmackenzie$elm_units$Length$centimeters(10)),
						A2(vertical, '+1cm', $ianmackenzie$elm_units$Length$centimeter),
						A2(
						vertical,
						'-1cm',
						$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$centimeter)),
						A2(
						vertical,
						'-10cm',
						$ianmackenzie$elm_units$Quantity$negate(
							$ianmackenzie$elm_units$Length$centimeters(10))),
						A2(
						vertical,
						'-1m',
						$ianmackenzie$elm_units$Quantity$negate($ianmackenzie$elm_units$Length$meter))
					]));
			var nudgeButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('Apply'),
					onPress: $elm$core$Maybe$Just(
						msgWrapper($author$project$Tools$Nudge$ApplyWithOptions))
				});
			var horizontalNudgeSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text(
							A2($author$project$UtilsForViews$showShortMeasure, imperial, options.horizontal))),
					max: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(21.0) : $ianmackenzie$elm_units$Length$meters(7.0)),
					min: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(-21.0) : $ianmackenzie$elm_units$Length$meters(-7.0)),
					onChange: A2(
						$elm$core$Basics$composeR,
						$ianmackenzie$elm_units$Length$meters,
						A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetHorizontalNudgeFactor, msgWrapper)),
					step: $elm$core$Maybe$Just(
						$ianmackenzie$elm_units$Length$inMeters(
							imperial ? $ianmackenzie$elm_units$Length$inches(2) : $ianmackenzie$elm_units$Length$centimeters(5))),
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inMeters(options.horizontal)
				});
			var fadeSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text(
							_Utils_ap(
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Nudge$toolId, 'fade'),
								A2($author$project$UtilsForViews$showShortMeasure, imperial, options.fadeExtent)))),
					max: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(330.0) : $ianmackenzie$elm_units$Length$meters(100.0)),
					min: 0.0,
					onChange: A2(
						$elm$core$Basics$composeR,
						$ianmackenzie$elm_units$Length$meters,
						A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetFadeExtent, msgWrapper)),
					step: $elm$core$Maybe$Nothing,
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: $ianmackenzie$elm_units$Length$inMeters(options.fadeExtent)
				});
			var easingOptions = A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$slider,
						$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$Input$labelBelow,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								$mdgriffith$elm_ui$Element$text(
									_Utils_ap(
										A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Nudge$toolId, 'spacing'),
										A2($author$project$UtilsForViews$showShortMeasure, imperial, options.easingSpacing)))),
							max: 10,
							min: 1,
							onChange: A2(
								$elm$core$Basics$composeR,
								$ianmackenzie$elm_units$Length$meters,
								A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetEasingSpacing, msgWrapper)),
							step: $elm$core$Maybe$Nothing,
							thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
							value: $ianmackenzie$elm_units$Length$inMeters(options.easingSpacing)
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$checkbox,
						_List_Nil,
						{
							checked: options.cosineEasing,
							icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
							label: A2(
								$mdgriffith$elm_ui$Element$Input$labelRight,
								_List_Nil,
								i18n('easing')),
							onChange: A2($elm$core$Basics$composeR, $author$project$Tools$Nudge$SetCosineEasing, msgWrapper)
						})
					]));
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						verticalNudgeButtons,
						verticalNudgeSlider,
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(5),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								horizontalNudgeSlider,
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(5),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[nudgeButton, zeroButton])),
								fadeSlider,
								easingOptions
							]))
					]));
		}
	});
var $author$project$Tools$OutAndBack$ApplyOutAndBack = {$: 'ApplyOutAndBack'};
var $author$project$Tools$OutAndBack$SetOffset = function (a) {
	return {$: 'SetOffset', a: a};
};
var $author$project$Tools$OutAndBack$view = F5(
	function (location, imperial, wrapper, options, track) {
		if (track.$ === 'Just') {
			var offsetSlider = A2(
				$mdgriffith$elm_ui$Element$Input$slider,
				$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelBelow,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
								A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$OutAndBack$toolId, 'offset'),
								_List_fromArray(
									[
										A2(
										$author$project$UtilsForViews$showShortMeasure,
										imperial,
										$ianmackenzie$elm_units$Length$meters(options.offset))
									])))),
					max: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(16.0) : $ianmackenzie$elm_units$Length$meters(5.0)),
					min: $ianmackenzie$elm_units$Length$inMeters(
						imperial ? $ianmackenzie$elm_units$Length$feet(-16.0) : $ianmackenzie$elm_units$Length$meters(-5.0)),
					onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$OutAndBack$SetOffset),
					step: $elm$core$Maybe$Just(0.5),
					thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
					value: options.offset
				});
			var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$OutAndBack$toolId);
			var fixButton = A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n('apply'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$OutAndBack$ApplyOutAndBack))
				});
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						offsetSlider),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						fixButton)
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$ProfileSmooth$ApplyPreview = {$: 'ApplyPreview'};
var $author$project$Tools$ProfileSmooth$ChooseMethod = function (a) {
	return {$: 'ChooseMethod', a: a};
};
var $author$project$Tools$ProfileSmoothOptions$MethodAltitudes = {$: 'MethodAltitudes'};
var $author$project$Tools$ProfileSmoothOptions$MethodGradients = {$: 'MethodGradients'};
var $author$project$Tools$ProfileSmoothOptions$MethodUniform = {$: 'MethodUniform'};
var $author$project$Tools$ProfileSmooth$SetBumpiness = function (a) {
	return {$: 'SetBumpiness', a: a};
};
var $author$project$Tools$ProfileSmooth$SetMaximumAscent = function (a) {
	return {$: 'SetMaximumAscent', a: a};
};
var $author$project$Tools$ProfileSmooth$SetMaximumDescent = function (a) {
	return {$: 'SetMaximumDescent', a: a};
};
var $author$project$Tools$ProfileSmooth$SetWindowSize = function (a) {
	return {$: 'SetWindowSize', a: a};
};
var $author$project$Tools$ProfileSmooth$view = F4(
	function (location, options, wrapper, track) {
		var windowSizeSlider = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$ProfileSmooth$toolId, 'window'),
							_List_fromArray(
								[
									$elm$core$String$fromInt(options.windowSize)
								])))),
				max: 8.0,
				min: 1.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$ProfileSmooth$SetWindowSize),
					$elm$core$Basics$round),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.windowSize
			});
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$ProfileSmooth$toolId);
		var modeChoice = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Method'),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$ProfileSmooth$ChooseMethod),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$ProfileSmoothOptions$MethodLimit,
						i18n('uselimit')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$ProfileSmoothOptions$MethodAltitudes,
						i18n('usealts')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$ProfileSmoothOptions$MethodGradients,
						i18n('usegrad')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$ProfileSmoothOptions$MethodUniform,
						i18n('useuniform'))
					]),
				selected: $elm$core$Maybe$Just(options.smoothMethod)
			});
		var extent = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _List_fromArray(
				[
					i18n('whole')
				]) : _List_fromArray(
				[
					i18n('part')
				]));
		var applyButton = function (tag) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n(tag)
							])),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$ProfileSmooth$ApplyPreview))
				});
		};
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					modeChoice,
					function () {
					var _v0 = options.smoothMethod;
					switch (_v0.$) {
						case 'MethodLimit':
							var maxDescentSlider = A2(
								$mdgriffith$elm_ui$Element$Input$slider,
								$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$Input$labelBelow,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											A2(
												$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
												A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$ProfileSmooth$toolId, 'downhill'),
												_List_fromArray(
													[
														$author$project$UtilsForViews$showDecimal0(options.maximumDescent)
													])))),
									max: 25.0,
									min: 10.0,
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$ProfileSmooth$SetMaximumDescent),
									step: $elm$core$Maybe$Just(1.0),
									thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
									value: options.maximumDescent
								});
							var maxAscentSlider = A2(
								$mdgriffith$elm_ui$Element$Input$slider,
								$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$Input$labelBelow,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											A2(
												$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
												A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$ProfileSmooth$toolId, 'uphill'),
												_List_fromArray(
													[
														$author$project$UtilsForViews$showDecimal0(options.maximumAscent)
													])))),
									max: 25.0,
									min: 10.0,
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$ProfileSmooth$SetMaximumAscent),
									step: $elm$core$Maybe$Just(1.0),
									thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
									value: options.maximumAscent
								});
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										maxAscentSlider),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										maxDescentSlider),
										extent,
										applyButton('apply')
									]));
						case 'MethodAltitudes':
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										windowSizeSlider),
										extent,
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										applyButton('altitudes'))
									]));
						case 'MethodGradients':
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										windowSizeSlider),
										extent,
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										applyButton('gradients'))
									]));
						default:
							var bumpinessSlider = A2(
								$mdgriffith$elm_ui$Element$Input$slider,
								$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$Input$labelBelow,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											A2(
												$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
												A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$ProfileSmooth$toolId, 'bumpiness'),
												_List_fromArray(
													[
														$author$project$UtilsForViews$showDecimal0(100.0 * options.bumpiness)
													])))),
									max: 1.0,
									min: 0.0,
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$ProfileSmooth$SetBumpiness),
									step: $elm$core$Maybe$Just(0.05),
									thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
									value: options.bumpiness
								});
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$centerX
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerX]),
										bumpinessSlider),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? _List_fromArray(
											[
												i18n('needpart')
											]) : _List_fromArray(
											[
												i18n('part')
											])),
										applyButton('uniform')
									]));
					}
				}()
				]));
	});
var $author$project$Tools$Simplify$Apply = {$: 'Apply'};
var $author$project$Tools$Simplify$FlushUndo = {$: 'FlushUndo'};
var $author$project$Tools$Simplify$Seek = {$: 'Seek'};
var $author$project$Tools$Simplify$view = F4(
	function (location, msgWrapper, options, isTrack) {
		if (isTrack.$ === 'Just') {
			var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Simplify$toolId);
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							function () {
								var _v1 = $elm$core$Dict$size(options.pointsToRemove);
								if (!_v1) {
									return {
										label: i18n('search'),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Simplify$Seek))
									};
								} else {
									var quantity = _v1;
									return {
										label: A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text(
													A2(
														$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
														A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$Simplify$toolId, 'remove'),
														_List_fromArray(
															[
																$elm$core$String$fromInt(quantity)
															])))
												])),
										onPress: $elm$core$Maybe$Just(
											msgWrapper($author$project$Tools$Simplify$Apply))
									};
								}
							}())),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											i18n('flush')
										])),
								onPress: $elm$core$Maybe$Just(
									msgWrapper($author$project$Tools$Simplify$FlushUndo))
							}))
					]));
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$SmartSmoother$Apply = {$: 'Apply'};
var $author$project$Tools$SmartSmoother$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$Tools$SmartSmoother$SetBlend = function (a) {
	return {$: 'SetBlend', a: a};
};
var $author$project$Tools$SmartSmoother$SetMaxGradient = function (a) {
	return {$: 'SetMaxGradient', a: a};
};
var $author$project$Tools$SmartSmoother$SetMinRadius = function (a) {
	return {$: 'SetMinRadius', a: a};
};
var $author$project$Tools$SmartSmoother$SetMinTransition = function (a) {
	return {$: 'SetMinTransition', a: a};
};
var $author$project$Tools$SmartSmoother$view = F5(
	function (location, imperial, wrapper, options, track) {
		var transitionSlider = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('transitions'),
						max: 10.0,
						min: 1.0,
						onChange: A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SmartSmoother$SetMinTransition),
							$ianmackenzie$elm_units$Length$meters),
						step: $elm$core$Maybe$Just(0.1),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: $ianmackenzie$elm_units$Length$inMeters(options.minTransition)
					}),
					$author$project$ViewPureStyles$infoButton(
					wrapper(
						A2($author$project$Tools$SmartSmoother$DisplayInfo, 'smart', 'transition'))),
					$mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SmartSmoother$toolId, 'viewtransition'),
						_List_fromArray(
							[
								A2($author$project$UtilsForViews$showShortMeasure, imperial, options.minTransition)
							])))
				]));
		var minRadiusSlider = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('minimum radius'),
						max: 20.0,
						min: 4.0,
						onChange: A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SmartSmoother$SetMinRadius),
							$ianmackenzie$elm_units$Length$meters),
						step: $elm$core$Maybe$Just(0.1),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: $ianmackenzie$elm_units$Length$inMeters(options.minRadius)
					}),
					$author$project$ViewPureStyles$infoButton(
					wrapper(
						A2($author$project$Tools$SmartSmoother$DisplayInfo, 'smart', 'radius'))),
					$mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SmartSmoother$toolId, 'viewminimum'),
						_List_fromArray(
							[
								A2($author$project$UtilsForViews$showShortMeasure, imperial, options.minRadius)
							])))
				]));
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$SmartSmoother$toolId);
		var gradientSlider = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('gradient'),
						max: 30.0,
						min: 10.0,
						onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SmartSmoother$SetMaxGradient),
						step: $elm$core$Maybe$Just(0.5),
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.maxGradient
					}),
					$author$project$ViewPureStyles$infoButton(
					wrapper(
						A2($author$project$Tools$SmartSmoother$DisplayInfo, 'smart', 'gradient'))),
					$mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SmartSmoother$toolId, 'viewgradient'),
						_List_fromArray(
							[
								$author$project$UtilsForViews$showDecimal2(options.maxGradient)
							])))
				]));
		var blendSlider = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$slider,
					$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
					{
						label: $mdgriffith$elm_ui$Element$Input$labelHidden('blend'),
						max: 1.0,
						min: 0.0,
						onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SmartSmoother$SetBlend),
						step: $elm$core$Maybe$Nothing,
						thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
						value: options.blend
					}),
					$author$project$ViewPureStyles$infoButton(
					wrapper(
						A2($author$project$Tools$SmartSmoother$DisplayInfo, 'smart', 'blend'))),
					$mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SmartSmoother$toolId, 'viewblend'),
						_List_fromArray(
							[
								$author$project$UtilsForViews$showDecimal2(options.blend)
							])))
				]));
		var applyButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: i18n('Smooth'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$SmartSmoother$Apply))
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$none, minRadiusSlider, transitionSlider, blendSlider, gradientSlider, applyButton]));
	});
var $author$project$Tools$SplitAndJoin$AppendFile = {$: 'AppendFile'};
var $author$project$Tools$SplitAndJoin$SetSplitLimit = function (a) {
	return {$: 'SetSplitLimit', a: a};
};
var $author$project$Tools$SplitAndJoin$SplitAtMarkers = {$: 'SplitAtMarkers'};
var $author$project$Tools$SplitAndJoin$SplitTrack = {$: 'SplitTrack'};
var $author$project$Tools$SplitAndJoin$ToggleAutofix = function (a) {
	return {$: 'ToggleAutofix', a: a};
};
var $author$project$Tools$SplitAndJoin$ToggleBuffers = function (a) {
	return {$: 'ToggleBuffers', a: a};
};
var $author$project$Tools$SplitAndJoin$view = F5(
	function (location, imperial, options, wrapper, track) {
		var partsSlider = imperial ? A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SplitAndJoin$toolId, 'max'),
							_List_fromArray(
								[
									A2($author$project$UtilsForViews$showLongMeasure, true, options.splitLimit)
								])))),
				max: 65.0,
				min: 12.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SplitAndJoin$SetSplitLimit),
					$ianmackenzie$elm_units$Length$miles),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inMiles(options.splitLimit)
			}) : A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SplitAndJoin$toolId, 'max'),
							_List_fromArray(
								[
									A2($author$project$UtilsForViews$showLongMeasure, true, options.splitLimit)
								])))),
				max: 100.0,
				min: 20.0,
				onChange: A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SplitAndJoin$SetSplitLimit),
					$ianmackenzie$elm_units$Length$kilometers),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: $ianmackenzie$elm_units$Length$inKilometers(options.splitLimit)
			});
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$SplitAndJoin$toolId);
		var quickFixCheckbox = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: options.applyAutofix,
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					i18n('1CQF')),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SplitAndJoin$ToggleAutofix)
			});
		var splitUsingMarkersButton = function () {
			var labelDependsOnPurple = _Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing) ? 'orange' : 'between';
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: i18n(labelDependsOnPurple),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$SplitAndJoin$SplitAtMarkers))
				});
		}();
		var endPenCheckbox = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_Nil,
			{
				checked: options.addBuffers,
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					i18n('pens')),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$SplitAndJoin$ToggleBuffers)
			});
		var effectiveLength = options.addBuffers ? A2(
			$ianmackenzie$elm_units$Quantity$minus,
			$ianmackenzie$elm_units$Length$meters(200.0),
			options.splitLimit) : options.splitLimit;
		var splitCount = $elm$core$Basics$ceiling(
			A2(
				$ianmackenzie$elm_units$Quantity$ratio,
				$author$project$DomainModel$trueLength(track.trackTree),
				effectiveLength));
		var splitLength = A2(
			$ianmackenzie$elm_units$Quantity$divideBy,
			splitCount,
			$author$project$DomainModel$trueLength(track.trackTree));
		var splitButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: $mdgriffith$elm_ui$Element$text(
					A2(
						$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
						A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$SplitAndJoin$toolId, 'split'),
						_List_fromArray(
							[
								$elm$core$String$fromInt(splitCount),
								A2($author$project$UtilsForViews$showLongMeasure, imperial, splitLength)
							]))),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$SplitAndJoin$SplitTrack))
			});
		var appendFileButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: i18n('append'),
				onPress: $elm$core$Maybe$Just(
					wrapper($author$project$Tools$SplitAndJoin$AppendFile))
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$padding(6),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					partsSlider),
					endPenCheckbox,
					quickFixCheckbox,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					splitButton),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					splitUsingMarkersButton),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n('note')
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					appendFileButton)
				]));
	});
var $author$project$Tools$StartFinish$AddRiderPens = {$: 'AddRiderPens'};
var $author$project$Tools$StartFinish$ChangeLoopStart = function (a) {
	return {$: 'ChangeLoopStart', a: a};
};
var $author$project$Tools$StartFinish$CloseTheLoop = {$: 'CloseTheLoop'};
var $author$project$Tools$StartFinish$ReverseTrack = {$: 'ReverseTrack'};
var $author$project$Tools$StartFinish$view = F5(
	function (location, imperial, options, track, wrap) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$StartFinish$toolId);
		var loopButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			function () {
				var _v1 = options.loopiness;
				switch (_v1.$) {
					case 'AlmostLoop':
						return {
							label: A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('make')
									])),
							onPress: $elm$core$Maybe$Just(
								wrap($author$project$Tools$StartFinish$CloseTheLoop))
						};
					case 'IsALoop':
						return {
							label: A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('loop')
									])),
							onPress: $elm$core$Maybe$Nothing
						};
					default:
						return {
							label: A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('biggap')
									])),
							onPress: $elm$core$Maybe$Nothing
						};
				}
			}());
		var reverseButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							i18n('reverse')
						])),
				onPress: $elm$core$Maybe$Just(
					wrap($author$project$Tools$StartFinish$ReverseTrack))
			});
		var changeStartButton = function (c) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$ViewPureStyles$neatToolsBorder,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								i18n('move')
							])),
					onPress: $elm$core$Maybe$Just(
						wrap(
							$author$project$Tools$StartFinish$ChangeLoopStart(c)))
				});
		};
		var addRiderPens = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			A2(
				$author$project$ToolTip$buttonStylesWithTooltip,
				$mdgriffith$elm_ui$Element$below,
				A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$StartFinish$toolId, 'pens')),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							i18n('add')
						])),
				onPress: $elm$core$Maybe$Just(
					wrap($author$project$Tools$StartFinish$AddRiderPens))
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			function () {
				var _v0 = options.loopiness;
				switch (_v0.$) {
					case 'IsALoop':
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('isloop')
									])),
								changeStartButton(track.currentPosition),
								reverseButton
							]);
					case 'AlmostLoop':
						var gap = _v0.a;
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$StartFinish$toolId, 'isnear'),
											_List_fromArray(
												[
													A2($author$project$UtilsForViews$showShortMeasure, imperial, gap)
												])))
									])),
								loopButton,
								reverseButton,
								addRiderPens
							]);
					default:
						var gap = _v0.a;
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(
										A2(
											$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
											A3($author$project$Tools$I18N$localisedString, location, $author$project$Tools$StartFinish$toolId, 'isnear'),
											_List_fromArray(
												[
													A2($author$project$UtilsForViews$showShortMeasure, imperial, gap)
												])))
									])),
								loopButton,
								reverseButton,
								addRiderPens
							]);
				}
			}());
	});
var $author$project$Tools$Straightener$SetPreserveAltitude = function (a) {
	return {$: 'SetPreserveAltitude', a: a};
};
var $author$project$Tools$Straightener$StraightenStraight = {$: 'StraightenStraight'};
var $author$project$Tools$Straightener$view = F4(
	function (location, wrapper, options, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Straightener$toolId);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				if (!_Utils_eq(track.markerPosition, $elm$core$Maybe$Nothing)) {
					var straightenButton = A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$ViewPureStyles$neatToolsBorder,
						{
							label: i18n('straight'),
							onPress: $elm$core$Maybe$Just(
								wrapper($author$project$Tools$Straightener$StraightenStraight))
						});
					return _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							A2(
								$mdgriffith$elm_ui$Element$Input$checkbox,
								_List_Nil,
								{
									checked: options.preserveAltitude,
									icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
									label: A2(
										$mdgriffith$elm_ui$Element$Input$labelRight,
										_List_Nil,
										i18n('altitudes')),
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Straightener$SetPreserveAltitude)
								})),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							straightenButton)
						]);
				} else {
					return _List_fromArray(
						[
							i18n('range')
						]);
				}
			}());
	});
var $author$project$Tools$Timestamp$ApplyNewTimes = {$: 'ApplyNewTimes'};
var $author$project$Tools$Timestamp$ApplyTickInterval = function (a) {
	return {$: 'ApplyTickInterval', a: a};
};
var $author$project$Tools$Timestamp$ClearMilliseconds = {$: 'ClearMilliseconds'};
var $author$project$Tools$Timestamp$ComputeTimes = {$: 'ComputeTimes'};
var $author$project$Tools$Timestamp$DoubleRelativeTimes = {$: 'DoubleRelativeTimes'};
var $author$project$Tools$Timestamp$SetMode = function (a) {
	return {$: 'SetMode', a: a};
};
var $author$project$Tools$Timestamp$SetPower = function (a) {
	return {$: 'SetPower', a: a};
};
var $author$project$Tools$Timestamp$SetTickInterval = function (a) {
	return {$: 'SetTickInterval', a: a};
};
var $author$project$Tools$Timestamp$TimeChange = function (a) {
	return {$: 'TimeChange', a: a};
};
var $feathericons$elm_feather$FeatherIcons$chevronDown = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-down',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('6 9 12 15 18 9')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$chevronUp = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevron-up',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('18 15 12 9 6 15')
				]),
			_List_Nil)
		]));
var $author$project$UtilsForViews$formattedTime = function (isTime) {
	if (isTime.$ === 'Just') {
		var yesIsTime = isTime.a;
		var seconds = A2($elm$time$Time$toSecond, $elm$time$Time$utc, yesIsTime);
		var minutes = A2($elm$time$Time$toMinute, $elm$time$Time$utc, yesIsTime);
		var millis = A2($elm$time$Time$toMillis, $elm$time$Time$utc, yesIsTime);
		var hours = A2($elm$time$Time$toHour, $elm$time$Time$utc, yesIsTime);
		return $mdgriffith$elm_ui$Element$text(
			A2(
				$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
				'{0} : {1} : {2} . {3}',
				_List_fromArray(
					[
						$elm$core$String$fromInt(hours),
						A2(
						$author$project$UtilsForViews$withLeadingZeros,
						2,
						$elm$core$String$fromInt(minutes)),
						A2(
						$author$project$UtilsForViews$withLeadingZeros,
						2,
						$elm$core$String$fromInt(seconds)),
						A2(
						$author$project$UtilsForViews$withLeadingZeros,
						3,
						$elm$core$String$fromInt(millis))
					])));
	} else {
		return $mdgriffith$elm_ui$Element$text('- - -');
	}
};
var $ianmackenzie$elm_units$Power$inWatts = function (_v0) {
	var numWatts = _v0.a;
	return numWatts;
};
var $smucode$elm_flat_colors$FlatColors$AmericanPalette$soothingBreeze = A3($mdgriffith$elm_ui$Element$rgb255, 178, 190, 195);
var $author$project$ColourPalette$warningColor = $smucode$elm_flat_colors$FlatColors$FlatUIPalette$sunFlower;
var $author$project$Tools$Timestamp$viewWithTrack = F5(
	function (location, imperial, wrapper, options, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$Timestamp$toolId);
		var modeSelection = A2(
			$mdgriffith$elm_ui$Element$Input$radio,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('mode'),
				onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Timestamp$SetMode),
				options: _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$TimestampOptions$Actual,
						i18n('actual')),
						A2(
						$mdgriffith$elm_ui$Element$Input$option,
						$author$project$Tools$TimestampOptions$Estimated,
						i18n('estimated'))
					]),
				selected: $elm$core$Maybe$Just(options.mode)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				if ($author$project$Tools$Timestamp$trackHasTimestamps(track) && _Utils_eq(options.mode, $author$project$Tools$TimestampOptions$Actual)) {
					var orangeOffsetMillis = $elm$core$Maybe$Just(
						$elm$time$Time$millisToPosix(
							A2($author$project$Tools$Timestamp$relativeMillisToPoint, track.currentPosition, track)));
					var orangeMillis = $elm$core$Maybe$Just(
						$elm$time$Time$millisToPosix(
							A2($author$project$Tools$Timestamp$absoluteMillisToPoint, track.currentPosition, track)));
					var startTimeAdjustments = A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$Border$width(1)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										i18n('start absolute'),
										$author$project$UtilsForViews$formattedTime(orangeMillis)
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										i18n('start relative'),
										$author$project$UtilsForViews$formattedTime(orangeOffsetMillis)
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$spacing(4)
									]),
								_List_fromArray(
									[
										i18n('desired start'),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(1),
												$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$soothingBreeze)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronUp),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(3600000)))
												}),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$alignRight]),
												$mdgriffith$elm_ui$Element$text(
													$elm$core$String$fromInt((((((options.desiredStartMillis / 1000) | 0) / 60) | 0) / 60) | 0))),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronDown),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(-3600000)))
												})
											])),
										$mdgriffith$elm_ui$Element$text(':'),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(1),
												$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$soothingBreeze)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronUp),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(60000)))
												}),
												$mdgriffith$elm_ui$Element$text(
												A2(
													$author$project$UtilsForViews$withLeadingZeros,
													2,
													$elm$core$String$fromInt(
														A2($elm$core$Basics$modBy, 60, (((options.desiredStartMillis / 1000) | 0) / 60) | 0)))),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronDown),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(-60000)))
												})
											])),
										$mdgriffith$elm_ui$Element$text(':'),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(1),
												$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$soothingBreeze)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronUp),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(1000)))
												}),
												$mdgriffith$elm_ui$Element$text(
												A2(
													$author$project$UtilsForViews$withLeadingZeros,
													2,
													$elm$core$String$fromInt(
														A2($elm$core$Basics$modBy, 60, (options.desiredStartMillis / 1000) | 0)))),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronDown),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(-1000)))
												})
											])),
										$mdgriffith$elm_ui$Element$text('.'),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(1),
												$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AmericanPalette$soothingBreeze)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_Nil,
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX]),
														{
															label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronUp),
															onPress: $elm$core$Maybe$Just(
																wrapper(
																	$author$project$Tools$Timestamp$TimeChange(10)))
														}),
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX]),
														{
															label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$x),
															onPress: $elm$core$Maybe$Just(
																wrapper($author$project$Tools$Timestamp$ClearMilliseconds))
														})
													])),
												$mdgriffith$elm_ui$Element$text(
												A2(
													$author$project$UtilsForViews$withLeadingZeros,
													3,
													$elm$core$String$fromInt(
														A2($elm$core$Basics$modBy, 1000, options.desiredStartMillis)))),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												{
													label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$chevronDown),
													onPress: $elm$core$Maybe$Just(
														wrapper(
															$author$project$Tools$Timestamp$TimeChange(-10)))
												})
											]))
									])),
								function () {
								if (!track.currentPosition) {
									return A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$warningColor),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[
												i18n('atStart')
											]));
								} else {
									var previousPointOffsetMillis = A2($author$project$Tools$Timestamp$relativeMillisToPoint, track.currentPosition - 1, track);
									return _Utils_eq(options.desiredStartMillis, previousPointOffsetMillis) ? A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color($author$project$ColourPalette$warningColor),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[
												i18n('tooEarly')
											])) : A2(
										$mdgriffith$elm_ui$Element$Input$button,
										A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$ViewPureStyles$neatToolsBorder),
										{
											label: A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_Nil,
												_List_fromArray(
													[
														i18n('apply')
													])),
											onPress: $elm$core$Maybe$Just(
												wrapper($author$project$Tools$Timestamp$ApplyNewTimes))
										});
								}
							}()
							]));
					var equiSpacing = A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$Border$width(1)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('uniform')
									])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								A2(
									$mdgriffith$elm_ui$Element$Input$radioRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(8),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$centerX
										]),
									{
										label: $mdgriffith$elm_ui$Element$Input$labelHidden('tick'),
										onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$Timestamp$SetTickInterval),
										options: _List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												500,
												i18n('half')),
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												1000,
												i18n('second')),
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												5000,
												i18n('five'))
											]),
										selected: $elm$core$Maybe$Just(options.desiredTickIntervalMillis)
									})),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												i18n('usetick')
											])),
									onPress: $elm$core$Maybe$Just(
										wrapper(
											$author$project$Tools$Timestamp$ApplyTickInterval(options.desiredTickIntervalMillis)))
								})
							]));
					var doubleTimes = A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$Border$width(1)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										i18n('doubling')
									])),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												i18n('double')
											])),
									onPress: $elm$core$Maybe$Just(
										wrapper($author$project$Tools$Timestamp$DoubleRelativeTimes))
								})
							]));
					return _List_fromArray(
						[modeSelection, startTimeAdjustments, equiSpacing, doubleTimes]);
				} else {
					var powerSlider = A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$mdgriffith$elm_ui$Element$Input$slider,
							$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
							{
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelBelow,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX]),
									$mdgriffith$elm_ui$Element$text(
										$author$project$UtilsForViews$showDecimal0(
											$ianmackenzie$elm_units$Power$inWatts(options.steadyPower)) + 'W')),
								max: 400,
								min: 80,
								onChange: A2(
									$elm$core$Basics$composeR,
									$ianmackenzie$elm_units$Power$watts,
									A2($elm$core$Basics$composeR, $author$project$Tools$Timestamp$SetPower, wrapper)),
								step: $elm$core$Maybe$Just(10),
								thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
								value: $ianmackenzie$elm_units$Power$inWatts(options.steadyPower)
							}));
					var durationEstimate = A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								i18n('estimate'),
								$author$project$UtilsForViews$formattedTime(
								$elm$core$Maybe$Just(
									$elm$time$Time$millisToPosix(
										$elm$core$Basics$floor(
											$ianmackenzie$elm_units$Duration$inMilliseconds(options.estimatedDuration)))))
							]));
					var doSomePhysics = A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(4),
								$mdgriffith$elm_ui$Element$padding(4),
								$mdgriffith$elm_ui$Element$Border$width(1)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										i18n('physics')
									])),
								powerSlider,
								durationEstimate,
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerX, $author$project$ViewPureStyles$neatToolsBorder),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												i18n('applyPhysics')
											])),
									onPress: $elm$core$Maybe$Just(
										wrapper($author$project$Tools$Timestamp$ComputeTimes))
								})
							]));
					return _List_fromArray(
						[
							$author$project$Tools$Timestamp$trackHasTimestamps(track) ? modeSelection : $mdgriffith$elm_ui$Element$none,
							doSomePhysics
						]);
				}
			}());
	});
var $author$project$Tools$Timestamp$view = F5(
	function (location, imperial, wrapper, options, mTrack) {
		if (mTrack.$ === 'Just') {
			var isTrack = mTrack.a;
			return A5($author$project$Tools$Timestamp$viewWithTrack, location, imperial, wrapper, options, isTrack);
		} else {
			return $author$project$ViewPureStyles$noTrackMessage(location);
		}
	});
var $author$project$Tools$TrackInfoBox$ChooseDisplayMode = function (a) {
	return {$: 'ChooseDisplayMode', a: a};
};
var $author$project$Tools$TrackInfoBox$InfoForSystem = {$: 'InfoForSystem'};
var $author$project$Tools$TrackInfoBox$InfoForTrack = {$: 'InfoForTrack'};
var $elm$url$Url$Builder$int = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$core$String$fromInt(value));
	});
var $author$project$Tools$TrackInfoBox$makeLinkUrl = function (track) {
	var index = track.currentPosition;
	var _v0 = _Utils_Tuple2(
		$author$project$DomainModel$asRecord(
			A2($author$project$DomainModel$leafFromIndex, index, track.trackTree)),
		A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree));
	var leaf = _v0.a;
	var gpxPoint = _v0.b;
	var _v1 = gpxPoint;
	var longitude = _v1.longitude;
	var latitude = _v1.latitude;
	var viewpoint = A2(
		$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
		'{0},{1}',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(latitude)),
				$elm$core$String$fromFloat(
				$ianmackenzie$elm_units$Angle$inDegrees(
					$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude)))
			]));
	var bearing = $elm$core$Basics$round(
		-$ianmackenzie$elm_units$Angle$inDegrees(
			A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, $ianmackenzie$elm_geometry$Direction2d$positiveY, leaf.directionAtStart)));
	return A3(
		$elm$url$Url$Builder$crossOrigin,
		'https://www.google.com',
		_List_fromArray(
			['maps', '@']),
		_List_fromArray(
			[
				A2($elm$url$Url$Builder$int, 'api', 1),
				A2($elm$url$Url$Builder$string, 'map_action', 'pano'),
				A2($elm$url$Url$Builder$string, 'viewpoint', viewpoint),
				A2($elm$url$Url$Builder$int, 'heading', bearing)
			]));
};
var $author$project$Tools$TrackInfoBox$displayInfoForPoint = F3(
	function (location, imperial, track) {
		var labels = _List_fromArray(
			['number', 'distance', 'longitude', 'latitude', 'altitude', 'bearing', 'gradient', 'time']);
		var index = track.currentPosition;
		var distance = A2($author$project$DomainModel$distanceFromIndex, index, track.trackTree);
		var _v0 = _Utils_Tuple2(
			$author$project$DomainModel$asRecord(
				A2($author$project$DomainModel$leafFromIndex, index, track.trackTree)),
			A2($author$project$DomainModel$gpxPointFromIndex, index, track.trackTree));
		var leaf = _v0.a;
		var gpxPoint = _v0.b;
		var _v1 = gpxPoint;
		var longitude = _v1.longitude;
		var latitude = _v1.latitude;
		var altitude = _v1.altitude;
		var timestamp = _v1.timestamp;
		var bearing = -$ianmackenzie$elm_units$Angle$inDegrees(
			A2($ianmackenzie$elm_geometry$Direction2d$angleFrom, $ianmackenzie$elm_geometry$Direction2d$positiveY, leaf.directionAtStart));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							A2(
								$elm$core$List$map,
								A2($author$project$Tools$I18N$text, location, 'info'),
								labels)),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(
									$elm$core$String$fromInt(index)),
									$mdgriffith$elm_ui$Element$text(
									A2($author$project$UtilsForViews$showLongMeasure, imperial, distance)),
									$mdgriffith$elm_ui$Element$text(
									$author$project$UtilsForViews$longitudeString(
										$ianmackenzie$elm_geometry$Direction2d$toAngle(longitude))),
									$mdgriffith$elm_ui$Element$text(
									$author$project$UtilsForViews$latitudeString(latitude)),
									$mdgriffith$elm_ui$Element$text(
									A2($author$project$UtilsForViews$showShortMeasure, imperial, altitude)),
									$mdgriffith$elm_ui$Element$text(
									$author$project$UtilsForViews$showDecimal2(bearing)),
									$mdgriffith$elm_ui$Element$text(
									$author$project$UtilsForViews$showDecimal2(leaf.gradientAtStart)),
									$author$project$UtilsForViews$formattedTime(timestamp)
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					{
						label: A3($author$project$Tools$I18N$text, location, $author$project$Tools$TrackInfoBox$toolId, 'streetview'),
						url: $author$project$Tools$TrackInfoBox$makeLinkUrl(track)
					})
				]));
	});
var $author$project$Tools$TrackInfoBox$displayMemoryDetails = F2(
	function (location, options) {
		var asMB = function (value) {
			return $author$project$UtilsForViews$showDecimal2((value / 1024) / 1024) + 'MB';
		};
		var _v0 = options.memoryInfo;
		if (_v0.$ === 'Nothing') {
			return A3($author$project$Tools$I18N$text, location, 'info', 'none');
		} else {
			var memory = _v0.a;
			var labels = _List_fromArray(
				['limit', 'size', 'heap']);
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						A2(
							$elm$core$List$map,
							A2($author$project$Tools$I18N$text, location, 'info'),
							labels)),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								asMB(memory.jsHeapSizeLimit)),
								$mdgriffith$elm_ui$Element$text(
								asMB(memory.totalJSHeapSize)),
								$mdgriffith$elm_ui$Element$text(
								asMB(memory.usedJSHeapSize))
							]))
					]));
		}
	});
var $author$project$Tools$TrackInfoBox$displayValuesWithTrack = F4(
	function (location, imperial, infoList, track) {
		var timeAtStart = A2($author$project$DomainModel$gpxPointFromIndex, 0, track.trackTree).timestamp;
		var timeAtEnd = A2(
			$author$project$DomainModel$gpxPointFromIndex,
			$author$project$DomainModel$skipCount(track.trackTree),
			track.trackTree).timestamp;
		var info = $author$project$DomainModel$asRecord(track.trackTree);
		var duration = A2($author$project$Utils$subtractTimes, timeAtStart, timeAtEnd);
		var infoWithDuration = _Utils_update(
			info,
			{transitTime: duration});
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (_v0) {
							var txt = _v0.a;
							return A3($author$project$Tools$I18N$text, location, 'info', txt);
						},
						infoList)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var fn = _v1.b;
							return A2(fn, imperial, infoWithDuration);
						},
						infoList))
				]));
	});
var $author$project$Tools$TrackInfoBox$trackInfoList = _List_fromArray(
	[
		_Utils_Tuple2(
		'points',
		F2(
			function (_v0, info) {
				return $mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(1 + info.skipCount));
			})),
		_Utils_Tuple2(
		'length',
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.trueLength));
			})),
		_Utils_Tuple2(
		'ascent',
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.altitudeGained));
			})),
		_Utils_Tuple2(
		'descent',
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.altitudeLost));
			})),
		_Utils_Tuple2(
		'climbing',
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.distanceClimbing));
			})),
		_Utils_Tuple2(
		'descending',
		F2(
			function (imperial, info) {
				return $mdgriffith$elm_ui$Element$text(
					A2($author$project$UtilsForViews$showLongMeasure, imperial, info.distanceDescending));
			})),
		_Utils_Tuple2(
		'steepest',
		F2(
			function (_v1, info) {
				return $mdgriffith$elm_ui$Element$text(
					$author$project$UtilsForViews$showDecimal2(info.steepestClimb));
			})),
		_Utils_Tuple2(
		'duration',
		F2(
			function (_v2, info) {
				return $author$project$UtilsForViews$formattedTime(info.transitTime);
			}))
	]);
var $author$project$Tools$TrackInfoBox$view = F5(
	function (location, wrapper, imperial, ifTrack, options) {
		var helper = A2($author$project$Tools$I18N$text, location, 'info');
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				if (ifTrack.$ === 'Just') {
					var track = ifTrack.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$radioRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								{
									label: $mdgriffith$elm_ui$Element$Input$labelHidden('mode'),
									onChange: A2($elm$core$Basics$composeL, wrapper, $author$project$Tools$TrackInfoBox$ChooseDisplayMode),
									options: _List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForTrack,
											helper('track')),
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForPoint,
											helper('point')),
											A2(
											$mdgriffith$elm_ui$Element$Input$option,
											$author$project$Tools$TrackInfoBox$InfoForSystem,
											helper('memory'))
										]),
									selected: $elm$core$Maybe$Just(options.displayMode)
								}),
								function () {
								var _v1 = options.displayMode;
								switch (_v1.$) {
									case 'InfoForTrack':
										return A4($author$project$Tools$TrackInfoBox$displayValuesWithTrack, location, imperial, $author$project$Tools$TrackInfoBox$trackInfoList, track);
									case 'InfoForPoint':
										return A3($author$project$Tools$TrackInfoBox$displayInfoForPoint, location, imperial, track);
									default:
										return A2($author$project$Tools$TrackInfoBox$displayMemoryDetails, location, options);
								}
							}()
							]));
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(10)
							]),
						_List_fromArray(
							[
								helper('notrack')
							]));
				}
			}());
	});
var $author$project$Tools$StravaTools$ClearSegment = {$: 'ClearSegment'};
var $author$project$Tools$StravaTools$LoadActivity = {$: 'LoadActivity'};
var $author$project$Tools$StravaTools$LoadExternalRoute = {$: 'LoadExternalRoute'};
var $author$project$Tools$StravaTools$LoadExternalSegment = {$: 'LoadExternalSegment'};
var $author$project$Tools$StravaTools$LoadSegmentStreams = {$: 'LoadSegmentStreams'};
var $author$project$Tools$StravaTools$PasteSegment = {$: 'PasteSegment'};
var $author$project$Tools$StravaTools$SetAltitudeMatch = function (a) {
	return {$: 'SetAltitudeMatch', a: a};
};
var $author$project$Tools$StravaTools$SignInRequested = {$: 'SignInRequested'};
var $author$project$Tools$StravaTools$UserChangedRouteId = function (a) {
	return {$: 'UserChangedRouteId', a: a};
};
var $author$project$Tools$StravaTools$UserChangedSegmentId = function (a) {
	return {$: 'UserChangedSegmentId', a: a};
};
var $author$project$ViewPureStyles$displayName = function (n) {
	if (n.$ === 'Just') {
		var s = n.a;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(20)
				]),
			$mdgriffith$elm_ui$Element$text(s));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $elm$url$Url$Builder$relative = F2(
	function (pathSegments, parameters) {
		return _Utils_ap(
			A2($elm$core$String$join, '/', pathSegments),
			$elm$url$Url$Builder$toQuery(parameters));
	});
var $author$project$Tools$StravaTools$viewStravaTab = F4(
	function (location, options, wrap, track) {
		var i18n = A2($author$project$Tools$I18N$text, location, $author$project$Tools$StravaTools$toolId);
		var routeButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: i18n('route'),
				onPress: $elm$core$Maybe$Just(
					wrap($author$project$Tools$StravaTools$LoadExternalRoute))
			});
		var routeIdField = A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$minimum, 150, $mdgriffith$elm_ui$Element$fill))
				]),
			{
				label: $mdgriffith$elm_ui$Element$Input$labelHidden('Strava route or activity ID'),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$UserChangedRouteId),
				placeholder: $elm$core$Maybe$Just(
					A2(
						$mdgriffith$elm_ui$Element$Input$placeholder,
						_List_Nil,
						i18n('routeid'))),
				text: options.externalRouteId
			});
		var segmentInfo = function () {
			var _v6 = options.externalSegment;
			switch (_v6.$) {
				case 'SegmentRequested':
					return i18n('waiting');
				case 'SegmentError':
					var err = _v6.a;
					return $mdgriffith$elm_ui$Element$text(err);
				case 'SegmentNone':
					return i18n('none');
				case 'SegmentOk':
					var segment = _v6.a;
					return $mdgriffith$elm_ui$Element$text(segment.name);
				case 'SegmentPreviewed':
					return i18n('loaded');
				default:
					var segment = _v6.a;
					return $mdgriffith$elm_ui$Element$text(segment.name);
			}
		}();
		var stravaLink = function () {
			var _v5 = options.stravaRoute;
			switch (_v5.$) {
				case 'StravaRouteOk':
					var stravaUrl = A3(
						$elm$url$Url$Builder$crossOrigin,
						$author$project$Tools$StravaDataLoad$stravaApiRoot,
						_List_fromArray(
							['routes', options.externalRouteId]),
						_List_Nil);
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$padding(5)
							]),
						_List_fromArray(
							[
								$author$project$ViewPureStyles$displayName(
								$elm$core$Maybe$Just(options.externalRouteId)),
								A2(
								$mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$ColourPalette$stravaOrange)
									]),
								{
									label: i18n('view'),
									url: stravaUrl
								})
							]));
				case 'StravaRouteError':
					var err = _v5.a;
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(err)
							]));
				default:
					return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var activityButton = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$neatToolsBorder,
			{
				label: i18n('activity'),
				onPress: $elm$core$Maybe$Just(
					wrap($author$project$Tools$StravaTools$LoadActivity))
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			function () {
				var _v0 = _Utils_Tuple2(options.stravaStatus, track);
				if (_v0.a.$ === 'StravaConnected') {
					if (_v0.b.$ === 'Just') {
						var segmentIdField = A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$minimum, 150, $mdgriffith$elm_ui$Element$fill))
								]),
							{
								label: $mdgriffith$elm_ui$Element$Input$labelHidden('Segment ID'),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$UserChangedSegmentId),
								placeholder: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										i18n('segmentid'))),
								text: options.externalSegmentId
							});
						var segmentButton = function () {
							var _v2 = options.externalSegment;
							switch (_v2.$) {
								case 'SegmentOk':
									return A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$ViewPureStyles$neatToolsBorder,
										{
											label: i18n('preview'),
											onPress: $elm$core$Maybe$Just(
												wrap($author$project$Tools$StravaTools$LoadSegmentStreams))
										});
								case 'SegmentPreviewed':
									return A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$ViewPureStyles$neatToolsBorder,
										{
											label: i18n('paste'),
											onPress: $elm$core$Maybe$Just(
												wrap($author$project$Tools$StravaTools$PasteSegment))
										});
								case 'SegmentNone':
									return A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$ViewPureStyles$neatToolsBorder,
										{
											label: i18n('fetch'),
											onPress: $elm$core$Maybe$Just(
												wrap($author$project$Tools$StravaTools$LoadExternalSegment))
										});
								case 'SegmentNotInRoute':
									return i18n('badsegment');
								default:
									return $mdgriffith$elm_ui$Element$none;
							}
						}();
						var segmentAltitudeMatch = A2(
							$mdgriffith$elm_ui$Element$Input$checkbox,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(5),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							{
								checked: options.adjustSegmentAltitude,
								icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
								label: A2(
									$mdgriffith$elm_ui$Element$Input$labelRight,
									_List_Nil,
									i18n('altitude')),
								onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$StravaTools$SetAltitudeMatch)
							});
						var clearButton = function () {
							var _v1 = options.externalSegment;
							if (_v1.$ === 'SegmentNone') {
								return $mdgriffith$elm_ui$Element$none;
							} else {
								return A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$ViewPureStyles$neatToolsBorder,
									{
										label: i18n('clear'),
										onPress: $elm$core$Maybe$Just(
											wrap($author$project$Tools$StravaTools$ClearSegment))
									});
							}
						}();
						return _List_fromArray(
							[
								stravaLink,
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[routeIdField, routeButton, activityButton])),
								A2(
								$mdgriffith$elm_ui$Element$wrappedRow,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[segmentIdField, segmentButton, segmentAltitudeMatch])),
								clearButton,
								segmentInfo
							]);
					} else {
						var _v3 = _v0.b;
						return _List_fromArray(
							[
								stravaLink,
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[routeIdField, routeButton, activityButton])),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										i18n('about')
									]))
							]);
					}
				} else {
					var _v4 = _v0.a;
					return _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(24)),
									$mdgriffith$elm_ui$Element$moveUp(10)
								]),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$image,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alpha(0.7)
												])),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(160))
										]),
									{
										description: 'Connect to Strava',
										src: A2(
											$elm$url$Url$Builder$relative,
											_List_fromArray(
												['images', 'btn_strava_connectwith_orange.png']),
											_List_Nil)
									}),
								onPress: $elm$core$Maybe$Just(
									wrap($author$project$Tools$StravaTools$SignInRequested))
							})
						]);
				}
			}());
	});
var $author$project$ToolsController$DisplayInfo = F2(
	function (a, b) {
		return {$: 'DisplayInfo', a: a, b: b};
	});
var $author$project$ViewPureStyles$compactRadioButton = F2(
	function (label, state) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(1),
					$mdgriffith$elm_ui$Element$padding(1),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$clearChill),
					$mdgriffith$elm_ui$Element$Border$width(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? 1 : 0),
					$mdgriffith$elm_ui$Element$Background$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite : $smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
					$mdgriffith$elm_ui$Element$Font$color(
					_Utils_eq(state, $mdgriffith$elm_ui$Element$Input$Selected) ? $smucode$elm_flat_colors$FlatColors$ChinesePalette$prestigeBlue : $smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
				$mdgriffith$elm_ui$Element$text(label)));
	});
var $author$project$ToolsController$viewToolSettings = F3(
	function (location, options, wrapper) {
		var optionHelper = A2(
			$elm$core$Basics$composeL,
			$author$project$ViewPureStyles$compactRadioButton,
			A2($author$project$Tools$I18N$localisedString, location, 'tools'));
		var fullOptionList = function (tool) {
			return (_Utils_eq(tool.toolType, $author$project$ToolsController$ToolSettings) || _Utils_eq(tool.toolType, $author$project$ToolsController$ToolEssentials)) ? _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					$author$project$ToolsController$DockUpperLeft,
					optionHelper('onleft')),
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					$author$project$ToolsController$DockUpperRight,
					optionHelper('onright')),
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					tool.dock,
					optionHelper('blank'))
				]) : _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					$author$project$ToolsController$DockUpperLeft,
					optionHelper('onleft')),
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					$author$project$ToolsController$DockUpperRight,
					optionHelper('onright')),
					A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					$author$project$ToolsController$DockNone,
					optionHelper('hidden'))
				]);
		};
		var locationChoices = function (tool) {
			return A2(
				$mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(5),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 4, right: 0, top: 4})
					]),
				{
					label: A2(
						$mdgriffith$elm_ui$Element$Input$labelRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
							]),
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(4)
								]),
							_List_fromArray(
								[
									$author$project$ViewPureStyles$infoButton(
									wrapper(
										A2($author$project$ToolsController$DisplayInfo, tool.toolId, 'info'))),
									A3($author$project$Tools$I18N$text, location, tool.toolId, 'label')
								]))),
					onChange: A2(
						$elm$core$Basics$composeL,
						wrapper,
						$author$project$ToolsController$ToolDockSelect(tool.toolType)),
					options: fullOptionList(tool),
					selected: $elm$core$Maybe$Just(tool.dock)
				});
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(300)),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			A2($elm$core$List$map, locationChoices, options.tools));
	});
var $author$project$ToolsController$viewToolByType = F5(
	function (location, msgWrapper, entry, isTrack, options) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$padding(2),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$rounded(4)
				]),
			function () {
				var _v0 = entry.toolType;
				switch (_v0.$) {
					case 'ToolTimestamps':
						return A5(
							$author$project$Tools$Timestamp$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolTimestampMsg),
							options.timestampOptions,
							isTrack);
					case 'ToolTrackInfo':
						return A5(
							$author$project$Tools$TrackInfoBox$view,
							location,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolInfoMsg),
							options.imperial,
							isTrack,
							options.infoOptions);
					case 'ToolAbruptDirectionChanges':
						return A5(
							$author$project$Tools$DirectionChanges$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$DirectionChanges),
							options.directionChangeOptions,
							isTrack);
					case 'ToolGradientProblems':
						return A5(
							$author$project$Tools$GradientProblems$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolGradientChangeMsg),
							options.gradientProblemOptions,
							isTrack);
					case 'ToolDeletePoints':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A4(
								$author$project$Tools$DeletePoints$view,
								location,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$DeletePoints),
								options.deleteOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolEssentials':
						return A5(
							$author$project$Tools$Essentials$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolEssentialsMsg),
							options.essentialOptions,
							isTrack);
					case 'ToolBezierSplines':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A4(
								$author$project$Tools$BezierSplines$view,
								location,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolBezierMsg),
								options.bezierSplineOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolCentroidAverage':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A4(
								$author$project$Tools$CentroidAverage$view,
								location,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolCentroidMsg),
								options.centroidAverageOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolCurveFormer':
						return A5(
							$author$project$Tools$CurveFormer$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolCurveFormerMsg),
							options.curveFormerOptions,
							isTrack);
					case 'ToolBendSmoother':
						return A5(
							$author$project$Tools$BendSmoother$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolBendSmootherMsg),
							options.bendSmootherOptions,
							isTrack);
					case 'ToolNudge':
						return A5(
							$author$project$Tools$Nudge$view,
							location,
							options.imperial,
							options.nudgeOptions,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolNudgeMsg),
							isTrack);
					case 'ToolDisplaySettings':
						return A3(
							$author$project$Tools$DisplaySettings$view,
							location,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolDisplaySettingMsg),
							options.displaySettings);
					case 'ToolOutAndBack':
						return A5(
							$author$project$Tools$OutAndBack$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolOutAndBackMsg),
							options.outAndBackSettings,
							isTrack);
					case 'ToolSimplify':
						return A4(
							$author$project$Tools$Simplify$view,
							location,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolSimplifyMsg),
							options.simplifySettings,
							isTrack);
					case 'ToolInterpolate':
						return A5(
							$author$project$Tools$Interpolate$view,
							location,
							options.imperial,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolInterpolateMsg),
							options.interpolateSettings,
							isTrack);
					case 'ToolProfileSmooth':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A4(
								$author$project$Tools$ProfileSmooth$view,
								location,
								options.profileSmoothSettings,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolProfileSmoothMsg),
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolMoveScaleRotate':
						return A5(
							$author$project$Tools$MoveScaleRotate$view,
							location,
							options.imperial,
							options.moveScaleRotateSettings,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolMoveScaleRotateMsg),
							isTrack);
					case 'ToolFlythrough':
						return A4(
							$author$project$Tools$Flythrough$view,
							location,
							options.imperial,
							options.flythroughSettings,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolFlythroughMsg));
					case 'ToolStrava':
						return A4(
							$author$project$Tools$StravaTools$viewStravaTab,
							location,
							options.stravaSettings,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolStravaMsg),
							isTrack);
					case 'ToolMoveAndStretch':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$MoveAndStretch$view,
								location,
								options.imperial,
								options.moveAndStretchSettings,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolMoveAndStretchMsg),
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolStartFinish':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$StartFinish$view,
								location,
								options.imperial,
								options.startFinishOptions,
								track,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolStartFinishMsg));
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolSplitAndJoin':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$SplitAndJoin$view,
								location,
								options.imperial,
								options.splitAndJoinOptions,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolSplitJoinMsg),
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolIntersections':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$Intersections$view,
								location,
								options.imperial,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolIntersectionMsg),
								options.intersectionOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolStraighten':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A4(
								$author$project$Tools$Straightener$view,
								location,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolStraightenMsg),
								options.straightenOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolGraph':
						if (isTrack.$ === 'Just') {
							return A4(
								$author$project$Tools$Graph$view,
								location,
								options.imperial,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolGraphMsg),
								options.graphOptions);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					case 'ToolSettings':
						return A3($author$project$ToolsController$viewToolSettings, location, options, msgWrapper);
					case 'ToolLandUse':
						return A4(
							$author$project$Tools$LandUse$view,
							location,
							A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolLandUseMsg),
							options.landUseOptions,
							isTrack);
					case 'ToolSmartSmoother':
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$SmartSmoother$view,
								location,
								options.imperial,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolSmartSmootherMsg),
								options.smartSmootherOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
					default:
						if (isTrack.$ === 'Just') {
							var track = isTrack.a;
							return A5(
								$author$project$Tools$NamedSegment$view,
								location,
								options.imperial,
								A2($elm$core$Basics$composeL, msgWrapper, $author$project$ToolsController$ToolNamedSegmentMsg),
								options.namedSegmentOptions,
								track);
						} else {
							return $author$project$ViewPureStyles$noTrackMessage(location);
						}
				}
			}());
	});
var $feathericons$elm_feather$FeatherIcons$youtube = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'youtube',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02')
				]),
			_List_Nil)
		]));
var $author$project$ToolsController$viewToolLazy = F5(
	function (location, msgWrapper, isTrack, options, toolEntry) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(2),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'vertical-align', 'top')),
						$mdgriffith$elm_ui$Element$spacing(0),
						$mdgriffith$elm_ui$Element$Border$width(4),
						$mdgriffith$elm_ui$Element$Border$color(toolEntry.tabColour),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$mdgriffith$elm_ui$Element$Background$color(toolEntry.tabColour),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$moveDown(26),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A3(
										$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
										'click',
										$author$project$ViewPureStyles$stopProp,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
											msgWrapper))),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A3(
										$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
										'dblclick',
										$author$project$ViewPureStyles$stopProp,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
											msgWrapper))),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A3(
										$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
										'mousedown',
										$author$project$ViewPureStyles$stopProp,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
											msgWrapper))),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A3(
										$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
										'mouseup',
										$author$project$ViewPureStyles$stopProp,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Basics$always($author$project$ToolsController$ToolNoOp),
											msgWrapper))),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'z-index', '20'))
								]),
							_List_fromArray(
								[
									A3($author$project$ToolsController$showDockOptions, location, msgWrapper, toolEntry),
									A2($author$project$ToolsController$showColourOptions, msgWrapper, toolEntry)
								])))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(8),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(24)),
								$mdgriffith$elm_ui$Element$Background$color(toolEntry.tabColour),
								$mdgriffith$elm_ui$Element$Font$color(toolEntry.textColour)
							]),
						_List_fromArray(
							[
								function () {
								var _v0 = toolEntry.video;
								if (_v0.$ === 'Just') {
									var video = _v0.a;
									return A2(
										$mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignLeft,
												A2(
												$author$project$ToolTip$tooltip,
												$mdgriffith$elm_ui$Element$below,
												$author$project$ToolTip$myTooltip('Watch the video')),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												A3(
													$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
													'click',
													$author$project$ViewPureStyles$stopProp,
													A3($elm$core$Basics$composeL, $elm$core$Basics$always, msgWrapper, $author$project$ToolsController$ToolNoOp)))
											]),
										{
											label: A2($author$project$ViewPureStyles$useIconWithSize, 18, $feathericons$elm_feather$FeatherIcons$youtube),
											url: video
										});
								} else {
									return $mdgriffith$elm_ui$Element$none;
								}
							}(),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignLeft,
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												function () {
												var _v1 = toolEntry.state;
												switch (_v1.$) {
													case 'Expanded':
														return A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronsUp);
													case 'Contracted':
														return A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronsDown);
													case 'Disabled':
														return A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$slash);
													case 'AlwaysOpen':
														return $mdgriffith$elm_ui$Element$none;
													case 'SettingsOpen':
														return A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronsUp);
													default:
														return A2($author$project$ViewPureStyles$useIconWithSize, 16, $feathericons$elm_feather$FeatherIcons$chevronsDown);
												}
											}(),
												A3($author$project$Tools$I18N$text, location, toolEntry.toolId, 'label')
											])),
									onPress: $elm$core$Maybe$Just(
										msgWrapper(
											A2(
												$author$project$ToolsController$ToolStateToggle,
												toolEntry.toolType,
												$author$project$ToolsController$nextToolState(toolEntry.state))))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A3(
											$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
											'click',
											$author$project$ViewPureStyles$stopProp,
											A3(
												$elm$core$Basics$composeL,
												$elm$core$Basics$always,
												msgWrapper,
												$author$project$ToolsController$ToolPopupToggle(toolEntry.toolType))))
									]),
								{
									label: A2($author$project$ViewPureStyles$useIconWithSize, 14, $feathericons$elm_feather$FeatherIcons$settings),
									onPress: $elm$core$Maybe$Just(
										msgWrapper(
											$author$project$ToolsController$ToolPopupToggle(toolEntry.toolType)))
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$rounded(8),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						(_Utils_eq(toolEntry.state, $author$project$ToolsController$Expanded) || (_Utils_eq(toolEntry.state, $author$project$ToolsController$AlwaysOpen) || _Utils_eq(toolEntry.state, $author$project$ToolsController$SettingsOpen))) ? A5($author$project$ToolsController$viewToolByType, location, msgWrapper, toolEntry, isTrack, options) : $mdgriffith$elm_ui$Element$none)
					])));
	});
var $author$project$ToolsController$viewTool = F5(
	function (location, msgWrapper, isTrack, options, toolEntry) {
		return A6($mdgriffith$elm_ui$Element$Lazy$lazy5, $author$project$ToolsController$viewToolLazy, location, msgWrapper, isTrack, options, toolEntry);
	});
var $author$project$ToolsController$toolsForDock = F5(
	function (location, dock, msgWrapper, isTrack, options) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$scrollbarY
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							A2(
								$elm$core$List$map,
								A4($author$project$ToolsController$viewTool, location, msgWrapper, isTrack, options),
								A2(
									$elm$core$List$filter,
									function (t) {
										return _Utils_eq(t.dock, dock) && (_Utils_eq(t.state, $author$project$ToolsController$AlwaysOpen) || (_Utils_eq(t.state, $author$project$ToolsController$SettingsOpen) || _Utils_eq(t.state, $author$project$ToolsController$SettingsClosed)));
									},
									options.tools))),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_Nil,
							A2(
								$elm$core$List$map,
								A4($author$project$ToolsController$viewTool, location, msgWrapper, isTrack, options),
								A2(
									$elm$core$List$filter,
									function (t) {
										return _Utils_eq(t.dock, dock) && _Utils_eq(t.state, $author$project$ToolsController$Expanded);
									},
									options.tools))),
							A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_Nil,
							A2(
								$elm$core$List$map,
								A4($author$project$ToolsController$viewTool, location, msgWrapper, isTrack, options),
								A2(
									$elm$core$List$filter,
									function (t) {
										return _Utils_eq(t.dock, dock) && _Utils_eq(t.state, $author$project$ToolsController$Contracted);
									},
									options.tools)))
						]))
				]));
	});
var $author$project$Main$upperLeftDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A5($author$project$ToolsController$toolsForDock, model.location, $author$project$ToolsController$DockUpperLeft, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$leftDockView = function (model) {
	return $author$project$Main$upperLeftDockView(model);
};
var $author$project$SplitPane$SplitPane$firstChildViewStyle = function (_v0) {
	var state = _v0.a;
	var _v1 = state.splitterPosition;
	if (_v1.$ === 'Px') {
		var p = _v1.a;
		var _v2 = state.orientation;
		var v = $elm$core$String$fromFloat(
			$author$project$SplitPane$Bound$getValue(p)) + 'px';
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'width', v),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	} else {
		var p = _v1.a;
		var v = $elm$core$String$fromFloat(
			$author$project$SplitPane$Bound$getValue(p));
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', v),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	}
};
var $author$project$SplitPane$SplitPane$CustomSplitter = function (a) {
	return {$: 'CustomSplitter', a: a};
};
var $author$project$SplitPane$SplitPane$SplitterClick = function (a) {
	return {$: 'SplitterClick', a: a};
};
var $author$project$SplitPane$SplitPane$DOMInfo = F6(
	function (x, y, touchX, touchY, parentWidth, parentHeight) {
		return {parentHeight: parentHeight, parentWidth: parentWidth, touchX: touchX, touchY: touchY, x: x, y: y};
	});
var $author$project$SplitPane$SplitPane$domInfo = A7(
	$elm$json$Json$Decode$map6,
	$author$project$SplitPane$SplitPane$DOMInfo,
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0', 'clientX']),
			$elm$json$Json$Decode$int)),
	$elm$json$Json$Decode$maybe(
		A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0', 'clientY']),
			$elm$json$Json$Decode$int)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'parentElement', 'clientWidth']),
		$elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'parentElement', 'clientHeight']),
		$elm$json$Json$Decode$int));
var $author$project$SplitPane$SplitPane$onMouseDown = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'mousedown',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterClick(d)),
					preventDefault: true,
					stopPropagation: false
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$domInfoToPosition = function (_v0) {
	var x = _v0.x;
	var y = _v0.y;
	var touchX = _v0.touchX;
	var touchY = _v0.touchY;
	var _v1 = _Utils_Tuple2(
		_Utils_Tuple2(x, y),
		_Utils_Tuple2(touchX, touchY));
	if ((_v1.b.a.$ === 'Just') && (_v1.b.b.$ === 'Just')) {
		var _v2 = _v1.b;
		var posX = _v2.a.a;
		var posY = _v2.b.a;
		return {x: posX, y: posY};
	} else {
		if ((_v1.a.a.$ === 'Just') && (_v1.a.b.$ === 'Just')) {
			var _v3 = _v1.a;
			var posX = _v3.a.a;
			var posY = _v3.b.a;
			return {x: posX, y: posY};
		} else {
			return {x: 0, y: 0};
		}
	}
};
var $author$project$SplitPane$SplitPane$onTouchCancel = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchcancel',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterLeftAlone(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchEnd = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchend',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterLeftAlone(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchMove = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchmove',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterMove(
							$author$project$SplitPane$SplitPane$domInfoToPosition(d))),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$onTouchStart = function (toMsg) {
	return A2(
		$elm$html$Html$Events$custom,
		'touchstart',
		A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return {
					message: toMsg(
						$author$project$SplitPane$SplitPane$SplitterClick(d)),
					preventDefault: true,
					stopPropagation: true
				};
			},
			$author$project$SplitPane$SplitPane$domInfo));
};
var $author$project$SplitPane$SplitPane$createCustomSplitter = F2(
	function (toMsg, details) {
		return $author$project$SplitPane$SplitPane$CustomSplitter(
			A2(
				$elm$html$Html$span,
				A2(
					$elm$core$List$cons,
					$author$project$SplitPane$SplitPane$onMouseDown(toMsg),
					A2(
						$elm$core$List$cons,
						$author$project$SplitPane$SplitPane$onTouchStart(toMsg),
						A2(
							$elm$core$List$cons,
							$author$project$SplitPane$SplitPane$onTouchEnd(toMsg),
							A2(
								$elm$core$List$cons,
								$author$project$SplitPane$SplitPane$onTouchMove(toMsg),
								A2(
									$elm$core$List$cons,
									$author$project$SplitPane$SplitPane$onTouchCancel(toMsg),
									details.attributes))))),
				details.children));
	});
var $author$project$SplitPane$SplitPane$baseDefaultSplitterStyles = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'width', '100%'),
		A2($elm$html$Html$Attributes$style, 'background', '#000'),
		A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
		A2($elm$html$Html$Attributes$style, 'opacity', '.2'),
		A2($elm$html$Html$Attributes$style, 'zIndex', '1'),
		A2($elm$html$Html$Attributes$style, 'webkitUserSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'mozUserSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'userSelect', 'none'),
		A2($elm$html$Html$Attributes$style, 'backgroundClip', 'padding-box')
	]);
var $author$project$SplitPane$SplitPane$defaultHorizontalSplitterStyle = function (dragState) {
	return _Utils_ap(
		$author$project$SplitPane$SplitPane$baseDefaultSplitterStyles,
		_Utils_ap(
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', '11px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'margin', '0 -5px'),
					A2($elm$html$Html$Attributes$style, 'borderLeft', '5px solid rgba(255, 255, 255, 0)'),
					A2($elm$html$Html$Attributes$style, 'borderRight', '5px solid rgba(255, 255, 255, 0)')
				]),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize')
				])));
};
var $author$project$SplitPane$SplitPane$createDefaultSplitterDetails = F2(
	function (ori, dragState) {
		return {
			attributes: $author$project$SplitPane$SplitPane$defaultHorizontalSplitterStyle(dragState),
			children: _List_Nil
		};
	});
var $author$project$SplitPane$SplitPane$getConcreteSplitter = F3(
	function (viewConfig, ori, dragState) {
		var _v0 = viewConfig.splitter;
		if (_v0.$ === 'Just') {
			var splitter = _v0.a.a;
			return splitter;
		} else {
			var _v1 = A2(
				$author$project$SplitPane$SplitPane$createCustomSplitter,
				viewConfig.toMsg,
				A2($author$project$SplitPane$SplitPane$createDefaultSplitterDetails, ori, dragState));
			var defaultSplitter = _v1.a;
			return defaultSplitter;
		}
	});
var $author$project$SplitPane$SplitPane$paneContainerStyle = function (ori) {
	return _List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
			A2($elm$html$Html$Attributes$style, 'display', 'flex'),
			A2($elm$html$Html$Attributes$style, 'flexDirection', 'row'),
			A2($elm$html$Html$Attributes$style, 'justifyContent', 'center'),
			A2($elm$html$Html$Attributes$style, 'alignItems', 'center'),
			A2($elm$html$Html$Attributes$style, 'width', '100%'),
			A2($elm$html$Html$Attributes$style, 'height', '100%'),
			A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box')
		]);
};
var $author$project$SplitPane$SplitPane$secondChildViewStyle = function (_v0) {
	var state = _v0.a;
	var _v1 = state.splitterPosition;
	if (_v1.$ === 'Px') {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', '1'),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	} else {
		var p = _v1.a;
		var v = $elm$core$String$fromFloat(
			1 - $author$project$SplitPane$Bound$getValue(p));
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex', v),
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'boxSizing', 'border-box'),
				A2($elm$html$Html$Attributes$style, 'position', 'relative')
			]);
	}
};
var $author$project$SplitPane$SplitPane$view = F4(
	function (_v0, firstView, secondView, _v1) {
		var viewConfig = _v0.a;
		var state = _v1.a;
		var splitter = A3($author$project$SplitPane$SplitPane$getConcreteSplitter, viewConfig, state.orientation, state.dragState);
		return A2(
			$elm$html$Html$div,
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$class('pane-container'),
				$author$project$SplitPane$SplitPane$paneContainerStyle(state.orientation)),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('pane-first-view'),
						$author$project$SplitPane$SplitPane$firstChildViewStyle(
							$author$project$SplitPane$SplitPane$State(state))),
					_List_fromArray(
						[firstView])),
					splitter,
					A2(
					$elm$html$Html$div,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('pane-second-view'),
						$author$project$SplitPane$SplitPane$secondChildViewStyle(
							$author$project$SplitPane$SplitPane$State(state))),
					_List_fromArray(
						[secondView]))
				]));
	});
var $author$project$Main$notTheRightDockView = function (model) {
	return A4(
		$author$project$SplitPane$SplitPane$view,
		$author$project$Main$leftDockConfig,
		$author$project$Main$leftDockView(model),
		$author$project$Main$centralAreaView(model),
		model.leftDockRightEdge);
};
var $author$project$Main$rightDockConfig = $author$project$SplitPane$SplitPane$createViewConfig(
	{customSplitter: $elm$core$Maybe$Nothing, toMsg: $author$project$Main$SplitRightDockLeftEdge});
var $author$project$Main$upperRightDockView = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			options: _List_fromArray(
				[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
		},
		$author$project$ViewPureStyles$commonLayoutStyles,
		A5($author$project$ToolsController$toolsForDock, model.location, $author$project$ToolsController$DockUpperRight, $author$project$Main$ToolsMsg, model.track, model.toolOptions));
};
var $author$project$Main$rightDockView = function (model) {
	return $author$project$Main$upperRightDockView(model);
};
var $author$project$ViewPureStyles$showModalMessage = F4(
	function (location, areaWidth, content, msg) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(areaWidth)),
					$mdgriffith$elm_ui$Element$Border$width(6),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
					$mdgriffith$elm_ui$Element$Border$rounded(8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$quinceJelly),
							$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze)
						]),
					_List_fromArray(
						[
							A3($author$project$Tools$I18N$text, location, 'main', 'message')
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$coastalBreeze),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$padding(20)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									A2($elm_explorations$markdown$Markdown$toHtml, _List_Nil, content))
								])),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$ViewPureStyles$neatToolsBorder,
							{
								label: A3($author$project$Tools$I18N$text, location, 'main', 'dismiss'),
								onPress: $elm$core$Maybe$Just(msg)
							})
						]))
				]));
	});
var $author$project$Main$FilenameChange = function (a) {
	return {$: 'FilenameChange', a: a};
};
var $author$project$Main$GpxRequested = {$: 'GpxRequested'};
var $author$project$Main$NoOp = {$: 'NoOp'};
var $author$project$Main$OneClickMsg = function (a) {
	return {$: 'OneClickMsg', a: a};
};
var $author$project$Main$RGTOptions = function (a) {
	return {$: 'RGTOptions', a: a};
};
var $author$project$Main$ToggleLoadOptionMenu = {$: 'ToggleLoadOptionMenu'};
var $author$project$Main$ToggleRGTOptions = {$: 'ToggleRGTOptions'};
var $author$project$Main$WriteGpxFile = {$: 'WriteGpxFile'};
var $author$project$Main$buyMeACoffeeButton = A2(
	$mdgriffith$elm_ui$Element$newTabLink,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$alignRight,
			$mdgriffith$elm_ui$Element$htmlAttribute(
			A3(
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
				'click',
				$author$project$ViewPureStyles$stopProp,
				$elm$core$Basics$always($author$project$Main$NoOp)))
		]),
	{
		label: A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(30)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(130))
				]),
			{description: 'Buy Me A Coffee', src: 'https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png'}),
		url: 'https://www.buymeacoffee.com/Peterward'
	});
var $author$project$Main$ToggleToolPopup = {$: 'ToggleToolPopup'};
var $author$project$Main$BackgroundColour = function (a) {
	return {$: 'BackgroundColour', a: a};
};
var $author$project$Main$Language = function (a) {
	return {$: 'Language', a: a};
};
var $author$project$Main$RestoreDefaultToolLayout = {$: 'RestoreDefaultToolLayout'};
var $author$project$Main$ToggleLanguageEditor = {$: 'ToggleLanguageEditor'};
var $author$project$ToolsController$ToggleImperial = {$: 'ToggleImperial'};
var $author$project$ToolsController$imperialToggleMenuEntry = F3(
	function (location, msgWrapper, options) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignRight]),
			{
				label: options.imperial ? A3($author$project$Tools$I18N$text, location, 'main', 'metric') : A3($author$project$Tools$I18N$text, location, 'main', 'imperial'),
				onPress: $elm$core$Maybe$Just(
					msgWrapper($author$project$ToolsController$ToggleImperial))
			});
	});
var $author$project$Main$showOptionsMenu = function (model) {
	var colourBlock = function (colour) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(colour),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(20))
				]),
			{
				label: $mdgriffith$elm_ui$Element$none,
				onPress: $elm$core$Maybe$Just(
					$author$project$Main$BackgroundColour(colour))
			});
	};
	var chooseLanguage = function (location) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size(40),
					A2(
					$author$project$ToolTip$tooltip,
					$mdgriffith$elm_ui$Element$below,
					$author$project$ToolTip$myTooltip(location.country.name))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text(location.country.flag)),
				onPress: $elm$core$Maybe$Just(
					$author$project$Main$Language(location))
			});
	};
	if (model.isPopupOpen) {
		var languageEditor = A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$ViewPureStyles$subtleToolStyles,
			{
				label: $mdgriffith$elm_ui$Element$text('Show/Hide language file editor'),
				onPress: $elm$core$Maybe$Just($author$project$Main$ToggleLanguageEditor)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(4),
				$author$project$ViewPureStyles$subtleToolStyles),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$alignRight,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$author$project$ViewPureStyles$subtleToolStyles)),
					_List_fromArray(
						[
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$silver),
							colourBlock($smucode$elm_flat_colors$FlatColors$FlatUIPalette$asbestos),
							colourBlock($author$project$ViewPureStyles$rgtDark)
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$alignRight,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$author$project$ViewPureStyles$subtleToolStyles)),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						{
							label: A3($author$project$Tools$I18N$text, model.location, 'main', 'default'),
							onPress: $elm$core$Maybe$Just($author$project$Main$RestoreDefaultToolLayout)
						})),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$alignRight,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$author$project$ViewPureStyles$subtleToolStyles)),
					A3($author$project$ToolsController$imperialToggleMenuEntry, model.location, $author$project$Main$ToolsMsg, model.toolOptions)),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spaceEvenly,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					A2($elm$core$List$map, chooseLanguage, $author$project$Tools$I18N$availableI18N)),
					languageEditor
				]));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Main$globalOptions = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$moveDown(26),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'click',
								$author$project$ViewPureStyles$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'dblclick',
								$author$project$ViewPureStyles$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'mousedown',
								$author$project$ViewPureStyles$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A3(
								$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
								'mouseup',
								$author$project$ViewPureStyles$stopProp,
								$elm$core$Basics$always($author$project$Main$NoOp))),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'z-index', '20'))
						]),
					_List_fromArray(
						[
							$author$project$Main$showOptionsMenu(model)
						])))
			]),
		A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Background$color($author$project$ViewPureStyles$rgtPurple),
					$mdgriffith$elm_ui$Element$padding(2),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A3(
						$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
						'click',
						$author$project$ViewPureStyles$stopProp,
						$elm$core$Basics$always($author$project$Main$ToggleToolPopup)))
				]),
			{
				label: $author$project$ViewPureStyles$useIcon($feathericons$elm_feather$FeatherIcons$settings),
				onPress: $elm$core$Maybe$Just($author$project$Main$ToggleToolPopup)
			}));
};
var $smucode$elm_flat_colors$FlatColors$AussiePalette$juneBud = A3($mdgriffith$elm_ui$Element$rgb255, 186, 220, 88);
var $feathericons$elm_feather$FeatherIcons$list = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'list',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$moreHorizontal = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'more-horizontal',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('1')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('19'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('1')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('5'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('1')
				]),
			_List_Nil)
		]));
var $author$project$ViewPureStyles$onEnter = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$on,
			'keyup',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
				},
				A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
};
var $author$project$Tools$OneClickQuickFix$Apply = {$: 'Apply'};
var $smucode$elm_flat_colors$FlatColors$ChinesePalette$bayWharf = A3($mdgriffith$elm_ui$Element$rgb255, 116, 125, 140);
var $author$project$ViewPureStyles$prettyButtonStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Border$width(2),
		$mdgriffith$elm_ui$Element$Border$rounded(4),
		$mdgriffith$elm_ui$Element$padding(2),
		$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$bayWharf),
		$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$frenchSkyBlue),
		$mdgriffith$elm_ui$Element$Font$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
		$mdgriffith$elm_ui$Element$Font$size(16)
	]);
var $author$project$Tools$OneClickQuickFix$oneClickQuickFixButton = F3(
	function (location, wrapper, track) {
		if (track.$ === 'Just') {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(30)),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$centerY, $author$project$ViewPureStyles$prettyButtonStyles)),
				{
					label: A3($author$project$Tools$I18N$text, location, 'main', '1CQF'),
					onPress: $elm$core$Maybe$Just(
						wrapper($author$project$Tools$OneClickQuickFix$Apply))
				});
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$SvgPathExtractor$ReadFile = function (a) {
	return {$: 'ReadFile', a: a};
};
var $author$project$SvgPathExtractor$view = F2(
	function (wrap, ipInfo) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
					$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
					$mdgriffith$elm_ui$Element$Border$width(2)
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Extract paths from SVG file'),
				onPress: $elm$core$Maybe$Just(
					wrap(
						$author$project$SvgPathExtractor$ReadFile(ipInfo)))
			});
	});
var $author$project$Tools$RGTOptions$SetDisableAdvancedSmoothing = function (a) {
	return {$: 'SetDisableAdvancedSmoothing', a: a};
};
var $author$project$Tools$RGTOptions$SetDisableElevationFixes = function (a) {
	return {$: 'SetDisableElevationFixes', a: a};
};
var $author$project$Tools$RGTOptions$SetMaxSlope = function (a) {
	return {$: 'SetMaxSlope', a: a};
};
var $author$project$Tools$RGTOptions$view = F3(
	function (location, options, wrap) {
		var maxSlope = A2(
			$mdgriffith$elm_ui$Element$Input$slider,
			$author$project$ViewPureStyles$commonShortHorizontalSliderStyles,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelBelow,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(
						A2(
							$lukewestby$elm_string_interpolate$String$Interpolate$interpolate,
							A3($author$project$Tools$I18N$localisedString, location, 'rgtOptions', 'maxSlope'),
							_List_fromArray(
								[
									$elm$core$String$fromFloat(options.maxSlope)
								])))),
				max: 30.0,
				min: 20.0,
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$RGTOptions$SetMaxSlope),
				step: $elm$core$Maybe$Just(1.0),
				thumb: $mdgriffith$elm_ui$Element$Input$defaultThumb,
				value: options.maxSlope
			});
		var i18n = A2($author$project$Tools$I18N$text, location, 'rgtOptions');
		var smoothing = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				checked: options.disableAdvancedSmoothing,
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_Nil,
					i18n('smoothing')),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$RGTOptions$SetDisableAdvancedSmoothing)
			});
		var elevation = A2(
			$mdgriffith$elm_ui$Element$Input$checkbox,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$spacing(5)
				]),
			{
				checked: options.disableElevationFixes,
				icon: $mdgriffith$elm_ui$Element$Input$defaultCheckbox,
				label: A2(
					$mdgriffith$elm_ui$Element$Input$labelRight,
					_List_Nil,
					i18n('elevation')),
				onChange: A2($elm$core$Basics$composeL, wrap, $author$project$Tools$RGTOptions$SetDisableElevationFixes)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							i18n('info')
						])),
					elevation,
					smoothing,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					maxSlope)
				]));
	});
var $author$project$Main$topLoadingBar = function (model) {
	var moreOptionsButton = A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
				$mdgriffith$elm_ui$Element$Border$width(2),
				A2(
				$author$project$ToolTip$tooltip,
				$mdgriffith$elm_ui$Element$below,
				A3($author$project$ToolTip$localisedTooltip, model.location, 'main', 'import')),
				$mdgriffith$elm_ui$Element$inFront(
				model.loadOptionsMenuOpen ? A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$moveRight(30),
							$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'z-index', '20')),
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$peace),
							$mdgriffith$elm_ui$Element$Border$rounded(4),
							$mdgriffith$elm_ui$Element$Border$width(2)
						]),
					_List_fromArray(
						[
							A2($author$project$SvgPathExtractor$view, $author$project$Main$SvgMsg, model.ipInfo)
						])) : $mdgriffith$elm_ui$Element$none),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A3(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
					'click',
					$author$project$ViewPureStyles$stopProp,
					$elm$core$Basics$always($author$project$Main$ToggleLoadOptionMenu)))
			]),
		{
			label: A2($author$project$ViewPureStyles$useIconWithSize, 12, $feathericons$elm_feather$FeatherIcons$moreHorizontal),
			onPress: $elm$core$Maybe$Just($author$project$Main$ToggleLoadOptionMenu)
		});
	var localHelper = A2(
		$elm$core$Basics$composeL,
		$mdgriffith$elm_ui$Element$text,
		A2($author$project$Tools$I18N$localisedString, model.location, 'main'));
	var saveButton = A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(0),
				$mdgriffith$elm_ui$Element$padding(0)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$juneBud),
						$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
						$mdgriffith$elm_ui$Element$Border$width(2)
					]),
				{
					label: localHelper('savegpx'),
					onPress: $elm$core$Maybe$Just($author$project$Main$WriteGpxFile)
				}),
				A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$AussiePalette$juneBud),
						$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
						$mdgriffith$elm_ui$Element$Border$width(2),
						A2(
						$author$project$ToolTip$tooltip,
						$mdgriffith$elm_ui$Element$below,
						A3($author$project$ToolTip$localisedTooltip, model.location, 'main', 'saveOptions')),
						$mdgriffith$elm_ui$Element$inFront(
						model.rgtOptionsVisible ? A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$moveDown(24),
									$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'z-index', '20')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A3(
										$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions,
										'click',
										$author$project$ViewPureStyles$stopProp,
										$elm$core$Basics$always($author$project$Main$NoOp)))
								]),
							A3($author$project$Tools$RGTOptions$view, model.location, model.rgtOptions, $author$project$Main$RGTOptions)) : $mdgriffith$elm_ui$Element$none)
					]),
				{
					label: A2($author$project$ViewPureStyles$useIconWithSize, 14, $feathericons$elm_feather$FeatherIcons$list),
					onPress: $elm$core$Maybe$Just($author$project$Main$ToggleRGTOptions)
				})
			]));
	var loadGpxButton = A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$Background$color($smucode$elm_flat_colors$FlatColors$ChinesePalette$antiFlashWhite),
				$mdgriffith$elm_ui$Element$Border$color($smucode$elm_flat_colors$FlatColors$FlatUIPalette$peterRiver),
				$mdgriffith$elm_ui$Element$Border$width(2)
			]),
		{
			label: localHelper('loadgpx'),
			onPress: $elm$core$Maybe$Just($author$project$Main$GpxRequested)
		});
	return A2(
		$mdgriffith$elm_ui$Element$wrappedRow,
		_Utils_ap(
			$author$project$ViewPureStyles$commonLayoutStyles,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick($author$project$Main$BackgroundClick))
				])),
		_List_fromArray(
			[
				$author$project$Main$globalOptions(model),
				loadGpxButton,
				moreOptionsButton,
				function () {
				var _v0 = model.filename;
				if (_v0.$ === 'Just') {
					var filename = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5),
								$author$project$ViewPureStyles$onEnter($author$project$Main$WriteGpxFile),
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$minimum, 200, $mdgriffith$elm_ui$Element$fill))
							]),
						{
							label: $mdgriffith$elm_ui$Element$Input$labelHidden('filename'),
							onChange: $author$project$Main$FilenameChange,
							placeholder: $elm$core$Maybe$Nothing,
							text: filename
						});
				} else {
					return $mdgriffith$elm_ui$Element$none;
				}
			}(),
				saveButton,
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				_List_fromArray(
					[
						A3($author$project$Tools$OneClickQuickFix$oneClickQuickFixButton, model.location, $author$project$Main$OneClickMsg, model.track),
						$author$project$Main$buyMeACoffeeButton
					]))
			]));
};
var $author$project$ViewPureStyles$ukraineBlue = A3($mdgriffith$elm_ui$Element$rgb255, 0, 87, 183);
var $author$project$ViewPureStyles$ukraineYellow = A3($mdgriffith$elm_ui$Element$rgb255, 255, 221, 0);
var $author$project$Main$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color(model.backgroundColour),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$inFront(
					function () {
						var _v0 = model.modalMessage;
						if (_v0.$ === 'Just') {
							var message = _v0.a;
							return A4(
								$author$project$ViewPureStyles$showModalMessage,
								model.location,
								$ianmackenzie$elm_units$Pixels$inPixels(model.contentArea.a),
								A3($author$project$Tools$I18N$localisedString, model.location, 'main', message),
								$author$project$Main$DismissModalMessage);
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}()),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$inFront(
						A2($author$project$Main$infoTextPopup, model.location, model.infoText)),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$inFront(
							model.languageEditorOpen ? A3($author$project$Tools$I18N$editor, $author$project$Main$I18NMsg, model.location, model.languageEditor) : $mdgriffith$elm_ui$Element$none),
						$author$project$ViewPureStyles$commonLayoutStyles)))),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							_Utils_update(
								$author$project$ViewPureStyles$edges,
								{bottom: 1})),
							$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$ukraineBlue)
						]),
					$author$project$Main$topLoadingBar(model)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							_Utils_update(
								$author$project$ViewPureStyles$edges,
								{top: 1})),
							$mdgriffith$elm_ui$Element$Border$color($author$project$ViewPureStyles$ukraineYellow)
						]),
					$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'width', '100%'),
									A2($elm$html$Html$Attributes$style, 'height', '100%')
								]),
							_List_fromArray(
								[
									A4(
									$author$project$SplitPane$SplitPane$view,
									$author$project$Main$rightDockConfig,
									$author$project$Main$notTheRightDockView(model),
									$author$project$Main$rightDockView(model),
									model.rightDockLeftEdge)
								]))))
				])));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{init: $author$project$Main$init, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));